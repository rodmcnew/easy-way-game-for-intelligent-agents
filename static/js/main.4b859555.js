/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(360);
	module.exports = __webpack_require__(227);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.18.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';
	
	var hookCallback;
	
	function hooks () {
	    return hookCallback.apply(null, arguments);
	}
	
	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}
	
	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}
	
	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}
	
	function isObjectEmpty(obj) {
	    var k;
	    for (k in obj) {
	        // even if its not own property I'd still call it non-empty
	        return false;
	    }
	    return true;
	}
	
	function isUndefined(input) {
	    return input === void 0;
	}
	
	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}
	
	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}
	
	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}
	
	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}
	
	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }
	
	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }
	
	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }
	
	    return a;
	}
	
	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}
	
	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null,
	        rfc2822         : false,
	        weekdayMismatch : false
	    };
	}
	
	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}
	
	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;
	
	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	}
	
	var some$1 = some;
	
	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));
	
	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }
	
	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}
	
	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }
	
	    return m;
	}
	
	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];
	
	function copyConfig(to, from) {
	    var i, prop, val;
	
	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }
	
	    if (momentProperties.length > 0) {
	        for (i = 0; i < momentProperties.length; i++) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }
	
	    return to;
	}
	
	var updateInProgress = false;
	
	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}
	
	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}
	
	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}
	
	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;
	
	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }
	
	    return value;
	}
	
	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}
	
	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}
	
	function deprecate(msg, fn) {
	    var firstTime = true;
	
	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}
	
	var deprecations = {};
	
	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}
	
	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;
	
	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	
	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    this._dayOfMonthOrdinalParseLenient = new RegExp(
	        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	            '|' + (/\d{1,2}/).source);
	}
	
	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}
	
	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}
	
	var keys;
	
	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}
	
	var keys$1 = keys;
	
	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};
	
	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}
	
	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};
	
	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];
	
	    if (format || !formatUpper) {
	        return format;
	    }
	
	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });
	
	    return this._longDateFormat[key];
	}
	
	var defaultInvalidDate = 'Invalid date';
	
	function invalidDate () {
	    return this._invalidDate;
	}
	
	var defaultOrdinal = '%d';
	var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	
	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}
	
	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    ss : '%d seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};
	
	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}
	
	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}
	
	var aliases = {};
	
	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}
	
	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}
	
	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;
	
	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }
	
	    return normalizedInput;
	}
	
	var priorities = {};
	
	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}
	
	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}
	
	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}
	
	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}
	
	function set$1 (mom, unit, value) {
	    if (mom.isValid()) {
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }
	}
	
	// MOMENTS
	
	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}
	
	
	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}
	
	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}
	
	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	var formatFunctions = {};
	
	var formatTokenFunctions = {};
	
	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}
	
	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}
	
	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;
	
	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }
	
	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}
	
	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }
	
	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	    return formatFunctions[format](m);
	}
	
	function expandFormat(format, locale) {
	    var i = 5;
	
	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }
	
	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }
	
	    return format;
	}
	
	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	
	
	var regexes = {};
	
	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}
	
	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }
	
	    return regexes[token](config._strict, config._locale);
	}
	
	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}
	
	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}
	
	var tokens = {};
	
	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}
	
	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}
	
	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}
	
	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;
	
	var indexOf;
	
	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}
	
	var indexOf$1 = indexOf;
	
	function daysInMonth(year, month) {
	    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	}
	
	// FORMATTING
	
	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});
	
	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});
	
	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});
	
	// ALIASES
	
	addUnitAlias('month', 'M');
	
	// PRIORITY
	
	addUnitPriority('month', 8);
	
	// PARSING
	
	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});
	
	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});
	
	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});
	
	// LOCALES
	
	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return isArray(this._months) ? this._months :
	            this._months['standalone'];
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return isArray(this._monthsShort) ? this._monthsShort :
	            this._monthsShort['standalone'];
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;
	
	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }
	
	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }
	
	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function setMonth (mom, value) {
	    var dayOfMonth;
	
	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }
	
	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }
	
	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}
	
	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}
	
	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}
	
	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}
	
	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}
	
	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}
	
	// FORMATTING
	
	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});
	
	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});
	
	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	// ALIASES
	
	addUnitAlias('year', 'y');
	
	// PRIORITIES
	
	addUnitPriority('year', 1);
	
	// PARSING
	
	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);
	
	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});
	
	// HELPERS
	
	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}
	
	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}
	
	// HOOKS
	
	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};
	
	// MOMENTS
	
	var getSetYear = makeGetSet('FullYear', true);
	
	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}
	
	function createDate (y, m, d, h, M, s, ms) {
	    // can't just apply() to create a date:
	    // https://stackoverflow.com/q/181348
	    var date = new Date(y, m, d, h, M, s, ms);
	
	    // the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}
	
	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));
	
	    // the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}
	
	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	    return -fwdlw + fwd - 1;
	}
	
	// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;
	
	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }
	
	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}
	
	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;
	
	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }
	
	    return {
	        week: resWeek,
	        year: resYear
	    };
	}
	
	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}
	
	// FORMATTING
	
	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	// ALIASES
	
	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');
	
	// PRIORITIES
	
	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);
	
	// PARSING
	
	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);
	
	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});
	
	// HELPERS
	
	// LOCALES
	
	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}
	
	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};
	
	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}
	
	function localeFirstDayOfYear () {
	    return this._week.doy;
	}
	
	// MOMENTS
	
	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	// FORMATTING
	
	addFormatToken('d', 0, 'do', 'day');
	
	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});
	
	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});
	
	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});
	
	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');
	
	// ALIASES
	
	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');
	
	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);
	
	// PARSING
	
	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});
	
	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});
	
	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});
	
	// HELPERS
	
	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }
	
	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }
	
	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }
	
	    return null;
	}
	
	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}
	
	// LOCALES
	
	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return isArray(this._weekdays) ? this._weekdays :
	            this._weekdays['standalone'];
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}
	
	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}
	
	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}
	
	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];
	
	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;
	
	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }
	
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }
	
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	
	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}
	
	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}
	
	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	
	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.
	
	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}
	
	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}
	
	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}
	
	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}
	
	
	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;
	
	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}
	
	// FORMATTING
	
	function hFormat() {
	    return this.hours() % 12 || 12;
	}
	
	function kFormat() {
	    return this.hours() || 24;
	}
	
	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);
	
	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}
	
	meridiem('a', true);
	meridiem('A', false);
	
	// ALIASES
	
	addUnitAlias('hour', 'h');
	
	// PRIORITY
	addUnitPriority('hour', 13);
	
	// PARSING
	
	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}
	
	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('k',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	addRegexToken('kk', match1to2, match2);
	
	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);
	
	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['k', 'kk'], function (input, array, config) {
	    var kInput = toInt(input);
	    array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});
	
	// LOCALES
	
	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}
	
	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}
	
	
	// MOMENTS
	
	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);
	
	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	    relativeTime: defaultRelativeTime,
	
	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,
	
	    week: defaultLocaleWeek,
	
	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,
	
	    meridiemParse: defaultLocaleMeridiemParse
	};
	
	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;
	
	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}
	
	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;
	
	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}
	
	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            __webpack_require__(289)("./" + name);
	            // because defineLocale currently also sets the global locale, we
	            // want to undo that for lazy loaded locales
	            getSetGlobalLocale(oldLocale);
	        } catch (e) { }
	    }
	    return locales[name];
	}
	
	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }
	
	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }
	
	    return globalLocale._abbr;
	}
	
	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }
	
	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);
	
	
	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}
	
	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, parentConfig = baseConfig;
	        // MERGE
	        if (locales[name] != null) {
	            parentConfig = locales[name]._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;
	
	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}
	
	// returns locale data
	function getLocale (key) {
	    var locale;
	
	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }
	
	    if (!key) {
	        return globalLocale;
	    }
	
	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }
	
	    return chooseLocale(key);
	}
	
	function listLocales() {
	    return keys$1(locales);
	}
	
	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;
	
	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;
	
	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }
	
	        getParsingFlags(m).overflow = overflow;
	    }
	
	    return m;
	}
	
	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	
	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];
	
	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];
	
	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;
	
	    if (match) {
	        getParsingFlags(config).iso = true;
	
	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}
	
	// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;
	
	// date and time from ref 2822 format
	function configFromRFC2822(config) {
	    var string, match, dayFormat,
	        dateFormat, timeFormat, tzFormat;
	    var timezones = {
	        ' GMT': ' +0000',
	        ' EDT': ' -0400',
	        ' EST': ' -0500',
	        ' CDT': ' -0500',
	        ' CST': ' -0600',
	        ' MDT': ' -0600',
	        ' MST': ' -0700',
	        ' PDT': ' -0700',
	        ' PST': ' -0800'
	    };
	    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
	    var timezone, timezoneIndex;
	
	    string = config._i
	        .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
	        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
	        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
	    match = basicRfcRegex.exec(string);
	
	    if (match) {
	        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
	        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
	        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');
	
	        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	        if (match[1]) { // day of week given
	            var momentDate = new Date(match[2]);
	            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];
	
	            if (match[1].substr(0,3) !== momentDay) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return;
	            }
	        }
	
	        switch (match[5].length) {
	            case 2: // military
	                if (timezoneIndex === 0) {
	                    timezone = ' +0000';
	                } else {
	                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
	                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
	                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
	                }
	                break;
	            case 4: // Zone
	                timezone = timezones[match[5]];
	                break;
	            default: // UT or +/-9999
	                timezone = timezones[' GMT'];
	        }
	        match[5] = timezone;
	        config._i = match.splice(1).join('');
	        tzFormat = ' ZZ';
	        config._f = dayFormat + dateFormat + timeFormat + tzFormat;
	        configFromStringAndFormat(config);
	        getParsingFlags(config).rfc2822 = true;
	    } else {
	        config._isValid = false;
	    }
	}
	
	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);
	
	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }
	
	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }
	
	    configFromRFC2822(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }
	
	    // Final attempt, use Input Fallback
	    hooks.createFromInputFallback(config);
	}
	
	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);
	
	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}
	
	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}
	
	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, yearToUse;
	
	    if (config._d) {
	        return;
	    }
	
	    currentDate = currentDateArray(config);
	
	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }
	
	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear != null) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }
	
	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }
	
	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }
	
	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }
	
	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }
	
	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }
	
	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }
	}
	
	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;
	
	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;
	
	        var curWeek = weekOfYear(createLocal(), dow, doy);
	
	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	        // Default to current week.
	        week = defaults(w.w, curWeek.week);
	
	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}
	
	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};
	
	// constant that refers to the RFC 2822 form
	hooks.RFC_2822 = function () {};
	
	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	    if (config._f === hooks.RFC_2822) {
	        configFromRFC2822(config);
	        return;
	    }
	    config._a = [];
	    getParsingFlags(config).empty = true;
	
	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;
	
	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }
	
	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }
	
	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }
	
	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	    configFromArray(config);
	    checkOverflow(config);
	}
	
	
	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;
	
	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}
	
	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,
	
	        scoreToBeat,
	        i,
	        currentScore;
	
	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }
	
	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);
	
	        if (!isValid(tempConfig)) {
	            continue;
	        }
	
	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	        getParsingFlags(tempConfig).score = currentScore;
	
	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }
	
	    extend(config, bestMoment || tempConfig);
	}
	
	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }
	
	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });
	
	    configFromArray(config);
	}
	
	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }
	
	    return res;
	}
	
	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;
	
	    config._locale = config._locale || getLocale(config._l);
	
	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }
	
	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }
	
	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }
	
	    if (!isValid(config)) {
	        config._d = null;
	    }
	
	    return config;
	}
	
	function configFromInput(config) {
	    var input = config._i;
	    if (isUndefined(input)) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (isObject(input)) {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}
	
	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};
	
	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }
	
	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;
	
	    return createFromConfig(c);
	}
	
	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}
	
	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}
	
	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isBefore', args);
	}
	
	function max () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isAfter', args);
	}
	
	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};
	
	var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
	
	function isDurationValid(m) {
	    for (var key in m) {
	        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	            return false;
	        }
	    }
	
	    var unitHasDecimal = false;
	    for (var i = 0; i < ordering.length; ++i) {
	        if (m[ordering[i]]) {
	            if (unitHasDecimal) {
	                return false; // only allow non-integers for smallest unit
	            }
	            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                unitHasDecimal = true;
	            }
	        }
	    }
	
	    return true;
	}
	
	function isValid$1() {
	    return this._isValid;
	}
	
	function createInvalid$1() {
	    return createDuration(NaN);
	}
	
	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;
	
	    this._isValid = isDurationValid(normalizedInput);
	
	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;
	
	    this._data = {};
	
	    this._locale = getLocale();
	
	    this._bubble();
	}
	
	function isDuration (obj) {
	    return obj instanceof Duration;
	}
	
	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}
	
	// FORMATTING
	
	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}
	
	offset('Z', ':');
	offset('ZZ', '');
	
	// PARSING
	
	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});
	
	// HELPERS
	
	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;
	
	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);
	
	    if (matches === null) {
	        return null;
	    }
	
	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}
	
	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}
	
	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}
	
	// HOOKS
	
	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};
	
	// MOMENTS
	
	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime, keepMinutes) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16 && !keepMinutes) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}
	
	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }
	
	        this.utcOffset(input, keepLocalTime);
	
	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}
	
	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}
	
	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;
	
	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}
	
	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm, false, true);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}
	
	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;
	
	    return (this.utcOffset() - input) % 60 === 0;
	}
	
	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}
	
	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }
	
	    var c = {};
	
	    copyConfig(c, this);
	    c = prepareConfig(c);
	
	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }
	
	    return this._isDSTShifted;
	}
	
	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}
	
	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}
	
	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}
	
	// ASP.NET json date format regex
	var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
	
	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
	
	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;
	
	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
	
	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }
	
	    ret = new Duration(duration);
	
	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }
	
	    return ret;
	}
	
	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;
	
	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}
	
	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};
	
	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }
	
	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
	    return res;
	}
	
	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }
	
	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }
	
	    return res;
	}
	
	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }
	
	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}
	
	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);
	
	    if (!mom.isValid()) {
	        // No op
	        return;
	    }
	
	    updateOffset = updateOffset == null ? true : updateOffset;
	
	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}
	
	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');
	
	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}
	
	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';
	
	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	
	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}
	
	function clone () {
	    return new Moment(this);
	}
	
	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}
	
	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}
	
	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}
	
	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}
	
	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}
	
	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}
	
	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;
	
	    if (!this.isValid()) {
	        return NaN;
	    }
	
	    that = cloneWithOffset(input, this);
	
	    if (!that.isValid()) {
	        return NaN;
	    }
	
	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	    units = normalizeUnits(units);
	
	    if (units === 'year' || units === 'month' || units === 'quarter') {
	        output = monthDiff(this, that);
	        if (units === 'quarter') {
	            output = output / 3;
	        } else if (units === 'year') {
	            output = output / 12;
	        }
	    } else {
	        delta = this - that;
	        output = units === 'second' ? delta / 1e3 : // 1000
	            units === 'minute' ? delta / 6e4 : // 1000 * 60
	            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	            delta;
	    }
	    return asFloat ? output : absFloor(output);
	}
	
	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;
	
	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }
	
	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}
	
	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}
	
	function toISOString() {
	    if (!this.isValid()) {
	        return null;
	    }
	    var m = this.clone().utc();
	    if (m.year() < 0 || m.year() > 9999) {
	        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	    }
	    if (isFunction(Date.prototype.toISOString)) {
	        // native implementation is ~50x faster, use it when we can
	        return this.toDate().toISOString();
	    }
	    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	}
	
	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';
	
	    return this.format(prefix + year + datetime + suffix);
	}
	
	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}
	
	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}
	
	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}
	
	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;
	
	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}
	
	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);
	
	function localeData () {
	    return this._locale;
	}
	
	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }
	
	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }
	
	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }
	
	    return this;
	}
	
	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }
	
	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }
	
	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}
	
	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}
	
	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}
	
	function toDate () {
	    return new Date(this.valueOf());
	}
	
	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}
	
	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}
	
	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}
	
	function isValid$2 () {
	    return isValid(this);
	}
	
	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}
	
	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}
	
	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}
	
	// FORMATTING
	
	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});
	
	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});
	
	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}
	
	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	// ALIASES
	
	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');
	
	// PRIORITY
	
	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);
	
	
	// PARSING
	
	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);
	
	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});
	
	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});
	
	// MOMENTS
	
	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}
	
	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}
	
	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}
	
	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}
	
	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}
	
	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}
	
	// FORMATTING
	
	addFormatToken('Q', 0, 'Qo', 'quarter');
	
	// ALIASES
	
	addUnitAlias('quarter', 'Q');
	
	// PRIORITY
	
	addUnitPriority('quarter', 7);
	
	// PARSING
	
	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});
	
	// MOMENTS
	
	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}
	
	// FORMATTING
	
	addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	// ALIASES
	
	addUnitAlias('date', 'D');
	
	// PRIOROITY
	addUnitPriority('date', 9);
	
	// PARSING
	
	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    return isStrict ?
	      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	      locale._dayOfMonthOrdinalParseLenient;
	});
	
	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0], 10);
	});
	
	// MOMENTS
	
	var getSetDayOfMonth = makeGetSet('Date', true);
	
	// FORMATTING
	
	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	// ALIASES
	
	addUnitAlias('dayOfYear', 'DDD');
	
	// PRIORITY
	addUnitPriority('dayOfYear', 4);
	
	// PARSING
	
	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});
	
	// HELPERS
	
	// MOMENTS
	
	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}
	
	// FORMATTING
	
	addFormatToken('m', ['mm', 2], 0, 'minute');
	
	// ALIASES
	
	addUnitAlias('minute', 'm');
	
	// PRIORITY
	
	addUnitPriority('minute', 14);
	
	// PARSING
	
	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);
	
	// MOMENTS
	
	var getSetMinute = makeGetSet('Minutes', false);
	
	// FORMATTING
	
	addFormatToken('s', ['ss', 2], 0, 'second');
	
	// ALIASES
	
	addUnitAlias('second', 's');
	
	// PRIORITY
	
	addUnitPriority('second', 15);
	
	// PARSING
	
	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);
	
	// MOMENTS
	
	var getSetSecond = makeGetSet('Seconds', false);
	
	// FORMATTING
	
	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});
	
	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});
	
	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});
	
	
	// ALIASES
	
	addUnitAlias('millisecond', 'ms');
	
	// PRIORITY
	
	addUnitPriority('millisecond', 16);
	
	// PARSING
	
	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);
	
	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}
	
	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}
	
	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS
	
	var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	// FORMATTING
	
	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');
	
	// MOMENTS
	
	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}
	
	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}
	
	var proto = Moment.prototype;
	
	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$2;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;
	
	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;
	
	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;
	
	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;
	
	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;
	
	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;
	
	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;
	
	// Hour
	proto.hour = proto.hours = getSetHour;
	
	// Minute
	proto.minute = proto.minutes = getSetMinute;
	
	// Second
	proto.second = proto.seconds = getSetSecond;
	
	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;
	
	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;
	
	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;
	
	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	
	function createUnix (input) {
	    return createLocal(input * 1000);
	}
	
	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}
	
	function preParsePostFormat (string) {
	    return string;
	}
	
	var proto$1 = Locale.prototype;
	
	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;
	
	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;
	
	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;
	
	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;
	
	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;
	
	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}
	
	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }
	
	    format = format || '';
	
	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}
	
	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;
	
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    }
	
	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;
	
	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}
	
	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}
	
	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}
	
	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}
	
	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}
	
	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}
	
	getSetGlobalLocale('en', {
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});
	
	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
	
	var mathAbs = Math.abs;
	
	function abs () {
	    var data           = this._data;
	
	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);
	
	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);
	
	    return this;
	}
	
	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);
	
	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;
	
	    return duration._bubble();
	}
	
	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}
	
	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}
	
	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}
	
	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;
	
	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }
	
	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;
	
	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;
	
	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;
	
	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;
	
	    days += absFloor(hours / 24);
	
	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));
	
	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;
	
	    data.days   = days;
	    data.months = months;
	    data.years  = years;
	
	    return this;
	}
	
	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}
	
	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}
	
	function as (units) {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;
	
	    units = normalizeUnits(units);
	
	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}
	
	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}
	
	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}
	
	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');
	
	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this.isValid() ? this[units + 's']() : NaN;
	}
	
	function makeGetter(name) {
	    return function () {
	        return this.isValid() ? this._data[name] : NaN;
	    };
	}
	
	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');
	
	function weeks () {
	    return absFloor(this.days() / 7);
	}
	
	var round = Math.round;
	var thresholds = {
	    ss: 44,         // a few seconds to seconds
	    s : 45,         // seconds to minute
	    m : 45,         // minutes to hour
	    h : 22,         // hours to day
	    d : 26,         // days to month
	    M : 11          // months to year
	};
	
	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}
	
	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));
	
	    var a = seconds <= thresholds.ss && ['s', seconds]  ||
	            seconds < thresholds.s   && ['ss', seconds] ||
	            minutes <= 1             && ['m']           ||
	            minutes < thresholds.m   && ['mm', minutes] ||
	            hours   <= 1             && ['h']           ||
	            hours   < thresholds.h   && ['hh', hours]   ||
	            days    <= 1             && ['d']           ||
	            days    < thresholds.d   && ['dd', days]    ||
	            months  <= 1             && ['M']           ||
	            months  < thresholds.M   && ['MM', months]  ||
	            years   <= 1             && ['y']           || ['yy', years];
	
	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}
	
	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}
	
	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    if (threshold === 's') {
	        thresholds.ss = limit - 1;
	    }
	    return true;
	}
	
	function humanize (withSuffix) {
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }
	
	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);
	
	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }
	
	    return locale.postformat(output);
	}
	
	var abs$1 = Math.abs;
	
	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }
	
	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;
	
	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;
	
	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;
	
	
	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds;
	    var total = this.asSeconds();
	
	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }
	
	    return (total < 0 ? '-' : '') +
	        'P' +
	        (Y ? Y + 'Y' : '') +
	        (M ? M + 'M' : '') +
	        (D ? D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? h + 'H' : '') +
	        (m ? m + 'M' : '') +
	        (s ? s + 'S' : '');
	}
	
	var proto$2 = Duration.prototype;
	
	proto$2.isValid        = isValid$1;
	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;
	
	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;
	
	// Side effect imports
	
	// FORMATTING
	
	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');
	
	// PARSING
	
	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});
	
	// Side effect imports
	
	
	hooks.version = '2.18.1';
	
	setHookCallback(createLocal);
	
	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;
	
	return hooks;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(376)(module)))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (false) {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(8);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (false) {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;

/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 5 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var DOMProperty = __webpack_require__(16);
	var ReactDOMComponentFlags = __webpack_require__(183);
	
	var invariant = __webpack_require__(2);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ?  false ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ?  false ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (false) {
	  var ReactDebugTool = require('./ReactDebugTool');
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4),
	    _assign = __webpack_require__(5);
	
	var CallbackQueue = __webpack_require__(181);
	var PooledClass = __webpack_require__(13);
	var ReactFeatureFlags = __webpack_require__(186);
	var ReactReconciler = __webpack_require__(17);
	var Transaction = __webpack_require__(31);
	
	var invariant = __webpack_require__(2);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  false ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ?  false ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ?  false ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ?  false ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ?  false ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  false ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  false ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var PooledClass = __webpack_require__(13);
	
	var emptyFunction = __webpack_require__(8);
	var warning = __webpack_require__(3);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (false) {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (false) {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (false) {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (false) {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (false) {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	     false ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

/***/ },
/* 12 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 13 */
[377, 4],
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(18);


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(38);
	var setInnerHTML = __webpack_require__(33);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(46);
	var setTextContent = __webpack_require__(198);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ?  false ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  false ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (false) {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (false) {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName:  false ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(333);
	var ReactInstrumentation = __webpack_require__(9);
	
	var warning = __webpack_require__(3);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	       false ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactChildren = __webpack_require__(364);
	var ReactComponent = __webpack_require__(53);
	var ReactPureComponent = __webpack_require__(369);
	var ReactClass = __webpack_require__(365);
	var ReactDOMFactories = __webpack_require__(366);
	var ReactElement = __webpack_require__(19);
	var ReactPropTypes = __webpack_require__(368);
	var ReactVersion = __webpack_require__(370);
	
	var onlyChild = __webpack_require__(373);
	var warning = __webpack_require__(3);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (false) {
	  var canDefineProperty = require('./canDefineProperty');
	  var ReactElementValidator = require('./ReactElementValidator');
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (false) {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	// TODO: Fix tests so that this deprecation warning doesn't cause failures.
	if (false) {
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });
	  }
	}
	
	module.exports = React;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactCurrentOwner = __webpack_require__(12);
	
	var warning = __webpack_require__(3);
	var canDefineProperty = __webpack_require__(202);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(201);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (false) {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (false) {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	       false ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	       false ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (false) {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (false) {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (false) {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;

/***/ },
/* 20 */
4,
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.actions = exports.config = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _nestedFloatMatrixMath = __webpack_require__(28);
	
	var _AgentObservation = __webpack_require__(224);
	
	var _AgentObservation2 = _interopRequireDefault(_AgentObservation);
	
	var _generateInitialState = __webpack_require__(226);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var config = exports.config = {
	    //Environment size
	    size: [31, 31],
	
	    //Viewport settings
	    viewPortSize: [9, 9],
	    viewPortOffset: [0, 2],
	    viewPortPosition: [4, 2],
	
	    //Scoring settings
	    verticalDeltaScore: 10,
	    deltaScorePerAction: -1,
	    tileTypeToDeltaScore: [0, -50]
	};
	
	var actions = exports.actions = ['w', 'a', 's', 'd'];
	
	/**
	 * The main environment class for this game. This is the public interface for the game.
	 */
	
	var Environment = function () {
	    function Environment() {
	        _classCallCheck(this, Environment);
	
	        this._state = (0, _generateInitialState.generateInitialState)();
	
	        //Bind these to create proper JavaScript "this" context
	        this.applyAction = this.applyAction.bind(this);
	        this.getAgentObservation = this.getAgentObservation.bind(this);
	        this.getGodObservation = this.getGodObservation.bind(this);
	
	        //This viewport output matrix is only instantiated once to increase performance
	        this.viewportOutputMatrix = (0, _nestedFloatMatrixMath.createMatrix)(config.viewPortSize);
	    }
	
	    /**
	     * Mutates the environment's internal state by processing the given action
	     *
	     * @param actionCode
	     */
	
	
	    _createClass(Environment, [{
	        key: 'applyAction',
	        value: function applyAction(actionCode) {
	            var deltaScoreFromHittingEdge = 0;
	            switch (actionCode) {
	                case "w":
	                    if (this._state.position[1] > 0) {
	                        this._state.position[1]--;
	                        this._state.score -= config.verticalDeltaScore;
	                    } else {
	                        deltaScoreFromHittingEdge = config.tileTypeToDeltaScore[1]; //Edges are tileType 1 (red)
	                    }
	                    break;
	                case "a":
	                    if (this._state.position[0] > 0) {
	                        this._state.position[0]--;
	                    } else {
	                        deltaScoreFromHittingEdge = config.tileTypeToDeltaScore[1]; //Edges are tileType 1 (red)
	                    }
	                    break;
	                case "s":
	                    this._state.position[1]++;
	                    this._state.score = this._state.score + config.verticalDeltaScore;
	                    break;
	                case "d":
	                    if (this._state.position[0] < config.size[0] - 1) {
	                        this._state.position[0]++;
	                    } else {
	                        deltaScoreFromHittingEdge = config.tileTypeToDeltaScore[1]; //Edges are tileType 1 (red)
	                    }
	                    break;
	                default:
	                    throw new Error('Unknown action: ' + actionCode);
	            }
	
	            var tileType = this._state.tileTypes[this._state.position[0]][this._state.position[1]];
	
	            this._state.score += config.tileTypeToDeltaScore[tileType] + config.deltaScorePerAction + deltaScoreFromHittingEdge;
	
	            this._state.isComplete = this._state.position[1] === config.size[1] - 1;
	        }
	
	        /**
	         * Returns what the agent can see about the current environment state
	         *
	         * @returns {AgentObservation}
	         */
	
	    }, {
	        key: 'getAgentObservation',
	        value: function getAgentObservation() {
	            var shiftVector = [Math.ceil(this._state.position[0] - config.size[0] / 2), Math.ceil(this._state.position[1] - config.size[0] / 2) + config.viewPortOffset[1]];
	            var trimVector = [Math.floor((config.size[0] - config.viewPortSize[0]) / 2), Math.floor((config.size[1] - config.viewPortSize[1]) / 2)];
	
	            (0, _nestedFloatMatrixMath.shiftAndTrimMatrix)(this._state.tileTypes, shiftVector, 1, trimVector, this.viewportOutputMatrix);
	
	            //Make the bottom exit edge look safe by making its tiles not red
	            var limit = config.size[1] - trimVector[1] - shiftVector[1];
	            if (limit < config.viewPortSize[1]) {
	                for (var x = 0; x < config.viewPortSize[0]; x++) {
	                    for (var y = limit; y < config.viewPortSize[1]; y++) {
	                        this.viewportOutputMatrix[x][y] = 0;
	                    }
	                }
	            }
	
	            return new _AgentObservation2.default(this.viewportOutputMatrix, this._state.score, config.viewPortPosition);
	        }
	    }, {
	        key: 'getGodObservation',
	        value: function getGodObservation() {
	            return this._state;
	        }
	    }]);
	
	    return Environment;
	}();
	
	exports.default = Environment;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (false) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	if (false) {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;
	
	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };
	
	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(293)();
	}


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var EventPluginRegistry = __webpack_require__(39);
	var EventPluginUtils = __webpack_require__(40);
	var ReactErrorUtils = __webpack_require__(44);
	
	var accumulateInto = __webpack_require__(192);
	var forEachAccumulated = __webpack_require__(193);
	var invariant = __webpack_require__(2);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ?  false ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ?  false ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(24);
	var EventPluginUtils = __webpack_require__(40);
	
	var accumulateInto = __webpack_require__(192);
	var forEachAccumulated = __webpack_require__(193);
	var warning = __webpack_require__(3);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;

/***/ },
/* 26 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(11);
	
	var getEventTarget = __webpack_require__(49);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.createMatrix = createMatrix;
	exports.shiftAndTrimMatrix = shiftAndTrimMatrix;
	exports.matrixToFlatArray = matrixToFlatArray;
	/**
	 * Creates a matrix out of nested Float64Arrays and returns it
	 *
	 * @param {Array} dimensions [xLength, yLength]
	 * @returns {Array}
	 */
	function createMatrix(dimensions) {
	    var matrix = [];
	
	    for (var i = 0; i < dimensions[0]; i++) {
	        matrix[i] = new Float64Array(dimensions[1]);
	    }
	
	    return matrix;
	}
	
	/**
	 * Shifts and trims the given matrix by the given amounts. Is useful for creating viewport output.
	 *
	 * @param matrix
	 * @param shiftVector
	 * @param defaultValue
	 * @param trimVector
	 * @param outputMatrix Output is written here rather than returned because instantiating arrays is slow in JS
	 * @returns {*}
	 */
	function shiftAndTrimMatrix(matrix, shiftVector, defaultValue, trimVector, outputMatrix) {
	    shiftVector = [shiftVector[0] + trimVector[0], shiftVector[1] + trimVector[1]];
	    var shiftX = shiftVector[0];
	    var shiftY = shiftVector[1];
	    var fromXLen = matrix.length;
	    var fromYLen = matrix[0].length;
	    var xLen = fromXLen - trimVector[0] * 2;
	    var yLen = fromYLen - trimVector[1] * 2;
	    if (outputMatrix.length !== xLen || outputMatrix[0].length !== yLen) {
	        throw new Error('Output matrix has the wrong dimensions. ' + 'Expected:' + xLen + 'x' + yLen + ' ,' + 'Actual:' + outputMatrix.length + 'x' + outputMatrix[0].length);
	    }
	
	    for (var x = 0; x < xLen; x++) {
	        var fromX = x + shiftX;
	        var fromXRow = matrix[fromX];
	        var toXRow = outputMatrix[x];
	        for (var y = 0; y < yLen; y++) {
	            var fromY = y + shiftY;
	            if (fromX >= 0 && fromX < fromXLen && fromY >= 0 && fromY < fromYLen) {
	                toXRow[y] = fromXRow[y + shiftY];
	            } else {
	                toXRow[y] = defaultValue;
	            }
	        }
	    }
	
	    //Thought this was may be faster but it was not
	    // for (var x = 0; x < xLen; x++) {
	    //     for (var y = 0; y < yLen; y++) {
	    //         if (x + shiftX >= 0 && x + shiftX < fromXLen && y + shiftY >= 0 && y + shiftY < fromYLen) {
	    //             outputMatrix[x][y] = matrix[x + shiftX][y + shiftY]
	    //         } else {
	    //             outputMatrix[x][y] = defaultValue;
	    //         }
	    //     }
	    // }
	}
	
	/**
	 * Converts a matrix made of nested arrays to a single flat array and returns it
	 *
	 * @param {Array} matrix
	 * @returns {Float64Array}
	 */
	function matrixToFlatArray(matrix) {
	    var xLen = matrix.length;
	    var yLen = matrix[0].length;
	    var vectorI = 0;
	    var vector = new Float64Array(xLen * yLen);
	    for (var xI = 0; xI < xLen; xI++) {
	        for (var yI = 0; yI < yLen; yI++) {
	            vector[vectorI] = matrix[xI][yI];
	            vectorI++;
	        }
	    }
	    return vector;
	}

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var EventPluginRegistry = __webpack_require__(39);
	var ReactEventEmitterMixin = __webpack_require__(325);
	var ViewportMetrics = __webpack_require__(191);
	
	var getVendorPrefixedEventName = __webpack_require__(357);
	var isEventSupported = __webpack_require__(50);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(27);
	var ViewportMetrics = __webpack_require__(191);
	
	var getEventModifierState = __webpack_require__(48);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ?  false ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ?  false ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;

/***/ },
/* 32 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(7);
	var DOMNamespaces = __webpack_require__(38);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(46);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.settings = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(275);
	
	var _react = __webpack_require__(14);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _environment = __webpack_require__(21);
	
	var _ObservationRenderer = __webpack_require__(219);
	
	var _ObservationRenderer2 = _interopRequireDefault(_ObservationRenderer);
	
	var _BrainExportButton = __webpack_require__(217);
	
	var _BrainExportButton2 = _interopRequireDefault(_BrainExportButton);
	
	var _ScoreHistoryChart = __webpack_require__(220);
	
	var _ScoreHistoryChart2 = _interopRequireDefault(_ScoreHistoryChart);
	
	var _GameRulesDisplay = __webpack_require__(218);
	
	var _GameRulesDisplay2 = _interopRequireDefault(_GameRulesDisplay);
	
	var _agents = __webpack_require__(216);
	
	var _agents2 = _interopRequireDefault(_agents);
	
	var _GameRunner = __webpack_require__(204);
	
	var _GameRunner2 = _interopRequireDefault(_GameRunner);
	
	var _StatsDisplay = __webpack_require__(221);
	
	var _StatsDisplay2 = _interopRequireDefault(_StatsDisplay);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var settings = exports.settings = { //@TODO move out of global?
	    // renderingEnabled: false,
	    // speed: 0,
	    renderingEnabled: true,
	    speed: 250, //250,
	    ticksPerIntervalWhenNotRendering: 100, //100 is good for speed, 10 is good for precise "actions per second" readout
	    autoPlay: true
	};
	
	var App = function (_Component) {
	    _inherits(App, _Component);
	
	    function App() {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this));
	
	        _this.setupInterval = _this.setupInterval.bind(_this);
	        _this.handleGameRunnerStatusChange = _this.handleGameRunnerStatusChange.bind(_this);
	        _this.handleSpeedSelectorChange = _this.handleSpeedSelectorChange.bind(_this);
	        _this.handleGameRendererRender = _this.handleGameRendererRender.bind(_this);
	        _this.handleAgentSelectorChange = _this.handleAgentSelectorChange.bind(_this);
	        _this.handleClearBrainClick = _this.handleClearBrainClick.bind(_this);
	        _this.handleManualControlKeyDown = _this.handleManualControlKeyDown.bind(_this);
	        _this.handleManualControlClick = _this.handleManualControlClick.bind(_this);
	
	        _this._agents = _agents2.default; //@TODO take as construct arg?
	
	        _this._settings = settings; //@TODO take as construct arg?
	
	        _this.state = {
	            statsToDisplay: {},
	            agentObservation: null,
	            godObservation: null,
	            universalGameNumber: 0,
	            currentAgentIndex: 0,
	            speed: _this._settings.speed,
	            lastStatusRenderTime: 0,
	            lastStatusChartRenderTime: 0,
	            scoreHistoryChartData: null
	        };
	
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            this._gameRunner = new _GameRunner2.default(this.handleGameRendererRender, this.handleGameRunnerStatusChange);
	
	            this.clearStatsAndNewGame();
	            this.setupInterval();
	        }
	    }, {
	        key: 'handleGameRendererRender',
	        value: function handleGameRendererRender(agentObservation, godObservation, universalGameNumber) {
	            this.setState({
	                agentObservation: agentObservation,
	                godObservation: godObservation,
	                universalGameNumber: universalGameNumber
	            });
	        }
	    }, {
	        key: 'handleGameRunnerStatusChange',
	        value: function handleGameRunnerStatusChange(stats) {
	            var nowMilliseconds = new Date().getTime();
	            if (nowMilliseconds > this.state.lastStatusRenderTime + 250) {
	                //Refuse to render status html faster than 4fps
	                this.setState({
	                    statsToDisplay: {
	                        // 'Agent' :currentAgentName ,
	                        'Current Score': stats.currentScore,
	                        'Actions per second': stats.actionsPerSecond.toLocaleString(),
	                        'Last Game Final Score': stats.lastGameScore,
	                        'Average Final Score (trailing)': stats.averageFinalScore,
	                        'Average Final Score (all time)': Math.floor(stats.scoreSum / stats.gameCount) || 0,
	                        // 'Average Reward' : (stats.totalReward / stats.actionCount).toFixed(2) ,
	                        'Game Count': stats.gameCount.toLocaleString()
	                    },
	                    lastStatusRenderTime: nowMilliseconds
	                });
	            }
	
	            if (nowMilliseconds > this.state.lastStatusChartRenderTime + 50) {
	                //Refuse to render status chart faster than 20fps
	
	                if (settings.renderingEnabled) {
	                    //Don't draw chart if rendering games
	                    return;
	                }
	
	                this.setState({
	                    scoreHistoryChartData: stats,
	                    lastStatusChartRenderTime: nowMilliseconds
	                });
	            }
	        }
	    }, {
	        key: 'setupInterval',
	        value: function setupInterval() {
	            var self = this;
	            clearInterval(this._intervalReference);
	            if (this._settings.autoPlay) {
	                var ticksPerInterval = this._settings.ticksPerIntervalWhenNotRendering;
	                if (this._agents[this.state.currentAgentIndex].ticksPerInterval) {
	                    //Allow very fast or very slow agents to have their own setting
	                    ticksPerInterval = this._agents[this.state.currentAgentIndex].ticksPerInterval;
	                }
	                if (this._settings.renderingEnabled) {
	                    ticksPerInterval = 1;
	                }
	                //Normal ticking takes 3ms between ticks which is not fast enough, so tick 100 times
	                this._intervalReference = setInterval(function () {
	                    for (var i = 0; i < ticksPerInterval; i++) {
	                        self._gameRunner.tick();
	                    }
	                }, this._settings.speed);
	            }
	        }
	    }, {
	        key: 'clearStatsAndNewGame',
	        value: function clearStatsAndNewGame() {
	            this._gameRunner.setRenderingEnabled(this._settings.renderingEnabled);
	            this._gameRunner.clearStats();
	            this._gameRunner.newGame(this._agents[this.state.currentAgentIndex].class, this._settings.renderingEnabled);
	        }
	    }, {
	        key: 'setSpeed',
	        value: function setSpeed(value) {
	            //@TODO use setState in here
	            this.setState({ speed: value });
	            var newEnableRenderingValue = true;
	            this._settings.autoPlay = true;
	            if (value === 'no-render') {
	                newEnableRenderingValue = false;
	                this._settings.speed = 0;
	            } else if (value === 'paused') {
	                this._settings.autoPlay = false;
	            } else {
	                this._settings.speed = value;
	            }
	            if (newEnableRenderingValue !== this._settings.renderingEnabled) {
	                this._settings.renderingEnabled = newEnableRenderingValue;
	                this._gameRunner.setRenderingEnabled(this._settings.renderingEnabled);
	            }
	            this.setupInterval();
	        }
	    }, {
	        key: 'handleSpeedSelectorChange',
	        value: function handleSpeedSelectorChange(event) {
	            this.setSpeed(event.target.value);
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(prevProps, prevState) {
	            if (prevState.currentAgentIndex !== this.state.currentAgentIndex) {
	                //Is the agent was changed, clear stats and start a new game
	                this.clearStatsAndNewGame();
	                this.setupInterval(); //Some agents have their own speed interval so re setup the interval
	            }
	        }
	    }, {
	        key: 'handleAgentSelectorChange',
	        value: function handleAgentSelectorChange(event) {
	            this.setState({ currentAgentIndex: event.target.value });
	        }
	    }, {
	        key: 'handleClearBrainClick',
	        value: function handleClearBrainClick() {
	            this._gameRunner.clearCurrentAgentBrain();
	            this.clearStatsAndNewGame();
	        }
	    }, {
	        key: 'handleManualControlKeyDown',
	        value: function handleManualControlKeyDown(event) {
	            if (_environment.actions.indexOf(event.key) !== -1) {
	                this._gameRunner.takeAction(event.key);
	            }
	        }
	    }, {
	        key: 'handleManualControlClick',
	        value: function handleManualControlClick() {
	            this.setSpeed('paused');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { id: 'info' },
	                    'Agent:',
	                    _react2.default.createElement(
	                        'select',
	                        { onChange: this.handleAgentSelectorChange },
	                        this._agents.map(function (agent, index) {
	                            return _react2.default.createElement(
	                                'option',
	                                { key: index, value: index },
	                                agent.name
	                            );
	                        })
	                    ),
	                    '\xA0',
	                    _react2.default.createElement(
	                        'button',
	                        { onClick: this.handleClearBrainClick },
	                        'Clear Brain and Retrain'
	                    ),
	                    _react2.default.createElement('br', null),
	                    'Speed:',
	                    _react2.default.createElement(
	                        'select',
	                        { onChange: this.handleSpeedSelectorChange, value: this.state.speed },
	                        _react2.default.createElement(
	                            'option',
	                            { value: 'no-render' },
	                            'Ludicrous Speed (no rendering)'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: '0' },
	                            'Very Fast'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: '100' },
	                            'Fast'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: '250' },
	                            'Medium'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: '500' },
	                            'Slow'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: 'paused' },
	                            'Paused'
	                        )
	                    ),
	                    '\xA0',
	                    _react2.default.createElement(
	                        'button',
	                        { type: 'text',
	                            onKeyDown: this.handleManualControlKeyDown,
	                            onClick: this.handleManualControlClick },
	                        'Enable Manual Control (WASD)'
	                    ),
	                    _react2.default.createElement('pre', { id: 'score' }),
	                    _react2.default.createElement(_StatsDisplay2.default, { stats: this.state.statsToDisplay }),
	                    _react2.default.createElement('br', null)
	                ),
	                !this._settings.renderingEnabled && this.state.scoreHistoryChartData && _react2.default.createElement(
	                    'div',
	                    { style: { width: '30em' } },
	                    _react2.default.createElement(_ScoreHistoryChart2.default, { stats: this.state.scoreHistoryChartData })
	                ),
	                this._settings.renderingEnabled && this.state.agentObservation && _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(_ObservationRenderer2.default, {
	                        agentObservation: this.state.agentObservation,
	                        godObservation: this.state.godObservation,
	                        gameNumber: this.state.universalGameNumber
	                    }),
	                    _react2.default.createElement('div', { id: 'agentRendererContainer' })
	                ),
	                _react2.default.createElement('br', null),
	                _react2.default.createElement(_GameRulesDisplay2.default, { environmentConfig: _environment.config }),
	                _react2.default.createElement('br', null),
	                _react2.default.createElement(_BrainExportButton2.default, { gameRunner: this._gameRunner })
	            );
	        }
	    }]);
	
	    return App;
	}(_react.Component);
	
	exports.default = App;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.convert9x9to7x5 = convert9x9to7x5;
	exports.convert9x9to5x3 = convert9x9to5x3;
	exports.convert9x9to5x2 = convert9x9to5x2;
	exports.convert9x9to3x2 = convert9x9to3x2;
	
	var _nestedFloatMatrixMath = __webpack_require__(28);
	
	// export function convert9x9to5x5(matrix) {
	//     return shiftAndTrimMatrix(matrix, [0, -1], 1, [2, 2])
	// }
	
	var convert9x9to7x5OutputMatrix = (0, _nestedFloatMatrixMath.createMatrix)([7, 5]); //Object pool to increase performance
	function convert9x9to7x5(matrix) {
	    (0, _nestedFloatMatrixMath.shiftAndTrimMatrix)(matrix, [0, -1], 1, [1, 2], convert9x9to7x5OutputMatrix);
	    return convert9x9to7x5OutputMatrix;
	}
	
	// var convert9x9to5x4OutputMatrix = createMatrix([5, 4]);//Object pool to increase performance
	// export function convert9x9to5x4(matrix) {
	//     shiftAndTrimMatrix(matrix, [0, -1], 1, [2, 4], convert9x9to5x4OutputMatrix);
	//     return convert9x9to5x4OutputMatrix;
	// }
	
	var convert9x9to5x3OutputMatrix = (0, _nestedFloatMatrixMath.createMatrix)([5, 3]); //Object pool to increase performance
	function convert9x9to5x3(matrix) {
	    (0, _nestedFloatMatrixMath.shiftAndTrimMatrix)(matrix, [0, -1], 1, [2, 3], convert9x9to5x3OutputMatrix);
	    return convert9x9to5x3OutputMatrix;
	}
	
	var convert9x9to5x2OutputMatrix = (0, _nestedFloatMatrixMath.createMatrix)([5, 2]); //Object pool to increase performance
	function convert9x9to5x2(matrix) {
	    (0, _nestedFloatMatrixMath.shiftAndTrimMatrix)(matrix, [0, -0], 1, [2, 2], convert9x9to5x2OutputMatrix);
	    return convert9x9to5x2OutputMatrix;
	}
	
	var convert9x9to3x2OutputMatrix = (0, _nestedFloatMatrixMath.createMatrix)([3, 2]); //Object pool to increase performance
	function convert9x9to3x2(matrix) {
	    (0, _nestedFloatMatrixMath.shiftAndTrimMatrix)(matrix, [0, -0], 1, [3, 2], convert9x9to3x2OutputMatrix);
	    return convert9x9to3x2OutputMatrix;
	}

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(15);
	var Danger = __webpack_require__(302);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactInstrumentation = __webpack_require__(9);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(46);
	var setInnerHTML = __webpack_require__(33);
	var setTextContent = __webpack_require__(198);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (false) {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (false) {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (false) {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ?  false ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ?  false ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (false) {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames:  false ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (false) {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var ReactErrorUtils = __webpack_require__(44);
	
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (false) {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (false) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ?  false ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var ReactPropTypesSecret = __webpack_require__(331);
	var propTypesFactory = __webpack_require__(179);
	
	var React = __webpack_require__(18);
	var PropTypes = propTypesFactory(React.isValidElement);
	
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	         false ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ?  false ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (false) {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var ReactCurrentOwner = __webpack_require__(12);
	var ReactInstanceMap = __webpack_require__(26);
	var ReactInstrumentation = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(10);
	
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (false) {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (false) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (false) {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ?  false ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(7);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var emptyFunction = __webpack_require__(8);
	var warning = __webpack_require__(3);
	
	var validateDOMNesting = emptyFunction;
	
	if (false) {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(20);
	
	var ReactNoopUpdateQueue = __webpack_require__(54);
	
	var canDefineProperty = __webpack_require__(202);
	var emptyObject = __webpack_require__(22);
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  false ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (false) {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(3);
	
	function warnNoop(publicInstance, callerName) {
	  if (false) {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;

/***/ },
/* 55 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Matrix holds a matrix
	var Matrix = function () {
	    function Matrix(n, d) {
	        _classCallCheck(this, Matrix);
	
	        // n is number of rows d is number of columns
	        this.n = n;
	        this.d = d;
	        this.w = new Float64Array(n * d);
	        this.dw = new Float64Array(n * d);
	    }
	
	    _createClass(Matrix, [{
	        key: "setFrom",
	        value: function setFrom(arr) {
	            for (var i = 0, n = arr.length; i < n; i++) {
	                this.w[i] = arr[i];
	            }
	        }
	    }, {
	        key: "toJSON",
	        value: function toJSON() {
	            return {
	                n: this.n,
	                d: this.d,
	                w: this.w
	            };
	        }
	    }, {
	        key: "fromJSON",
	        value: function fromJSON(json) {
	            this.n = json.n;
	            this.d = json.d;
	            this.w = new Float64Array(this.n * this.d);
	            this.dw = new Float64Array(this.n * this.d);
	            for (var i = 0, n = this.n * this.d; i < n; i++) {
	                this.w[i] = json.w[i]; // copy over weights
	            }
	        }
	    }]);
	
	    return Matrix;
	}();
	
	exports.default = Matrix;
	;

/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getIndexOfMaxValue = getIndexOfMaxValue;
	function getIndexOfMaxValue(array) {
	    var maxValue = array[0];
	    var maxIndex = 0;
	    for (var i = 1, length = array.length; i < length; i++) {
	        var v = array[i];
	        if (v > maxValue) {
	            maxIndex = i;
	            maxValue = v;
	        }
	    }
	    return maxIndex;
	}

/***/ },
/* 57 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.gaussRandom = gaussRandom;
	exports.getRandomInt = getRandomInt;
	exports.getRandomIntWithZeroMin = getRandomIntWithZeroMin;
	/**
	 * Returns a random float who's distribution is gaussian.
	 *
	 * This uses the "Box-Muller transform". More info at:
	 * http://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve
	 *
	 * @returns {number}
	 */
	function gaussRandom() {
	    var u = 1 - Math.random(); // Subtraction to flip [0, 1) to (0, 1].
	    var v = 1 - Math.random();
	    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
	}
	
	function getRandomInt(min, max) {
	    return Math.floor(Math.random() * (max - min) + min);
	}
	
	function getRandomIntWithZeroMin(max) {
	    return Math.floor(Math.random() * max);
	}

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.renderActionResponse = renderActionResponse;
	exports.renderReward = renderReward;
	
	__webpack_require__(214);
	
	var _NeuralNetwork = __webpack_require__(210);
	
	var _NeuralNetwork2 = _interopRequireDefault(_NeuralNetwork);
	
	var _QNetworkAgentOneStep = __webpack_require__(211);
	
	var _QNetworkAgentOneStep2 = _interopRequireDefault(_QNetworkAgentOneStep);
	
	var _App = __webpack_require__(34);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//@TODO use DI instead for this
	
	
	function getMinimumVectorIndex(w) {
	    var minv = w[0];
	    var minix = 0;
	    for (var i = 1, n = w.length; i < n; i++) {
	        var v = w[i];
	        if (v < minv) {
	            minix = i;
	            minv = v;
	        }
	    }
	    return minix;
	}
	function getMaximumVectorIndex(w) {
	    //@TODO fix var names
	    var minv = w[0];
	    var minix = 0;
	    for (var i = 1, n = w.length; i < n; i++) {
	        var v = w[i];
	        if (v > minv) {
	            minix = i;
	            minv = v;
	        }
	    }
	    return minix;
	}
	
	var actionElements = null;
	var randomActionElement = null;
	var rewardElements = null;
	var randomActionValueElement = void 0;
	
	// let currentNeuralNetwork; //@TODO WARNING IS HUGE HACK
	
	function ensureElementsExist() {
	    if (document.getElementById('DQNRender')) {
	        return;
	    }
	    document.getElementById('agentRendererContainer').innerHTML = '<div id="DQNRender">\nPredicted expected reward from each action:\n    <div style="overflow: auto"><div style="float: left">w:&nbsp;</div> <div id="action0" style="background-color: lightgoldenrodyellow"></div></div>\n    <div style="overflow: auto"><div style="float: left">a:&nbsp;</div> <div id="action1" style="background-color: lightsalmon"></div></div>\n    <div style="overflow: auto"><div style="float: left">s:&nbsp;</div> <div id="action2" style="background-color: lightskyblue"></div></div>\n    <div style="overflow: auto"><div style="float: left">d:&nbsp;</div> <div id="action3" style="background-color: lightseagreen"></div></div>\n        <div style="overflow: auto"><div style="float: left">random action:&nbsp;<span id="actionRandomValue"></span></div><div id="actionRandom" style="background-color: lightcoral;height: 1em"></div></div>\n        <br>\n        Reward from last action:\n        <div style="overflow: auto"><div style="float: left">good&nbsp;</div> <div id="good" style="background-color: greenyellow"></div></div>\n    <div style="overflow: auto"><div style="float: left">bad&nbsp;</div> <div id="bad" style="background-color: orangered"></div></div>\n<br />\n</div>';
	    actionElements = [document.getElementById('action0'), document.getElementById('action1'), document.getElementById('action2'), document.getElementById('action3')];
	    randomActionElement = document.getElementById('actionRandom');
	    randomActionValueElement = document.getElementById('actionRandomValue');
	    rewardElements = [document.getElementById('good'), document.getElementById('bad')];
	}
	
	function renderActionResponse(actionResponse) {
	    //@TODO move out
	    ensureElementsExist();
	
	    if (actionResponse.weights === null) {
	        //Make it work with older agents that do not always return weights //@TODO fix
	        return;
	    }
	
	    var minAction = getMinimumVectorIndex(actionResponse.weights);
	    // const maxA = maxi(actionResponse.weights);
	    var maxAction = getMaximumVectorIndex(actionResponse.weights);
	    var barFrontPadding = 50;
	
	    var adder = 0;
	    var maxActionValue = actionResponse.weights[maxAction];
	    for (var i = 0, len = actionResponse.weights.length; i < len; i++) {
	        if (actionResponse.weights[minAction] < 0) {
	            adder = -actionResponse.weights[minAction];
	        }
	    }
	    for (i = 0, len = actionResponse.weights.length; i < len; i++) {
	        var fixedValue = Math.floor((actionResponse.weights[i] + adder) / (maxActionValue + adder) * 100);
	
	        actionElements[i].style.width = fixedValue * 3 + barFrontPadding + 'px';
	        actionElements[i].innerHTML = actionResponse.weights[i].toFixed(0);
	    }
	
	    if (actionResponse.wasRandom) {
	        randomActionValueElement.innerHTML = 'Infinity';
	        var fixedValueForRandomAction = Math.floor((maxActionValue + adder + 2) / (maxActionValue + adder) * 100);
	        randomActionElement.style.width = fixedValueForRandomAction * 3 + barFrontPadding + 'px';
	    } else {
	        randomActionValueElement.innerHTML = '0';
	        randomActionElement.style.width = '10px';
	    }
	}
	
	function renderReward(reward) {
	    //@TODO move out
	    var good = 0;
	    var bad = 0;
	    if (reward < 0) {
	        bad = -reward;
	    } else {
	        good = reward;
	    }
	
	    rewardElements[0].style.width = good * 15 + 50 + 'px';
	    rewardElements[0].innerHTML = good;
	
	    rewardElements[1].style.width = bad * 15 + 50 + 'px';
	    rewardElements[1].innerHTML = bad;
	}
	
	var RlDqn = function () {
	    function RlDqn(learningEnabled, numberOfStates, previousSavedData) {
	        _classCallCheck(this, RlDqn);
	
	        var numberOfActions = 4;
	        // create the DQN agent
	        this._neuralNetwork = new _NeuralNetwork2.default(numberOfStates, numberOfActions, [100]);
	        if (typeof previousSavedData !== 'undefined') {
	            this._neuralNetwork.fromJSON(previousSavedData);
	        }
	        this._agent = new _QNetworkAgentOneStep2.default(numberOfStates, numberOfActions, this._neuralNetwork, {});
	
	        this._learningEnabled = learningEnabled;
	    }
	
	    _createClass(RlDqn, [{
	        key: 'getAction',
	        value: function getAction(state, reward) {
	            // currentNeuralNetwork = this._neuralNetwork;
	
	            if (!this._learningEnabled) {
	                reward = null; //Passing null rewards to the agent disables learning inside it
	            }
	
	            var action = this._agent.learnAndAct(reward, state, reward == null);
	            var actionResponse = this._agent.getLastActionStats();
	
	            if (_App.settings.renderingEnabled) {
	                renderActionResponse(actionResponse);
	                if (reward !== null) {
	                    renderReward(reward);
	                }
	            }
	
	            return action;
	        }
	    }, {
	        key: 'exportBrain',
	        value: function exportBrain() {
	            return this._neuralNetwork.toJSON();
	        }
	    }]);
	
	    return RlDqn;
	}();
	
	exports.default = RlDqn;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(8);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (false) {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;

/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var af = moment.defineLocale('af', {
	    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	    meridiemParse: /vm|nm/i,
	    isPM : function (input) {
	        return /^nm$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'vm' : 'VM';
	        } else {
	            return isLower ? 'nm' : 'NM';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Vandag om] LT',
	        nextDay : '[Môre om] LT',
	        nextWeek : 'dddd [om] LT',
	        lastDay : '[Gister om] LT',
	        lastWeek : '[Laas] dddd [om] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'oor %s',
	        past : '%s gelede',
	        s : '\'n paar sekondes',
	        m : '\'n minuut',
	        mm : '%d minute',
	        h : '\'n uur',
	        hh : '%d ure',
	        d : '\'n dag',
	        dd : '%d dae',
	        M : '\'n maand',
	        MM : '%d maande',
	        y : '\'n jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	    },
	    week : {
	        dow : 1, // Maandag is die eerste dag van die week.
	        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	    }
	});
	
	return af;
	
	})));


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arDz = moment.defineLocale('ar-dz', {
	    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 4  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arDz;
	
	})));


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Kuwait) [ar-kw]
	//! author : Nusret Parlak: https://github.com/nusretparlak
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arKw = moment.defineLocale('ar-kw', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arKw;
	
	})));


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '1',
	    '2': '2',
	    '3': '3',
	    '4': '4',
	    '5': '5',
	    '6': '6',
	    '7': '7',
	    '8': '8',
	    '9': '9',
	    '0': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'يناير',
	    'فبراير',
	    'مارس',
	    'أبريل',
	    'مايو',
	    'يونيو',
	    'يوليو',
	    'أغسطس',
	    'سبتمبر',
	    'أكتوبر',
	    'نوفمبر',
	    'ديسمبر'
	];
	
	var arLy = moment.defineLocale('ar-ly', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arLy;
	
	})));


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arMa = moment.defineLocale('ar-ma', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arMa;
	
	})));


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	
	var arSa = moment.defineLocale('ar-sa', {
	    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    preparse: function (string) {
	        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arSa;
	
	})));


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arTn = moment.defineLocale('ar-tn', {
	    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'في %s',
	        past: 'منذ %s',
	        s: 'ثوان',
	        m: 'دقيقة',
	        mm: '%d دقائق',
	        h: 'ساعة',
	        hh: '%d ساعات',
	        d: 'يوم',
	        dd: '%d أيام',
	        M: 'شهر',
	        MM: '%d أشهر',
	        y: 'سنة',
	        yy: '%d سنوات'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return arTn;
	
	})));


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'كانون الثاني يناير',
	    'شباط فبراير',
	    'آذار مارس',
	    'نيسان أبريل',
	    'أيار مايو',
	    'حزيران يونيو',
	    'تموز يوليو',
	    'آب أغسطس',
	    'أيلول سبتمبر',
	    'تشرين الأول أكتوبر',
	    'تشرين الثاني نوفمبر',
	    'كانون الأول ديسمبر'
	];
	
	var ar = moment.defineLocale('ar', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ar;
	
	})));


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    1: '-inci',
	    5: '-inci',
	    8: '-inci',
	    70: '-inci',
	    80: '-inci',
	    2: '-nci',
	    7: '-nci',
	    20: '-nci',
	    50: '-nci',
	    3: '-üncü',
	    4: '-üncü',
	    100: '-üncü',
	    6: '-ncı',
	    9: '-uncu',
	    10: '-uncu',
	    30: '-uncu',
	    60: '-ıncı',
	    90: '-ıncı'
	};
	
	var az = moment.defineLocale('az', {
	    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[sabah saat] LT',
	        nextWeek : '[gələn həftə] dddd [saat] LT',
	        lastDay : '[dünən] LT',
	        lastWeek : '[keçən həftə] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s əvvəl',
	        s : 'birneçə saniyyə',
	        m : 'bir dəqiqə',
	        mm : '%d dəqiqə',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir il',
	        yy : '%d il'
	    },
	    meridiemParse: /gecə|səhər|gündüz|axşam/,
	    isPM : function (input) {
	        return /^(gündüz|axşam)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'gecə';
	        } else if (hour < 12) {
	            return 'səhər';
	        } else if (hour < 17) {
	            return 'gündüz';
	        } else {
	            return 'axşam';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '-ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return az;
	
	})));


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	        'dd': 'дзень_дні_дзён',
	        'MM': 'месяц_месяцы_месяцаў',
	        'yy': 'год_гады_гадоў'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвіліна' : 'хвіліну';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'гадзіна' : 'гадзіну';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	
	var be = moment.defineLocale('be', {
	    months : {
	        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	    },
	    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	    weekdays : {
	        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	    },
	    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сёння ў] LT',
	        nextDay: '[Заўтра ў] LT',
	        lastDay: '[Учора ў] LT',
	        nextWeek: function () {
	            return '[У] dddd [ў] LT';
	        },
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'праз %s',
	        past : '%s таму',
	        s : 'некалькі секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithPlural,
	        hh : relativeTimeWithPlural,
	        d : 'дзень',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночы|раніцы|дня|вечара/,
	    isPM : function (input) {
	        return /^(дня|вечара)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночы';
	        } else if (hour < 12) {
	            return 'раніцы';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечара';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return be;
	
	})));


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var bg = moment.defineLocale('bg', {
	    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Днес в] LT',
	        nextDay : '[Утре в] LT',
	        nextWeek : 'dddd [в] LT',
	        lastDay : '[Вчера в] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'след %s',
	        past : 'преди %s',
	        s : 'няколко секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дни',
	        M : 'месец',
	        MM : '%d месеца',
	        y : 'година',
	        yy : '%d години'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bg;
	
	})));


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '১',
	    '2': '২',
	    '3': '৩',
	    '4': '৪',
	    '5': '৫',
	    '6': '৬',
	    '7': '৭',
	    '8': '৮',
	    '9': '৯',
	    '0': '০'
	};
	var numberMap = {
	    '১': '1',
	    '২': '2',
	    '৩': '3',
	    '৪': '4',
	    '৫': '5',
	    '৬': '6',
	    '৭': '7',
	    '৮': '8',
	    '৯': '9',
	    '০': '0'
	};
	
	var bn = moment.defineLocale('bn', {
	    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm সময়',
	        LTS : 'A h:mm:ss সময়',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm সময়',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	    },
	    calendar : {
	        sameDay : '[আজ] LT',
	        nextDay : '[আগামীকাল] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[গতকাল] LT',
	        lastWeek : '[গত] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s পরে',
	        past : '%s আগে',
	        s : 'কয়েক সেকেন্ড',
	        m : 'এক মিনিট',
	        mm : '%d মিনিট',
	        h : 'এক ঘন্টা',
	        hh : '%d ঘন্টা',
	        d : 'এক দিন',
	        dd : '%d দিন',
	        M : 'এক মাস',
	        MM : '%d মাস',
	        y : 'এক বছর',
	        yy : '%d বছর'
	    },
	    preparse: function (string) {
	        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'রাত' && hour >= 4) ||
	                (meridiem === 'দুপুর' && hour < 5) ||
	                meridiem === 'বিকাল') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'রাত';
	        } else if (hour < 10) {
	            return 'সকাল';
	        } else if (hour < 17) {
	            return 'দুপুর';
	        } else if (hour < 20) {
	            return 'বিকাল';
	        } else {
	            return 'রাত';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bn;
	
	})));


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '༡',
	    '2': '༢',
	    '3': '༣',
	    '4': '༤',
	    '5': '༥',
	    '6': '༦',
	    '7': '༧',
	    '8': '༨',
	    '9': '༩',
	    '0': '༠'
	};
	var numberMap = {
	    '༡': '1',
	    '༢': '2',
	    '༣': '3',
	    '༤': '4',
	    '༥': '5',
	    '༦': '6',
	    '༧': '7',
	    '༨': '8',
	    '༩': '9',
	    '༠': '0'
	};
	
	var bo = moment.defineLocale('bo', {
	    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[དི་རིང] LT',
	        nextDay : '[སང་ཉིན] LT',
	        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	        lastDay : '[ཁ་སང] LT',
	        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ལ་',
	        past : '%s སྔན་ལ',
	        s : 'ལམ་སང',
	        m : 'སྐར་མ་གཅིག',
	        mm : '%d སྐར་མ',
	        h : 'ཆུ་ཚོད་གཅིག',
	        hh : '%d ཆུ་ཚོད',
	        d : 'ཉིན་གཅིག',
	        dd : '%d ཉིན་',
	        M : 'ཟླ་བ་གཅིག',
	        MM : '%d ཟླ་བ',
	        y : 'ལོ་གཅིག',
	        yy : '%d ལོ'
	    },
	    preparse: function (string) {
	        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                meridiem === 'དགོང་དག') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'མཚན་མོ';
	        } else if (hour < 10) {
	            return 'ཞོགས་ཀས';
	        } else if (hour < 17) {
	            return 'ཉིན་གུང';
	        } else if (hour < 20) {
	            return 'དགོང་དག';
	        } else {
	            return 'མཚན་མོ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bo;
	
	})));


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function relativeTimeWithMutation(number, withoutSuffix, key) {
	    var format = {
	        'mm': 'munutenn',
	        'MM': 'miz',
	        'dd': 'devezh'
	    };
	    return number + ' ' + mutation(format[key], number);
	}
	function specialMutationForYears(number) {
	    switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	    }
	}
	function lastNumber(number) {
	    if (number > 9) {
	        return lastNumber(number % 10);
	    }
	    return number;
	}
	function mutation(text, number) {
	    if (number === 2) {
	        return softMutation(text);
	    }
	    return text;
	}
	function softMutation(text) {
	    var mutationTable = {
	        'm': 'v',
	        'b': 'v',
	        'd': 'z'
	    };
	    if (mutationTable[text.charAt(0)] === undefined) {
	        return text;
	    }
	    return mutationTable[text.charAt(0)] + text.substring(1);
	}
	
	var br = moment.defineLocale('br', {
	    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h[e]mm A',
	        LTS : 'h[e]mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [a viz] MMMM YYYY',
	        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	    },
	    calendar : {
	        sameDay : '[Hiziv da] LT',
	        nextDay : '[Warc\'hoazh da] LT',
	        nextWeek : 'dddd [da] LT',
	        lastDay : '[Dec\'h da] LT',
	        lastWeek : 'dddd [paset da] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'a-benn %s',
	        past : '%s \'zo',
	        s : 'un nebeud segondennoù',
	        m : 'ur vunutenn',
	        mm : relativeTimeWithMutation,
	        h : 'un eur',
	        hh : '%d eur',
	        d : 'un devezh',
	        dd : relativeTimeWithMutation,
	        M : 'ur miz',
	        MM : relativeTimeWithMutation,
	        y : 'ur bloaz',
	        yy : specialMutationForYears
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
	    ordinal : function (number) {
	        var output = (number === 1) ? 'añ' : 'vet';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return br;
	
	})));


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}
	
	var bs = moment.defineLocale('bs', {
	    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bs;
	
	})));


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ca = moment.defineLocale('ca', {
	    months : {
	        standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
	        isFormat: /D[oD]?(\s)+MMMM/
	    },
	    monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	    weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : '[el] D MMMM [de] YYYY',
	        ll : 'D MMM YYYY',
	        LLL : '[el] D MMMM [de] YYYY [a les] H:mm',
	        lll : 'D MMM YYYY, H:mm',
	        LLLL : '[el] dddd D MMMM [de] YYYY [a les] H:mm',
	        llll : 'ddd D MMM YYYY, H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextDay : function () {
	            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastDay : function () {
	            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'd\'aquí %s',
	        past : 'fa %s',
	        s : 'uns segons',
	        m : 'un minut',
	        mm : '%d minuts',
	        h : 'una hora',
	        hh : '%d hores',
	        d : 'un dia',
	        dd : '%d dies',
	        M : 'un mes',
	        MM : '%d mesos',
	        y : 'un any',
	        yy : '%d anys'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	    ordinal : function (number, period) {
	        var output = (number === 1) ? 'r' :
	            (number === 2) ? 'n' :
	            (number === 3) ? 'r' :
	            (number === 4) ? 't' : 'è';
	        if (period === 'w' || period === 'W') {
	            output = 'a';
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ca;
	
	})));


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
	var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	    }
	}
	
	var cs = moment.defineLocale('cs', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParse : (function (months, monthsShort) {
	        var i, _monthsParse = [];
	        for (i = 0; i < 12; i++) {
	            // use custom parser to solve problem with July (červenec)
	            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	        }
	        return _monthsParse;
	    }(months, monthsShort)),
	    shortMonthsParse : (function (monthsShort) {
	        var i, _shortMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	        }
	        return _shortMonthsParse;
	    }(monthsShort)),
	    longMonthsParse : (function (months) {
	        var i, _longMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	        }
	        return _longMonthsParse;
	    }(months)),
	    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm',
	        l : 'D. M. YYYY'
	    },
	    calendar : {
	        sameDay: '[dnes v] LT',
	        nextDay: '[zítra v] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	            }
	        },
	        lastDay: '[včera v] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'před %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return cs;
	
	})));


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var cv = moment.defineLocale('cv', {
	    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	    },
	    calendar : {
	        sameDay: '[Паян] LT [сехетре]',
	        nextDay: '[Ыран] LT [сехетре]',
	        lastDay: '[Ӗнер] LT [сехетре]',
	        nextWeek: '[Ҫитес] dddd LT [сехетре]',
	        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (output) {
	            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	            return output + affix;
	        },
	        past : '%s каялла',
	        s : 'пӗр-ик ҫеккунт',
	        m : 'пӗр минут',
	        mm : '%d минут',
	        h : 'пӗр сехет',
	        hh : '%d сехет',
	        d : 'пӗр кун',
	        dd : '%d кун',
	        M : 'пӗр уйӑх',
	        MM : '%d уйӑх',
	        y : 'пӗр ҫул',
	        yy : '%d ҫул'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
	    ordinal : '%d-мӗш',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return cv;
	
	})));


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var cy = moment.defineLocale('cy', {
	    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    // time formats are the same as en-gb
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[Heddiw am] LT',
	        nextDay: '[Yfory am] LT',
	        nextWeek: 'dddd [am] LT',
	        lastDay: '[Ddoe am] LT',
	        lastWeek: 'dddd [diwethaf am] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'mewn %s',
	        past: '%s yn ôl',
	        s: 'ychydig eiliadau',
	        m: 'munud',
	        mm: '%d munud',
	        h: 'awr',
	        hh: '%d awr',
	        d: 'diwrnod',
	        dd: '%d diwrnod',
	        M: 'mis',
	        MM: '%d mis',
	        y: 'blwyddyn',
	        yy: '%d flynedd'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	    ordinal: function (number) {
	        var b = number,
	            output = '',
	            lookup = [
	                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	            ];
	        if (b > 20) {
	            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                output = 'fed'; // not 30ain, 70ain or 90ain
	            } else {
	                output = 'ain';
	            }
	        } else if (b > 0) {
	            output = lookup[b];
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return cy;
	
	})));


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var da = moment.defineLocale('da', {
	    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay : '[i dag kl.] LT',
	        nextDay : '[i morgen kl.] LT',
	        nextWeek : 'på dddd [kl.] LT',
	        lastDay : '[i går kl.] LT',
	        lastWeek : '[i] dddd[s kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'få sekunder',
	        m : 'et minut',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dage',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'et år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return da;
	
	})));


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var deAt = moment.defineLocale('de-at', {
	    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return deAt;
	
	})));


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Switzerland) [de-ch]
	//! author : sschueller : https://github.com/sschueller
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	// based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var deCh = moment.defineLocale('de-ch', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Febr._März_April_Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH.mm',
	        LTS: 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH.mm',
	        LLLL : 'dddd, D. MMMM YYYY HH.mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return deCh;
	
	})));


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var de = moment.defineLocale('de', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return de;
	
	})));


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'ޖެނުއަރީ',
	    'ފެބްރުއަރީ',
	    'މާރިޗު',
	    'އޭޕްރީލު',
	    'މޭ',
	    'ޖޫން',
	    'ޖުލައި',
	    'އޯގަސްޓު',
	    'ސެޕްޓެމްބަރު',
	    'އޮކްޓޯބަރު',
	    'ނޮވެމްބަރު',
	    'ޑިސެމްބަރު'
	];
	var weekdays = [
	    'އާދިއްތަ',
	    'ހޯމަ',
	    'އަންގާރަ',
	    'ބުދަ',
	    'ބުރާސްފަތި',
	    'ހުކުރު',
	    'ހޮނިހިރު'
	];
	
	var dv = moment.defineLocale('dv', {
	    months : months,
	    monthsShort : months,
	    weekdays : weekdays,
	    weekdaysShort : weekdays,
	    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	    longDateFormat : {
	
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/M/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /މކ|މފ/,
	    isPM : function (input) {
	        return 'މފ' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'މކ';
	        } else {
	            return 'މފ';
	        }
	    },
	    calendar : {
	        sameDay : '[މިއަދު] LT',
	        nextDay : '[މާދަމާ] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[އިއްޔެ] LT',
	        lastWeek : '[ފާއިތުވި] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ތެރޭގައި %s',
	        past : 'ކުރިން %s',
	        s : 'ސިކުންތުކޮޅެއް',
	        m : 'މިނިޓެއް',
	        mm : 'މިނިޓު %d',
	        h : 'ގަޑިއިރެއް',
	        hh : 'ގަޑިއިރު %d',
	        d : 'ދުވަހެއް',
	        dd : 'ދުވަސް %d',
	        M : 'މަހެއް',
	        MM : 'މަސް %d',
	        y : 'އަހަރެއް',
	        yy : 'އަހަރު %d'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 7,  // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return dv;
	
	})));


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	
	
	var el = moment.defineLocale('el', {
	    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	    months : function (momentToFormat, format) {
	        if (!momentToFormat) {
	            return this._monthsNominativeEl;
	        } else if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	            return this._monthsGenitiveEl[momentToFormat.month()];
	        } else {
	            return this._monthsNominativeEl[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'μμ' : 'ΜΜ';
	        } else {
	            return isLower ? 'πμ' : 'ΠΜ';
	        }
	    },
	    isPM : function (input) {
	        return ((input + '').toLowerCase()[0] === 'μ');
	    },
	    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendarEl : {
	        sameDay : '[Σήμερα {}] LT',
	        nextDay : '[Αύριο {}] LT',
	        nextWeek : 'dddd [{}] LT',
	        lastDay : '[Χθες {}] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 6:
	                    return '[το προηγούμενο] dddd [{}] LT';
	                default:
	                    return '[την προηγούμενη] dddd [{}] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    calendar : function (key, mom) {
	        var output = this._calendarEl[key],
	            hours = mom && mom.hours();
	        if (isFunction(output)) {
	            output = output.apply(mom);
	        }
	        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	    },
	    relativeTime : {
	        future : 'σε %s',
	        past : '%s πριν',
	        s : 'λίγα δευτερόλεπτα',
	        m : 'ένα λεπτό',
	        mm : '%d λεπτά',
	        h : 'μία ώρα',
	        hh : '%d ώρες',
	        d : 'μία μέρα',
	        dd : '%d μέρες',
	        M : 'ένας μήνας',
	        MM : '%d μήνες',
	        y : 'ένας χρόνος',
	        yy : '%d χρόνια'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}η/,
	    ordinal: '%dη',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4st is the first week of the year.
	    }
	});
	
	return el;
	
	})));


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enAu = moment.defineLocale('en-au', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enAu;
	
	})));


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enCa = moment.defineLocale('en-ca', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'YYYY-MM-DD',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});
	
	return enCa;
	
	})));


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enGb = moment.defineLocale('en-gb', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enGb;
	
	})));


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enIe = moment.defineLocale('en-ie', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enIe;
	
	})));


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enNz = moment.defineLocale('en-nz', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enNz;
	
	})));


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
	//! comment : miestasmia corrected the translation by colindean
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var eo = moment.defineLocale('eo', {
	    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	    weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
	    weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
	    weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D[-a de] MMMM, YYYY',
	        LLL : 'D[-a de] MMMM, YYYY HH:mm',
	        LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
	    },
	    meridiemParse: /[ap]\.t\.m/i,
	    isPM: function (input) {
	        return input.charAt(0).toLowerCase() === 'p';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'p.t.m.' : 'P.T.M.';
	        } else {
	            return isLower ? 'a.t.m.' : 'A.T.M.';
	        }
	    },
	    calendar : {
	        sameDay : '[Hodiaŭ je] LT',
	        nextDay : '[Morgaŭ je] LT',
	        nextWeek : 'dddd [je] LT',
	        lastDay : '[Hieraŭ je] LT',
	        lastWeek : '[pasinta] dddd [je] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'post %s',
	        past : 'antaŭ %s',
	        s : 'sekundoj',
	        m : 'minuto',
	        mm : '%d minutoj',
	        h : 'horo',
	        hh : '%d horoj',
	        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	        dd : '%d tagoj',
	        M : 'monato',
	        MM : '%d monatoj',
	        y : 'jaro',
	        yy : '%d jaroj'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}a/,
	    ordinal : '%da',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return eo;
	
	})));


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	var esDo = moment.defineLocale('es-do', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortDot;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY h:mm A',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return esDo;
	
	})));


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	var es = moment.defineLocale('es', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortDot;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return es;
	
	})));


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	        'm' : ['ühe minuti', 'üks minut'],
	        'mm': [number + ' minuti', number + ' minutit'],
	        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	        'hh': [number + ' tunni', number + ' tundi'],
	        'd' : ['ühe päeva', 'üks päev'],
	        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	        'MM': [number + ' kuu', number + ' kuud'],
	        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	        'yy': [number + ' aasta', number + ' aastat']
	    };
	    if (withoutSuffix) {
	        return format[key][2] ? format[key][2] : format[key][1];
	    }
	    return isFuture ? format[key][0] : format[key][1];
	}
	
	var et = moment.defineLocale('et', {
	    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	    longDateFormat : {
	        LT   : 'H:mm',
	        LTS : 'H:mm:ss',
	        L    : 'DD.MM.YYYY',
	        LL   : 'D. MMMM YYYY',
	        LLL  : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[Täna,] LT',
	        nextDay  : '[Homme,] LT',
	        nextWeek : '[Järgmine] dddd LT',
	        lastDay  : '[Eile,] LT',
	        lastWeek : '[Eelmine] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s pärast',
	        past   : '%s tagasi',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : '%d päeva',
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return et;
	
	})));


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var eu = moment.defineLocale('eu', {
	    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY[ko] MMMM[ren] D[a]',
	        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	        l : 'YYYY-M-D',
	        ll : 'YYYY[ko] MMM D[a]',
	        lll : 'YYYY[ko] MMM D[a] HH:mm',
	        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	    },
	    calendar : {
	        sameDay : '[gaur] LT[etan]',
	        nextDay : '[bihar] LT[etan]',
	        nextWeek : 'dddd LT[etan]',
	        lastDay : '[atzo] LT[etan]',
	        lastWeek : '[aurreko] dddd LT[etan]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s barru',
	        past : 'duela %s',
	        s : 'segundo batzuk',
	        m : 'minutu bat',
	        mm : '%d minutu',
	        h : 'ordu bat',
	        hh : '%d ordu',
	        d : 'egun bat',
	        dd : '%d egun',
	        M : 'hilabete bat',
	        MM : '%d hilabete',
	        y : 'urte bat',
	        yy : '%d urte'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return eu;
	
	})));


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '۱',
	    '2': '۲',
	    '3': '۳',
	    '4': '۴',
	    '5': '۵',
	    '6': '۶',
	    '7': '۷',
	    '8': '۸',
	    '9': '۹',
	    '0': '۰'
	};
	var numberMap = {
	    '۱': '1',
	    '۲': '2',
	    '۳': '3',
	    '۴': '4',
	    '۵': '5',
	    '۶': '6',
	    '۷': '7',
	    '۸': '8',
	    '۹': '9',
	    '۰': '0'
	};
	
	var fa = moment.defineLocale('fa', {
	    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /قبل از ظهر|بعد از ظهر/,
	    isPM: function (input) {
	        return /بعد از ظهر/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'قبل از ظهر';
	        } else {
	            return 'بعد از ظهر';
	        }
	    },
	    calendar : {
	        sameDay : '[امروز ساعت] LT',
	        nextDay : '[فردا ساعت] LT',
	        nextWeek : 'dddd [ساعت] LT',
	        lastDay : '[دیروز ساعت] LT',
	        lastWeek : 'dddd [پیش] [ساعت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'در %s',
	        past : '%s پیش',
	        s : 'چند ثانیه',
	        m : 'یک دقیقه',
	        mm : '%d دقیقه',
	        h : 'یک ساعت',
	        hh : '%d ساعت',
	        d : 'یک روز',
	        dd : '%d روز',
	        M : 'یک ماه',
	        MM : '%d ماه',
	        y : 'یک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/[۰-۹]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}م/,
	    ordinal : '%dم',
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12 // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return fa;
	
	})));


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
	var numbersFuture = [
	        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	        numbersPast[7], numbersPast[8], numbersPast[9]
	    ];
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = '';
	    switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	    }
	    result = verbalNumber(number, isFuture) + ' ' + result;
	    return result;
	}
	function verbalNumber(number, isFuture) {
	    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	}
	
	var fi = moment.defineLocale('fi', {
	    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'Do MMMM[ta] YYYY',
	        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	        l : 'D.M.YYYY',
	        ll : 'Do MMM YYYY',
	        lll : 'Do MMM YYYY, [klo] HH.mm',
	        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	    },
	    calendar : {
	        sameDay : '[tänään] [klo] LT',
	        nextDay : '[huomenna] [klo] LT',
	        nextWeek : 'dddd [klo] LT',
	        lastDay : '[eilen] [klo] LT',
	        lastWeek : '[viime] dddd[na] [klo] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s päästä',
	        past : '%s sitten',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fi;
	
	})));


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var fo = moment.defineLocale('fo', {
	    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D. MMMM, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Í dag kl.] LT',
	        nextDay : '[Í morgin kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[Í gjár kl.] LT',
	        lastWeek : '[síðstu] dddd [kl] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'um %s',
	        past : '%s síðani',
	        s : 'fá sekund',
	        m : 'ein minutt',
	        mm : '%d minuttir',
	        h : 'ein tími',
	        hh : '%d tímar',
	        d : 'ein dagur',
	        dd : '%d dagar',
	        M : 'ein mánaði',
	        MM : '%d mánaðir',
	        y : 'eitt ár',
	        yy : '%d ár'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fo;
	
	})));


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var frCa = moment.defineLocale('fr-ca', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'D':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');
	
	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    }
	});
	
	return frCa;
	
	})));


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var frCh = moment.defineLocale('fr-ch', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'D':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');
	
	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return frCh;
	
	})));


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var fr = moment.defineLocale('fr', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // TODO: Return 'e' when day of month > 1. Move this case inside
	            // block for masculine words below.
	            // See https://github.com/moment/moment/issues/3375
	            case 'D':
	                return number + (number === 1 ? 'er' : '');
	
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');
	
	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fr;
	
	})));


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	var fy = moment.defineLocale('fy', {
	    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[hjoed om] LT',
	        nextDay: '[moarn om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[juster om] LT',
	        lastWeek: '[ôfrûne] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'oer %s',
	        past : '%s lyn',
	        s : 'in pear sekonden',
	        m : 'ien minút',
	        mm : '%d minuten',
	        h : 'ien oere',
	        hh : '%d oeren',
	        d : 'ien dei',
	        dd : '%d dagen',
	        M : 'ien moanne',
	        MM : '%d moannen',
	        y : 'ien jier',
	        yy : '%d jierren'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fy;
	
	})));


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	];
	
	var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];
	
	var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];
	
	var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];
	
	var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	var gd = moment.defineLocale('gd', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParseExact : true,
	    weekdays : weekdays,
	    weekdaysShort : weekdaysShort,
	    weekdaysMin : weekdaysMin,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[An-diugh aig] LT',
	        nextDay : '[A-màireach aig] LT',
	        nextWeek : 'dddd [aig] LT',
	        lastDay : '[An-dè aig] LT',
	        lastWeek : 'dddd [seo chaidh] [aig] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ann an %s',
	        past : 'bho chionn %s',
	        s : 'beagan diogan',
	        m : 'mionaid',
	        mm : '%d mionaidean',
	        h : 'uair',
	        hh : '%d uairean',
	        d : 'latha',
	        dd : '%d latha',
	        M : 'mìos',
	        MM : '%d mìosan',
	        y : 'bliadhna',
	        yy : '%d bliadhna'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
	    ordinal : function (number) {
	        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return gd;
	
	})));


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var gl = moment.defineLocale('gl', {
	    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        lastDay : function () {
	            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	        },
	        lastWeek : function () {
	            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (str) {
	            if (str.indexOf('un') === 0) {
	                return 'n' + str;
	            }
	            return 'en ' + str;
	        },
	        past : 'hai %s',
	        s : 'uns segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'unha hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return gl;
	
	})));


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Konkani Latin script [gom-latn]
	//! author : The Discoverer : https://github.com/WikiDiscoverer
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['thodde secondanim', 'thodde second'],
	        'm': ['eka mintan', 'ek minute'],
	        'mm': [number + ' mintanim', number + ' mintam'],
	        'h': ['eka horan', 'ek hor'],
	        'hh': [number + ' horanim', number + ' hor'],
	        'd': ['eka disan', 'ek dis'],
	        'dd': [number + ' disanim', number + ' dis'],
	        'M': ['eka mhoinean', 'ek mhoino'],
	        'MM': [number + ' mhoineanim', number + ' mhoine'],
	        'y': ['eka vorsan', 'ek voros'],
	        'yy': [number + ' vorsanim', number + ' vorsam']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var gomLatn = moment.defineLocale('gom-latn', {
	    months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
	    monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
	    weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
	    weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'A h:mm [vazta]',
	        LTS : 'A h:mm:ss [vazta]',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY A h:mm [vazta]',
	        LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
	        llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
	    },
	    calendar : {
	        sameDay: '[Aiz] LT',
	        nextDay: '[Faleam] LT',
	        nextWeek: '[Ieta to] dddd[,] LT',
	        lastDay: '[Kal] LT',
	        lastWeek: '[Fatlo] dddd[,] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s',
	        past : '%s adim',
	        s : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}(er)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // the ordinal 'er' only applies to day of the month
	            case 'D':
	                return number + 'er';
	            default:
	            case 'M':
	            case 'Q':
	            case 'DDD':
	            case 'd':
	            case 'w':
	            case 'W':
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    },
	    meridiemParse: /rati|sokalli|donparam|sanje/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'rati') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'sokalli') {
	            return hour;
	        } else if (meridiem === 'donparam') {
	            return hour > 12 ? hour : hour + 12;
	        } else if (meridiem === 'sanje') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'rati';
	        } else if (hour < 12) {
	            return 'sokalli';
	        } else if (hour < 16) {
	            return 'donparam';
	        } else if (hour < 20) {
	            return 'sanje';
	        } else {
	            return 'rati';
	        }
	    }
	});
	
	return gomLatn;
	
	})));


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var he = moment.defineLocale('he', {
	    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [ב]MMMM YYYY',
	        LLL : 'D [ב]MMMM YYYY HH:mm',
	        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	        l : 'D/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[היום ב־]LT',
	        nextDay : '[מחר ב־]LT',
	        nextWeek : 'dddd [בשעה] LT',
	        lastDay : '[אתמול ב־]LT',
	        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'בעוד %s',
	        past : 'לפני %s',
	        s : 'מספר שניות',
	        m : 'דקה',
	        mm : '%d דקות',
	        h : 'שעה',
	        hh : function (number) {
	            if (number === 2) {
	                return 'שעתיים';
	            }
	            return number + ' שעות';
	        },
	        d : 'יום',
	        dd : function (number) {
	            if (number === 2) {
	                return 'יומיים';
	            }
	            return number + ' ימים';
	        },
	        M : 'חודש',
	        MM : function (number) {
	            if (number === 2) {
	                return 'חודשיים';
	            }
	            return number + ' חודשים';
	        },
	        y : 'שנה',
	        yy : function (number) {
	            if (number === 2) {
	                return 'שנתיים';
	            } else if (number % 10 === 0 && number !== 10) {
	                return number + ' שנה';
	            }
	            return number + ' שנים';
	        }
	    },
	    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	    isPM : function (input) {
	        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 5) {
	            return 'לפנות בוקר';
	        } else if (hour < 10) {
	            return 'בבוקר';
	        } else if (hour < 12) {
	            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	        } else if (hour < 18) {
	            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	        } else {
	            return 'בערב';
	        }
	    }
	});
	
	return he;
	
	})));


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	var hi = moment.defineLocale('hi', {
	    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm बजे',
	        LTS : 'A h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[कल] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[कल] LT',
	        lastWeek : '[पिछले] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s में',
	        past : '%s पहले',
	        s : 'कुछ ही क्षण',
	        m : 'एक मिनट',
	        mm : '%d मिनट',
	        h : 'एक घंटा',
	        hh : '%d घंटे',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महीने',
	        MM : '%d महीने',
	        y : 'एक वर्ष',
	        yy : '%d वर्ष'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	    meridiemParse: /रात|सुबह|दोपहर|शाम/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सुबह') {
	            return hour;
	        } else if (meridiem === 'दोपहर') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'शाम') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात';
	        } else if (hour < 10) {
	            return 'सुबह';
	        } else if (hour < 17) {
	            return 'दोपहर';
	        } else if (hour < 20) {
	            return 'शाम';
	        } else {
	            return 'रात';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hi;
	
	})));


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}
	
	var hr = moment.defineLocale('hr', {
	    months : {
	        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	    },
	    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hr;
	
	})));


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	function translate(number, withoutSuffix, key, isFuture) {
	    var num = number,
	        suffix;
	    switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	    }
	    return '';
	}
	function week(isFuture) {
	    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	}
	
	var hu = moment.defineLocale('hu', {
	    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'YYYY.MM.DD.',
	        LL : 'YYYY. MMMM D.',
	        LLL : 'YYYY. MMMM D. H:mm',
	        LLLL : 'YYYY. MMMM D., dddd H:mm'
	    },
	    meridiemParse: /de|du/i,
	    isPM: function (input) {
	        return input.charAt(1).toLowerCase() === 'u';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower === true ? 'de' : 'DE';
	        } else {
	            return isLower === true ? 'du' : 'DU';
	        }
	    },
	    calendar : {
	        sameDay : '[ma] LT[-kor]',
	        nextDay : '[holnap] LT[-kor]',
	        nextWeek : function () {
	            return week.call(this, true);
	        },
	        lastDay : '[tegnap] LT[-kor]',
	        lastWeek : function () {
	            return week.call(this, false);
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s múlva',
	        past : '%s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return hu;
	
	})));


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var hyAm = moment.defineLocale('hy-am', {
	    months : {
	        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	    },
	    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY թ.',
	        LLL : 'D MMMM YYYY թ., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	    },
	    calendar : {
	        sameDay: '[այսօր] LT',
	        nextDay: '[վաղը] LT',
	        lastDay: '[երեկ] LT',
	        nextWeek: function () {
	            return 'dddd [օրը ժամը] LT';
	        },
	        lastWeek: function () {
	            return '[անցած] dddd [օրը ժամը] LT';
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s հետո',
	        past : '%s առաջ',
	        s : 'մի քանի վայրկյան',
	        m : 'րոպե',
	        mm : '%d րոպե',
	        h : 'ժամ',
	        hh : '%d ժամ',
	        d : 'օր',
	        dd : '%d օր',
	        M : 'ամիս',
	        MM : '%d ամիս',
	        y : 'տարի',
	        yy : '%d տարի'
	    },
	    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	    isPM: function (input) {
	        return /^(ցերեկվա|երեկոյան)$/.test(input);
	    },
	    meridiem : function (hour) {
	        if (hour < 4) {
	            return 'գիշերվա';
	        } else if (hour < 12) {
	            return 'առավոտվա';
	        } else if (hour < 17) {
	            return 'ցերեկվա';
	        } else {
	            return 'երեկոյան';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hyAm;
	
	})));


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var id = moment.defineLocale('id', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|siang|sore|malam/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'siang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sore' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'siang';
	        } else if (hours < 19) {
	            return 'sore';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Besok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kemarin pukul] LT',
	        lastWeek : 'dddd [lalu pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lalu',
	        s : 'beberapa detik',
	        m : 'semenit',
	        mm : '%d menit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return id;
	
	})));


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(n) {
	    if (n % 100 === 11) {
	        return true;
	    } else if (n % 10 === 1) {
	        return false;
	    }
	    return true;
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	    }
	}
	
	var is = moment.defineLocale('is', {
	    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	    },
	    calendar : {
	        sameDay : '[í dag kl.] LT',
	        nextDay : '[á morgun kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[í gær kl.] LT',
	        lastWeek : '[síðasta] dddd [kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'eftir %s',
	        past : 'fyrir %s síðan',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : 'klukkustund',
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return is;
	
	})));


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var it = moment.defineLocale('it', {
	    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	    weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
	    weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	    weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Oggi alle] LT',
	        nextDay: '[Domani alle] LT',
	        nextWeek: 'dddd [alle] LT',
	        lastDay: '[Ieri alle] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[la scorsa] dddd [alle] LT';
	                default:
	                    return '[lo scorso] dddd [alle] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	        },
	        past : '%s fa',
	        s : 'alcuni secondi',
	        m : 'un minuto',
	        mm : '%d minuti',
	        h : 'un\'ora',
	        hh : '%d ore',
	        d : 'un giorno',
	        dd : '%d giorni',
	        M : 'un mese',
	        MM : '%d mesi',
	        y : 'un anno',
	        yy : '%d anni'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return it;
	
	})));


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ja = moment.defineLocale('ja', {
	    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日 HH:mm',
	        LLLL : 'YYYY年M月D日 HH:mm dddd',
	        l : 'YYYY/MM/DD',
	        ll : 'YYYY年M月D日',
	        lll : 'YYYY年M月D日 HH:mm',
	        llll : 'YYYY年M月D日 HH:mm dddd'
	    },
	    meridiemParse: /午前|午後/i,
	    isPM : function (input) {
	        return input === '午後';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return '午前';
	        } else {
	            return '午後';
	        }
	    },
	    calendar : {
	        sameDay : '[今日] LT',
	        nextDay : '[明日] LT',
	        nextWeek : '[来週]dddd LT',
	        lastDay : '[昨日] LT',
	        lastWeek : '[前週]dddd LT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}日/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s後',
	        past : '%s前',
	        s : '数秒',
	        m : '1分',
	        mm : '%d分',
	        h : '1時間',
	        hh : '%d時間',
	        d : '1日',
	        dd : '%d日',
	        M : '1ヶ月',
	        MM : '%dヶ月',
	        y : '1年',
	        yy : '%d年'
	    }
	});
	
	return ja;
	
	})));


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var jv = moment.defineLocale('jv', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /enjing|siyang|sonten|ndalu/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'enjing') {
	            return hour;
	        } else if (meridiem === 'siyang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'enjing';
	        } else if (hours < 15) {
	            return 'siyang';
	        } else if (hours < 19) {
	            return 'sonten';
	        } else {
	            return 'ndalu';
	        }
	    },
	    calendar : {
	        sameDay : '[Dinten puniko pukul] LT',
	        nextDay : '[Mbenjang pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kala wingi pukul] LT',
	        lastWeek : 'dddd [kepengker pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'wonten ing %s',
	        past : '%s ingkang kepengker',
	        s : 'sawetawis detik',
	        m : 'setunggal menit',
	        mm : '%d menit',
	        h : 'setunggal jam',
	        hh : '%d jam',
	        d : 'sedinten',
	        dd : '%d dinten',
	        M : 'sewulan',
	        MM : '%d wulan',
	        y : 'setaun',
	        yy : '%d taun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return jv;
	
	})));


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ka = moment.defineLocale('ka', {
	    months : {
	        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	    },
	    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	    weekdays : {
	        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	        isFormat: /(წინა|შემდეგ)/
	    },
	    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[დღეს] LT[-ზე]',
	        nextDay : '[ხვალ] LT[-ზე]',
	        lastDay : '[გუშინ] LT[-ზე]',
	        nextWeek : '[შემდეგ] dddd LT[-ზე]',
	        lastWeek : '[წინა] dddd LT-ზე',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                s.replace(/ი$/, 'ში') :
	                s + 'ში';
	        },
	        past : function (s) {
	            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                return s.replace(/(ი|ე)$/, 'ის უკან');
	            }
	            if ((/წელი/).test(s)) {
	                return s.replace(/წელი$/, 'წლის უკან');
	            }
	        },
	        s : 'რამდენიმე წამი',
	        m : 'წუთი',
	        mm : '%d წუთი',
	        h : 'საათი',
	        hh : '%d საათი',
	        d : 'დღე',
	        dd : '%d დღე',
	        M : 'თვე',
	        MM : '%d თვე',
	        y : 'წელი',
	        yy : '%d წელი'
	    },
	    dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	    ordinal : function (number) {
	        if (number === 0) {
	            return number;
	        }
	        if (number === 1) {
	            return number + '-ლი';
	        }
	        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	            return 'მე-' + number;
	        }
	        return number + '-ე';
	    },
	    week : {
	        dow : 1,
	        doy : 7
	    }
	});
	
	return ka;
	
	})));


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    0: '-ші',
	    1: '-ші',
	    2: '-ші',
	    3: '-ші',
	    4: '-ші',
	    5: '-ші',
	    6: '-шы',
	    7: '-ші',
	    8: '-ші',
	    9: '-шы',
	    10: '-шы',
	    20: '-шы',
	    30: '-шы',
	    40: '-шы',
	    50: '-ші',
	    60: '-шы',
	    70: '-ші',
	    80: '-ші',
	    90: '-шы',
	    100: '-ші'
	};
	
	var kk = moment.defineLocale('kk', {
	    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгін сағат] LT',
	        nextDay : '[Ертең сағат] LT',
	        nextWeek : 'dddd [сағат] LT',
	        lastDay : '[Кеше сағат] LT',
	        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ішінде',
	        past : '%s бұрын',
	        s : 'бірнеше секунд',
	        m : 'бір минут',
	        mm : '%d минут',
	        h : 'бір сағат',
	        hh : '%d сағат',
	        d : 'бір күн',
	        dd : '%d күн',
	        M : 'бір ай',
	        MM : '%d ай',
	        y : 'бір жыл',
	        yy : '%d жыл'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return kk;
	
	})));


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var km = moment.defineLocale('km', {
	    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	        nextDay: '[ស្អែក ម៉ោង] LT',
	        nextWeek: 'dddd [ម៉ោង] LT',
	        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: '%sទៀត',
	        past: '%sមុន',
	        s: 'ប៉ុន្មានវិនាទី',
	        m: 'មួយនាទី',
	        mm: '%d នាទី',
	        h: 'មួយម៉ោង',
	        hh: '%d ម៉ោង',
	        d: 'មួយថ្ងៃ',
	        dd: '%d ថ្ងៃ',
	        M: 'មួយខែ',
	        MM: '%d ខែ',
	        y: 'មួយឆ្នាំ',
	        yy: '%d ឆ្នាំ'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return km;
	
	})));


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kannada [kn]
	//! author : Rajeev Naik : https://github.com/rajeevnaikte
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '೧',
	    '2': '೨',
	    '3': '೩',
	    '4': '೪',
	    '5': '೫',
	    '6': '೬',
	    '7': '೭',
	    '8': '೮',
	    '9': '೯',
	    '0': '೦'
	};
	var numberMap = {
	    '೧': '1',
	    '೨': '2',
	    '೩': '3',
	    '೪': '4',
	    '೫': '5',
	    '೬': '6',
	    '೭': '7',
	    '೮': '8',
	    '೯': '9',
	    '೦': '0'
	};
	
	var kn = moment.defineLocale('kn', {
	    months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
	    monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
	    weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
	    weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[ಇಂದು] LT',
	        nextDay : '[ನಾಳೆ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ನಿನ್ನೆ] LT',
	        lastWeek : '[ಕೊನೆಯ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ನಂತರ',
	        past : '%s ಹಿಂದೆ',
	        s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
	        m : 'ಒಂದು ನಿಮಿಷ',
	        mm : '%d ನಿಮಿಷ',
	        h : 'ಒಂದು ಗಂಟೆ',
	        hh : '%d ಗಂಟೆ',
	        d : 'ಒಂದು ದಿನ',
	        dd : '%d ದಿನ',
	        M : 'ಒಂದು ತಿಂಗಳು',
	        MM : '%d ತಿಂಗಳು',
	        y : 'ಒಂದು ವರ್ಷ',
	        yy : '%d ವರ್ಷ'
	    },
	    preparse: function (string) {
	        return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ರಾತ್ರಿ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
	            return hour;
	        } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ಸಂಜೆ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ರಾತ್ರಿ';
	        } else if (hour < 10) {
	            return 'ಬೆಳಿಗ್ಗೆ';
	        } else if (hour < 17) {
	            return 'ಮಧ್ಯಾಹ್ನ';
	        } else if (hour < 20) {
	            return 'ಸಂಜೆ';
	        } else {
	            return 'ರಾತ್ರಿ';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
	    ordinal : function (number) {
	        return number + 'ನೇ';
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return kn;
	
	})));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ko = moment.defineLocale('ko', {
	    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'YYYY.MM.DD',
	        LL : 'YYYY년 MMMM D일',
	        LLL : 'YYYY년 MMMM D일 A h:mm',
	        LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
	        l : 'YYYY.MM.DD',
	        ll : 'YYYY년 MMMM D일',
	        lll : 'YYYY년 MMMM D일 A h:mm',
	        llll : 'YYYY년 MMMM D일 dddd A h:mm'
	    },
	    calendar : {
	        sameDay : '오늘 LT',
	        nextDay : '내일 LT',
	        nextWeek : 'dddd LT',
	        lastDay : '어제 LT',
	        lastWeek : '지난주 dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s 후',
	        past : '%s 전',
	        s : '몇 초',
	        ss : '%d초',
	        m : '1분',
	        mm : '%d분',
	        h : '한 시간',
	        hh : '%d시간',
	        d : '하루',
	        dd : '%d일',
	        M : '한 달',
	        MM : '%d달',
	        y : '일 년',
	        yy : '%d년'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}일/,
	    ordinal : '%d일',
	    meridiemParse : /오전|오후/,
	    isPM : function (token) {
	        return token === '오후';
	    },
	    meridiem : function (hour, minute, isUpper) {
	        return hour < 12 ? '오전' : '오후';
	    }
	});
	
	return ko;
	
	})));


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var suffixes = {
	    0: '-чү',
	    1: '-чи',
	    2: '-чи',
	    3: '-чү',
	    4: '-чү',
	    5: '-чи',
	    6: '-чы',
	    7: '-чи',
	    8: '-чи',
	    9: '-чу',
	    10: '-чу',
	    20: '-чы',
	    30: '-чу',
	    40: '-чы',
	    50: '-чү',
	    60: '-чы',
	    70: '-чи',
	    80: '-чи',
	    90: '-чу',
	    100: '-чү'
	};
	
	var ky = moment.defineLocale('ky', {
	    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгүн саат] LT',
	        nextDay : '[Эртең саат] LT',
	        nextWeek : 'dddd [саат] LT',
	        lastDay : '[Кече саат] LT',
	        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ичинде',
	        past : '%s мурун',
	        s : 'бирнече секунд',
	        m : 'бир мүнөт',
	        mm : '%d мүнөт',
	        h : 'бир саат',
	        hh : '%d саат',
	        d : 'бир күн',
	        dd : '%d күн',
	        M : 'бир ай',
	        MM : '%d ай',
	        y : 'бир жыл',
	        yy : '%d жыл'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ky;
	
	})));


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eng Minutt', 'enger Minutt'],
	        'h': ['eng Stonn', 'enger Stonn'],
	        'd': ['een Dag', 'engem Dag'],
	        'M': ['ee Mount', 'engem Mount'],
	        'y': ['ee Joer', 'engem Joer']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	function processFutureTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'a ' + string;
	    }
	    return 'an ' + string;
	}
	function processPastTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'viru ' + string;
	    }
	    return 'virun ' + string;
	}
	/**
	 * Returns true if the word before the given number loses the '-n' ending.
	 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	 *
	 * @param number {integer}
	 * @returns {boolean}
	 */
	function eifelerRegelAppliesToNumber(number) {
	    number = parseInt(number, 10);
	    if (isNaN(number)) {
	        return false;
	    }
	    if (number < 0) {
	        // Negative Number --> always true
	        return true;
	    } else if (number < 10) {
	        // Only 1 digit
	        if (4 <= number && number <= 7) {
	            return true;
	        }
	        return false;
	    } else if (number < 100) {
	        // 2 digits
	        var lastDigit = number % 10, firstDigit = number / 10;
	        if (lastDigit === 0) {
	            return eifelerRegelAppliesToNumber(firstDigit);
	        }
	        return eifelerRegelAppliesToNumber(lastDigit);
	    } else if (number < 10000) {
	        // 3 or 4 digits --> recursively check first digit
	        while (number >= 10) {
	            number = number / 10;
	        }
	        return eifelerRegelAppliesToNumber(number);
	    } else {
	        // Anything larger than 4 digits: recursively check first n-3 digits
	        number = number / 1000;
	        return eifelerRegelAppliesToNumber(number);
	    }
	}
	
	var lb = moment.defineLocale('lb', {
	    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm [Auer]',
	        LTS: 'H:mm:ss [Auer]',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm [Auer]',
	        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	    },
	    calendar: {
	        sameDay: '[Haut um] LT',
	        sameElse: 'L',
	        nextDay: '[Muer um] LT',
	        nextWeek: 'dddd [um] LT',
	        lastDay: '[Gëschter um] LT',
	        lastWeek: function () {
	            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	            switch (this.day()) {
	                case 2:
	                case 4:
	                    return '[Leschten] dddd [um] LT';
	                default:
	                    return '[Leschte] dddd [um] LT';
	            }
	        }
	    },
	    relativeTime : {
	        future : processFutureTime,
	        past : processPastTime,
	        s : 'e puer Sekonnen',
	        m : processRelativeTime,
	        mm : '%d Minutten',
	        h : processRelativeTime,
	        hh : '%d Stonnen',
	        d : processRelativeTime,
	        dd : '%d Deeg',
	        M : processRelativeTime,
	        MM : '%d Méint',
	        y : processRelativeTime,
	        yy : '%d Joer'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal: '%d.',
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lb;
	
	})));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var lo = moment.defineLocale('lo', {
	    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	    isPM: function (input) {
	        return input === 'ຕອນແລງ';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ຕອນເຊົ້າ';
	        } else {
	            return 'ຕອນແລງ';
	        }
	    },
	    calendar : {
	        sameDay : '[ມື້ນີ້ເວລາ] LT',
	        nextDay : '[ມື້ອື່ນເວລາ] LT',
	        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ອີກ %s',
	        past : '%sຜ່ານມາ',
	        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	        m : '1 ນາທີ',
	        mm : '%d ນາທີ',
	        h : '1 ຊົ່ວໂມງ',
	        hh : '%d ຊົ່ວໂມງ',
	        d : '1 ມື້',
	        dd : '%d ມື້',
	        M : '1 ເດືອນ',
	        MM : '%d ເດືອນ',
	        y : '1 ປີ',
	        yy : '%d ປີ'
	    },
	    dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
	    ordinal : function (number) {
	        return 'ທີ່' + number;
	    }
	});
	
	return lo;
	
	})));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var units = {
	    'm' : 'minutė_minutės_minutę',
	    'mm': 'minutės_minučių_minutes',
	    'h' : 'valanda_valandos_valandą',
	    'hh': 'valandos_valandų_valandas',
	    'd' : 'diena_dienos_dieną',
	    'dd': 'dienos_dienų_dienas',
	    'M' : 'mėnuo_mėnesio_mėnesį',
	    'MM': 'mėnesiai_mėnesių_mėnesius',
	    'y' : 'metai_metų_metus',
	    'yy': 'metai_metų_metus'
	};
	function translateSeconds(number, withoutSuffix, key, isFuture) {
	    if (withoutSuffix) {
	        return 'kelios sekundės';
	    } else {
	        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	    }
	}
	function translateSingular(number, withoutSuffix, key, isFuture) {
	    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	}
	function special(number) {
	    return number % 10 === 0 || (number > 10 && number < 20);
	}
	function forms(key) {
	    return units[key].split('_');
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    if (number === 1) {
	        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	    } else if (withoutSuffix) {
	        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	    } else {
	        if (isFuture) {
	            return result + forms(key)[1];
	        } else {
	            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	        }
	    }
	}
	var lt = moment.defineLocale('lt', {
	    months : {
	        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
	    },
	    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	    weekdays : {
	        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	        isFormat: /dddd HH:mm/
	    },
	    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY [m.] MMMM D [d.]',
	        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	        l : 'YYYY-MM-DD',
	        ll : 'YYYY [m.] MMMM D [d.]',
	        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	    },
	    calendar : {
	        sameDay : '[Šiandien] LT',
	        nextDay : '[Rytoj] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[Vakar] LT',
	        lastWeek : '[Praėjusį] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'po %s',
	        past : 'prieš %s',
	        s : translateSeconds,
	        m : translateSingular,
	        mm : translate,
	        h : translateSingular,
	        hh : translate,
	        d : translateSingular,
	        dd : translate,
	        M : translateSingular,
	        MM : translate,
	        y : translateSingular,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-oji/,
	    ordinal : function (number) {
	        return number + '-oji';
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lt;
	
	})));


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var units = {
	    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'h': 'stundas_stundām_stunda_stundas'.split('_'),
	    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	    'd': 'dienas_dienām_diena_dienas'.split('_'),
	    'dd': 'dienas_dienām_diena_dienas'.split('_'),
	    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'y': 'gada_gadiem_gads_gadi'.split('_'),
	    'yy': 'gada_gadiem_gads_gadi'.split('_')
	};
	/**
	 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	 */
	function format(forms, number, withoutSuffix) {
	    if (withoutSuffix) {
	        // E.g. "21 minūte", "3 minūtes".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	    } else {
	        // E.g. "21 minūtes" as in "pēc 21 minūtes".
	        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	    }
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    return number + ' ' + format(units[key], number, withoutSuffix);
	}
	function relativeTimeWithSingular(number, withoutSuffix, key) {
	    return format(units[key], number, withoutSuffix);
	}
	function relativeSeconds(number, withoutSuffix) {
	    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	}
	
	var lv = moment.defineLocale('lv', {
	    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY.',
	        LL : 'YYYY. [gada] D. MMMM',
	        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	    },
	    calendar : {
	        sameDay : '[Šodien pulksten] LT',
	        nextDay : '[Rīt pulksten] LT',
	        nextWeek : 'dddd [pulksten] LT',
	        lastDay : '[Vakar pulksten] LT',
	        lastWeek : '[Pagājušā] dddd [pulksten] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'pēc %s',
	        past : 'pirms %s',
	        s : relativeSeconds,
	        m : relativeTimeWithSingular,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithSingular,
	        hh : relativeTimeWithPlural,
	        d : relativeTimeWithSingular,
	        dd : relativeTimeWithPlural,
	        M : relativeTimeWithSingular,
	        MM : relativeTimeWithPlural,
	        y : relativeTimeWithSingular,
	        yy : relativeTimeWithPlural
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lv;
	
	})));


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jednog minuta'],
	        mm: ['minut', 'minuta', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mjesec', 'mjeseca', 'mjeseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var me = moment.defineLocale('me', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sjutra u] LT',
	
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedjelje] [u] LT',
	                '[prošlog] [ponedjeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srijede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mjesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return me;
	
	})));


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var mi = moment.defineLocale('mi', {
	    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY [i] HH:mm',
	        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	    },
	    calendar: {
	        sameDay: '[i teie mahana, i] LT',
	        nextDay: '[apopo i] LT',
	        nextWeek: 'dddd [i] LT',
	        lastDay: '[inanahi i] LT',
	        lastWeek: 'dddd [whakamutunga i] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'i roto i %s',
	        past: '%s i mua',
	        s: 'te hēkona ruarua',
	        m: 'he meneti',
	        mm: '%d meneti',
	        h: 'te haora',
	        hh: '%d haora',
	        d: 'he ra',
	        dd: '%d ra',
	        M: 'he marama',
	        MM: '%d marama',
	        y: 'he tau',
	        yy: '%d tau'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return mi;
	
	})));


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var mk = moment.defineLocale('mk', {
	    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Денес во] LT',
	        nextDay : '[Утре во] LT',
	        nextWeek : '[Во] dddd [во] LT',
	        lastDay : '[Вчера во] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Изминатиот] dddd [во] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'после %s',
	        past : 'пред %s',
	        s : 'неколку секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дена',
	        M : 'месец',
	        MM : '%d месеци',
	        y : 'година',
	        yy : '%d години'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return mk;
	
	})));


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ml = moment.defineLocale('ml', {
	    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm -നു',
	        LTS : 'A h:mm:ss -നു',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm -നു',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	    },
	    calendar : {
	        sameDay : '[ഇന്ന്] LT',
	        nextDay : '[നാളെ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ഇന്നലെ] LT',
	        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s കഴിഞ്ഞ്',
	        past : '%s മുൻപ്',
	        s : 'അൽപ നിമിഷങ്ങൾ',
	        m : 'ഒരു മിനിറ്റ്',
	        mm : '%d മിനിറ്റ്',
	        h : 'ഒരു മണിക്കൂർ',
	        hh : '%d മണിക്കൂർ',
	        d : 'ഒരു ദിവസം',
	        dd : '%d ദിവസം',
	        M : 'ഒരു മാസം',
	        MM : '%d മാസം',
	        y : 'ഒരു വർഷം',
	        yy : '%d വർഷം'
	    },
	    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                meridiem === 'വൈകുന്നേരം') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'രാത്രി';
	        } else if (hour < 12) {
	            return 'രാവിലെ';
	        } else if (hour < 17) {
	            return 'ഉച്ച കഴിഞ്ഞ്';
	        } else if (hour < 20) {
	            return 'വൈകുന്നേരം';
	        } else {
	            return 'രാത്രി';
	        }
	    }
	});
	
	return ml;
	
	})));


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	function relativeTimeMr(number, withoutSuffix, string, isFuture)
	{
	    var output = '';
	    if (withoutSuffix) {
	        switch (string) {
	            case 's': output = 'काही सेकंद'; break;
	            case 'm': output = 'एक मिनिट'; break;
	            case 'mm': output = '%d मिनिटे'; break;
	            case 'h': output = 'एक तास'; break;
	            case 'hh': output = '%d तास'; break;
	            case 'd': output = 'एक दिवस'; break;
	            case 'dd': output = '%d दिवस'; break;
	            case 'M': output = 'एक महिना'; break;
	            case 'MM': output = '%d महिने'; break;
	            case 'y': output = 'एक वर्ष'; break;
	            case 'yy': output = '%d वर्षे'; break;
	        }
	    }
	    else {
	        switch (string) {
	            case 's': output = 'काही सेकंदां'; break;
	            case 'm': output = 'एका मिनिटा'; break;
	            case 'mm': output = '%d मिनिटां'; break;
	            case 'h': output = 'एका तासा'; break;
	            case 'hh': output = '%d तासां'; break;
	            case 'd': output = 'एका दिवसा'; break;
	            case 'dd': output = '%d दिवसां'; break;
	            case 'M': output = 'एका महिन्या'; break;
	            case 'MM': output = '%d महिन्यां'; break;
	            case 'y': output = 'एका वर्षा'; break;
	            case 'yy': output = '%d वर्षां'; break;
	        }
	    }
	    return output.replace(/%d/i, number);
	}
	
	var mr = moment.defineLocale('mr', {
	    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm वाजता',
	        LTS : 'A h:mm:ss वाजता',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm वाजता',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[उद्या] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[काल] LT',
	        lastWeek: '[मागील] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future: '%sमध्ये',
	        past: '%sपूर्वी',
	        s: relativeTimeMr,
	        m: relativeTimeMr,
	        mm: relativeTimeMr,
	        h: relativeTimeMr,
	        hh: relativeTimeMr,
	        d: relativeTimeMr,
	        dd: relativeTimeMr,
	        M: relativeTimeMr,
	        MM: relativeTimeMr,
	        y: relativeTimeMr,
	        yy: relativeTimeMr
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात्री') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सकाळी') {
	            return hour;
	        } else if (meridiem === 'दुपारी') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'सायंकाळी') {
	            return hour + 12;
	        }
	    },
	    meridiem: function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात्री';
	        } else if (hour < 10) {
	            return 'सकाळी';
	        } else if (hour < 17) {
	            return 'दुपारी';
	        } else if (hour < 20) {
	            return 'सायंकाळी';
	        } else {
	            return 'रात्री';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return mr;
	
	})));


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var msMy = moment.defineLocale('ms-my', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return msMy;
	
	})));


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ms = moment.defineLocale('ms', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ms;
	
	})));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '၁',
	    '2': '၂',
	    '3': '၃',
	    '4': '၄',
	    '5': '၅',
	    '6': '၆',
	    '7': '၇',
	    '8': '၈',
	    '9': '၉',
	    '0': '၀'
	};
	var numberMap = {
	    '၁': '1',
	    '၂': '2',
	    '၃': '3',
	    '၄': '4',
	    '၅': '5',
	    '၆': '6',
	    '၇': '7',
	    '၈': '8',
	    '၉': '9',
	    '၀': '0'
	};
	
	var my = moment.defineLocale('my', {
	    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ယနေ.] LT [မှာ]',
	        nextDay: '[မနက်ဖြန်] LT [မှာ]',
	        nextWeek: 'dddd LT [မှာ]',
	        lastDay: '[မနေ.က] LT [မှာ]',
	        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'လာမည့် %s မှာ',
	        past: 'လွန်ခဲ့သော %s က',
	        s: 'စက္ကန်.အနည်းငယ်',
	        m: 'တစ်မိနစ်',
	        mm: '%d မိနစ်',
	        h: 'တစ်နာရီ',
	        hh: '%d နာရီ',
	        d: 'တစ်ရက်',
	        dd: '%d ရက်',
	        M: 'တစ်လ',
	        MM: '%d လ',
	        y: 'တစ်နှစ်',
	        yy: '%d နှစ်'
	    },
	    preparse: function (string) {
	        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return my;
	
	})));


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var nb = moment.defineLocale('nb', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[i dag kl.] LT',
	        nextDay: '[i morgen kl.] LT',
	        nextWeek: 'dddd [kl.] LT',
	        lastDay: '[i går kl.] LT',
	        lastWeek: '[forrige] dddd [kl.] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'noen sekunder',
	        m : 'ett minutt',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dager',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nb;
	
	})));


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	var ne = moment.defineLocale('ne', {
	    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'Aको h:mm बजे',
	        LTS : 'Aको h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, Aको h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'राति') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'बिहान') {
	            return hour;
	        } else if (meridiem === 'दिउँसो') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'साँझ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 3) {
	            return 'राति';
	        } else if (hour < 12) {
	            return 'बिहान';
	        } else if (hour < 16) {
	            return 'दिउँसो';
	        } else if (hour < 20) {
	            return 'साँझ';
	        } else {
	            return 'राति';
	        }
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[भोलि] LT',
	        nextWeek : '[आउँदो] dddd[,] LT',
	        lastDay : '[हिजो] LT',
	        lastWeek : '[गएको] dddd[,] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sमा',
	        past : '%s अगाडि',
	        s : 'केही क्षण',
	        m : 'एक मिनेट',
	        mm : '%d मिनेट',
	        h : 'एक घण्टा',
	        hh : '%d घण्टा',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महिना',
	        MM : '%d महिना',
	        y : 'एक बर्ष',
	        yy : '%d बर्ष'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ne;
	
	})));


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	var nlBe = moment.defineLocale('nl-be', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	
	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nlBe;
	
	})));


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	var nl = moment.defineLocale('nl', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	
	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nl;
	
	})));


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var nn = moment.defineLocale('nn', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[I dag klokka] LT',
	        nextDay: '[I morgon klokka] LT',
	        nextWeek: 'dddd [klokka] LT',
	        lastDay: '[I går klokka] LT',
	        lastWeek: '[Føregåande] dddd [klokka] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s sidan',
	        s : 'nokre sekund',
	        m : 'eit minutt',
	        mm : '%d minutt',
	        h : 'ein time',
	        hh : '%d timar',
	        d : 'ein dag',
	        dd : '%d dagar',
	        M : 'ein månad',
	        MM : '%d månader',
	        y : 'eit år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nn;
	
	})));


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '੧',
	    '2': '੨',
	    '3': '੩',
	    '4': '੪',
	    '5': '੫',
	    '6': '੬',
	    '7': '੭',
	    '8': '੮',
	    '9': '੯',
	    '0': '੦'
	};
	var numberMap = {
	    '੧': '1',
	    '੨': '2',
	    '੩': '3',
	    '੪': '4',
	    '੫': '5',
	    '੬': '6',
	    '੭': '7',
	    '੮': '8',
	    '੯': '9',
	    '੦': '0'
	};
	
	var paIn = moment.defineLocale('pa-in', {
	    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm ਵਜੇ',
	        LTS : 'A h:mm:ss ਵਜੇ',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	    },
	    calendar : {
	        sameDay : '[ਅਜ] LT',
	        nextDay : '[ਕਲ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ਕਲ] LT',
	        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ਵਿੱਚ',
	        past : '%s ਪਿਛਲੇ',
	        s : 'ਕੁਝ ਸਕਿੰਟ',
	        m : 'ਇਕ ਮਿੰਟ',
	        mm : '%d ਮਿੰਟ',
	        h : 'ਇੱਕ ਘੰਟਾ',
	        hh : '%d ਘੰਟੇ',
	        d : 'ਇੱਕ ਦਿਨ',
	        dd : '%d ਦਿਨ',
	        M : 'ਇੱਕ ਮਹੀਨਾ',
	        MM : '%d ਮਹੀਨੇ',
	        y : 'ਇੱਕ ਸਾਲ',
	        yy : '%d ਸਾਲ'
	    },
	    preparse: function (string) {
	        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ਰਾਤ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ਸਵੇਰ') {
	            return hour;
	        } else if (meridiem === 'ਦੁਪਹਿਰ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ਸ਼ਾਮ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ਰਾਤ';
	        } else if (hour < 10) {
	            return 'ਸਵੇਰ';
	        } else if (hour < 17) {
	            return 'ਦੁਪਹਿਰ';
	        } else if (hour < 20) {
	            return 'ਸ਼ਾਮ';
	        } else {
	            return 'ਰਾਤ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return paIn;
	
	})));


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
	var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	function plural(n) {
	    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	}
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	    }
	}
	
	var pl = moment.defineLocale('pl', {
	    months : function (momentToFormat, format) {
	        if (!momentToFormat) {
	            return monthsNominative;
	        } else if (format === '') {
	            // Hack: if format empty we know this is used to generate
	            // RegExp by moment. Give then back both valid forms of months
	            // in RegExp ready format.
	            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	        } else if (/D MMMM/.test(format)) {
	            return monthsSubjective[momentToFormat.month()];
	        } else {
	            return monthsNominative[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Dziś o] LT',
	        nextDay: '[Jutro o] LT',
	        nextWeek: '[W] dddd [o] LT',
	        lastDay: '[Wczoraj o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : '%s temu',
	        s : 'kilka sekund',
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : '1 dzień',
	        dd : '%d dni',
	        M : 'miesiąc',
	        MM : translate,
	        y : 'rok',
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return pl;
	
	})));


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ptBr = moment.defineLocale('pt-br', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : '%s atrás',
	        s : 'poucos segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal : '%dº'
	});
	
	return ptBr;
	
	})));


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var pt = moment.defineLocale('pt', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : 'há %s',
	        s : 'segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return pt;
	
	})));


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	            'mm': 'minute',
	            'hh': 'ore',
	            'dd': 'zile',
	            'MM': 'luni',
	            'yy': 'ani'
	        },
	        separator = ' ';
	    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	        separator = ' de ';
	    }
	    return number + separator + format[key];
	}
	
	var ro = moment.defineLocale('ro', {
	    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[azi la] LT',
	        nextDay: '[mâine la] LT',
	        nextWeek: 'dddd [la] LT',
	        lastDay: '[ieri la] LT',
	        lastWeek: '[fosta] dddd [la] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'peste %s',
	        past : '%s în urmă',
	        s : 'câteva secunde',
	        m : 'un minut',
	        mm : relativeTimeWithPlural,
	        h : 'o oră',
	        hh : relativeTimeWithPlural,
	        d : 'o zi',
	        dd : relativeTimeWithPlural,
	        M : 'o lună',
	        MM : relativeTimeWithPlural,
	        y : 'un an',
	        yy : relativeTimeWithPlural
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ro;
	
	})));


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	        'hh': 'час_часа_часов',
	        'dd': 'день_дня_дней',
	        'MM': 'месяц_месяца_месяцев',
	        'yy': 'год_года_лет'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'минута' : 'минуту';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
	
	// http://new.gramota.ru/spravka/rules/139-prop : § 103
	// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	var ru = moment.defineLocale('ru', {
	    months : {
	        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	    },
	    monthsShort : {
	        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	    },
	    weekdays : {
	        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	    },
	    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	    // копия предыдущего
	    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	    // полные названия с падежами
	    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
	
	    // Выражение, которое соотвествует только сокращённым формам
	    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сегодня в] LT',
	        nextDay: '[Завтра в] LT',
	        lastDay: '[Вчера в] LT',
	        nextWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В следующее] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В следующий] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В следующую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        lastWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'через %s',
	        past : '%s назад',
	        s : 'несколько секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'час',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночи|утра|дня|вечера/i,
	    isPM : function (input) {
	        return /^(дня|вечера)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночи';
	        } else if (hour < 12) {
	            return 'утра';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечера';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ru;
	
	})));


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sindhi [sd]
	//! author : Narain Sagar : https://github.com/narainsagar
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'جنوري',
	    'فيبروري',
	    'مارچ',
	    'اپريل',
	    'مئي',
	    'جون',
	    'جولاءِ',
	    'آگسٽ',
	    'سيپٽمبر',
	    'آڪٽوبر',
	    'نومبر',
	    'ڊسمبر'
	];
	var days = [
	    'آچر',
	    'سومر',
	    'اڱارو',
	    'اربع',
	    'خميس',
	    'جمع',
	    'ڇنڇر'
	];
	
	var sd = moment.defineLocale('sd', {
	    months : months,
	    monthsShort : months,
	    weekdays : days,
	    weekdaysShort : days,
	    weekdaysMin : days,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd، D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /صبح|شام/,
	    isPM : function (input) {
	        return 'شام' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'صبح';
	        }
	        return 'شام';
	    },
	    calendar : {
	        sameDay : '[اڄ] LT',
	        nextDay : '[سڀاڻي] LT',
	        nextWeek : 'dddd [اڳين هفتي تي] LT',
	        lastDay : '[ڪالهه] LT',
	        lastWeek : '[گزريل هفتي] dddd [تي] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s پوء',
	        past : '%s اڳ',
	        s : 'چند سيڪنڊ',
	        m : 'هڪ منٽ',
	        mm : '%d منٽ',
	        h : 'هڪ ڪلاڪ',
	        hh : '%d ڪلاڪ',
	        d : 'هڪ ڏينهن',
	        dd : '%d ڏينهن',
	        M : 'هڪ مهينو',
	        MM : '%d مهينا',
	        y : 'هڪ سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sd;
	
	})));


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var se = moment.defineLocale('se', {
	    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'MMMM D. [b.] YYYY',
	        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[otne ti] LT',
	        nextDay: '[ihttin ti] LT',
	        nextWeek: 'dddd [ti] LT',
	        lastDay: '[ikte ti] LT',
	        lastWeek: '[ovddit] dddd [ti] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s geažes',
	        past : 'maŋit %s',
	        s : 'moadde sekunddat',
	        m : 'okta minuhta',
	        mm : '%d minuhtat',
	        h : 'okta diimmu',
	        hh : '%d diimmut',
	        d : 'okta beaivi',
	        dd : '%d beaivvit',
	        M : 'okta mánnu',
	        MM : '%d mánut',
	        y : 'okta jahki',
	        yy : '%d jagit'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return se;
	
	})));


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	/*jshint -W100*/
	var si = moment.defineLocale('si', {
	    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'a h:mm',
	        LTS : 'a h:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY MMMM D',
	        LLL : 'YYYY MMMM D, a h:mm',
	        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	    },
	    calendar : {
	        sameDay : '[අද] LT[ට]',
	        nextDay : '[හෙට] LT[ට]',
	        nextWeek : 'dddd LT[ට]',
	        lastDay : '[ඊයේ] LT[ට]',
	        lastWeek : '[පසුගිය] dddd LT[ට]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sකින්',
	        past : '%sකට පෙර',
	        s : 'තත්පර කිහිපය',
	        m : 'මිනිත්තුව',
	        mm : 'මිනිත්තු %d',
	        h : 'පැය',
	        hh : 'පැය %d',
	        d : 'දිනය',
	        dd : 'දින %d',
	        M : 'මාසය',
	        MM : 'මාස %d',
	        y : 'වසර',
	        yy : 'වසර %d'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
	    ordinal : function (number) {
	        return number + ' වැනි';
	    },
	    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	    isPM : function (input) {
	        return input === 'ප.ව.' || input === 'පස් වරු';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'ප.ව.' : 'පස් වරු';
	        } else {
	            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	        }
	    }
	});
	
	return si;
	
	})));


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
	var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	    }
	}
	
	var sk = moment.defineLocale('sk', {
	    months : months,
	    monthsShort : monthsShort,
	    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[dnes o] LT',
	        nextDay: '[zajtra o] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	            }
	        },
	        lastDay: '[včera o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'pred %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sk;
	
	})));


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	    }
	}
	
	var sl = moment.defineLocale('sl', {
	    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danes ob] LT',
	        nextDay  : '[jutri ob] LT',
	
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	            }
	        },
	        lastDay  : '[včeraj ob] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'čez %s',
	        past   : 'pred %s',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : processRelativeTime,
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sl;
	
	})));


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sq = moment.defineLocale('sq', {
	    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /PD|MD/,
	    isPM: function (input) {
	        return input.charAt(0) === 'M';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        return hours < 12 ? 'PD' : 'MD';
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Sot në] LT',
	        nextDay : '[Nesër në] LT',
	        nextWeek : 'dddd [në] LT',
	        lastDay : '[Dje në] LT',
	        lastWeek : 'dddd [e kaluar në] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'në %s',
	        past : '%s më parë',
	        s : 'disa sekonda',
	        m : 'një minutë',
	        mm : '%d minuta',
	        h : 'një orë',
	        hh : '%d orë',
	        d : 'një ditë',
	        dd : '%d ditë',
	        M : 'një muaj',
	        MM : '%d muaj',
	        y : 'një vit',
	        yy : '%d vite'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sq;
	
	})));


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        m: ['један минут', 'једне минуте'],
	        mm: ['минут', 'минуте', 'минута'],
	        h: ['један сат', 'једног сата'],
	        hh: ['сат', 'сата', 'сати'],
	        dd: ['дан', 'дана', 'дана'],
	        MM: ['месец', 'месеца', 'месеци'],
	        yy: ['година', 'године', 'година']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var srCyrl = moment.defineLocale('sr-cyrl', {
	    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[данас у] LT',
	        nextDay: '[сутра у] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	            }
	        },
	        lastDay  : '[јуче у] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[прошле] [недеље] [у] LT',
	                '[прошлог] [понедељка] [у] LT',
	                '[прошлог] [уторка] [у] LT',
	                '[прошле] [среде] [у] LT',
	                '[прошлог] [четвртка] [у] LT',
	                '[прошлог] [петка] [у] LT',
	                '[прошле] [суботе] [у] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past   : 'пре %s',
	        s      : 'неколико секунди',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'дан',
	        dd     : translator.translate,
	        M      : 'месец',
	        MM     : translator.translate,
	        y      : 'годину',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return srCyrl;
	
	})));


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jedne minute'],
	        mm: ['minut', 'minute', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mesec', 'meseca', 'meseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var sr = moment.defineLocale('sr', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sutra u] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedelje] [u] LT',
	                '[prošlog] [ponedeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'pre %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sr;
	
	})));


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var ss = moment.defineLocale('ss', {
	    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Namuhla nga] LT',
	        nextDay : '[Kusasa nga] LT',
	        nextWeek : 'dddd [nga] LT',
	        lastDay : '[Itolo nga] LT',
	        lastWeek : 'dddd [leliphelile] [nga] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'nga %s',
	        past : 'wenteka nga %s',
	        s : 'emizuzwana lomcane',
	        m : 'umzuzu',
	        mm : '%d emizuzu',
	        h : 'lihora',
	        hh : '%d emahora',
	        d : 'lilanga',
	        dd : '%d emalanga',
	        M : 'inyanga',
	        MM : '%d tinyanga',
	        y : 'umnyaka',
	        yy : '%d iminyaka'
	    },
	    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'ekuseni';
	        } else if (hours < 15) {
	            return 'emini';
	        } else if (hours < 19) {
	            return 'entsambama';
	        } else {
	            return 'ebusuku';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ekuseni') {
	            return hour;
	        } else if (meridiem === 'emini') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	            if (hour === 0) {
	                return 0;
	            }
	            return hour + 12;
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : '%d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ss;
	
	})));


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sv = moment.defineLocale('sv', {
	    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Idag] LT',
	        nextDay: '[Imorgon] LT',
	        lastDay: '[Igår] LT',
	        nextWeek: '[På] dddd LT',
	        lastWeek: '[I] dddd[s] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : 'för %s sedan',
	        s : 'några sekunder',
	        m : 'en minut',
	        mm : '%d minuter',
	        h : 'en timme',
	        hh : '%d timmar',
	        d : 'en dag',
	        dd : '%d dagar',
	        M : 'en månad',
	        MM : '%d månader',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'e' :
	            (b === 1) ? 'a' :
	            (b === 2) ? 'a' :
	            (b === 3) ? 'e' : 'e';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sv;
	
	})));


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sw = moment.defineLocale('sw', {
	    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[leo saa] LT',
	        nextDay : '[kesho saa] LT',
	        nextWeek : '[wiki ijayo] dddd [saat] LT',
	        lastDay : '[jana] LT',
	        lastWeek : '[wiki iliyopita] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s baadaye',
	        past : 'tokea %s',
	        s : 'hivi punde',
	        m : 'dakika moja',
	        mm : 'dakika %d',
	        h : 'saa limoja',
	        hh : 'masaa %d',
	        d : 'siku moja',
	        dd : 'masiku %d',
	        M : 'mwezi mmoja',
	        MM : 'miezi %d',
	        y : 'mwaka mmoja',
	        yy : 'miaka %d'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sw;
	
	})));


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '௧',
	    '2': '௨',
	    '3': '௩',
	    '4': '௪',
	    '5': '௫',
	    '6': '௬',
	    '7': '௭',
	    '8': '௮',
	    '9': '௯',
	    '0': '௦'
	};
	var numberMap = {
	    '௧': '1',
	    '௨': '2',
	    '௩': '3',
	    '௪': '4',
	    '௫': '5',
	    '௬': '6',
	    '௭': '7',
	    '௮': '8',
	    '௯': '9',
	    '௦': '0'
	};
	
	var ta = moment.defineLocale('ta', {
	    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, HH:mm',
	        LLLL : 'dddd, D MMMM YYYY, HH:mm'
	    },
	    calendar : {
	        sameDay : '[இன்று] LT',
	        nextDay : '[நாளை] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[நேற்று] LT',
	        lastWeek : '[கடந்த வாரம்] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s இல்',
	        past : '%s முன்',
	        s : 'ஒரு சில விநாடிகள்',
	        m : 'ஒரு நிமிடம்',
	        mm : '%d நிமிடங்கள்',
	        h : 'ஒரு மணி நேரம்',
	        hh : '%d மணி நேரம்',
	        d : 'ஒரு நாள்',
	        dd : '%d நாட்கள்',
	        M : 'ஒரு மாதம்',
	        MM : '%d மாதங்கள்',
	        y : 'ஒரு வருடம்',
	        yy : '%d ஆண்டுகள்'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}வது/,
	    ordinal : function (number) {
	        return number + 'வது';
	    },
	    preparse: function (string) {
	        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // refer http://ta.wikipedia.org/s/1er1
	    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 2) {
	            return ' யாமம்';
	        } else if (hour < 6) {
	            return ' வைகறை';  // வைகறை
	        } else if (hour < 10) {
	            return ' காலை'; // காலை
	        } else if (hour < 14) {
	            return ' நண்பகல்'; // நண்பகல்
	        } else if (hour < 18) {
	            return ' எற்பாடு'; // எற்பாடு
	        } else if (hour < 22) {
	            return ' மாலை'; // மாலை
	        } else {
	            return ' யாமம்';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'யாமம்') {
	            return hour < 2 ? hour : hour + 12;
	        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	            return hour;
	        } else if (meridiem === 'நண்பகல்') {
	            return hour >= 10 ? hour : hour + 12;
	        } else {
	            return hour + 12;
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ta;
	
	})));


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var te = moment.defineLocale('te', {
	    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[నేడు] LT',
	        nextDay : '[రేపు] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[నిన్న] LT',
	        lastWeek : '[గత] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s లో',
	        past : '%s క్రితం',
	        s : 'కొన్ని క్షణాలు',
	        m : 'ఒక నిమిషం',
	        mm : '%d నిమిషాలు',
	        h : 'ఒక గంట',
	        hh : '%d గంటలు',
	        d : 'ఒక రోజు',
	        dd : '%d రోజులు',
	        M : 'ఒక నెల',
	        MM : '%d నెలలు',
	        y : 'ఒక సంవత్సరం',
	        yy : '%d సంవత్సరాలు'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}వ/,
	    ordinal : '%dవ',
	    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'రాత్రి') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ఉదయం') {
	            return hour;
	        } else if (meridiem === 'మధ్యాహ్నం') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'సాయంత్రం') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'రాత్రి';
	        } else if (hour < 10) {
	            return 'ఉదయం';
	        } else if (hour < 17) {
	            return 'మధ్యాహ్నం';
	        } else if (hour < 20) {
	            return 'సాయంత్రం';
	        } else {
	            return 'రాత్రి';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return te;
	
	})));


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tet = moment.defineLocale('tet', {
	    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
	    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Ohin iha] LT',
	        nextDay: '[Aban iha] LT',
	        nextWeek: 'dddd [iha] LT',
	        lastDay: '[Horiseik iha] LT',
	        lastWeek: 'dddd [semana kotuk] [iha] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'iha %s',
	        past : '%s liuba',
	        s : 'minutu balun',
	        m : 'minutu ida',
	        mm : 'minutus %d',
	        h : 'horas ida',
	        hh : 'horas %d',
	        d : 'loron ida',
	        dd : 'loron %d',
	        M : 'fulan ida',
	        MM : 'fulan %d',
	        y : 'tinan ida',
	        yy : 'tinan %d'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tet;
	
	})));


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var th = moment.defineLocale('th', {
	    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY เวลา H:mm',
	        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	    },
	    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	    isPM: function (input) {
	        return input === 'หลังเที่ยง';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ก่อนเที่ยง';
	        } else {
	            return 'หลังเที่ยง';
	        }
	    },
	    calendar : {
	        sameDay : '[วันนี้ เวลา] LT',
	        nextDay : '[พรุ่งนี้ เวลา] LT',
	        nextWeek : 'dddd[หน้า เวลา] LT',
	        lastDay : '[เมื่อวานนี้ เวลา] LT',
	        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'อีก %s',
	        past : '%sที่แล้ว',
	        s : 'ไม่กี่วินาที',
	        m : '1 นาที',
	        mm : '%d นาที',
	        h : '1 ชั่วโมง',
	        hh : '%d ชั่วโมง',
	        d : '1 วัน',
	        dd : '%d วัน',
	        M : '1 เดือน',
	        MM : '%d เดือน',
	        y : '1 ปี',
	        yy : '%d ปี'
	    }
	});
	
	return th;
	
	})));


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tlPh = moment.defineLocale('tl-ph', {
	    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'MM/D/YYYY',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY HH:mm',
	        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: 'LT [ngayong araw]',
	        nextDay: '[Bukas ng] LT',
	        nextWeek: 'LT [sa susunod na] dddd',
	        lastDay: 'LT [kahapon]',
	        lastWeek: 'LT [noong nakaraang] dddd',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'sa loob ng %s',
	        past : '%s ang nakalipas',
	        s : 'ilang segundo',
	        m : 'isang minuto',
	        mm : '%d minuto',
	        h : 'isang oras',
	        hh : '%d oras',
	        d : 'isang araw',
	        dd : '%d araw',
	        M : 'isang buwan',
	        MM : '%d buwan',
	        y : 'isang taon',
	        yy : '%d taon'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tlPh;
	
	})));


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	function translateFuture(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'leS' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'waQ' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'nem' :
	    time + ' pIq';
	    return time;
	}
	
	function translatePast(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'Hu’' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'wen' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'ben' :
	    time + ' ret';
	    return time;
	}
	
	function translate(number, withoutSuffix, string, isFuture) {
	    var numberNoun = numberAsNoun(number);
	    switch (string) {
	        case 'mm':
	            return numberNoun + ' tup';
	        case 'hh':
	            return numberNoun + ' rep';
	        case 'dd':
	            return numberNoun + ' jaj';
	        case 'MM':
	            return numberNoun + ' jar';
	        case 'yy':
	            return numberNoun + ' DIS';
	    }
	}
	
	function numberAsNoun(number) {
	    var hundred = Math.floor((number % 1000) / 100),
	    ten = Math.floor((number % 100) / 10),
	    one = number % 10,
	    word = '';
	    if (hundred > 0) {
	        word += numbersNouns[hundred] + 'vatlh';
	    }
	    if (ten > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	    }
	    if (one > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	    }
	    return (word === '') ? 'pagh' : word;
	}
	
	var tlh = moment.defineLocale('tlh', {
	    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[DaHjaj] LT',
	        nextDay: '[wa’leS] LT',
	        nextWeek: 'LLL',
	        lastDay: '[wa’Hu’] LT',
	        lastWeek: 'LLL',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : translateFuture,
	        past : translatePast,
	        s : 'puS lup',
	        m : 'wa’ tup',
	        mm : translate,
	        h : 'wa’ rep',
	        hh : translate,
	        d : 'wa’ jaj',
	        dd : translate,
	        M : 'wa’ jar',
	        MM : translate,
	        y : 'wa’ DIS',
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tlh;
	
	})));


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    1: '\'inci',
	    5: '\'inci',
	    8: '\'inci',
	    70: '\'inci',
	    80: '\'inci',
	    2: '\'nci',
	    7: '\'nci',
	    20: '\'nci',
	    50: '\'nci',
	    3: '\'üncü',
	    4: '\'üncü',
	    100: '\'üncü',
	    6: '\'ncı',
	    9: '\'uncu',
	    10: '\'uncu',
	    30: '\'uncu',
	    60: '\'ıncı',
	    90: '\'ıncı'
	};
	
	var tr = moment.defineLocale('tr', {
	    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[yarın saat] LT',
	        nextWeek : '[haftaya] dddd [saat] LT',
	        lastDay : '[dün] LT',
	        lastWeek : '[geçen hafta] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s önce',
	        s : 'birkaç saniye',
	        m : 'bir dakika',
	        mm : '%d dakika',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir yıl',
	        yy : '%d yıl'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '\'ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tr;
	
	})));


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	// This is currently too difficult (maybe even impossible) to add.
	var tzl = moment.defineLocale('tzl', {
	    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM [dallas] YYYY',
	        LLL : 'D. MMMM [dallas] YYYY HH.mm',
	        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	    },
	    meridiemParse: /d\'o|d\'a/i,
	    isPM : function (input) {
	        return 'd\'o' === input.toLowerCase();
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'd\'o' : 'D\'O';
	        } else {
	            return isLower ? 'd\'a' : 'D\'A';
	        }
	    },
	    calendar : {
	        sameDay : '[oxhi à] LT',
	        nextDay : '[demà à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[ieiri à] LT',
	        lastWeek : '[sür el] dddd [lasteu à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'osprei %s',
	        past : 'ja%s',
	        s : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['viensas secunds', '\'iensas secunds'],
	        'm': ['\'n míut', '\'iens míut'],
	        'mm': [number + ' míuts', '' + number + ' míuts'],
	        'h': ['\'n þora', '\'iensa þora'],
	        'hh': [number + ' þoras', '' + number + ' þoras'],
	        'd': ['\'n ziua', '\'iensa ziua'],
	        'dd': [number + ' ziuas', '' + number + ' ziuas'],
	        'M': ['\'n mes', '\'iens mes'],
	        'MM': [number + ' mesen', '' + number + ' mesen'],
	        'y': ['\'n ar', '\'iens ar'],
	        'yy': [number + ' ars', '' + number + ' ars']
	    };
	    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	}
	
	return tzl;
	
	})));


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tzmLatn = moment.defineLocale('tzm-latn', {
	    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[asdkh g] LT',
	        nextDay: '[aska g] LT',
	        nextWeek: 'dddd [g] LT',
	        lastDay: '[assant g] LT',
	        lastWeek: 'dddd [g] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dadkh s yan %s',
	        past : 'yan %s',
	        s : 'imik',
	        m : 'minuḍ',
	        mm : '%d minuḍ',
	        h : 'saɛa',
	        hh : '%d tassaɛin',
	        d : 'ass',
	        dd : '%d ossan',
	        M : 'ayowr',
	        MM : '%d iyyirn',
	        y : 'asgas',
	        yy : '%d isgasn'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tzmLatn;
	
	})));


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tzm = moment.defineLocale('tzm', {
	    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	        nextWeek: 'dddd [ⴴ] LT',
	        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	        lastWeek: 'dddd [ⴴ] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	        past : 'ⵢⴰⵏ %s',
	        s : 'ⵉⵎⵉⴽ',
	        m : 'ⵎⵉⵏⵓⴺ',
	        mm : '%d ⵎⵉⵏⵓⴺ',
	        h : 'ⵙⴰⵄⴰ',
	        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	        d : 'ⴰⵙⵙ',
	        dd : '%d oⵙⵙⴰⵏ',
	        M : 'ⴰⵢoⵓⵔ',
	        MM : '%d ⵉⵢⵢⵉⵔⵏ',
	        y : 'ⴰⵙⴳⴰⵙ',
	        yy : '%d ⵉⵙⴳⴰⵙⵏ'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tzm;
	
	})));


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	        'dd': 'день_дні_днів',
	        'MM': 'місяць_місяці_місяців',
	        'yy': 'рік_роки_років'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвилина' : 'хвилину';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'година' : 'годину';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	function weekdaysCaseReplace(m, format) {
	    var weekdays = {
	        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	    };
	
	    if (!m) {
	        return weekdays['nominative'];
	    }
	
	    var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	        'accusative' :
	        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	            'genitive' :
	            'nominative');
	    return weekdays[nounCase][m.day()];
	}
	function processHoursFunction(str) {
	    return function () {
	        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	    };
	}
	
	var uk = moment.defineLocale('uk', {
	    months : {
	        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	    },
	    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	    weekdays : weekdaysCaseReplace,
	    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY р.',
	        LLL : 'D MMMM YYYY р., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	    },
	    calendar : {
	        sameDay: processHoursFunction('[Сьогодні '),
	        nextDay: processHoursFunction('[Завтра '),
	        lastDay: processHoursFunction('[Вчора '),
	        nextWeek: processHoursFunction('[У] dddd ['),
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past : '%s тому',
	        s : 'декілька секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'годину',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'місяць',
	        MM : relativeTimeWithPlural,
	        y : 'рік',
	        yy : relativeTimeWithPlural
	    },
	    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	    meridiemParse: /ночі|ранку|дня|вечора/,
	    isPM: function (input) {
	        return /^(дня|вечора)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночі';
	        } else if (hour < 12) {
	            return 'ранку';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечора';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return uk;
	
	})));


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Urdu [ur]
	//! author : Sawood Alam : https://github.com/ibnesayeed
	//! author : Zack : https://github.com/ZackVision
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'جنوری',
	    'فروری',
	    'مارچ',
	    'اپریل',
	    'مئی',
	    'جون',
	    'جولائی',
	    'اگست',
	    'ستمبر',
	    'اکتوبر',
	    'نومبر',
	    'دسمبر'
	];
	var days = [
	    'اتوار',
	    'پیر',
	    'منگل',
	    'بدھ',
	    'جمعرات',
	    'جمعہ',
	    'ہفتہ'
	];
	
	var ur = moment.defineLocale('ur', {
	    months : months,
	    monthsShort : months,
	    weekdays : days,
	    weekdaysShort : days,
	    weekdaysMin : days,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd، D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /صبح|شام/,
	    isPM : function (input) {
	        return 'شام' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'صبح';
	        }
	        return 'شام';
	    },
	    calendar : {
	        sameDay : '[آج بوقت] LT',
	        nextDay : '[کل بوقت] LT',
	        nextWeek : 'dddd [بوقت] LT',
	        lastDay : '[گذشتہ روز بوقت] LT',
	        lastWeek : '[گذشتہ] dddd [بوقت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s بعد',
	        past : '%s قبل',
	        s : 'چند سیکنڈ',
	        m : 'ایک منٹ',
	        mm : '%d منٹ',
	        h : 'ایک گھنٹہ',
	        hh : '%d گھنٹے',
	        d : 'ایک دن',
	        dd : '%d دن',
	        M : 'ایک ماہ',
	        MM : '%d ماہ',
	        y : 'ایک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ur;
	
	})));


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek Latin [uz-latn]
	//! author : Rasulbek Mirzayev : github.com/Rasulbeeek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var uzLatn = moment.defineLocale('uz-latn', {
	    months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
	    monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
	    weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
	    weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
	    weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Bugun soat] LT [da]',
	        nextDay : '[Ertaga] LT [da]',
	        nextWeek : 'dddd [kuni soat] LT [da]',
	        lastDay : '[Kecha soat] LT [da]',
	        lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Yaqin %s ichida',
	        past : 'Bir necha %s oldin',
	        s : 'soniya',
	        m : 'bir daqiqa',
	        mm : '%d daqiqa',
	        h : 'bir soat',
	        hh : '%d soat',
	        d : 'bir kun',
	        dd : '%d kun',
	        M : 'bir oy',
	        MM : '%d oy',
	        y : 'bir yil',
	        yy : '%d yil'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return uzLatn;
	
	})));


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var uz = moment.defineLocale('uz', {
	    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бугун соат] LT [да]',
	        nextDay : '[Эртага] LT [да]',
	        nextWeek : 'dddd [куни соат] LT [да]',
	        lastDay : '[Кеча соат] LT [да]',
	        lastWeek : '[Утган] dddd [куни соат] LT [да]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Якин %s ичида',
	        past : 'Бир неча %s олдин',
	        s : 'фурсат',
	        m : 'бир дакика',
	        mm : '%d дакика',
	        h : 'бир соат',
	        hh : '%d соат',
	        d : 'бир кун',
	        dd : '%d кун',
	        M : 'бир ой',
	        MM : '%d ой',
	        y : 'бир йил',
	        yy : '%d йил'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return uz;
	
	})));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var vi = moment.defineLocale('vi', {
	    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /sa|ch/i,
	    isPM : function (input) {
	        return /^ch$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'sa' : 'SA';
	        } else {
	            return isLower ? 'ch' : 'CH';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM [năm] YYYY',
	        LLL : 'D MMMM [năm] YYYY HH:mm',
	        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	        l : 'DD/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hôm nay lúc] LT',
	        nextDay: '[Ngày mai lúc] LT',
	        nextWeek: 'dddd [tuần tới lúc] LT',
	        lastDay: '[Hôm qua lúc] LT',
	        lastWeek: 'dddd [tuần rồi lúc] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s tới',
	        past : '%s trước',
	        s : 'vài giây',
	        m : 'một phút',
	        mm : '%d phút',
	        h : 'một giờ',
	        hh : '%d giờ',
	        d : 'một ngày',
	        dd : '%d ngày',
	        M : 'một tháng',
	        MM : '%d tháng',
	        y : 'một năm',
	        yy : '%d năm'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return vi;
	
	})));


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var xPseudo = moment.defineLocale('x-pseudo', {
	    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[T~ódá~ý át] LT',
	        nextDay : '[T~ómó~rró~w át] LT',
	        nextWeek : 'dddd [át] LT',
	        lastDay : '[Ý~ést~érdá~ý át] LT',
	        lastWeek : '[L~ást] dddd [át] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'í~ñ %s',
	        past : '%s á~gó',
	        s : 'á ~féw ~sécó~ñds',
	        m : 'á ~míñ~úté',
	        mm : '%d m~íñú~tés',
	        h : 'á~ñ hó~úr',
	        hh : '%d h~óúrs',
	        d : 'á ~dáý',
	        dd : '%d d~áýs',
	        M : 'á ~móñ~th',
	        MM : '%d m~óñt~hs',
	        y : 'á ~ýéár',
	        yy : '%d ý~éárs'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return xPseudo;
	
	})));


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var yo = moment.defineLocale('yo', {
	    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
	    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Ònì ni] LT',
	        nextDay : '[Ọ̀la ni] LT',
	        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
	        lastDay : '[Àna ni] LT',
	        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ní %s',
	        past : '%s kọjá',
	        s : 'ìsẹjú aayá die',
	        m : 'ìsẹjú kan',
	        mm : 'ìsẹjú %d',
	        h : 'wákati kan',
	        hh : 'wákati %d',
	        d : 'ọjọ́ kan',
	        dd : 'ọjọ́ %d',
	        M : 'osù kan',
	        MM : 'osù %d',
	        y : 'ọdún kan',
	        yy : 'ọdún %d'
	    },
	    dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
	    ordinal : 'ọjọ́ %d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return yo;
	
	})));


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhCn = moment.defineLocale('zh-cn', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah点mm分',
	        LLLL : 'YYYY年MMMD日ddddAh点mm分',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日 HH:mm',
	        llll : 'YYYY年MMMD日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' ||
	                meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        } else {
	            // '中午'
	            return hour >= 11 ? hour : hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s内',
	        past : '%s前',
	        s : '几秒',
	        m : '1 分钟',
	        mm : '%d 分钟',
	        h : '1 小时',
	        hh : '%d 小时',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 个月',
	        MM : '%d 个月',
	        y : '1 年',
	        yy : '%d 年'
	    },
	    week : {
	        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return zhCn;
	
	})));


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhHk = moment.defineLocale('zh-hk', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日 HH:mm',
	        LLLL : 'YYYY年MMMD日dddd HH:mm',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日 HH:mm',
	        llll : 'YYYY年MMMD日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});
	
	return zhHk;
	
	})));


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhTw = moment.defineLocale('zh-tw', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日 HH:mm',
	        LLLL : 'YYYY年MMMD日dddd HH:mm',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日 HH:mm',
	        llll : 'YYYY年MMMD日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});
	
	return zhTw;
	
	})));


/***/ },
/* 177 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var asap = __webpack_require__(203);
	
	function noop() {}
	
	// States:
	//
	// 0 - pending
	// 1 - fulfilled with _value
	// 2 - rejected with _value
	// 3 - adopted the state of another promise, _value
	//
	// once the state is no longer pending (0) it is immutable
	
	// All `_` prefixed properties will be reduced to `_{random number}`
	// at build time to obfuscate them and discourage their use.
	// We don't use symbols or Object.defineProperty to fully hide them
	// because the performance isn't good enough.
	
	
	// to avoid using try/catch inside critical functions, we
	// extract them to here.
	var LAST_ERROR = null;
	var IS_ERROR = {};
	function getThen(obj) {
	  try {
	    return obj.then;
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	
	function tryCallOne(fn, a) {
	  try {
	    return fn(a);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	function tryCallTwo(fn, a, b) {
	  try {
	    fn(a, b);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	
	module.exports = Promise;
	
	function Promise(fn) {
	  if (typeof this !== 'object') {
	    throw new TypeError('Promises must be constructed via new');
	  }
	  if (typeof fn !== 'function') {
	    throw new TypeError('not a function');
	  }
	  this._45 = 0;
	  this._81 = 0;
	  this._65 = null;
	  this._54 = null;
	  if (fn === noop) return;
	  doResolve(fn, this);
	}
	Promise._10 = null;
	Promise._97 = null;
	Promise._61 = noop;
	
	Promise.prototype.then = function(onFulfilled, onRejected) {
	  if (this.constructor !== Promise) {
	    return safeThen(this, onFulfilled, onRejected);
	  }
	  var res = new Promise(noop);
	  handle(this, new Handler(onFulfilled, onRejected, res));
	  return res;
	};
	
	function safeThen(self, onFulfilled, onRejected) {
	  return new self.constructor(function (resolve, reject) {
	    var res = new Promise(noop);
	    res.then(resolve, reject);
	    handle(self, new Handler(onFulfilled, onRejected, res));
	  });
	};
	function handle(self, deferred) {
	  while (self._81 === 3) {
	    self = self._65;
	  }
	  if (Promise._10) {
	    Promise._10(self);
	  }
	  if (self._81 === 0) {
	    if (self._45 === 0) {
	      self._45 = 1;
	      self._54 = deferred;
	      return;
	    }
	    if (self._45 === 1) {
	      self._45 = 2;
	      self._54 = [self._54, deferred];
	      return;
	    }
	    self._54.push(deferred);
	    return;
	  }
	  handleResolved(self, deferred);
	}
	
	function handleResolved(self, deferred) {
	  asap(function() {
	    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      if (self._81 === 1) {
	        resolve(deferred.promise, self._65);
	      } else {
	        reject(deferred.promise, self._65);
	      }
	      return;
	    }
	    var ret = tryCallOne(cb, self._65);
	    if (ret === IS_ERROR) {
	      reject(deferred.promise, LAST_ERROR);
	    } else {
	      resolve(deferred.promise, ret);
	    }
	  });
	}
	function resolve(self, newValue) {
	  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	  if (newValue === self) {
	    return reject(
	      self,
	      new TypeError('A promise cannot be resolved with itself.')
	    );
	  }
	  if (
	    newValue &&
	    (typeof newValue === 'object' || typeof newValue === 'function')
	  ) {
	    var then = getThen(newValue);
	    if (then === IS_ERROR) {
	      return reject(self, LAST_ERROR);
	    }
	    if (
	      then === self.then &&
	      newValue instanceof Promise
	    ) {
	      self._81 = 3;
	      self._65 = newValue;
	      finale(self);
	      return;
	    } else if (typeof then === 'function') {
	      doResolve(then.bind(newValue), self);
	      return;
	    }
	  }
	  self._81 = 1;
	  self._65 = newValue;
	  finale(self);
	}
	
	function reject(self, newValue) {
	  self._81 = 2;
	  self._65 = newValue;
	  if (Promise._97) {
	    Promise._97(self, newValue);
	  }
	  finale(self);
	}
	function finale(self) {
	  if (self._45 === 1) {
	    handle(self, self._54);
	    self._54 = null;
	  }
	  if (self._45 === 2) {
	    for (var i = 0; i < self._54.length; i++) {
	      handle(self, self._54[i]);
	    }
	    self._54 = null;
	  }
	}
	
	function Handler(onFulfilled, onRejected, promise){
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}
	
	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, promise) {
	  var done = false;
	  var res = tryCallTwo(fn, function (value) {
	    if (done) return;
	    done = true;
	    resolve(promise, value);
	  }, function (reason) {
	    if (done) return;
	    done = true;
	    reject(promise, reason);
	  })
	  if (!done && res === IS_ERROR) {
	    done = true;
	    reject(promise, LAST_ERROR);
	  }
	}


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(294);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(13);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ?  false ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactInstrumentation = __webpack_require__(9);
	
	var quoteAttributeValueForBrowser = __webpack_require__(358);
	var warning = __webpack_require__(3);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	   false ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (false) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (false) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;

/***/ },
/* 183 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var LinkedValueUtils = __webpack_require__(42);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactUpdates = __webpack_require__(10);
	
	var warning = __webpack_require__(3);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	     false ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	       false ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	       false ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (false) {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	       false ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;

/***/ },
/* 185 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 186 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	var genericComponentClass = null;
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ?  false ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(318);
	
	var containsNode = __webpack_require__(279);
	var focusNode = __webpack_require__(60);
	var getActiveElement = __webpack_require__(61);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var DOMLazyTree = __webpack_require__(15);
	var DOMProperty = __webpack_require__(16);
	var React = __webpack_require__(18);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(12);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactDOMContainerInfo = __webpack_require__(312);
	var ReactDOMFeatureFlags = __webpack_require__(314);
	var ReactFeatureFlags = __webpack_require__(186);
	var ReactInstanceMap = __webpack_require__(26);
	var ReactInstrumentation = __webpack_require__(9);
	var ReactMarkupChecksum = __webpack_require__(328);
	var ReactReconciler = __webpack_require__(17);
	var ReactUpdateQueue = __webpack_require__(45);
	var ReactUpdates = __webpack_require__(10);
	
	var emptyObject = __webpack_require__(22);
	var instantiateReactComponent = __webpack_require__(196);
	var invariant = __webpack_require__(2);
	var setInnerHTML = __webpack_require__(33);
	var shouldUpdateReactComponent = __webpack_require__(51);
	var warning = __webpack_require__(3);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (false) {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (false) {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (false) {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	     false ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ?  false ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ?  false ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ?  false ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	     false ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	     false ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ?  false ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ?  false ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (false) {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (false) {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var React = __webpack_require__(18);
	
	var invariant = __webpack_require__(2);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ?  false ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;

/***/ },
/* 191 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ?  false ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;

/***/ },
/* 193 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(190);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(7);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4),
	    _assign = __webpack_require__(5);
	
	var ReactCompositeComponent = __webpack_require__(309);
	var ReactEmptyComponent = __webpack_require__(185);
	var ReactHostComponent = __webpack_require__(187);
	
	var getNextDebugID = __webpack_require__(372);
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (false) {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ?  false ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ?  false ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (false) {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (false) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	module.exports = instantiateReactComponent;

/***/ },
/* 197 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(7);
	var escapeTextContentForBrowser = __webpack_require__(32);
	var setInnerHTML = __webpack_require__(33);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var ReactCurrentOwner = __webpack_require__(12);
	var REACT_ELEMENT_TYPE = __webpack_require__(324);
	
	var getIteratorFn = __webpack_require__(355);
	var invariant = __webpack_require__(2);
	var KeyEscapeUtils = __webpack_require__(41);
	var warning = __webpack_require__(3);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (false) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (false) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(20);
	
	var ReactCurrentOwner = __webpack_require__(12);
	
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	   false ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ?  false ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ?  false ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  false ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ?  false ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ?  false ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ?  false ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;

/***/ },
/* 201 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (false) {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;

/***/ },
/* 203 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}
	
	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;
	
	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}
	
	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
	
	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` or `self` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	
	/* globals self */
	var scope = typeof global !== "undefined" ? global : self;
	var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
	
	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);
	
	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.
	
	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396
	
	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}
	
	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;
	
	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}
	
	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html
	
	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.
	
	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }
	
	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.
	
	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }
	
	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.
	
	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.
	
	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);
	
	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}
	
	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
	
	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _environment = __webpack_require__(21);
	
	var _environment2 = _interopRequireDefault(_environment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var historyLength = 1000;
	
	var defaultStats = {
	    currentScore: 0,
	    lastGameScore: 0,
	    scoreSum: 0,
	    gameCount: 0,
	    actionCount: 0,
	    actionsPerSecond: 0,
	    lastSecondsActionCount: 0,
	    lastFinalScores: [],
	    gameCountToScore: [],
	    gameCountToAverageScore: [],
	    averageFinalScore: 0,
	    lastActionScore: 0,
	    totalReward: 0
	};
	
	var GameRunner = function () {
	    function GameRunner(onRender, onStatusChange) {
	        var _this = this;
	
	        _classCallCheck(this, GameRunner);
	
	        this._universalGameNumber = 0;
	        this._renderingEnabled = false;
	        this._onRender = onRender;
	        this._stats = Object.assign({}, defaultStats);
	        this._onStatusChange = onStatusChange;
	        this._agentObservation = null;
	        this._godObservation = null;
	        this._agentClass = null;
	        this._nextAction = null;
	
	        this.newGame = this.newGame.bind(this);
	        this.takeAction = this.takeAction.bind(this);
	        this.tick = this.tick.bind(this);
	        this.clearStats = this.clearStats.bind(this);
	        this.setRenderingEnabled = this.setRenderingEnabled.bind(this);
	
	        setInterval(function () {
	            //@TODO accomplish this without an interval
	            _this._stats.actionsPerSecond = _this._stats.actionCount - _this._stats.lastSecondsActionCount;
	            _this._stats.lastSecondsActionCount = _this._stats.actionCount;
	        }, 1000);
	    }
	
	    _createClass(GameRunner, [{
	        key: 'newGame',
	        value: function newGame(agentClass) {
	            this._universalGameNumber++;
	            this._agentClass = agentClass;
	            this._agent = new this._agentClass();
	            // this._renderingEnabled = renderingEnabled;
	            this._environment = new _environment2.default();
	            this._stats.currentScore = 0; //@TODO get from environment?
	            if (this._renderingEnabled) {
	                //@TODO have this render make the table its self inside a given div
	                // this._onRender.clear();
	                this._onRender(this._environment.getAgentObservation(), this._environment.getGodObservation(), this._universalGameNumber);
	            } else {
	                this._onStatusChange(this._stats);
	            }
	            this._updateObservations();
	        }
	    }, {
	        key: 'clearCurrentAgentBrain',
	        value: function clearCurrentAgentBrain() {
	            if (this._agent.clearBrain) {
	                this._agent.clearBrain();
	            }
	        }
	
	        /**
	         *
	         * @param actionCode
	         */
	
	    }, {
	        key: 'takeAction',
	        value: function takeAction(actionCode) {
	            var stats = this._stats;
	            //Apply the action and get the next observation
	            if (actionCode !== null) {
	                this._environment.applyAction(actionCode);
	            }
	            this._updateObservations();
	
	            if (this._godObservation.isComplete) {
	                //@Find better way to communicate "isComplete"
	                this._agent.getAction(this._agentObservation); //Ask for one more action so the agent can see the observation after its last action
	                stats.lastGameScore = this._agentObservation.score;
	                stats.lastFinalScores.push(this._agentObservation.score);
	                if (stats.lastFinalScores.length > 100) {
	                    stats.lastFinalScores.shift();
	                }
	                var totalScoreFinaleScore = stats.lastFinalScores.reduce(function (acc, val) {
	                    return acc + val;
	                }, 0);
	                stats.averageFinalScore = Math.floor(totalScoreFinaleScore / stats.lastFinalScores.length) || 0;
	                stats.scoreSum += this._agentObservation.score;
	                stats.gameCountToScore.push(stats.lastGameScore);
	                stats.gameCountToAverageScore.push(stats.averageFinalScore);
	                stats.gameCount += 1;
	
	                //If the history arrays get twice as large as the preferred history length, slice them off.
	                if (stats.gameCountToScore.length > historyLength * 2) {
	                    stats.gameCountToScore = stats.gameCountToScore.slice(-historyLength);
	                    stats.gameCountToAverageScore = stats.gameCountToAverageScore.slice(-historyLength);
	                }
	
	                this.newGame(this._agentClass, this._renderingEnabled);
	            }
	
	            if (this._renderingEnabled) {
	                this._onRender(this._agentObservation, this._godObservation, this._universalGameNumber);
	                stats.currentScore = this._agentObservation.score;
	                this._onStatusChange(stats);
	            }
	
	            stats.actionCount++;
	            var reward = this._agentObservation.score - stats.lastActionScore;
	            stats.lastActionScore = this._agentObservation.score;
	            stats.totalReward += reward;
	
	            this._nextAction = this._agent.getAction(this._agentObservation);
	        }
	    }, {
	        key: 'setRenderingEnabled',
	        value: function setRenderingEnabled(renderingEnabled) {
	            this._renderingEnabled = renderingEnabled;
	        }
	    }, {
	        key: 'getCurrentAgentInstance',
	        value: function getCurrentAgentInstance() {
	            return this._agent;
	        }
	    }, {
	        key: 'tick',
	        value: function tick() {
	            this.takeAction(this._nextAction);
	        }
	    }, {
	        key: 'clearStats',
	        value: function clearStats() {
	            this._stats = Object.assign({}, defaultStats);
	            this._stats.lastFinalScores = [];
	            this._stats.gameCountToScore = [];
	            this._stats.gameCountToAverageScore = [];
	        }
	    }, {
	        key: '_updateObservations',
	        value: function _updateObservations() {
	            this._agentObservation = this._environment.getAgentObservation();
	            this._godObservation = this._environment.getGodObservation();
	        }
	    }]);
	
	    return GameRunner;
	}();
	
	exports.default = GameRunner;

/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * An agent that just always moves downwards no matter what
	 *
	 * @constructor
	 */
	var AlwaysMoveStraightDown = function () {
	  function AlwaysMoveStraightDown() {
	    _classCallCheck(this, AlwaysMoveStraightDown);
	  }
	
	  _createClass(AlwaysMoveStraightDown, [{
	    key: 'getAction',
	
	    /**
	     *
	     * @param {AgentObservation} observation
	     * @return {string} action code
	     */
	    value: function getAction(observation) {
	      return 's';
	    }
	  }]);
	
	  return AlwaysMoveStraightDown;
	}();
	
	exports.default = AlwaysMoveStraightDown;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _feeler = __webpack_require__(207);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var feelerPaths = [['a', 'a', 's', 's'], ['a', 's', 'a', 's'], ['a', 's', 's'], ['s', 'a', 's'], ['s', 's'], ['d', 'd', 's', 's'], ['d', 's', 'd', 's'], ['d', 's', 's'], ['s', 'd', 's']];
	
	var LookAheadIn5x3Viewport = function () {
	    function LookAheadIn5x3Viewport() {
	        _classCallCheck(this, LookAheadIn5x3Viewport);
	    }
	
	    _createClass(LookAheadIn5x3Viewport, [{
	        key: 'getAction',
	
	        /**
	         *
	         * @param {AgentObservation} observation
	         * @return {string} action code
	         */
	        value: function getAction(observation) {
	            return (0, _feeler.getActionViaFeelers)(observation, feelerPaths, null);
	        }
	    }]);
	
	    return LookAheadIn5x3Viewport;
	}();
	
	exports.default = LookAheadIn5x3Viewport;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.oppositeActions = undefined;
	exports.getFeelerValue = getFeelerValue;
	exports.getFeelerValues = getFeelerValues;
	exports.filterPathsWithFirstAction = filterPathsWithFirstAction;
	exports.getBestFeeler = getBestFeeler;
	exports.getActionViaFeelers = getActionViaFeelers;
	
	var _environment = __webpack_require__(21);
	
	var oppositeActions = exports.oppositeActions = {
	    w: 's',
	    a: 'd',
	    s: 'w',
	    d: 'a'
	};
	
	var actionVectors = {
	    //[dX, dY, dScore]
	    w: [0, -1, -_environment.config.verticalDeltaScore],
	    a: [-1, 0, 0],
	    s: [0, 1, _environment.config.verticalDeltaScore],
	    d: [1, 0, 0]
	};
	
	function getFeelerValue(observation, feelerSteps) {
	    var position = [observation.position[0], observation.position[1]];
	    var value = 0;
	    feelerSteps.forEach(function (step) {
	        var vector = actionVectors[step];
	        position = [position[0] + vector[0], position[1] + vector[1]];
	        var cost = void 0;
	        if (typeof observation.tileTypes[position[0]] === 'undefined' || typeof observation.tileTypes[position[0]][position[1]] === 'undefined') {
	            cost = _environment.config.tileTypeToDeltaScore[1]; //If going off map, make look very expensive
	            // } else
	            //     if (observation.visibles[position[0]][position[1]] === 0) {
	            //     cost = 1;//config.maxTileCost / 2; //@TODO there must be a better way to deal with unknown tiles
	        } else {
	            cost = _environment.config.tileTypeToDeltaScore[observation.tileTypes[position[0]][position[1]]];
	        }
	        value = value + vector[2] + cost;
	    });
	    return value;
	}
	
	function getFeelerValues(observation, feelerPaths) {
	    return feelerPaths.map(function (feelerPath) {
	        return {
	            path: feelerPath,
	            value: getFeelerValue(observation, feelerPath)
	        };
	    });
	}
	
	function filterPathsWithFirstAction(paths, blacklistedFirstAction) {
	    return paths.filter(function (path) {
	        return path[0] !== blacklistedFirstAction;
	    });
	}
	
	function getBestFeeler(feelersWithValues) {
	    return feelersWithValues.reduce(function (bestFeelerSoFar, feeler) {
	        if (bestFeelerSoFar === null || feeler.value > bestFeelerSoFar.value) {
	            return feeler;
	        } else {
	            return bestFeelerSoFar;
	        }
	    }, null);
	}
	
	function getActionViaFeelers(observation, feelerPaths, lastAction) {
	    //This filter prevents infinite back-and-forth movement
	    var safeFeelerPaths = filterPathsWithFirstAction(feelerPaths, oppositeActions[lastAction]);
	
	    var feelersWithValues = getFeelerValues(observation, safeFeelerPaths);
	
	    var bestFeeler = getBestFeeler(feelersWithValues);
	
	    return bestFeeler.path[0];
	}

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	// import {config} from '../../environment'
	
	
	var _nestedFloatMatrixMath = __webpack_require__(28);
	
	var _deepQNetworkAdaptor = __webpack_require__(58);
	
	var _deepQNetworkAdaptor2 = _interopRequireDefault(_deepQNetworkAdaptor);
	
	var _deepQ5x = __webpack_require__(222);
	
	var _viewportConversions = __webpack_require__(35);
	
	var viewportConversions = _interopRequireWildcard(_viewportConversions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var actions = ['w', 'a', 's', 'd'];
	
	
	var numberOfStates = 5 * 3; //config.viewPortSize[0] * config.viewPortSize[1];
	
	var rlDqn = new _deepQNetworkAdaptor2.default(true, numberOfStates, _deepQ5x.data);
	var rlDqnHasBeenInitialized = false;
	
	var DeepQNetwork_OneStep = function () {
	    function DeepQNetwork_OneStep() {
	        _classCallCheck(this, DeepQNetwork_OneStep);
	
	        this._lastScore = null;
	        this._lastActionIndex = 2; //2='s'
	    }
	
	    /**
	     *
	     * @param {AgentObservation} observation
	     * @return {string} action code
	     */
	
	
	    _createClass(DeepQNetwork_OneStep, [{
	        key: 'getAction',
	        value: function getAction(observation) {
	            var state = (0, _nestedFloatMatrixMath.matrixToFlatArray)(viewportConversions.convert9x9to5x3(observation.tileTypes));
	
	            //Give the agent memory of the last action it took. This may be cheating.
	            // state.push(this._lastActionIndex);
	
	            var reward = null;
	            if (this._lastScore !== null && rlDqnHasBeenInitialized) {
	                reward = observation.score - this._lastScore;
	            }
	
	            var actionIndex = rlDqn.getAction(state, reward);
	
	            var action = actions[actionIndex];
	
	            this._lastScore = observation.score;
	            this._lastActionIndex = actionIndex;
	            rlDqnHasBeenInitialized = true;
	            return action;
	        }
	    }, {
	        key: 'clearBrain',
	        value: function clearBrain() {
	            rlDqn = new _deepQNetworkAdaptor2.default(true, numberOfStates);
	            rlDqnHasBeenInitialized = false;
	        }
	    }, {
	        key: 'exportBrain',
	        value: function exportBrain() {
	            return rlDqn.exportBrain();
	        }
	    }]);
	
	    return DeepQNetwork_OneStep;
	}();
	
	exports.default = DeepQNetwork_OneStep;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.arrayOfBinariesToInt = arrayOfBinariesToInt;
	
	var _viewportConversions = __webpack_require__(35);
	
	var viewportConversions = _interopRequireWildcard(_viewportConversions);
	
	var _nestedFloatMatrixMath = __webpack_require__(28);
	
	var _tabularSarsa5x = __webpack_require__(223);
	
	var _tabularSarsa = __webpack_require__(375);
	
	var _deepQNetworkAdaptor = __webpack_require__(58);
	
	var _App = __webpack_require__(34);
	
	var _environment = __webpack_require__(21);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Takes an array of 0s and 1s and converts the whole thing to a single int
	 *
	 * @param array
	 * @returns {number}
	 */
	function arrayOfBinariesToInt(array) {
	    var output = 0;
	    for (var i = 0, len = array.length; i < len; i++) {
	        output += array[i] * Math.pow(2, i);
	    }
	    return output;
	}
	
	/**
	 * Take an observation object and returns an int that represents the given observation state
	 *
	 * @param {AgentObservation} observation
	 * @returns {number}
	 */
	function observationToInt(observation) {
	    return arrayOfBinariesToInt((0, _nestedFloatMatrixMath.matrixToFlatArray)(viewportConversions.convert9x9to5x3( //Trim down the viewport to reduce the combinatorial explosion
	    observation.tileTypes)));
	}
	
	var stateCount = Math.pow(2, 5 * 3); //There are 5x3 binary pixels in the viewport
	
	var agent = new _tabularSarsa.Agent(stateCount, _environment.actions.length);
	var agentHasBeenInitialized = false;
	
	agent.loadFromJson(_tabularSarsa5x.data); //Load the previously saved brain
	
	var TabularSARSA_5x3Viewport = function () {
	    function TabularSARSA_5x3Viewport() {
	        _classCallCheck(this, TabularSARSA_5x3Viewport);
	
	        this._lastScore = null;
	    }
	
	    /**
	     * @param {AgentObservation} observation
	     * @return {string} action code
	     */
	
	
	    _createClass(TabularSARSA_5x3Viewport, [{
	        key: 'getAction',
	        value: function getAction(observation) {
	            var reward = null;
	            if (this._lastScore !== null && agentHasBeenInitialized) {
	                reward = observation.score - this._lastScore;
	            }
	            this._lastScore = observation.score;
	            agentHasBeenInitialized = true;
	            var action = _environment.actions[agent.decide(reward, observationToInt(observation))];
	            var lastActionStat = agent.getLastActionStats();
	            if (_App.settings.renderingEnabled) {
	                (0, _deepQNetworkAdaptor.renderActionResponse)({ weights: lastActionStat.weights, wasRandom: lastActionStat.wasRandomlyChosen });
	                (0, _deepQNetworkAdaptor.renderReward)(reward);
	            }
	            return action;
	        }
	    }, {
	        key: 'clearBrain',
	        value: function clearBrain() {
	            agent = new _tabularSarsa.Agent(stateCount, _environment.actions.length);
	            agentHasBeenInitialized = false;
	        }
	    }, {
	        key: 'exportBrain',
	        value: function exportBrain() {
	            return agent.saveToJson();
	        }
	    }]);
	
	    return TabularSARSA_5x3Viewport;
	}();
	
	exports.default = TabularSARSA_5x3Viewport;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Matrix = __webpack_require__(55);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	var _matrixMath = __webpack_require__(213);
	
	var matrixMath = _interopRequireWildcard(_matrixMath);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function buildMatrices(inputSize, outputSize, hiddenLayerSizes) {
	    var matrices = [];
	
	    matrices[0] = new _Matrix2.default(hiddenLayerSizes[0], inputSize); //Hidden layer weights
	    matrixMath.fillWithRandomValues(matrices[0], 0, 0.01);
	
	    matrices[1] = new _Matrix2.default(hiddenLayerSizes[0], 1, 0, 0.01); //Hidden layer biases
	
	    matrices[2] = new _Matrix2.default(outputSize, hiddenLayerSizes[0]); //Output layer weights
	    matrixMath.fillWithRandomValues(matrices[2], 0, 0.01);
	
	    matrices[3] = new _Matrix2.default(outputSize, 1, 0, 0.01); //Output layer biases
	
	    return matrices;
	}
	
	/**
	 * These output matrix's are reused which gives a 15% performance boost by avoiding array
	 * instantiation.
	 *
	 * @param outputSize
	 * @param hiddenLayerSizes
	 * @returns {[*,*,*,*,*,*]}
	 */
	function buildOuts(outputSize, hiddenLayerSizes) {
	    return [null, //Gets replaced by the input matrix later
	    new _Matrix2.default(hiddenLayerSizes[0], 1), new _Matrix2.default(hiddenLayerSizes[0], 1), new _Matrix2.default(hiddenLayerSizes[0], 1), new _Matrix2.default(outputSize, 1), new _Matrix2.default(outputSize, 1)];
	}
	
	var NeuralNetwork = function () {
	    function NeuralNetwork(inputSize, outputSize, hiddenLayerSizes) {
	        _classCallCheck(this, NeuralNetwork);
	
	        this.forward = this.forward.bind(this);
	        this.backPropagate = this.backPropagate.bind(this);
	
	        if (hiddenLayerSizes.length > 1) {
	            throw new Error('Multiple hidden layers are not yet supported.');
	        }
	
	        this._matrices = buildMatrices(inputSize, outputSize, hiddenLayerSizes);
	        this.outs = buildOuts(outputSize, hiddenLayerSizes);
	    }
	
	    _createClass(NeuralNetwork, [{
	        key: 'forward',
	        value: function forward(input) {
	            this.outs[0] = input;
	
	            matrixMath.mul(this._matrices[0], this.outs[0], this.outs[1]);
	            matrixMath.add(this.outs[1], this._matrices[1], this.outs[2]);
	            matrixMath.tanH(this.outs[2], this.outs[3]);
	            matrixMath.mul(this._matrices[2], this.outs[3], this.outs[4]);
	            matrixMath.add(this.outs[4], this._matrices[3], this.outs[5]);
	
	            return this.outs[5];
	        }
	    }, {
	        key: 'backPropagate',
	        value: function backPropagate(outputError, alpha) {
	
	            //Clear old deltas before starting. Re-using the same matrices (Float64Arrays) provides a 15% performance gain
	            matrixMath.clearDeltasInArrayOfMatrices(this.outs);
	
	            this.outs[5].dw = outputError.w;
	
	            matrixMath.backwardAdd(this.outs[4], this._matrices[3], this.outs[5]);
	            matrixMath.backwardMul(this._matrices[2], this.outs[3], this.outs[4]);
	            matrixMath.backwardTanH(this.outs[2], this.outs[3]);
	            matrixMath.backwardAdd(this.outs[1], this._matrices[1], this.outs[2]);
	            matrixMath.backwardMul(this._matrices[0], this.outs[0], this.outs[1]);
	
	            matrixMath.updateValuesFromDeltasInArrayOfMatrices(this._matrices, alpha);
	        }
	    }, {
	        key: 'toJSON',
	        value: function toJSON() {
	            return { matrices: this._matrices };
	        }
	    }, {
	        key: 'fromJSON',
	        value: function fromJSON(json) {
	            for (var matricesI = 0, matricesCount = json.matrices.length; matricesI < matricesCount; matricesI++) {
	                this._matrices[matricesI].fromJSON(json.matrices[matricesI]);
	            }
	        }
	    }]);
	
	    return NeuralNetwork;
	}();
	
	exports.default = NeuralNetwork;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Matrix = __webpack_require__(55);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	var _arrayMath = __webpack_require__(56);
	
	var arrayMath = _interopRequireWildcard(_arrayMath);
	
	var _random = __webpack_require__(57);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Agent = function () {
	    function Agent(numberOfStates, maxNumberOfActions, neuralNetwork, options) {
	        _classCallCheck(this, Agent);
	
	        var defaultOptions = {
	            discountFactor: 0.75, //was .075, future reward discount factor
	            randomActionProbability: 0.05, // for epsilon-greedy policy
	            learningRate: 0.01, //was 0.01, value function learning rate
	            experienceRecordInterval: 25, // number of time steps before we add another experience to replay memory
	            experienceSize: 5000, // size of experience replay
	            learningStepsPerIteration: 10,
	            tdErrorClamp: 1.0
	        };
	
	        this._options = Object.assign(defaultOptions, options);
	
	        this.numberOfInputs = numberOfStates;
	        this.numberOfActions = maxNumberOfActions;
	
	        this._neuralNetwork = neuralNetwork;
	        this._lastActionStats = {
	            action: 0,
	            wasRandom: false,
	            weights: new Float64Array(maxNumberOfActions),
	            tdError: 0
	        };
	
	        this.exp = []; // experience records
	        this.expi = 0; // where to insert new experience
	
	        this.t = 0;
	
	        this.lastReward = null;
	        this.lastObservation = null;
	        this.currentObservation = null;
	        this.lastAction = null;
	        this.currentAction = null;
	    }
	
	    /**
	     *
	     * @param {Number} lastReward - pass null if this is the first step or you want to skip learning
	     * @param {Array} currentObservation
	     * @returns {*}
	     */
	
	
	    _createClass(Agent, [{
	        key: 'learnAndAct',
	        value: function learnAndAct(lastReward, currentObservation) {
	            var tdError = 0;
	            if (lastReward !== null) {
	                tdError = this._learn(lastReward);
	            }
	
	            // convert to a Matrix column vector
	            var state = new _Matrix2.default(this.numberOfInputs, 1);
	            state.setFrom(currentObservation);
	
	            var actionWasRandom = false;
	            var actionWeights = null;
	            var action = void 0;
	
	            // epsilon greedy policy
	            if (Math.random() < this._options.randomActionProbability) {
	                action = (0, _random.getRandomIntWithZeroMin)(this.numberOfActions);
	                actionWasRandom = true;
	            } else {
	                // greedy wrt Q function
	                var actionMatrix = this._neuralNetwork.forward(state, false);
	
	                actionWeights = actionMatrix.w;
	                action = arrayMath.getIndexOfMaxValue(actionMatrix.w); // returns index of argmax action
	            }
	
	            // shift state memory
	            this.lastObservation = this.currentObservation;
	            this.lastAction = this.currentAction;
	            this.currentObservation = state;
	            this.currentAction = action;
	
	            var lastActionStats = this._lastActionStats;
	            lastActionStats.action = action;
	            lastActionStats.wasRandom = actionWasRandom;
	            lastActionStats.weights = actionWeights;
	            lastActionStats.tdError = tdError;
	
	            return action;
	        }
	    }, {
	        key: 'getLastActionStats',
	        value: function getLastActionStats() {
	            return this._lastActionStats;
	        }
	    }, {
	        key: '_learn',
	        value: function _learn(r1) {
	            // perform an update on Q function
	            if (!(this.lastReward == null) && this._options.learningRate > 0) {
	
	                // learn from this tuple to get a sense of how "surprising" it is to the agent
	                var tdError = this._learnFromExample(this.lastObservation, this.lastAction, this.lastReward, this.currentObservation);
	
	                // decide if we should keep this experience in the replay
	                if (this.t % this._options.experienceRecordInterval === 0) {
	                    this.exp[this.expi] = [this.lastObservation, this.lastAction, this.lastReward, this.currentObservation];
	                    this.expi += 1;
	                    if (this.expi > this._options.experienceSize) {
	                        this.expi = 0;
	                    } // roll over when we run out
	                }
	                this.t += 1;
	
	                // sample some additional experience from replay memory and learn from it
	                for (var k = 0; k < this._options.learningStepsPerIteration; k++) {
	                    var ri = (0, _random.getRandomIntWithZeroMin)(this.exp.length); // todo: priority sweeps?
	                    var e = this.exp[ri];
	                    this._learnFromExample(e[0], e[1], e[2], e[3]);
	                }
	            }
	            this.lastReward = r1; // store for next update
	            return tdError;
	        }
	    }, {
	        key: '_learnFromExample',
	        value: function _learnFromExample(lastObservation, lastAction, lastReward, currentObservation) {
	
	            // goal: Q(s,a) = r + discountFactor * max_a' Q(s',a')
	
	            var actionMatrix = this._neuralNetwork.forward(currentObservation, false);
	            var estimatedFutureReward = actionMatrix.w[arrayMath.getIndexOfMaxValue(actionMatrix.w)];
	
	            var prediction = this._neuralNetwork.forward(lastObservation, true);
	            var lastActionPredictedReward = prediction.w[lastAction];
	
	            var tdError = lastActionPredictedReward - lastReward - estimatedFutureReward * this._options.discountFactor;
	
	            if (tdError > this._options.tdErrorClamp) {
	                tdError = this._options.tdErrorClamp;
	            } else if (tdError < -this._options.tdErrorClamp) {
	                tdError = -this._options.tdErrorClamp;
	            }
	
	            var outputError = new _Matrix2.default(this.numberOfActions, 1);
	            outputError.w[lastAction] = tdError;
	
	            this._neuralNetwork.backPropagate(outputError, this._options.learningRate);
	
	            return tdError;
	        }
	    }]);
	
	    return Agent;
	}();
	
	exports.default = Agent;
	;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _arrayMath = __webpack_require__(56);
	
	var arrayMath = _interopRequireWildcard(_arrayMath);
	
	var _testHelper = __webpack_require__(215);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	(0, _testHelper.assertEquals)(arrayMath.getIndexOfMaxValue([1, 3, 4, 7, 2]), 3, 'arrayMath.getIndexOfMaxValue');

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.tanH = tanH;
	exports.backwardTanH = backwardTanH;
	exports.mul = mul;
	exports.backwardMul = backwardMul;
	exports.add = add;
	exports.backwardAdd = backwardAdd;
	exports.fillWithRandomValues = fillWithRandomValues;
	exports.updateFromDeltas = updateFromDeltas;
	exports.clearDeltasInArrayOfMatrices = clearDeltasInArrayOfMatrices;
	exports.updateValuesFromDeltasInArrayOfMatrices = updateValuesFromDeltasInArrayOfMatrices;
	
	var _random = __webpack_require__(57);
	
	function tanH(m, out) {
	    // tanh nonlinearity
	    // var out = new Matrix(m.n, m.d);
	    if (out.n !== m.n || out.d !== m.d) {
	        throw new Error('Out should be ' + m.n + ' by ' + m.d + ' but is ' + out.n + ' by ' + out.d);
	    }
	
	    var n = m.n;
	    for (var i = 0; i < n; i++) {
	        out.w[i] = Math.tanh(m.w[i]);
	    }
	
	    // return out;
	} // Matrix utils
	// fill matrix with random gaussian numbers
	function backwardTanH(m, out) {
	    for (var i = 0; i < m.n; i++) {
	        // grad for z = tanh(x) is (1 - z^2)
	        var mwi = out.w[i];
	        m.dw[i] += (1.0 - mwi * mwi) * out.dw[i];
	    }
	}
	
	/**
	 *
	 * Note: Re-using matrices (Float64Arrays) provides a 15% performance gain. This why "out" exists rather than returning
	 *
	 * @param m1
	 * @param m2
	 * @param out
	 */
	function mul(m1, m2, out) {
	    //4.7 Float64Array
	    if (m1.d !== m2.n) {
	        throw new Error(m1.d + '!==' + m2.n);
	    } else if (out.n !== m1.n || out.d !== m2.d) {
	        throw new Error('Out should be ' + m1.n + ' by ' + m2.d + ' but is ' + out.n + ' by ' + out.d);
	    }
	
	    // var out = new Matrix(n, d);
	    for (var i = 0; i < m1.n; i++) {
	        // loop over rows of m1
	        for (var j = 0; j < m2.d; j++) {
	            // loop over cols of m2
	            var dot = 0.0;
	            for (var k = 0; k < m1.d; k++) {
	                // dot product loop
	                dot += m1.w[m1.d * i + k] * m2.w[m2.d * k + j];
	            }
	            out.w[m2.d * i + j] = dot;
	        }
	    }
	
	    // return out;
	}
	
	function backwardMul(m1, m2, out) {
	    for (var i = 0; i < m1.n; i++) {
	        for (var k = 0; k < m1.d; k++) {
	            for (var j = 0; j < m2.d; j++) {
	                var b = out.dw[m2.d * i + j];
	                m1.dw[m1.d * i + k] += m2.w[m2.d * k + j] * b;
	                m2.dw[m2.d * k + j] += m1.w[m1.d * i + k] * b;
	            }
	        }
	    }
	}
	
	function add(m1, m2, out) {
	    if (m1.w.length !== m2.w.length) {
	        throw new Error();
	    }
	
	    if (out.n !== m1.n || out.d !== m1.d) {
	        throw new Error('Out should be ' + m1.n + ' by ' + m1.d + ' but is ' + out.n + ' by ' + out.d);
	    }
	
	    // var out = new Matrix(m1.n, m1.d);
	    for (var i = 0, n = m1.w.length; i < n; i++) {
	        out.w[i] = m1.w[i] + m2.w[i];
	    }
	
	    // return out;
	}
	
	function backwardAdd(m1, m2, out) {
	    for (var i = 0, n = m1.w.length; i < n; i++) {
	        m1.dw[i] += out.dw[i];
	        m2.dw[i] += out.dw[i];
	    }
	}
	
	function fillWithRandomValues(m, mu, std) {
	    for (var i = 0, n = m.w.length; i < n; i++) {
	        m.w[i] = mu + (0, _random.gaussRandom)() * std;
	    }
	}
	
	function updateFromDeltas(m, alpha) {
	    for (var i = 0, length = m.n * m.d; i < length; i++) {
	        m.w[i] += -alpha * m.dw[i];
	        m.dw[i] = 0;
	    }
	}
	
	function clearDeltasInArrayOfMatrices(matrices) {
	    for (var matricesI = 0, matricesCount = matrices.length; matricesI < matricesCount; matricesI++) {
	        var matrix = matrices[matricesI];
	        for (var i = 0, iCount = matrix.n * matrix.d; i < iCount; i++) {
	            matrix.dw[i] = 0;
	        }
	    }
	}
	
	function updateValuesFromDeltasInArrayOfMatrices(matrices, alpha) {
	    for (var matricesI = 0, matricesCount = matrices.length; matricesI < matricesCount; matricesI++) {
	        var matrix = matrices[matricesI];
	        for (var i = 0, length = matrix.n * matrix.d; i < length; i++) {
	            matrix.w[i] += -alpha * matrix.dw[i];
	            matrix.dw[i] = 0;
	        }
	    }
	}

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(212);

/***/ },
/* 215 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.assertEquals = assertEquals;
	function assertEquals(actual, expected, moreInfo) {
	    if (actual !== expected) {
	        var message = 'expected:' + actual + '!==actual:' + expected;
	        if (moreInfo) {
	            message += ', ' + moreInfo;
	        }
	        throw new Error(message);
	    }
	}

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _AlwaysMoveStraightDown = __webpack_require__(205);
	
	var _AlwaysMoveStraightDown2 = _interopRequireDefault(_AlwaysMoveStraightDown);
	
	var _LookAheadIn5x3Viewport = __webpack_require__(206);
	
	var _LookAheadIn5x3Viewport2 = _interopRequireDefault(_LookAheadIn5x3Viewport);
	
	var _DeepQNetwork_OneStep = __webpack_require__(208);
	
	var _DeepQNetwork_OneStep2 = _interopRequireDefault(_DeepQNetwork_OneStep);
	
	var _TabularSARSA_5x3Viewport = __webpack_require__(209);
	
	var _TabularSARSA_5x3Viewport2 = _interopRequireDefault(_TabularSARSA_5x3Viewport);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// import LookAheadIn9x3Viewport from './agent/hand-programmed/LookAheadIn9x3Viewport'
	// import LookAheadIn3x2Viewport from './agent/hand-programmed/LookAheadIn3x2Viewport'
	exports.default = [{
	    name: 'MachineLearning - TabularSARSA_5x3Viewport_32768States - PreTrained - ranked 224',
	    class: _TabularSARSA_5x3Viewport2.default,
	    ticksPerInterval: 20000 //This agent runs fast but needs many games to learn
	}, {
	    name: 'MachineLearning - DeepQNetwork_OneStep - PreTrained - ranked 226',
	    class: _DeepQNetwork_OneStep2.default
	},
	// {
	//     name: 'HandProgrammed - LookAheadIn9x3Viewport - ranked 87',
	//     class: LookAheadIn9x3Viewport
	// },
	{
	    name: 'HandProgrammed - LookAheadIn5x3Viewport - ranked 214',
	    class: _LookAheadIn5x3Viewport2.default
	},
	// {
	//     name: 'HandProgrammed - LookAheadIn3x2Viewport - ranked 74',
	//     class: LookAheadIn3x2Viewport
	// },
	{
	    name: 'HandProgrammed - AlwaysMoveStraightDown - ranked (-31)',
	    class: _AlwaysMoveStraightDown2.default
	}];

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(14);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(23);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var BrainExportButton = function (_Component) {
	    _inherits(BrainExportButton, _Component);
	
	    function BrainExportButton() {
	        _classCallCheck(this, BrainExportButton);
	
	        var _this = _possibleConstructorReturn(this, (BrainExportButton.__proto__ || Object.getPrototypeOf(BrainExportButton)).call(this));
	
	        _this.onExportButtonClick = _this.onExportButtonClick.bind(_this);
	        _this.state = { exportData: null };
	        return _this;
	    }
	
	    _createClass(BrainExportButton, [{
	        key: 'onExportButtonClick',
	        value: function onExportButtonClick() {
	            var gameRunner = this.props.gameRunner;
	            if (!gameRunner.getCurrentAgentInstance().exportBrain) {
	                alert('Current agent has no exportBrain() function.');
	                return;
	            }
	
	            this.setState({
	                exportData: 'export const data = JSON.parse(\'' + JSON.stringify(gameRunner.getCurrentAgentInstance().exportBrain()) + '\');'
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'button',
	                    { onClick: this.onExportButtonClick },
	                    'Export Agent Brain'
	                ),
	                this.state.exportData && _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement('br', null),
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        'Exported Agent Brain Data:'
	                    ),
	                    _react2.default.createElement('textarea', {
	                        autoFocus: true,
	                        readOnly: true,
	                        style: { width: '100%', height: '10em' },
	                        value: this.state.exportData })
	                )
	            );
	        }
	    }]);
	
	    return BrainExportButton;
	}(_react.Component);
	
	exports.default = BrainExportButton;
	
	
	BrainExportButton.propTypes = {
	    gameRunner: _propTypes2.default.object.isRequired
	};

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(14);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(23);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GameRulesDisplay = function (_Component) {
	    _inherits(GameRulesDisplay, _Component);
	
	    function GameRulesDisplay() {
	        _classCallCheck(this, GameRulesDisplay);
	
	        return _possibleConstructorReturn(this, (GameRulesDisplay.__proto__ || Object.getPrototypeOf(GameRulesDisplay)).apply(this, arguments));
	    }
	
	    _createClass(GameRulesDisplay, [{
	        key: 'render',
	        value: function render() {
	            var environmentConfig = this.props.environmentConfig;
	            return _react2.default.createElement(
	                'div',
	                null,
	                'Game Rules:',
	                _react2.default.createElement(
	                    'ul',
	                    null,
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        'Get to the bottom row to finish the game'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        'Gain ',
	                        environmentConfig.verticalDeltaScore,
	                        ' points for every row lower you go'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        'Loose ',
	                        environmentConfig.verticalDeltaScore,
	                        ' points for every row higher you go'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        'Loose ',
	                        -environmentConfig.tileTypeToDeltaScore[1],
	                        ' points when moving into a red square'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        'Loose ',
	                        -environmentConfig.deltaScorePerAction,
	                        ' point for every move'
	                    )
	                )
	            );
	        }
	    }]);
	
	    return GameRulesDisplay;
	}(_react.Component);
	
	exports.default = GameRulesDisplay;
	
	
	GameRulesDisplay.propTypes = {
	    environmentConfig: _propTypes2.default.object.isRequired
	};

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _viewportConversions = __webpack_require__(35);
	
	var viewportConversions = _interopRequireWildcard(_viewportConversions);
	
	var _react = __webpack_require__(14);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(23);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ObservationRenderer = function (_Component) {
	    _inherits(ObservationRenderer, _Component);
	
	    function ObservationRenderer() {
	        _classCallCheck(this, ObservationRenderer);
	
	        var _this = _possibleConstructorReturn(this, (ObservationRenderer.__proto__ || Object.getPrototypeOf(ObservationRenderer)).call(this));
	
	        _this.state = {
	            gameNumber: 0,
	            previousPositions: [] //Stores the "trail" of where we have been on the environment view
	        };
	        return _this;
	    }
	
	    _createClass(ObservationRenderer, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.gameNumber !== this.state.gameNumber) {
	                //We are in a new game so clear previously saved "previous positions trail"
	                this.setState({
	                    gameNumber: nextProps.gameNumber,
	                    previousPositions: []
	                });
	            } else {
	                //We are in the same game as before so add to the current "previous positions trail"
	                var previousPositions = this.state.previousPositions.slice(); //Make copy to preserve immutability
	                var scalarPosition = nextProps.godObservation.position[0] * nextProps.godObservation.tileTypes.length + nextProps.godObservation.position[1];
	                previousPositions[scalarPosition] = true;
	                this.setState({
	                    previousPositions: previousPositions
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var agentTileColors = calculateAgentTileColors(viewportConversions.convert9x9to5x3(this.props.agentObservation.tileTypes), [2, 0]);
	            var godTileColors = calculateGodTileColors(this.props.godObservation.tileTypes, this.props.godObservation.position, this.state.previousPositions);
	
	            return _react2.default.createElement(
	                'div',
	                { className: 'InfectionGameHtmlTableRender' },
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        'Agent View'
	                    ),
	                    _react2.default.createElement(
	                        'table',
	                        { className: 'renderer-table-canvas-agent' },
	                        _react2.default.createElement(
	                            'tbody',
	                            null,
	                            agentTileColors.map(function (row, rowIndex) {
	                                return _react2.default.createElement(
	                                    'tr',
	                                    { key: rowIndex },
	                                    row.map(function (tileColor, tileIndex) {
	                                        return _react2.default.createElement('td', { key: tileIndex, style: { backgroundColor: tileColor } });
	                                    })
	                                );
	                            })
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        'Environment View'
	                    ),
	                    _react2.default.createElement(
	                        'table',
	                        { className: 'renderer-table-canvas-god' },
	                        _react2.default.createElement(
	                            'tbody',
	                            null,
	                            godTileColors.map(function (row, rowIndex) {
	                                return _react2.default.createElement(
	                                    'tr',
	                                    { key: rowIndex },
	                                    row.map(function (tileColor, tileIndex) {
	                                        return _react2.default.createElement('td', { key: tileIndex, style: { backgroundColor: tileColor } });
	                                    })
	                                );
	                            })
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return ObservationRenderer;
	}(_react.Component);
	
	exports.default = ObservationRenderer;
	
	
	ObservationRenderer.propTypes = {
	    agentObservation: _propTypes2.default.object.isRequired,
	    godObservation: _propTypes2.default.object.isRequired,
	    gameNumber: _propTypes2.default.number.isRequired
	};
	
	function calculateGodTileColors(tileTypes, position, previousPositions) {
	    var tileColors = [];
	    var xLength = tileTypes.length;
	    var yLength = tileTypes[0].length;
	    for (var x = 0; x < xLength; x++) {
	        for (var y = 0; y < yLength; y++) {
	            var scalarPosition = x * xLength + y;
	            var inPreviousPosition = previousPositions[scalarPosition];
	            var color = { r: 50, g: 50, b: 50 };
	            if (x === position[0] && y === position[1] && tileTypes[x][y] !== 0) {
	                color = { r: 255, g: 255, b: 0 };
	            } else if (x === position[0] && y === position[1]) {
	                color = { r: 0, g: 255, b: 0 };
	            } else if (inPreviousPosition && tileTypes[x][y] !== 0) {
	                color = { r: 255, g: 255, b: 128 };
	            } else if (inPreviousPosition) {
	                color = { r: 0, g: 128, b: 0 };
	            } else if (tileTypes[x][y] !== 0) {
	                color = { r: 230, g: 0, b: 0 };
	            }
	            if (!tileColors[y]) {
	                tileColors[y] = [];
	            }
	            tileColors[y][x] = 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';
	        }
	    }
	
	    return tileColors;
	}
	
	function calculateAgentTileColors(tileTypes, position) {
	    var tileColors = [];
	    var xLength = tileTypes.length;
	    var yLength = tileTypes[0].length;
	    for (var x = 0; x < xLength; x++) {
	        for (var y = 0; y < yLength; y++) {
	            var color = { r: 50, g: 50, b: 50 };
	            if (x === position[0] && y === position[1] && tileTypes[x][y] !== 0) {
	                color = { r: 255, g: 255, b: 0 };
	            } else if (x === position[0] && y === position[1]) {
	                color = { r: 0, g: 255, b: 0 };
	            } else if (tileTypes[x][y] !== 0) {
	                color = { r: 230, g: 0, b: 0 };
	            }
	            if (!tileColors[y]) {
	                tileColors[y] = [];
	            }
	            tileColors[y][x] = 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';
	        }
	    }
	    return tileColors;
	}

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(14);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(23);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _chart = __webpack_require__(228);
	
	var _chart2 = _interopRequireDefault(_chart);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var chartGameCount = 200;
	
	var ScoreHistoryChart = function (_Component) {
	    _inherits(ScoreHistoryChart, _Component);
	
	    function ScoreHistoryChart() {
	        _classCallCheck(this, ScoreHistoryChart);
	
	        return _possibleConstructorReturn(this, (ScoreHistoryChart.__proto__ || Object.getPrototypeOf(ScoreHistoryChart)).apply(this, arguments));
	    }
	
	    _createClass(ScoreHistoryChart, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var chartCanvas = this.refs.chart;
	
	            var myChart = new _chart2.default(chartCanvas, {
	                type: 'line',
	                data: {
	                    labels: [],
	                    datasets: [{
	                        label: 'Average Final Score',
	                        data: [],
	                        backgroundColor: 'transparent',
	                        borderColor: 'blue',
	                        borderWidth: 1,
	                        lineTension: 0
	                    }, {
	                        label: 'Final Score',
	                        data: [],
	                        backgroundColor: 'transparent',
	                        borderColor: 'lightgrey',
	                        borderWidth: 1,
	                        lineTension: 0
	                    }]
	                },
	                options: {
	                    animation: {
	                        duration: 0
	                    },
	                    elements: { point: { radius: 0 } },
	                    scales: {
	                        yAxes: [{
	                            ticks: {
	                                min: 150,
	                                max: 250
	                            }
	                        }],
	                        xAxes: [{
	                            display: false
	                        }]
	                    }
	                }
	            });
	
	            this.setState({ chart: myChart });
	        }
	    }, {
	        key: 'mapStatsToChartData',
	        value: function mapStatsToChartData(stats) {
	            return {
	                datasets: [{
	                    data: stats.gameCountToAverageScore.slice(-chartGameCount)
	                }, {
	                    data: stats.gameCountToScore.slice(-chartGameCount)
	                }],
	                labels: Object.keys(stats.gameCountToScore).slice(-chartGameCount)
	            };
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            var chart = this.state.chart;
	            var data = this.mapStatsToChartData(this.props.stats);
	
	            data.datasets.forEach(function (dataset, i) {
	                return chart.data.datasets[i].data = dataset.data;
	            });
	
	            chart.data.labels = data.labels;
	            chart.update();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('canvas', { ref: 'chart', height: '300', width: '700' });
	        }
	    }]);
	
	    return ScoreHistoryChart;
	}(_react.Component);
	
	exports.default = ScoreHistoryChart;
	
	
	ScoreHistoryChart.propTypes = {
	    stats: _propTypes2.default.object.isRequired
	};

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(14);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(23);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var StatsDisplay = function (_Component) {
	    _inherits(StatsDisplay, _Component);
	
	    function StatsDisplay() {
	        _classCallCheck(this, StatsDisplay);
	
	        return _possibleConstructorReturn(this, (StatsDisplay.__proto__ || Object.getPrototypeOf(StatsDisplay)).apply(this, arguments));
	    }
	
	    _createClass(StatsDisplay, [{
	        key: 'render',
	        value: function render() {
	            var stats = this.props.stats;
	            return _react2.default.createElement(
	                'table',
	                null,
	                _react2.default.createElement(
	                    'tbody',
	                    null,
	                    Object.keys(stats).map(function (key) {
	                        return _react2.default.createElement(
	                            'tr',
	                            { key: key },
	                            _react2.default.createElement(
	                                'td',
	                                null,
	                                key,
	                                ': ',
	                                stats[key]
	                            )
	                        );
	                    })
	                )
	            );
	        }
	    }]);
	
	    return StatsDisplay;
	}(_react.Component);
	
	exports.default = StatsDisplay;
	
	
	StatsDisplay.propTypes = {
	    stats: _propTypes2.default.object.isRequired
	};

/***/ },
/* 222 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var data = exports.data = JSON.parse('{"matrices":[{"n":100,"d":15,"w":{"0":0.02163745582470228,"1":-0.2642574230953599,"2":-0.20620188977579618,"3":0.3965000459693192,"4":0.975376235076951,"5":0.5466957214127522,"6":-0.9992097959134055,"7":-5.4132947781795115,"8":-0.4181979751702549,"9":-5.114035515069312,"10":-2.672530333232674,"11":-2.44506959823785,"12":-1.0378526229815799,"13":-1.5386439080485141,"14":-0.15749917583137563,"15":0.6546961227173554,"16":0.3823286389950942,"17":-0.4026446084297799,"18":-0.3450733477277212,"19":3.996675346972638,"20":-0.7987395491405217,"21":0.1288983067682747,"22":-0.8851262602267277,"23":-6.599318509869778,"24":1.0537755834217573,"25":-5.7778984703669325,"26":-2.3552989540498195,"27":0.8550859478697093,"28":-1.294326664305717,"29":-1.7297582798165985,"30":1.8924657227608217,"31":-0.9651279191603198,"32":-0.8876179629305747,"33":-3.4303220953716256,"34":-3.6676475853593486,"35":1.1305648161518225,"36":-0.19052643445662826,"37":-0.5035158467669851,"38":-0.19414199986512878,"39":5.94579892530907,"40":-0.16549811068518952,"41":1.6943634481825165,"42":1.9455486903603416,"43":-0.7633855822986818,"44":-2.11277154851608,"45":1.8089177815590811,"46":1.6151858688341805,"47":0.9708483521670875,"48":2.134394960341928,"49":3.3635978599681184,"50":2.998164585323809,"51":-0.33939873100131235,"52":0.9312897687434611,"53":-0.15135682669370532,"54":-5.98318526368037,"55":0.5599004815244476,"56":-0.46926425235766617,"57":-0.16663049158412763,"58":0.13501152249390616,"59":0.08000044411289392,"60":1.3582077338340062,"61":-0.3052331833257696,"62":-4.4437683444704135,"63":-2.9086505108867406,"64":1.7470410815408002,"65":1.4492065659112596,"66":2.046076215813383,"67":-0.8758632252876205,"68":4.493564750576242,"69":-0.6989068571315639,"70":2.477338441035138,"71":1.118500039749243,"72":0.948040264610836,"73":-0.5848473737709671,"74":2.3982086132757128,"75":-0.3227327662871064,"76":1.1164730703882806,"77":2.0949933977552906,"78":0.6925130545055019,"79":3.9342177979556716,"80":1.368412354276029,"81":0.41421513293205514,"82":1.9137497466156754,"83":0.9626748180163395,"84":2.6546745471378035,"85":-4.18152813069782,"86":-0.3258140464382625,"87":-0.03942262622100048,"88":-0.09232994150795164,"89":1.060564177653293,"90":-0.7695251374824464,"91":-0.13971895768558523,"92":2.1584878351866634,"93":-0.028455687323916144,"94":-2.276157714208472,"95":-3.9384089441792334,"96":-0.8824076639323484,"97":-2.379667414864721,"98":-3.9911774322858573,"99":-0.3474913696544541,"100":-0.493457561427001,"101":3.3962390134392835,"102":0.5079789293446344,"103":0.8028579541337919,"104":-0.2101872873061127,"105":-1.5089359568477063,"106":-1.5255426115846207,"107":-0.425902685655306,"108":0.6977542591824467,"109":-1.1139370065144796,"110":2.9637620660973383,"111":2.762253368840723,"112":-2.586239961571016,"113":2.630882051519033,"114":-0.6522424305889565,"115":5.535710264374222,"116":-2.343641421070121,"117":2.094175945917362,"118":1.0591036961563796,"119":1.968650097991455,"120":-2.3203467211199666,"121":-2.3710356499576966,"122":-2.0874698309656923,"123":3.709574151962276,"124":-0.6073404567725316,"125":-1.5825525846868276,"126":0.2717908423659244,"127":-5.5060804208336,"128":-1.6315358780440048,"129":0.5059377848399262,"130":3.7259255264200895,"131":1.702699702783476,"132":3.589768575124313,"133":-0.39614815648602947,"134":-3.0639951136749275,"135":1.3940297927685115,"136":-0.6529044661727293,"137":1.6881987346336769,"138":3.7152355790097014,"139":1.0521724767700305,"140":-2.1662769641352653,"141":-1.6225038728302599,"142":-1.0970489119605542,"143":1.1910815656411435,"144":-0.5036334286716146,"145":0.6243056845826175,"146":-0.28036638964758936,"147":2.146440992548499,"148":2.1614203957317635,"149":-0.6873639621504214,"150":-1.3765874416434285,"151":-0.044250363726331704,"152":0.4251159707348455,"153":2.7338539450165205,"154":-3.4643649215331864,"155":1.1399564249218799,"156":-1.8028104653438908,"157":-4.151295074673436,"158":-6.1288499160678445,"159":-0.6716686747331924,"160":3.8789081559541336,"161":-0.6633866444002708,"162":-1.042148001688732,"163":0.12672227031184916,"164":0.40232107938109074,"165":0.08310385185588669,"166":-0.20567948018194374,"167":-1.243166807054686,"168":-0.8834552513821837,"169":0.770570894342585,"170":-3.4532245230489886,"171":-0.185115470513627,"172":3.85787402272726,"173":-3.572843654801343,"174":0.4323001538565004,"175":-0.6480747398384817,"176":0.3213282109711008,"177":0.7029526243598393,"178":-1.9201067262026343,"179":-0.5175926984010892,"180":0.9044914890325667,"181":3.545393007325154,"182":-3.2267637831539093,"183":-0.40335773183250107,"184":0.023803686155825128,"185":1.5928528779475668,"186":1.3874376177263579,"187":0.21008348804707255,"188":-1.0611573168137582,"189":0.10511015387826467,"190":-0.5546048123230428,"191":2.803468526272583,"192":0.03599436128430631,"193":-0.18642324844000624,"194":0.5069643774240569,"195":1.0576248409428755,"196":-0.31141584716027204,"197":0.20896816863706208,"198":-0.9488427432906652,"199":-2.167583702122858,"200":-1.7282100759586598,"201":-0.8954361668276687,"202":6.271018518208974,"203":-1.299845925631052,"204":3.373790095874636,"205":-0.18310400556007994,"206":1.695787179066494,"207":-2.87132460142745,"208":-2.098573566950023,"209":1.1328961803117479,"210":-0.2535229607434967,"211":0.18810254280322353,"212":-0.19952285162198458,"213":-0.8978953152978583,"214":-0.8362768322676485,"215":-0.20270367674562118,"216":0.752208848213619,"217":-2.6866533504088492,"218":-0.2839583401347074,"219":-3.8256727782769566,"220":-1.6228425412074179,"221":0.850957491193631,"222":-1.6261944455019475,"223":-1.4484391326924904,"224":1.4750709360839893,"225":1.0560308329170236,"226":-2.6305808496463965,"227":0.8664345432439585,"228":-2.1126825099678532,"229":-3.53394572435964,"230":-0.1498245254316803,"231":4.778205660918033,"232":-3.018571086860583,"233":2.1236890324542252,"234":1.0599482567305523,"235":-3.6715900958186007,"236":1.4802361249208544,"237":-2.564263704398089,"238":1.8301439050676567,"239":2.054706186064305,"240":-1.0720627807780425,"241":-0.8048467544617415,"242":-1.8807203148327096,"243":-3.7298048873151703,"244":0.28242692323209334,"245":-3.0456903059386233,"246":-0.9480803154812596,"247":6.355637850697085,"248":-3.1017690771131767,"249":-1.928024237484946,"250":0.6404178813498009,"251":0.7685828184665674,"252":-0.6249422618319787,"253":-0.13634864892905826,"254":-0.8612718980261577,"255":1.8426973986722495,"256":1.94205200582259,"257":1.1948140377638752,"258":-0.07870362697652596,"259":2.81029852710975,"260":1.9635450832517711,"261":1.5681824765479802,"262":-4.738374186742786,"263":-1.160246574543569,"264":-0.758407913182134,"265":-2.759087700993663,"266":0.6631038466022874,"267":-0.8773927290266818,"268":-1.45220331959229,"269":-1.8041822442265671,"270":1.4685030468910083,"271":1.3854861604350035,"272":2.6328134324607064,"273":1.9827773873683896,"274":1.0669337841176592,"275":-1.110897928225906,"276":1.177511808747123,"277":1.1033929224072694,"278":3.1249386362602873,"279":0.3335805807990424,"280":-2.1450556131394576,"281":-2.080514666679718,"282":2.2144858017023177,"283":-0.7918176186982254,"284":-0.05330231512860968,"285":-0.003378779906502238,"286":-4.66359568023832,"287":-1.3077900693765783,"288":2.4445991520525663,"289":-1.7586134567713623,"290":-1.0853127695681177,"291":-1.1712061122662438,"292":0.08093341276546011,"293":2.0009732190272564,"294":0.45698242746575035,"295":2.96749376977636,"296":3.0546782051664283,"297":1.9403174526269023,"298":2.088314782675745,"299":0.6597582162285465,"300":-0.34684146894804896,"301":-0.16945808115755098,"302":1.2785587140811994,"303":-2.77320478285434,"304":5.508146806095004,"305":2.9543132687976863,"306":-1.1100678048380532,"307":-3.532778227995119,"308":-2.155255893025999,"309":1.916440642005538,"310":-0.3791685652859036,"311":-1.3541183053290102,"312":0.6151652485465027,"313":-1.6980987741053968,"314":0.506044051070133,"315":-1.2157787335924484,"316":0.7500719789731065,"317":-0.49882616983884814,"318":0.4960383984432471,"319":-2.2438459842641483,"320":-1.5405215501837504,"321":-1.0616632538727027,"322":-1.5506744723892987,"323":0.6957735137389184,"324":-2.011393557165313,"325":0.20133518429559497,"326":-0.747209407793823,"327":-0.5121917805696194,"328":0.898055701735224,"329":4.1829301996886326,"330":-2.5024189678727287,"331":-0.658786470648509,"332":-1.194639642500788,"333":-1.3053163123050653,"334":1.2302498824000703,"335":1.5111145336744298,"336":0.7076686476364834,"337":1.8892389713723392,"338":3.506809002822619,"339":3.9333493068273473,"340":-1.2563847044033851,"341":-1.5535010456385354,"342":1.1532900995525703,"343":0.8816750280823363,"344":-1.1352389122581859,"345":-0.20376676995013945,"346":0.2517503224430996,"347":-0.04267292430779735,"348":0.2411249942193426,"349":-0.4338774395131658,"350":0.004258252503194362,"351":-0.4966046429804044,"352":-2.26317500858555,"353":-1.2313988712568003,"354":6.875640261459828,"355":-2.1485350970940007,"356":1.2591601411829594,"357":0.4602513935585204,"358":0.8842736360740231,"359":0.12518264794291578,"360":0.9413744780405378,"361":2.898633240073421,"362":-0.373357784814152,"363":-2.560508450787888,"364":0.4874634588675113,"365":0.3431683829044143,"366":1.59997999272448,"367":0.2010544428331448,"368":3.1045933980778684,"369":-3.714437957940255,"370":-0.07395793385561177,"371":-0.27343116110896065,"372":0.6595232704179318,"373":1.5536389539247428,"374":-0.23163601004841375,"375":-1.2051877259196295,"376":-0.9486588238206738,"377":-1.7944939156992743,"378":-1.7168272805973857,"379":2.0221056647891165,"380":1.8832591148104514,"381":0.18618838696216233,"382":3.2533957071740787,"383":-5.875091634804711,"384":-3.1993167784361445,"385":-2.607642530476767,"386":-2.7380016041559982,"387":-0.4209020489759723,"388":0.7749670352026861,"389":-3.03702822430807,"390":-1.2156296502883595,"391":0.3867463322584329,"392":1.082649343126995,"393":0.6003606348278456,"394":-2.6747605963788597,"395":-1.3890950850710122,"396":-1.320132391021117,"397":1.202957043780518,"398":1.4059544024995716,"399":-1.4155228879569386,"400":1.6154447521841933,"401":-3.596012950306939,"402":-0.9971022200893999,"403":-3.659515716222102,"404":0.09991291245063727,"405":2.5673686204553094,"406":-0.43234910566272594,"407":-2.0021013300446757,"408":-0.7404823437403845,"409":-1.156475503904702,"410":-2.7759994862801576,"411":2.322488158778367,"412":-2.913921698979031,"413":-1.6153406739790939,"414":0.8955624912671012,"415":0.46538850100350365,"416":4.377128246337834,"417":0.8700681017946805,"418":-2.155502253626406,"419":0.03157398838369981,"420":1.320487303344255,"421":-2.7741985133504943,"422":4.128245164947243,"423":4.655105763047517,"424":0.922921202878133,"425":0.3865137170577114,"426":-0.5738207760798947,"427":-0.7255008645408272,"428":-1.330644913974322,"429":-0.9212050947693331,"430":-2.8992747505560854,"431":0.6072149669902526,"432":-3.024037809248977,"433":-0.7125132753898783,"434":-1.7084998818537498,"435":1.440093303745025,"436":-2.1296067737263074,"437":-0.28230466286368816,"438":5.851412223104181,"439":2.5720275410357356,"440":1.5637100350507847,"441":-2.0496688037051802,"442":0.5904137775743018,"443":1.0248347689917303,"444":-0.7743179934304123,"445":4.417841687797985,"446":-0.5227665511602099,"447":-1.267805548539477,"448":0.503204787776226,"449":-1.4397187616717588,"450":-0.7951604510361159,"451":0.2523518774643549,"452":3.8965095464275414,"453":-1.1077609824102042,"454":-3.069875508120068,"455":-0.37426638977452337,"456":1.8513427182167939,"457":2.5910137769967374,"458":-2.4076666188437135,"459":-0.5364169433438891,"460":5.278425627423932,"461":4.613751385508782,"462":-0.24832613890724253,"463":-0.3280414672153375,"464":-1.084862138090581,"465":0.599012347726491,"466":-1.1854573714495142,"467":2.6394306405983485,"468":2.9683307926550646,"469":-1.445160735363606,"470":0.4762163432304034,"471":-1.2048495684111078,"472":1.9124030751319097,"473":-0.8149547235584773,"474":3.4655451177808287,"475":-3.397368268846491,"476":1.8985837882837746,"477":-3.572260048742916,"478":1.0704041100349115,"479":0.39196970427695954,"480":-1.0392818803423869,"481":-0.441873702644369,"482":-0.8162556685320952,"483":1.129524957419182,"484":-7.1660922072163205,"485":0.31423864294913506,"486":-1.083794321856285,"487":-6.820388600903576,"488":-1.763269127797334,"489":-0.13414891852833355,"490":1.5650381939385674,"491":1.628678963685974,"492":-0.47461026699724085,"493":3.3948417699307205,"494":1.3546804523491058,"495":-0.08856251846792466,"496":1.0293721077686917,"497":0.8525844149885276,"498":0.933074314107903,"499":0.6392255829785677,"500":0.5334266559187154,"501":1.3334760419303198,"502":-1.3554041746117642,"503":-2.6948316138227693,"504":-5.167999992980455,"505":-5.2669617556017565,"506":1.6638813328511814,"507":-2.0364865547011153,"508":-0.23456386824546877,"509":-1.1319570225628266,"510":0.7982332408179595,"511":-0.03984458529789265,"512":1.7625748427626502,"513":-0.0956233452172979,"514":-1.0697745227925752,"515":-1.9548449167769617,"516":-0.018122500817902936,"517":0.4218955521852083,"518":0.22827336395885867,"519":-3.777600657798864,"520":-1.8982391213218617,"521":-1.917850754017512,"522":0.4398247262207088,"523":-1.5892031584656678,"524":0.5787804604700846,"525":0.1486363044992457,"526":1.589755827951936,"527":1.518490760191041,"528":0.04584034344283521,"529":0.7333882246114152,"530":-2.8691754930576074,"531":-1.0502547028313938,"532":-2.8701476274089566,"533":-2.859651296968904,"534":-0.6493847677367411,"535":-2.8205336051723577,"536":2.0435791741907408,"537":-4.672486112311133,"538":-3.6370189351977893,"539":-0.1822280080585332,"540":2.4450894025477172,"541":-0.0413066980414683,"542":0.755922469005325,"543":1.392847139875394,"544":1.6213555103872401,"545":-4.385808937895369,"546":0.45342361797223757,"547":-1.622446522643335,"548":1.4399907782014814,"549":3.0713209930119136,"550":-1.6315482965111823,"551":-3.438916174437493,"552":2.109183965552611,"553":-0.08444353876256266,"554":-0.9571135977092914,"555":1.2578206158460883,"556":-0.12985911474570716,"557":-2.3351486051877077,"558":-0.8823845776311816,"559":4.399920880460415,"560":-2.03060514517746,"561":-1.6660949301944603,"562":-3.811587009550475,"563":3.7346066594360177,"564":-0.5392003666566058,"565":2.227334029965172,"566":-1.038785687916156,"567":-0.02477353859762682,"568":0.5914257829710154,"569":2.7475876001610127,"570":0.45254602901549595,"571":-0.4954251951985512,"572":-0.40599347981805567,"573":-1.1704853251881329,"574":-2.163342835482626,"575":2.264819094534957,"576":-2.8288876702156314,"577":3.587905037601757,"578":0.8703443778099318,"579":-3.7619624399111475,"580":-3.8653005099007887,"581":-2.76153094875833,"582":-0.5539394528998842,"583":-4.242037607735224,"584":-1.1765185252595483,"585":-0.8006454767578343,"586":0.8182709210110448,"587":1.912056595500234,"588":0.6773639155227216,"589":-2.2730752394836484,"590":-1.810871074429269,"591":0.2111550112682407,"592":-5.900399923736308,"593":-2.5641109208627513,"594":-1.275963742857601,"595":-2.1556656835392043,"596":1.1328841048579705,"597":0.591454123819862,"598":-0.27849309852659615,"599":1.5680692402345697,"600":0.10492243775392256,"601":0.23415306880694683,"602":-1.1159272346816265,"603":-1.2213862552009094,"604":-3.755819921618974,"605":-0.45611550671507256,"606":-1.187749332319992,"607":5.1035150260382025,"608":-1.4999153274764152,"609":-0.5261109827953189,"610":-0.8918949451020673,"611":-5.245576923234201,"612":-0.5168384776191067,"613":-0.17856535898268455,"614":-0.5470066657917403,"615":1.075202275470459,"616":-1.3186666097673294,"617":0.4700387622614595,"618":2.83169535503021,"619":1.0492673866837259,"620":0.7759999195793029,"621":-1.4924438494596055,"622":-1.243057908788706,"623":-1.7028164047304721,"624":3.4085801358867562,"625":-2.1537771511780686,"626":-0.18375099823617289,"627":4.159896787941933,"628":1.2420777879079052,"629":-0.5904488198667605,"630":1.2623963161958351,"631":-0.17736912883505254,"632":-1.321601767052887,"633":0.3978897323906592,"634":-0.9727501032688904,"635":0.7207306593481888,"636":0.7068511871032397,"637":5.779206390572183,"638":6.970063037562911,"639":0.23862827249599033,"640":0.8808961484203814,"641":3.7156660314464314,"642":-0.7473830592671701,"643":-0.27670506376472576,"644":-1.6603326146358304,"645":-0.7887752024535466,"646":0.11325533017996446,"647":0.7154930999433914,"648":-6.953646557637879,"649":-0.5001060290741551,"650":-1.4325549912629731,"651":1.3901743231964987,"652":-1.2726028458329484,"653":-0.003597988337242258,"654":1.1306481287560106,"655":0.6624489058946478,"656":2.145545577802948,"657":0.14470454940205457,"658":-0.21168075137943831,"659":0.7722070258407373,"660":-3.427040633537481,"661":3.2419376520555443,"662":-3.493702519990205,"663":-1.4016553291871485,"664":0.43691776319395115,"665":0.20487361080716002,"666":-0.2907876805989156,"667":4.208299162017739,"668":1.85122772492699,"669":-0.4398849052245082,"670":-0.21445128546725972,"671":0.7420406942223602,"672":-0.5958563702480634,"673":-0.1985946169613252,"674":-1.2580862370472867,"675":1.7646328448378925,"676":2.10645933637938,"677":1.6135901624693834,"678":-3.2889293800235477,"679":-1.57573356726805,"680":-0.07123330359905566,"681":-2.26713783685591,"682":-1.777089308392404,"683":3.3447053391182306,"684":1.365898397093986,"685":3.2677309616818238,"686":0.9039703570317853,"687":1.4452121977759453,"688":0.1471989522127154,"689":-0.11371555507159649,"690":0.955765711001009,"691":0.773075582502926,"692":-1.7285808460820231,"693":2.758498737377948,"694":3.7169837417637077,"695":-2.172390747523682,"696":1.9425142526564454,"697":0.2986737380290366,"698":-0.47242347152384373,"699":1.3660179644883923,"700":0.7822859564575299,"701":0.44986091566630887,"702":-0.04814313088798818,"703":0.35611358504911755,"704":1.5997091369278433,"705":-0.18019075506394497,"706":0.5136643968143223,"707":0.11711468736604991,"708":1.421157270046678,"709":-1.1262831844353498,"710":1.1286694834209086,"711":-1.6640569793697935,"712":1.5061729682645832,"713":0.17779435034999141,"714":1.7659416624154323,"715":-2.874368709377352,"716":1.5537024644211752,"717":0.2298949048782769,"718":0.3220527919314222,"719":1.8666356464374625,"720":-0.2204025797203563,"721":-0.8127635487164718,"722":1.8282793004871085,"723":-5.222199602399617,"724":0.1403068770660741,"725":-2.2922524925934145,"726":1.6240762855468964,"727":0.9122714510105607,"728":-2.0403735732822437,"729":-1.7768466858401248,"730":3.33738492033121,"731":-1.833563944343219,"732":-3.232130986805594,"733":-1.350843186232598,"734":-0.2126563387281069,"735":0.49003144196159076,"736":0.1843952383648407,"737":0.9828434318944392,"738":-0.64957864197106,"739":-4.555800137515665,"740":-0.6828226541650949,"741":0.5815203170502361,"742":-0.05824400572383739,"743":0.4371538728782801,"744":0.008854476767694661,"745":-3.7026724071899366,"746":7.395747494710163,"747":-0.2220335951480807,"748":-1.8400176931127823,"749":-0.8458758542503647,"750":-1.9275599487837551,"751":1.6522965417884645,"752":-0.01772460102387951,"753":1.5329600471551277,"754":-3.9288877537922775,"755":1.3801595957781474,"756":2.3120672200619095,"757":-3.2363458687201865,"758":0.7383046273664093,"759":3.4859714512420448,"760":2.251858499643276,"761":0.17505196722941999,"762":-1.7182462897990438,"763":-1.069360801423172,"764":1.5181326714599517,"765":-0.15854312585499455,"766":0.1733674485681188,"767":3.7646579110178386,"768":-0.6368710597883571,"769":-4.364313001193169,"770":0.7424354863170296,"771":-0.9318022608547892,"772":-0.1700282543588626,"773":-0.698430524178982,"774":-2.2026855220172235,"775":1.507595642439382,"776":1.054800437875595,"777":-4.7055643880212905,"778":-3.2385876200318284,"779":-1.0826536197887868,"780":0.5021290831781554,"781":-0.12115753790884573,"782":0.8896137080220641,"783":-3.283117776475665,"784":-0.032233134271520504,"785":-1.6012674909886582,"786":-2.559697720892138,"787":3.2234052262849184,"788":-0.8852958534704833,"789":1.5108765133452617,"790":-3.9341384254234226,"791":-5.400915453308557,"792":-1.1532338211098296,"793":2.4111909046244375,"794":0.18890789691852966,"795":3.167946953845564,"796":0.5837268757602262,"797":-3.900938939608333,"798":0.4863747869622019,"799":-0.7806887502661448,"800":-1.4663386772940676,"801":-1.8151059555125837,"802":-0.7492493231784582,"803":4.9554403427183455,"804":-1.283008843690441,"805":1.8991258270848026,"806":-2.6473649347877477,"807":1.7053231499830073,"808":-1.0378411235136134,"809":-3.76288049183712,"810":-0.1397943948956417,"811":-1.038808946809222,"812":-0.016532957044189913,"813":0.47284934239850157,"814":-0.2948696641256661,"815":-1.9392695628441317,"816":-0.18368910558051188,"817":4.489911542233687,"818":-1.6631497140890552,"819":-1.7581843907983958,"820":-2.302692166498078,"821":0.4655011537955934,"822":-1.4597600934766126,"823":1.874761384304327,"824":0.9226848358536491,"825":0.9185392008502512,"826":-4.363413328886757,"827":-2.087073681960881,"828":0.14514033364078874,"829":1.418231353091779,"830":2.4676488622873296,"831":0.3416502214802694,"832":-1.0717354749823664,"833":-2.172119746907508,"834":-2.161445887171288,"835":-2.2570006803463665,"836":1.0276669392847413,"837":2.704828189445907,"838":-1.3330438887228864,"839":-4.211312723815679,"840":0.21860240165933742,"841":0.6461649287810352,"842":0.13155274652354837,"843":0.08558005245308095,"844":0.16516976004974762,"845":-0.3535693237077018,"846":0.5224260485985412,"847":-4.217311877570993,"848":1.458506037220153,"849":-4.394494389490146,"850":-7.151146692977004,"851":-3.254743722229133,"852":1.4684380732178959,"853":0.1337061971707823,"854":-1.5596765894410665,"855":-0.3860711481612377,"856":-0.4124661183692416,"857":-0.4742509856055224,"858":-0.012796335808881827,"859":-2.1301409257163533,"860":-0.5832623630897326,"861":-1.8782761994871766,"862":-4.390402477967957,"863":-3.560951914952104,"864":-0.3272760970068391,"865":-1.9907673985622907,"866":-5.223202500528606,"867":-0.10182231094330232,"868":1.1324150031537337,"869":-1.0183143422760155,"870":-1.1982178601444566,"871":-0.5939946309763563,"872":-0.561055446747712,"873":0.001618825940751415,"874":-0.31171157695535584,"875":1.413371039168518,"876":-0.35275735007245484,"877":3.6171564666879563,"878":2.216804508667006,"879":-1.6069085014059674,"880":0.9963244184539246,"881":1.7917674609928103,"882":-0.0700646982080973,"883":2.196867781779258,"884":2.6937642836775173,"885":1.5820276264567097,"886":1.768368986874586,"887":-0.8909900096234963,"888":-0.2366555259267067,"889":0.7201974562301899,"890":-1.5774367848228659,"891":-0.6926903321773967,"892":-1.1052190261864197,"893":-0.5107628315386837,"894":0.6910203615088603,"895":4.37588613412636,"896":-4.248509995574493,"897":1.7593397189090294,"898":-1.3150314188030743,"899":-0.9858357019916514,"900":0.9406690216972503,"901":1.4867510805778739,"902":0.7452666051031808,"903":-5.932437090175425,"904":0.4864720144223381,"905":1.064596080012499,"906":-2.4664353719514853,"907":-0.039955573351348694,"908":-0.7859941522185867,"909":2.0454271864154734,"910":0.5670884460966666,"911":-0.13193459377465028,"912":-0.6832551046567135,"913":0.39374161870737195,"914":0.8528318778372426,"915":0.6958549713715693,"916":1.2315626850622725,"917":2.0297290023008854,"918":-3.129981457204637,"919":0.6365807324076558,"920":1.8371633957222748,"921":-1.099654209444688,"922":0.9510007582442398,"923":1.4996992867531793,"924":-3.9037477112973584,"925":2.30971454101295,"926":0.8347250876239659,"927":-3.2466860440570366,"928":-0.9044669374007946,"929":1.027518608654589,"930":-1.1329055900256695,"931":-1.2643264917464396,"932":-1.6763925816387955,"933":4.757666797643564,"934":-1.3105469057922738,"935":-0.7078823685438619,"936":0.41084740417434634,"937":-3.608363927068817,"938":-0.9632651840882731,"939":-1.1061560103511847,"940":-0.6859060671206918,"941":0.7326029524529669,"942":0.10049902333109323,"943":0.8587281293152282,"944":0.05257179391012487,"945":2.6051319165850852,"946":0.051825475158321845,"947":4.342961080179196,"948":1.7444965876120913,"949":-3.6077532962684864,"950":1.4386567737849252,"951":-0.7687820484810811,"952":0.633121281564028,"953":0.5358533798188303,"954":2.710705902325001,"955":-1.7722870452713133,"956":-4.6606449921295825,"957":4.437984219703829,"958":-1.814601681530188,"959":-0.7474373737518416,"960":-0.13793052017735832,"961":3.2525946782371866,"962":1.3064915139157873,"963":5.861518682797965,"964":-0.4677489026041115,"965":3.522290309650337,"966":0.11975285999960604,"967":-0.6593893720326134,"968":-1.2779841841753676,"969":0.4169694842395981,"970":0.6163589426361209,"971":0.7201703600143617,"972":-0.20037241314796472,"973":-0.5933149694350728,"974":-0.5806271180220451,"975":-1.8300492275848208,"976":-1.8705181262935913,"977":-0.6683704276903154,"978":1.5288707604252807,"979":-0.026819323901589164,"980":-1.2872274780767847,"981":-1.2777491324042296,"982":-2.788225482405719,"983":2.745414584744467,"984":-3.572764415026447,"985":2.078219102001601,"986":0.6275294716198575,"987":-2.43507979787883,"988":1.8421427132147452,"989":-4.074657893733745,"990":-1.160315106366695,"991":-1.6324762475908734,"992":-0.5954681009669769,"993":-3.3767422689270687,"994":-2.2354393279912066,"995":-0.47186887138029676,"996":0.09642226024018731,"997":-2.9638621582124607,"998":-1.0984129905242315,"999":4.686645653922227,"1000":3.674682805806363,"1001":-0.8828386442685384,"1002":0.6309100155039082,"1003":-0.00035027202939102195,"1004":-1.0230875419167227,"1005":0.8209996755054603,"1006":-0.27990865053649144,"1007":0.6535559056531829,"1008":-2.285897968337754,"1009":-2.682642397758859,"1010":2.354273178546149,"1011":0.7012752829061206,"1012":1.42068536537412,"1013":-3.8167258129679538,"1014":-3.9221322185890255,"1015":-0.20700111771545526,"1016":1.2148899068091503,"1017":2.1934028089069697,"1018":0.0919226932203705,"1019":-0.44043739778118796,"1020":1.78338916417572,"1021":0.43984453393432,"1022":0.7463363626696229,"1023":-1.5146764217995408,"1024":-3.7694935543886534,"1025":-0.5258646118712741,"1026":-3.3079771429607496,"1027":0.019608397318468963,"1028":1.3491089857108662,"1029":1.8457790338949742,"1030":-0.16526399319778065,"1031":2.2830681353942146,"1032":-1.8314568088788032,"1033":2.709930611038592,"1034":1.8046719932220745,"1035":1.0868342211350004,"1036":2.5599210438162587,"1037":0.32406392009624585,"1038":0.6769137081584548,"1039":2.6659698441201574,"1040":-1.9178626901769296,"1041":0.24509086198680735,"1042":-1.8500537143496991,"1043":-4.630834032936954,"1044":-1.0344002426861212,"1045":-3.5866385111432493,"1046":-5.948942655024491,"1047":-1.1035731131729443,"1048":0.5397553019169956,"1049":-0.7558810916329057,"1050":-2.171335442841442,"1051":-1.3410763859799222,"1052":-1.4339338139627866,"1053":-6.943021114850853,"1054":-5.297865689952807,"1055":0.5661414538894097,"1056":-1.0828854449160004,"1057":-0.0779255155770915,"1058":0.06501450234473072,"1059":-0.16233320108613214,"1060":0.5178220457044042,"1061":0.09902461089633598,"1062":-0.0244073578958103,"1063":-0.2459464542088178,"1064":0.5114763083481618,"1065":-1.7923127993655072,"1066":-0.8469819071790505,"1067":-2.4832703298441148,"1068":1.6609343140496469,"1069":-1.6149267931886335,"1070":-2.0118378862823545,"1071":-0.40680933071762587,"1072":-2.842052731154779,"1073":-1.0671853378969411,"1074":4.16238054665325,"1075":1.3550453307826462,"1076":0.9900269072661619,"1077":0.4233394722617922,"1078":0.5192500178823303,"1079":-0.8538927972799375,"1080":3.0120298346710794,"1081":3.4298045670946418,"1082":2.7189736369400292,"1083":0.3389764403687384,"1084":-2.953311903451307,"1085":1.3834842383729244,"1086":-2.4320720742315203,"1087":-3.9665622411622046,"1088":0.27797439980342464,"1089":-0.6372589610424736,"1090":-0.18375392703918073,"1091":0.4530883691220552,"1092":-0.4042878534939326,"1093":-0.1622055035158377,"1094":-0.06874166688987116,"1095":1.0270349245649282,"1096":2.6374367682638855,"1097":2.045176491659844,"1098":1.4332162655743161,"1099":4.287073888051681,"1100":3.192744883051074,"1101":0.5188103102591025,"1102":1.4525640078739326,"1103":1.0471377504261816,"1104":0.2966926957183476,"1105":-0.5473730506833833,"1106":-0.04440483214282199,"1107":0.1481857233388149,"1108":-0.2347345439956393,"1109":-0.25313915368565154,"1110":0.7801414450758128,"1111":0.2071351873715497,"1112":1.2550765689753827,"1113":-0.7180334276456191,"1114":1.3507280829443427,"1115":1.8984279019386412,"1116":2.3213565285438627,"1117":3.798214059181029,"1118":5.0071064330605894,"1119":1.7683762889037251,"1120":-3.183174740867573,"1121":0.7605863435732461,"1122":-2.194748788113087,"1123":-0.4270800907746205,"1124":-0.24198070274017472,"1125":1.1115421545661404,"1126":0.07190331694476344,"1127":1.5469106939709367,"1128":0.3466841481902219,"1129":1.5337945741983963,"1130":-3.7719607604636978,"1131":-2.8919092178709214,"1132":-1.7648783933975616,"1133":1.1834777530564682,"1134":-1.3624184502122005,"1135":4.011999402846747,"1136":-4.415563565957203,"1137":0.5920639463222934,"1138":1.1102326941203973,"1139":1.5258568611478063,"1140":1.8290522265106826,"1141":0.26143885081629487,"1142":-0.8972240919658251,"1143":0.28223140036605415,"1144":-6.54537375595103,"1145":-3.723101119153152,"1146":0.9330260006546367,"1147":6.148168513501834,"1148":5.834657172414813,"1149":0.6437416836314984,"1150":0.43722699066162357,"1151":-0.13265260322541444,"1152":-0.9391910061561911,"1153":-0.2208726276129092,"1154":-0.11733071004321881,"1155":0.9565069095047387,"1156":0.2395260518738256,"1157":-0.8699199264222129,"1158":-0.031430068934559866,"1159":0.5744504856117082,"1160":1.303673944135058,"1161":0.37635889689189944,"1162":0.4150287027471848,"1163":0.4177913715443869,"1164":-1.0538130179380205,"1165":-1.0164102407480213,"1166":-1.2141007987481018,"1167":-0.17251790762242336,"1168":-0.4943658892607663,"1169":-0.9051581527494812,"1170":2.8829735776274137,"1171":0.3736178600360808,"1172":-0.7631262091809417,"1173":-0.9050248108845398,"1174":-2.9095241750663163,"1175":1.3758199189322338,"1176":2.927312951312452,"1177":-3.378850091962167,"1178":-0.01191850194180586,"1179":-1.5682224159754183,"1180":-3.851226359774297,"1181":2.6586363230389165,"1182":-0.4680257202244149,"1183":2.5503707926057886,"1184":1.6962034572794324,"1185":0.33034979353100385,"1186":-1.0014686778918742,"1187":0.17449523657046317,"1188":0.9671713387706994,"1189":-5.074155673720069,"1190":-1.5368867192638123,"1191":-4.722668517628206,"1192":-3.3105851700797473,"1193":-1.3738002150730493,"1194":3.900426484700127,"1195":-4.596743832836848,"1196":1.3070985816031406,"1197":-2.0730634123304865,"1198":0.20036834368357845,"1199":-1.8531585970634419,"1200":0.5012182674130925,"1201":0.10788469149768737,"1202":0.11407707949421461,"1203":0.8192859943421669,"1204":0.5842959013009027,"1205":0.7202997100173042,"1206":-0.7930184839119376,"1207":2.7185032056851215,"1208":1.5938017782667409,"1209":-1.7279654014615229,"1210":0.8979479075652004,"1211":2.0256722007811443,"1212":3.7944270079560583,"1213":0.5224753464149826,"1214":2.1275423014307173,"1215":-5.884452571383522,"1216":-3.203555122817598,"1217":1.0344657963740493,"1218":-0.2243011380310061,"1219":1.4404332232960935,"1220":2.295924316684365,"1221":-0.5517709597027637,"1222":-0.2446857056795819,"1223":-3.585780116074722,"1224":-2.1823177244034926,"1225":1.3364504517702787,"1226":-0.3272727663240226,"1227":-0.6636494238000028,"1228":0.5760471189693452,"1229":2.8413945478472495,"1230":-0.10963156574958333,"1231":-0.07974902467277768,"1232":0.29120162256900106,"1233":-0.17253934802492715,"1234":-0.14862701599087788,"1235":0.11641072954524352,"1236":-0.4884061244424638,"1237":-1.5622620659428719,"1238":-0.7121894156126051,"1239":-1.919031662340654,"1240":3.6804070012367465,"1241":0.3741267702544743,"1242":-4.636172128322905,"1243":-3.707576308094252,"1244":-2.5088370024918625,"1245":2.255587872003941,"1246":-1.6242797788102972,"1247":-2.037881193942059,"1248":2.1525723192246984,"1249":-3.4459311343374366,"1250":-2.780355837813675,"1251":1.3412646712576424,"1252":4.048130339136044,"1253":3.82140357245854,"1254":-0.4465575989118583,"1255":0.6892795889656118,"1256":2.230643303919006,"1257":-1.3295915811315961,"1258":1.6871530132967187,"1259":2.0091372254728532,"1260":-0.023076824524294704,"1261":1.641509261047254,"1262":0.31333786022909316,"1263":-0.25197492288212703,"1264":4.335353569120863,"1265":2.1931529075262106,"1266":1.2792843504556695,"1267":4.273285953451035,"1268":-9.403164731541196,"1269":0.44469292633472024,"1270":4.704729308986911,"1271":3.3078159291303466,"1272":0.20479507007102027,"1273":0.7502489598705341,"1274":0.8851776571664437,"1275":2.7838645207928496,"1276":1.8187775107780495,"1277":-3.7350595538309697,"1278":-1.4366813841943853,"1279":-4.137681312550018,"1280":-1.2989735299962237,"1281":-0.5075462403307965,"1282":2.339863615200835,"1283":-0.773759336059862,"1284":4.725849057003648,"1285":-0.8981123351149225,"1286":0.8747432731046372,"1287":-1.2771209936410963,"1288":1.2183700937601325,"1289":-0.5207920725501594,"1290":-0.9685430578669616,"1291":0.15954017911461651,"1292":-0.9414870835230049,"1293":0.2048866501356379,"1294":0.7500177547117445,"1295":0.4940455951351539,"1296":-1.0999217706791813,"1297":4.952433989159573,"1298":1.4636632150322497,"1299":-4.017362230725092,"1300":-1.5651106188678359,"1301":-0.6851531515640703,"1302":2.69457430977408,"1303":1.984737319925854,"1304":-1.392078092806976,"1305":-5.431842383141236,"1306":-0.6399113523786575,"1307":-0.8747702241612729,"1308":1.9754675733174532,"1309":1.0944411722506973,"1310":2.0848535194482922,"1311":-2.4259217810103606,"1312":-3.6483822466028695,"1313":-1.098681569454452,"1314":-2.8797034789507068,"1315":0.29832350758671417,"1316":-0.5444376858980082,"1317":0.21790950317420743,"1318":-0.563356363455743,"1319":0.3167621219884458,"1320":-2.088087579351757,"1321":-0.423909970824216,"1322":-5.048872600814069,"1323":0.21381438416320758,"1324":-1.0608214805032785,"1325":-0.006425708291269081,"1326":-1.2320827461563717,"1327":-2.1004483335218778,"1328":-0.20070452413439438,"1329":-3.3957480895224528,"1330":-0.24172634052699388,"1331":2.5264733965475137,"1332":-2.0334021504911814,"1333":0.04119127256733786,"1334":-0.243475952899488,"1335":2.716918545818575,"1336":0.08982961260178766,"1337":-1.731983995940469,"1338":-1.9533820884860018,"1339":-0.9632576451328174,"1340":-4.119593724411994,"1341":-0.46259933558771993,"1342":0.39165712517870604,"1343":2.0511665771384098,"1344":-3.96106231096756,"1345":-1.7878419978617301,"1346":2.2919048343295088,"1347":1.4747306607795045,"1348":-0.12764453109182317,"1349":0.446918690571054,"1350":0.2109189954070881,"1351":4.965525190216153,"1352":-0.4042770664588611,"1353":-0.3824993187063449,"1354":1.3496511361448187,"1355":-2.4071997223311463,"1356":0.5283356391241775,"1357":0.8843369559344265,"1358":3.317424919438802,"1359":0.2235375544663132,"1360":-1.204956137747421,"1361":0.9206762127654039,"1362":0.6443927816081908,"1363":0.6287377935392862,"1364":-0.1941002554393071,"1365":4.4903036041595,"1366":0.3762770544495941,"1367":-1.3876624034764486,"1368":-0.11743716303855038,"1369":-1.6853239435135092,"1370":-3.4864367378312338,"1371":-1.587624332947419,"1372":0.40598691437819057,"1373":0.5844193711750895,"1374":1.9319059036450996,"1375":2.1831045788371846,"1376":4.463821332095011,"1377":2.4297990631347295,"1378":1.613791697612271,"1379":1.0103649452961847,"1380":-0.052271469209343654,"1381":0.8911853366818984,"1382":-0.06113281862731683,"1383":2.701790886946171,"1384":1.4842743976417347,"1385":0.6683549873315934,"1386":0.4210266250600245,"1387":1.9834477089321336,"1388":1.285353492395705,"1389":0.5049718377046521,"1390":1.4270585021482467,"1391":1.8796028855639715,"1392":0.21283046504492245,"1393":-1.7922192665089667,"1394":-1.3474759110557213,"1395":0.39595993506595467,"1396":-1.1177530091534802,"1397":0.20112470043450817,"1398":0.9175135109817905,"1399":0.45297094755590334,"1400":0.6683946416329515,"1401":-0.09105272257502342,"1402":2.475643414411556,"1403":1.0847314461383524,"1404":1.6736828907891341,"1405":-2.402152584293613,"1406":-2.9444880041261134,"1407":0.1974774270902705,"1408":2.6995855896148044,"1409":1.6528371086019589,"1410":-2.496018196729346,"1411":-1.9779997894703172,"1412":2.5381319004741356,"1413":4.806459578182928,"1414":4.882135170181084,"1415":-3.606688033376202,"1416":-0.06084616801667037,"1417":-3.7759644579491476,"1418":-1.9406749086902964,"1419":0.9083995536071097,"1420":0.5505659295672329,"1421":-3.1902122914197815,"1422":-0.2705875726123355,"1423":-0.30962474681386826,"1424":2.844618101166969,"1425":-2.3877670075349764,"1426":1.5093063726604834,"1427":-1.089351599899835,"1428":-2.621133161044042,"1429":-0.055455107471061596,"1430":-6.433323298366654,"1431":0.180286123206614,"1432":-1.3493840423384103,"1433":1.645901256128089,"1434":-0.20691026508509042,"1435":0.39940419852706466,"1436":4.057803097365777,"1437":1.0018653612805237,"1438":2.190295902586922,"1439":-1.5194542433740734,"1440":-0.10562864385525629,"1441":0.9251149134270921,"1442":0.6782987177076975,"1443":-0.14293902422975002,"1444":-1.4146607199296968,"1445":-0.13196027066066746,"1446":-1.735630371292303,"1447":-1.806962574586964,"1448":-2.553432143718003,"1449":5.76716367411642,"1450":3.2314097542871014,"1451":-2.2279723641534135,"1452":1.4564932726673407,"1453":-1.434479931801439,"1454":-0.46853058516166884,"1455":-0.09526713949043535,"1456":0.38538057453916,"1457":0.32822839712049817,"1458":1.4655939130624946,"1459":0.1537301932516698,"1460":1.0389209929043066,"1461":-0.16584070355012545,"1462":2.198511401721155,"1463":1.3865599086741924,"1464":-3.4663823875841686,"1465":-3.2036486106500517,"1466":2.7712281155314615,"1467":2.6606747797658845,"1468":0.35537273194876073,"1469":0.25571651492862857,"1470":-0.4684489497380416,"1471":0.6291163956576582,"1472":-0.5920053372247249,"1473":-2.4593395130388678,"1474":-2.442423486892178,"1475":0.3979144230086623,"1476":0.030319767068166227,"1477":-1.6123135338546646,"1478":-1.6820105078734038,"1479":1.0542216629539056,"1480":3.327427129409425,"1481":-2.7364632498180046,"1482":-0.8190775447040956,"1483":4.8507617415115725,"1484":-0.71254450270787,"1485":3.9502384321796504,"1486":0.5961612520164637,"1487":1.3762292557923972,"1488":2.0730230302970356,"1489":4.851166975062231,"1490":2.544756234876534,"1491":-1.7901980889550455,"1492":-2.069232695921913,"1493":-0.06126087693232005,"1494":-1.3805497125696569,"1495":1.5585972697229111,"1496":-0.7479102579012771,"1497":-3.6270336658852833,"1498":0.7855795480249252,"1499":2.106894784443685}},{"n":100,"d":1,"w":{"0":7.161963802783737,"1":3.998351998247176,"2":-0.14807656368397853,"3":0.7910099626696564,"4":-2.1328158691841117,"5":0.9213687641809057,"6":1.245984905408141,"7":1.1903534309662085,"8":-0.7079821212431231,"9":-4.907203539291538,"10":-1.6423774467053571,"11":-2.214729176279989,"12":-2.88367529377676,"13":-0.9115534819746343,"14":5.7175711468530235,"15":-1.4962581624882139,"16":1.5222486850519463,"17":-2.8632141808540146,"18":1.8214077782506226,"19":0.2123301484138588,"20":1.4570031115294135,"21":-1.1670634682935919,"22":-2.435703268646904,"23":-1.4013019628134176,"24":-0.7869875562600639,"25":2.8831357779588354,"26":1.6559661835416912,"27":1.5589264191072194,"28":-1.289873271504699,"29":-2.946918620818316,"30":1.6770451433473914,"31":0.23083108776351638,"32":2.4019736196372268,"33":4.759565235811322,"34":3.385163472870525,"35":3.936444055874228,"36":5.155557431347915,"37":2.7057073354795156,"38":2.753647873906546,"39":4.936181988378993,"40":2.480200680686518,"41":-0.31000422864255334,"42":-3.7620660793733935,"43":4.1015808671475815,"44":-0.5049764437023262,"45":0.7004987344272554,"46":-6.060501318449049,"47":-4.2131376580406,"48":2.5048316450519588,"49":-1.335900437062645,"50":-2.663869872098275,"51":-1.5153029570593346,"52":-3.2872823482961238,"53":0.7090886302334427,"54":0.9936194315167827,"55":1.605592909513722,"56":2.3614131718257636,"57":6.750626680328749,"58":-4.013770036816418,"59":0.6439919298156013,"60":2.180133069120789,"61":0.8146811498921931,"62":0.7373840393408093,"63":2.2264413743829423,"64":-4.764495524177082,"65":-0.4812373207665014,"66":3.031586396828749,"67":-1.8076292529241618,"68":-1.2264046195425775,"69":5.787494890007476,"70":5.415741604865694,"71":2.543433422864972,"72":5.960455322877001,"73":-5.830262921436135,"74":-2.8317204653348367,"75":2.4076818930765196,"76":2.6965890742674503,"77":0.6050911833988644,"78":2.5834094300943433,"79":6.545547496486196,"80":-1.6619669770523335,"81":0.46252595875710895,"82":-0.5100320379736814,"83":-1.2865915838469477,"84":1.405076622176076,"85":-3.41696180335278,"86":0.2535536125923919,"87":2.0311984691894276,"88":6.5643237076629175,"89":-2.5428392448460153,"90":-2.6442117066032536,"91":0.587771149670831,"92":-3.1796499753087972,"93":-0.48578490507084054,"94":1.7536631767140822,"95":-0.7349072994831702,"96":-0.01405429853702203,"97":-4.932257144358501,"98":-0.8961924972485594,"99":0.503197259183818}},{"n":4,"d":100,"w":{"0":3.475350630714455,"1":2.172200760287149,"2":-3.483252379651794,"3":0.5802557093131169,"4":1.3900021116910473,"5":2.980389030002518,"6":-0.3913249649446891,"7":-2.2547240061779954,"8":5.4549504872016366,"9":3.0141845311441853,"10":-2.7032720555476084,"11":0.5617529143302168,"12":2.621047200934363,"13":0.49408449317617015,"14":0.67515227134477,"15":5.341192646572138,"16":2.2906437024895836,"17":-0.819785435666455,"18":5.778609951703413,"19":3.6436744407235384,"20":1.4791739013867122,"21":2.6687662888737926,"22":-2.6954198984181184,"23":1.788171179506673,"24":-0.25119180677552116,"25":-3.901161841137554,"26":2.23888977239152,"27":-3.254342017024993,"28":4.2853670677337385,"29":3.793584416381753,"30":-3.7036060006678566,"31":1.6452487297471308,"32":2.5749759767917846,"33":1.0710627641903432,"34":-0.5647023122930145,"35":3.334067228927975,"36":3.5509651914091274,"37":2.9077023610040844,"38":3.233368767731108,"39":-3.657342546661452,"40":2.283384652790214,"41":-2.2215538046210077,"42":0.1927872924730656,"43":-0.9398372608069112,"44":-0.8642840931496072,"45":0.2885673985744409,"46":-2.8540809179111677,"47":2.3741290749365267,"48":0.9014748517661912,"49":-1.135424290887564,"50":2.5223230552543034,"51":4.486105118365,"52":5.089441730594257,"53":2.9966661162451143,"54":-1.1725463202097897,"55":3.5476992712191913,"56":-0.6487810545236979,"57":-0.9834129704552635,"58":-0.10810193892034564,"59":3.013964995208921,"60":1.1261058042580712,"61":-3.3211553334968884,"62":1.7002012165184661,"63":-6.609967411997848,"64":0.7265995290509758,"65":-3.9503303660376123,"66":4.788197634402062,"67":-2.1786863580092217,"68":2.851685438605909,"69":0.6283367357274284,"70":2.4678017165020254,"71":-0.37202469070531285,"72":5.351008056537339,"73":2.3003924913991773,"74":-3.1865476514316664,"75":1.058244785331075,"76":-0.3667822804497582,"77":-0.1574118691478806,"78":-2.418018401720246,"79":5.6737873202550375,"80":-0.263882572838558,"81":1.648741715743149,"82":0.9827182660544277,"83":-2.4025268501429324,"84":2.313065573096379,"85":-4.216085241909828,"86":3.494689383054808,"87":-3.2944570329080882,"88":4.893039058522728,"89":-3.6169954445323613,"90":1.7776000113045785,"91":-0.8629357122486236,"92":-1.731135967068274,"93":-2.9417705557996277,"94":-5.0474920833988355,"95":3.894694294687198,"96":0.4799693958776293,"97":1.318202323322337,"98":1.6553814360154049,"99":-2.1379767245662875,"100":0.3767953871327009,"101":-0.03738656795099699,"102":0.18326776783511256,"103":-2.2193033567525537,"104":-0.2514977752794277,"105":-1.8290254661016163,"106":1.258533277115939,"107":-0.14909020361791653,"108":0.4523324286623198,"109":-0.8097074058530028,"110":-0.9580394250370804,"111":-0.8166147892124132,"112":0.10410141718697243,"113":-0.2526807023933037,"114":0.32126428029848564,"115":0.07199482309985081,"116":0.8968448899516439,"117":2.5779059621750897,"118":-0.6702398304587547,"119":-0.21237230608667576,"120":-1.37888791832844,"121":-0.3299993719630797,"122":0.4861751229510955,"123":1.7257015495743817,"124":0.28158011718162884,"125":-0.13529511355741025,"126":0.3762280100611169,"127":0.2755770459830816,"128":-1.2370361613527912,"129":-0.6687696320853334,"130":0.32445092011502014,"131":-0.2244368116282054,"132":-0.2873653519452441,"133":0.9363394487325201,"134":0.5187417036528956,"135":-0.006750310214076864,"136":0.776013201157513,"137":0.6544005142381017,"138":0.5537070964123842,"139":0.19156884043490255,"140":-0.08546109993300048,"141":-0.3692756636702448,"142":-0.18047051838198674,"143":6.1812774722606685,"144":0.3260925404063025,"145":-0.6964131972088088,"146":-2.1367643091560957,"147":-0.9532657478180777,"148":0.14478727255631815,"149":-0.4173283294487379,"150":-1.1918814516165934,"151":0.5267017522908667,"152":-0.4886697530687966,"153":0.686569924498184,"154":0.6483726086260905,"155":0.07166402252565804,"156":0.4272702651893971,"157":-0.06882352745231818,"158":-0.4788224827347002,"159":0.19768012518046396,"160":4.997280442868932,"161":0.60170446039755,"162":-3.9933143707342444,"163":0.18176303130940766,"164":-4.3612884088585915,"165":-0.28300870152404256,"166":0.6467552750961285,"167":0.21191641308765496,"168":0.1066741741215601,"169":0.13271923464523935,"170":5.91473102004189,"171":-0.355360509412241,"172":-3.247599238685536,"173":-3.5648548714716792,"174":0.3032568040129016,"175":-0.4561029483491105,"176":-2.2880992282938464,"177":-0.5267555168389162,"178":0.04639338937353408,"179":-0.3643156189994364,"180":0.21766214609005782,"181":-0.09237996059212641,"182":-0.08600424718735512,"183":0.07784974000900009,"184":0.36681707571383354,"185":-0.24126365127050206,"186":-0.47370894187967033,"187":1.3826545561187134,"188":-0.5109815288153305,"189":1.3077620059204933,"190":0.17691699617318501,"191":0.669512394898217,"192":-1.0664435427134378,"193":-0.02898940831969376,"194":0.33535055014642107,"195":0.003939234680208214,"196":-0.4096747866771242,"197":0.3487826618585137,"198":0.5926888778847201,"199":-0.28852596342872555,"200":1.0818788896308655,"201":1.9517264622002881,"202":0.3475117237866117,"203":0.22692098305210825,"204":0.5513979254017366,"205":-0.3625965569041099,"206":1.778866107309175,"207":1.0136771184511524,"208":0.4573918392968391,"209":-0.2930861320674417,"210":1.661893731193189,"211":-2.869439713595989,"212":1.114971831036963,"213":-1.1033926280833335,"214":1.2450142275689446,"215":0.7429794696294139,"216":-1.3891673599422505,"217":1.6406514272220578,"218":-0.25439151612483896,"219":-0.4720570649051767,"220":0.6542583454383152,"221":0.7008202927999398,"222":-0.826121463155185,"223":-0.4115279756234622,"224":-0.7307221627130676,"225":-0.32830099403120644,"226":-0.9076026237597155,"227":1.020852926507484,"228":-0.37403844102401174,"229":0.944542995976972,"230":-0.8621060081155976,"231":0.27539928670150543,"232":2.251927838893278,"233":0.9930276921787011,"234":-0.909728396551849,"235":-0.004504286741902237,"236":2.4433633450339705,"237":1.332057395496541,"238":-0.03622934422188558,"239":2.43983189133893,"240":-1.6493878909600004,"241":0.5107168728586615,"242":-1.8365194344019906,"243":0.9380743565521054,"244":-1.0231868218829856,"245":1.655311477975799,"246":0.21905688184109495,"247":-1.7169587220628297,"248":1.0602575468066375,"249":2.947279334878867,"250":-0.07039223269172432,"251":-0.9586862798018421,"252":-0.5932691461534758,"253":-0.003597158420804995,"254":-1.2677620094787403,"255":0.27777684956343,"256":0.9208202742101524,"257":2.519243679973687,"258":-1.6527564885082953,"259":0.41040943634574617,"260":0.01285468204461564,"261":-0.6279662636299975,"262":0.42973064864234184,"263":-0.2925228611766125,"264":0.9463381796816992,"265":-0.9561313594389628,"266":0.4119954946194659,"267":-1.137577054646442,"268":0.4364998680317838,"269":1.5309217824420074,"270":0.3244163108723663,"271":1.59214814433748,"272":3.3372569691288785,"273":-0.8791057135655307,"274":-1.6283707768161733,"275":1.5409190156630852,"276":-3.057109686585044,"277":-0.657487807055759,"278":1.0096439209225372,"279":0.6948130333295647,"280":-0.18452214213340706,"281":-0.6152998356381103,"282":-0.02274019090371257,"283":-0.6916170161402477,"284":-5.605983894608967,"285":-0.9112193399075599,"286":-1.2404950453799513,"287":0.6133435570122042,"288":0.2144904584177069,"289":-0.656348960861366,"290":-1.0947353359078038,"291":-1.604689073879981,"292":0.1810955073037113,"293":-0.36146885155662223,"294":-0.41020263864944323,"295":0.9698765224960171,"296":-0.18990042744254115,"297":-2.0915879015058803,"298":1.1448211841166476,"299":0.7262156679574557,"300":4.542795263515375,"301":1.165665560042935,"302":-0.5859763122733415,"303":1.030709490147497,"304":-0.37816176583075395,"305":-0.3339529117987309,"306":1.06813604508747,"307":-0.19731824510055043,"308":-1.0769515704344201,"309":-0.6169703022036408,"310":0.7634400182131755,"311":-0.8573435712943486,"312":0.3442592396115642,"313":-0.9287116648156787,"314":2.4869934966776404,"315":-0.1847953963972633,"316":0.9011069183483172,"317":-1.34805705021474,"318":-1.5980382347554942,"319":-0.16415086140426202,"320":-0.9636402649334619,"321":-0.4410866624946068,"322":-0.15547775438057332,"323":-7.424439657977518,"324":0.6917572469871188,"325":-0.17369169260469852,"326":-0.3881556892412245,"327":-0.21981867563567545,"328":-0.13823893360892234,"329":0.03456917342808111,"330":0.46157319698335386,"331":0.8102235690402002,"332":-0.08656578922792975,"333":1.5329818397795478,"334":2.866995063978727,"335":0.1400018417739298,"336":-0.21718511267215404,"337":1.1294499062273868,"338":1.8973935934418371,"339":0.536044191664787,"340":1.1302608187677134,"341":-0.8054327437398185,"342":-1.067252599012793,"343":0.5474755146978398,"344":-0.2296491746855203,"345":-0.36980044549106217,"346":-0.45369949299688184,"347":-0.33226857684518957,"348":-0.265454725435128,"349":-0.8898272954835481,"350":-1.642378261907528,"351":0.01530762908637984,"352":-0.1897037338536947,"353":0.6060170820169551,"354":1.8303461274312176,"355":0.08974402940032573,"356":2.691122053923566,"357":1.3545438274740014,"358":-0.3470784776791383,"359":0.052598512188923044,"360":-1.3560757420910752,"361":-0.5387380820491906,"362":0.8832918587490598,"363":0.23768146539068172,"364":0.07438246672014183,"365":-0.10895860984433199,"366":0.12192211719069432,"367":0.6591400465055588,"368":-0.9903403762183075,"369":-0.6100356106252575,"370":0.36175901486675843,"371":-0.9692351926477029,"372":-1.2894352102342006,"373":0.27233564811110217,"374":-0.8950043560809728,"375":-0.4136353099939247,"376":0.1253537897990629,"377":1.1793390777535124,"378":0.5463754709421614,"379":-0.5299205048423998,"380":4.091837630894208,"381":-0.19069392213110375,"382":6.307044921998293,"383":-0.3698812984477306,"384":-0.17528867869559536,"385":-0.9376300726593455,"386":2.5214553463432625,"387":0.035846859516129335,"388":-0.4772471599545667,"389":0.39894137258521667,"390":-0.22142731824067216,"391":0.4680638748489476,"392":-1.9321795848537373,"393":-2.0530835655951583,"394":0.02657312119380704,"395":0.14262739317798737,"396":-3.5187411784941376,"397":0.8751667432930382,"398":0.711066759941617,"399":-0.31055788348534685}},{"n":4,"d":1,"w":{"0":-1.4407264391787804,"1":-0.35588408196994076,"2":6.8657512119569315,"3":-0.16163906463573355}}]}');

/***/ },
/* 223 */
/***/ function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var data=exports.data=JSON.parse('{"q":[32.587590220348105,45.6481689483731,55.86904020071901,46.527599436212064,34.584013141512514,44.30570887565101,53.48398128798802,46.91509384551598,34.540472521592264,44.19855272950963,53.64075121867855,45.6124355675353,37.469687006282996,44.53450736557635,53.102138942875946,45.10930194831371,29.649060306725517,39.15681416461912,51.506124774227075,45.56708524157676,29.3866525360393,36.993574822324746,50.47522638868742,46.484517348091444,26.23361736297154,36.02011443016316,50.66519152432548,41.670768828144354,34.900170342018804,41.187162557303196,35.78659928469869,47.27081199990914,33.15353543705051,-2.626415886005998,52.13342676463732,40.403955421275455,31.006969818534557,-12.01987579930749,55.775922459930236,44.622516303175814,37.005131136882866,-7.108425511044065,54.37826331128143,44.092174709877796,33.50715849714764,-7.620842069483343,54.76247814214273,44.668288692903054,30.815559156140132,-4.231211276352334,48.24367369072772,38.027693754213836,36.69857196388384,-9.95510152193766,39.05455984389488,44.430379391182086,34.86974167233832,-5.676602264564339,51.457267176999885,45.41410154702742,35.474426659569005,-7.798839815243673,53.42586193059499,45.64906330439393,30.573748565127776,38.37456489596683,50.13254287035976,46.03759917982809,27.269309736999368,35.542235693885964,51.338593963131416,44.225201033088894,30.37110781433053,38.139797825472996,54.06733163478859,43.266823435041935,36.93440969053738,39.4687655108827,51.331853336513035,41.841966652244835,23.846163317175826,37.648746305747636,54.68605281286899,43.76158243815004,10.54086231043037,34.650933708382766,52.30356661638114,39.46079236642648,27.963171937866626,36.75822055645026,38.93118741966207,44.628232549374545,18.436582836369976,36.24759926089994,42.539041337073094,45.705692846538724,30.6138557330039,-13.09592155651273,51.077232127637785,42.82389024843565,31.512679116116317,-13.134356398020689,54.111922701795365,40.27989724624856,32.66094712780662,-11.402948407284258,51.756515405457236,44.77157764673099,30.43140689430061,-11.743370133010119,52.7786934606114,38.87146216026542,29.59296630569968,-14.877238746583188,52.11153659816505,35.25572797605689,35.05291989159743,-16.37198418753147,52.49939436779993,46.369356980274944,35.13674374380245,-14.065415740916748,54.10531018876993,40.154916085886114,31.19859755080053,-17.482413699239984,50.658811049028074,33.77839605410287,36.73242725369513,40.48133922494391,50.72672783173226,39.236579768399245,17.339970929400707,36.84743371995161,43.06369970972089,39.13843515855764,35.32365702790262,36.56719705372501,52.47826212902097,37.817706495007926,26.268172598586524,40.20991361001384,47.887387394045504,43.739652578337825,25.31388795137646,35.58989526714585,51.25449344490456,42.23600548191337,36.41561226076147,36.95505707368126,49.35861841591736,41.0638269735533,22.205516770570338,37.86673536016963,53.58492879292936,42.15071761672238,34.17965021349204,33.454733251185445,32.60874234487238,40.093793565652966,33.388253317373334,-10.1243345424479,40.14551890573514,39.559640364685905,35.411984700156125,-10.253718890192458,46.52679039882619,32.96668157640709,26.92168419008977,-15.558747450983297,52.944692011247646,39.50005458636028,32.68284913189283,-13.874636347480376,51.708949268164574,42.89597371275428,19.151374089509712,-16.77385860069143,30.437374832423895,38.04772734730909,35.5376518624608,-13.891378522375392,57.22632971772985,39.76076985385513,33.43160178217843,-12.730249958075202,50.47053502820721,40.11397716369656,32.056823670265636,-20.45353936772652,52.87153074322281,41.498950752246884,28.1335748417903,31.870285781289372,45.66908799828357,44.297807942892916,21.95052955333708,34.63479697829469,46.86616757648773,43.16635158126288,21.095240055954843,33.27794182233934,24.7308644920639,42.320991556864904,18.263604799193836,31.724225230902878,48.275703359828725,33.63905998947918,29.131906383612044,28.99755322398768,30.901202529945415,40.61495822133123,22.937824724055634,30.031993692852698,31.315060731145483,44.5840743067565,21.954801665033624,32.4958932975285,48.82297887786353,39.867337073692305,13.11276568531471,30.393962296380167,27.629832275525256,43.27530983488015,31.58605252210958,-17.461112255526743,35.39995602973623,40.515098063522046,30.79698942947918,-15.63263041926043,33.039535707265514,31.280168943363094,27.583179944258568,-15.046599162103444,34.93103330521759,36.173504477007256,36.269890639677214,-16.768890039549746,52.69827873507965,36.89537472119599,29.15718574883066,-16.729935265254937,37.008085716478554,37.610862894321464,25.705416891487946,-29.26541150532693,51.08531005479157,34.74547562219048,28.28476136476569,-15.548048874236763,55.18783751941971,31.95401119677995,16.82111464269214,-24.469878049866473,42.82858375821029,22.37458614034673,-17.702421073807248,45.38267383774966,55.52580214478108,44.99758344388293,5.168739473082205,42.99799529269668,55.775804224683036,45.288951304508295,17.657057174118545,45.258597480098224,39.99176653705078,44.842879275680474,-12.929140229726912,40.78055766039609,54.52826270913245,42.713022649743834,-9.84974463924376,35.78159989353096,42.733691191904185,44.86668072154785,-2.9506370646990976,37.36518558649851,43.71695070322366,45.0254843774038,5.4787155272940335,37.84311619378189,19.415415752546174,45.53256210388538,1.4273722593961211,26.032629831840524,49.36233525715968,25.31918547523265,-27.986253225949806,-7.452625994049618,39.65646749833615,45.34180068828356,-4.159054044409544,-5.307908454131039,41.538216794106354,44.96593702313508,-7.568498354752666,-5.312589435512407,40.73083280994469,46.14964927260641,-8.361151009374582,-7.339244763522617,43.316833452628764,46.11366422996363,-4.652553126244447,-10.75170847474353,50.62466875269293,37.25312817400296,22.50306136693583,-5.788835541178103,55.88754108821319,45.491264178965785,-45.74133644274147,-6.000581838887123,47.9754431695612,21.27805444326973,2.5131343164947855,-6.860755770966912,50.1339006281236,12.38593271457857,-36.162143155293805,35.584800310108555,50.19900442166001,42.62870977490733,8.246797266892923,-0.5809681606509836,54.449809236802196,37.67444990131111,7.147634197332955,8.220243382888524,51.64830522181377,44.18444180814367,-10.107441357284767,-2.2909881165925654,52.63524519154425,22.239658040098707,9.867658785522366,10.733788328328895,52.30006890265676,35.90734975404878,-15.542264070357204,-3.855567013062965,41.81867427506531,44.6985913942879,-11.101283541265614,23.414348999530336,53.61428951828173,27.369183013463232,-6.1204433460627845,-1.0942982083661914,56.90671640983264,10.301863246435946,-18.466312098067338,-13.489832007219432,51.85115320355918,45.46959245498726,-7.267653474895956,-35.19961039491706,51.79594314760075,40.869477574979584,3.748368581810543,-26.875630529515107,47.78271399965876,18.11718895481361,2.222243268786305,-24.82292516712584,53.394764177825074,0,-1.4666234732336276,-40.888006484465436,55.067352788840864,13.59379204662056,-6.478341645858796,-53.88690050017552,50.65009574129569,15.805543010781356,-5.230958586334939,-13.092443311555247,56.59127045274854,16.264351880814026,0.6295197476300665,-9.711432725480872,56.41108544138128,12.694869457667114,3.9807552522962593,36.42520448612223,52.46615979727275,40.20102767063779,17.31459382573728,37.99339554602288,41.805408396084545,39.92467064557007,2.5189241720388567,34.73992528797607,31.100513033068392,40.24303884672466,-3.460385546213321,25.944131495132986,35.17729987153177,42.24745243508678,4.520287073469466,36.52304277981681,41.268343354228634,38.77012977068981,11.708163757214416,37.131049965409375,30.079957168992816,18.291057884296446,-2.0124147700794075,34.88725243008296,33.73170592407724,23.134380373430535,-10.482871264874968,36.47132633447354,4.622625845373392,0,-16.211696440558253,-13.041789661581586,47.85243162182333,40.19336711286429,-15.340706161062663,-12.347984865731693,53.705051454249585,23.405162403764255,9.1879399355403,-16.25959155524293,35.001249818801504,42.062813999144026,4.533715708909614,-9.885882428181638,53.42947560166221,19.845900510700712,3.9360856315839716,-14.25244299611839,49.95771018329641,32.79136232324839,-18.75046176234904,-8.95680965459232,56.54800180435033,20.592867825776928,-11.976237315752549,-5.1000000000000005,54.73965725079229,7.265891653671838,-5.732742717254265,-5.1000000000000005,45.598726460913795,0,5.411216122925794,33.818151489606535,57.4817973808129,32.66530711536709,-13.301716080949177,-6.753554555805503,47.543244109716454,37.50137091801342,-27.133075317516894,2.9250698981443497,22.115904291961773,39.770178133037874,-61.85719240728371,-2.310960392155207,56.32414147861122,8.74233573485592,-12.867080751820616,6.982065369171099,48.19601990501105,16.391827463139627,-13.837896537780974,-6.21790706237894,52.73704102960575,11.963129305046142,-6.6822311877015,0.14592271713000346,34.7567100177475,37.14025187154589,-0.9642506694764361,-0.1869098575235168,42.46927246989955,0,-58.35676484001812,-12.933563844515056,51.698728408440054,26.856130788121686,0.25345716315354294,-31.632330572446957,52.783271619486456,27.448510042900775,-6.1000000000000005,-16.444000030515756,52.64353776322759,22.32353471370444,-0.8814609660700304,-13.833121566003964,0,39.93031896049195,-8.163272623828027,-8.3650754051516,50.33623971899134,0,-1.6414395601697416,-5.1000000000000005,53.11585339634364,0,-10.213625,-5.1000000000000005,51.54357111539772,0,-1.1125432222329505,-18.852515477714952,43.6069774200757,0,27.808919158454124,46.53762133154904,3.064190222364347,43.68301184823838,23.66448538320573,42.57924261462981,1.2802778646413517,43.75455974333087,22.728248222431212,46.30528893663039,-0.702388759441499,45.1864251652838,23.685841202496317,31.042345627618758,-0.1189235388000267,43.989304008861794,29.673642107979408,40.26126013860393,-1.8639790374711442,44.59001830900429,25.114349147985795,26.802399734743197,-0.6571415604423375,43.63733041768763,30.254399570312128,42.04849371980703,-0.2515225266680118,45.4431486662454,31.508301565082032,26.24025542961994,-2.0096122812909463,45.232440617293705,26.22999011616913,-10.170921167725863,1.964461048758483,44.44563184067108,25.79050641469856,-6.201323210476144,2.015905032507532,46.854893777269005,23.531688989284337,-5.911728814864816,0.633981906705679,46.02803511057502,23.56437648478555,-6.1515750619405205,-2.2674691387369807,46.296004064948264,20.292116224465,-10.133513189005857,-2.7247005044342205,40.004836043297374,24.03318732676897,-7.809067934816374,-0.5714606363923651,45.58212221897154,1.226463870049614,-11.827749617094334,-3.9999321411263784,45.73082815359886,19.802931569759146,-12.59686672843911,2.180207045478601,46.546072076031,27.312949597183405,39.0451218482921,-2.3266458253240887,48.1865770338587,21.110811489650615,30.62110530614727,-1.4029476004820611,46.4219846270502,16.073916053342625,30.193298649763253,-0.02246983520628479,46.12226396295758,12.255191985837097,31.929483347531214,6.149425242374932,46.58620321028819,29.318374999427473,30.040125902536662,-0.5151396979523032,46.385298521950595,15.79365909696595,32.47119897858135,0.04770345335291418,43.368043683017255,27.46548422610399,31.425732444692688,-1.7632725636907935,46.97064861166538,-6.055405290509725,31.7144230427436,-2.053903022775064,44.80800055535411,26.234780445460498,-14.938773064636854,0.2776082403539998,45.344854770299776,25.896839459853705,-19.144258597345296,0.5994858359580006,45.7937413368146,25.03376665322625,-18.68274833713815,1.0988301636834357,45.629693701330616,26.997640087055487,-22.141431984313723,-0.29093828639867336,38.39765592809444,22.11984693802508,-22.755558848481876,1.3633547944366582,43.118101600111245,31.51312107635498,-31.995415683162438,0.43023834613524015,46.12034832569675,21.289581087050145,-19.772409696179636,1.0351775312575187,45.34008035682015,26.41382486961463,-18.204572124590573,-2.4090877177239287,42.2463074853366,29.35234288399483,33.09441764185002,2.1825007677154202,44.79223176714003,20.868685830872497,32.162025287221375,0.4705868273775637,44.23890640398706,22.067384630206547,31.338557327626315,0.46213877447217855,40.7394861685791,-23.91237717339223,28.00965352154674,-1.6305190820994728,44.96392059468449,20.521921427254284,31.242526617431817,1.6711178698251283,45.00801516386769,14.802195969919296,29.768121417461693,1.1749976727518021,46.92044612274839,20.344562288919917,31.567262895259386,1.5024372333563907,43.59394885264404,22.483903152601258,23.84487753766361,2.0269327405876116,47.57249605356055,16.901378260677063,-20.213381579922796,0.13942159948816613,43.311817942376315,30.005860582417718,-14.887851765230081,1.0318931100787259,41.50013055446647,25.575855163480103,-21.601632642135197,0.3494501455274017,41.3123255249554,17.967076491680956,-23.39212365136202,-0.46632839986459995,40.98896429901705,21.975236699167585,-20.595630614903875,0.36239093205873163,44.754808308023144,19.19409792445169,-37.214840592898696,-4.793583096768567,41.82416985190005,13.814104966396691,-26.03612160998452,-0.6819259150591391,42.186374676840266,12.862614099159586,-27.307219072144903,-1.9158490298132642,43.51106535057753,23.44595464688201,28.775771338083622,1.824864769101746,42.19486994247072,12.398278424732927,30.109325755120416,0.5013704704527794,49.50123106039908,20.465930884207005,24.234498461684467,-2.3542516292279005,42.634066842347465,26.612215147452506,25.072005177906867,-0.29060172363125236,41.94684868591014,25.815935464219756,27.599433795644597,2.1138936854564454,42.216535294101426,7.626448581515875,30.94816373952276,-0.35381502389424097,42.971183051710284,30.592086537880906,26.14425524720127,-7.66097941260188,40.92998995610889,4.837346417918015,27.851169570825846,-9.655448595616914,43.81596904122222,15.951683157496714,-17.4524832007551,1.565313093199012,46.442769872415084,20.52410835256055,-24.154829471017088,1.2050982669712176,45.06268441132694,22.202356529525172,-23.722225317052352,-0.6541266878317733,46.08766762804102,9.492052001029629,-25.863098760504183,-4.930092029005697,45.24011941495699,19.925175002519904,-20.764962229452312,7.99902371699736,45.092527708782235,7.629423558232451,-45.325430365533705,-4.151508899442111,45.66056060175247,6.521773221236726,-33.67112040988221,-4.521365312551717,43.323267054165015,1.952850056817188,-25.38374940079466,-12.820813682060766,37.880911357131616,-11.361458484040886,39.15668564506394,0.5430230195510792,33.293075884316956,-5.492286133551586,43.26077590071087,4.175061790473041,35.904306430001455,-1.1505189887857936,34.62350417641903,1.3596320451269697,43.23771068405234,-5.014927283461139,31.258912903796176,-1.9870382716103299,44.13755006425508,-15.965011249746585,39.10376620937766,0.4865434879759859,44.86604867016422,-12.586572161243936,43.27783519880084,0.8998383501282861,10.994976057489717,-19.697089416400125,25.993424406670858,-1.8348421263799706,44.90951901123393,-2.3990528331758574,42.182470864140164,-0.11384768569039552,4.362488554122844,-32.55064624718299,-7.722969024403082,1.878849617978559,43.31989420234243,-12.82028850213971,-3.5317085706038625,0.26662628011937217,44.293055925300955,-21.617089512223608,-9.950072778108622,-0.6743615434994518,45.41397115963548,-1.104673461285397,-5.089542676911508,-0.7500700411640051,46.33019228061164,-1.8094105438183063,-6.3223589132845,-3.1555106560133352,44.82344339409521,1.293476031763658,-5.7866624192773495,7.397162504052449,43.713955410081226,-3.208754034030844,-2.169396096566865,-1.1201839077900504,46.51344001647033,-6.107950007656421,-4.652721421342323,-3.944844983615155,42.83839304454129,-23.442601744844314,36.67797031407024,1.0648335450029274,45.56419992242035,14.40255976506283,-1.4045079276594685,6.311712402134335,45.8181826061377,-13.400061408251101,8.09895059334628,-2.816126243197536,46.76915391804662,-5.209753840559301,-0.20473095981341088,-3.0039089437219912,45.024045262945435,-4.206259766843582,6.319629841381685,-1.518556547297845,45.43904080633455,-6.9843180652435635,-0.9197778814141703,-2.0452070835438945,45.30137465728941,-8.130959467930179,-0.0488430798407645,-3.2012761366472433,45.87559796926593,-1.1,-0.4995187717506471,-4.1068638921875005,41.757429127305976,-13.403075935210968,-7.782772071832445,-1.9112212201043632,44.056674792387405,-2.772854183416838,-13.856398382976852,-2.3534092712200807,45.35775149757212,-2.7483067527340443,-10.500234046378718,-0.9095891422044609,47.61989432959145,-13.257219070421275,-5.426936802469503,-4.519353870323164,44.354755050598854,-7.262741455544193,-10.060289110019017,-2.6702245123231747,44.888844609290516,-1.1056738943201967,-10.36572688678232,-1.6866238508416804,43.75408675848907,-2.1000597760169546,-5.1000000000000005,-4.1000000000000005,40.408290050355326,-6.1000000000000005,-10.194790942319933,-4.1000000000000005,41.18627557004662,-8.678422590644226,27.238488547263767,-0.27964129544523414,43.41673963933677,9.503032582637125,18.6006210888295,1.5942997662631129,41.43369332814551,-7.293522025005344,6.531170315771628,-1.4744513373718044,42.00448763955419,-55.54469917968741,0.30463047683013245,-2.244233602370095,41.00081623651856,8.209040733126695,25.91728522298181,-8.578421350432379,43.41174292848011,-8.165522570398533,15.573624323038192,-3.027397942413794,4.73453916575112,-5.65156638219863,6.597263116974391,-2.1473051105993375,43.896324807587135,-1.1104429753550797,-0.12171780579246393,-2.84134088587524,43.10112400610062,-8.015744486624822,-16.53901000744157,-21.18540774972365,43.201350185646994,0.07481747827284879,-10.54641723367074,-2.2789197323764876,43.09120567922898,-7.677520288025479,-8.209227057460463,-3.513479990769852,40.33878846216611,-1.465664417634402,-5.102789955924245,-2.3746839702749156,41.642456099628255,-10.241019415775957,-5.095019251020748,-2.9807022533144805,39.82433725653639,-3.160743747889384,-9.680372213560506,-0.29041111749571946,40.9965925372886,-7.902892066517669,-4.8471046239288755,-0.8527353689660794,38.030076907591535,-1.1048613386670418,-5.112964565837672,-3.964062075230102,27.599929659513485,-19.116628785023764,16.163615530832843,-1.470488639676898,43.55292613550335,-14.073633751529204,-2.5880039877389978,0.6237114983922001,43.82456667187321,-1.68325624497751,2.852396734886927,-3.4245658338951337,46.04621317476108,-7.455786016061673,-0.27305188180008644,-3.8459938913328777,45.359120538768636,-4.529783120478202,3.5400580174559226,-4.970578128047955,43.72567393480196,-1.1,-0.4436411252604572,-4.1000000000000005,45.8854848115678,-10.213625,-0.12819045916212388,-4.1000000000000005,44.71935833694208,-4.83303313710705,-0.6633086290324514,-4.1000000000000005,43.12365108651243,-2.5657498333359725,-5.10136881055282,-0.08771757472875946,41.83391452580045,-1.111595414281364,-9.942852213526049,0.496497493370057,44.2082834521851,-69.5110650165551,-4.977619750255116,-0.30759168809500115,41.03847428070934,-10.213625,-9.691119847178125,-0.1531010069098464,35.62379148266851,-1.104881898803944,-9.706726235504846,-0.06537128408638182,44.88079201563624,-1.4757324420799243,-5.1000000000000005,-2.0568770272757213,47.41240089405068,-10.213625,-5.1000000000000005,-22.405711604168566,13.96283938785832,-0.8531882777488475,-10.214584836812469,-3.2834855852111104,41.54186192467165,36.53321643900587,39.533261651365116,46.682843678276285,38.955674919120874,32.24959850007991,42.35338473284949,48.751936632086164,43.67096723681804,28.81223277089964,39.70199712539424,45.956200687464204,39.45934011317121,33.02318530689391,34.65468632761709,46.775507314885786,40.738524239988294,33.80111956034483,34.96617076218734,41.96866878950085,41.89691817659637,34.74437616503753,34.62435037292119,49.96748336950185,35.2456682835963,29.853335658983053,34.85876878735404,47.31381561420476,42.28114606469981,35.62647785600253,28.561296761620934,28.371653857423784,36.47982087322718,34.8066862094198,-6.927627935327324,43.97392720562555,41.12040407858018,34.75224697921054,-8.766517067297997,35.21463576849699,40.51068665273266,34.80295003396245,-7.456729087962612,43.68561314302534,35.643888580900786,33.21567440809884,-16.521639349156235,47.698296804642716,34.3966440718257,32.65746216097948,-15.80073123225479,42.23948425593572,27.085493331284447,11.634684937077468,-8.2333972048915,45.71337433833954,35.45134106745903,29.344190031963834,-8.171465098724996,39.46816271350521,35.2274470916653,5.694095877363029,-14.470881275489067,30.24834453241659,43.29020989338687,26.397370644324386,34.50404412410353,45.70006112687575,29.90194423536528,33.93089749251758,27.7917750745595,44.436951016942814,36.0514941220868,32.612225056898225,31.22744872825246,43.340018220556615,41.360122307155436,24.802214362981324,26.613863527192773,22.779809735999095,35.82876113115681,20.751364736103806,27.45788129230154,28.857746636825745,42.50244321068922,27.744974229837634,30.584363976043424,40.088408573742214,36.14912136157905,21.544997223311334,25.758778631311046,45.55959996874815,32.90979096600673,28.007935377421358,25.791831320709786,31.29284074850537,43.90432121487871,32.257203484769924,-15.739786220267266,47.89719563717891,31.202657528975642,20.06492342045069,-22.952351989014257,32.78172433959864,38.347846937228354,25.095021427765825,-28.486870259290566,19.611386293976643,36.22678207052052,21.565620760269265,-25.520391285531318,38.64212889902227,30.63809859283424,28.567404994260325,-22.86459734399476,44.79783701869058,40.72750529941853,24.616224168397657,-29.52255788361819,24.958089711080614,29.825191591566693,22.347964704721008,-20.037161218685444,41.867901830426504,37.00901861012972,23.547340332115656,-29.73870132194138,21.991087751266527,39.3571785842343,35.518026470203466,28.394050450014785,43.96786221301702,45.40665318504543,37.72424920807237,34.711439086883864,48.806400428349356,40.355574018013534,29.823373160025024,29.623926754541547,40.01904274085713,34.75842141584758,25.683483469284763,24.377150291542055,32.637367293423125,39.52794663981755,31.08398088899682,31.204485109312255,24.883496522188054,43.17018189207821,-1.6338009165117464,27.89211809391292,40.941860623687475,34.264990509946074,28.874099126216706,28.970141742064754,22.915503858534983,34.617836989966094,33.48855517678072,21.729973382497544,27.334116353640713,36.22414387329648,25.2014141107733,-16.255127230629967,46.162011907979654,36.70852172642663,35.3149317801408,-14.900676760325483,50.02928594449176,26.29809713831571,20.981534264517705,-21.235445878181537,19.052815288803853,42.21830577836764,27.908647903877995,-26.60224040624564,43.5830982519329,34.41125816137256,15.649221298269275,-19.822530210335312,26.858201313365264,43.10575187074984,27.88703589603181,-21.27606576054528,42.62748407569197,25.792220552468542,25.01015170362999,-21.156699205883587,44.422348020876754,29.509941312695425,16.969050710823876,-26.384122047485384,20.817088476183656,42.580496724823554,25.423010022414694,30.756870080037938,38.04152073687645,46.5919444592693,28.16460199925471,29.20069975045857,29.959477242500533,47.10349481858469,27.3517676584816,28.597365034378136,48.58130540378429,41.99864753770545,24.216359671906925,26.492508257541168,38.31264151450123,34.26107598401932,25.82223136494972,27.456562668716543,14.988999283286965,45.93557046806316,30.355828909867192,25.5438291906888,24.096102322873104,46.58148483350013,28.334197338473757,26.023036160758377,30.395320355826154,46.0878671995254,11.565156505882236,4.768644280824372,22.282081779724493,47.66722358328932,28.981748908099814,-17.82223908587083,22.52166496264666,34.293585182060916,25.9828244787641,-25.634738557604372,44.740603169593925,29.071823073531558,27.48452015353243,-22.27713483962842,39.505347246904094,35.110063147633866,18.85125312416357,-33.43707088943391,22.187138581567435,32.794878266044556,30.566157851524657,-30.051988488064076,14.988810741053454,26.472850797968103,13.525781587254436,-22.49771794380261,28.101854813679093,37.58941318782837,20.68654426924651,-34.07059660387791,45.94619124527638,29.716532137581627,10.72859151516505,-11.409100063348177,39.704051094343484,8.18127176820617,22.56070555618244,41.4725773789728,41.15293237802005,43.45448369763089,-14.836648110218043,38.08547913914715,50.56882156290344,41.895380187427676,-16.004216453164233,40.40421469910211,37.29924319898282,43.82854972553482,3.2458995663932,22.838237424245943,29.290581796512303,39.51824439709276,2.829393859759789,33.10808006008291,37.30098623402586,43.07010455591758,-13.421659903439682,33.468849120053676,39.02515837940653,41.94824972132764,8.373762199365064,38.53992593299589,23.398738554024376,40.85618661984512,0.5021778908573769,39.6753291110329,0,7.142405404611823,-6.845405709825979,-7.737983521529819,50.06307666518752,40.481966520091326,-21.729543821249234,-5.20012606169989,45.994182918860716,28.724003845071696,-5.16790882223676,-7.2252839497638774,49.83781211421556,21.242235083556594,-8.991506269573604,-5.1000000000000005,47.882855861070226,8.414477552524247,-2.5999238554960673,-12.932560907565477,47.75754254825912,20.220403437347212,-0.05893697964039433,-6.796147749468947,46.172264879893014,11.378513227650773,2.019741796826965,-9.88229050140185,46.54725310079965,12.418763297855122,-4.450336764686876,-5.016964831700113,50.418754612248186,-0.10689657050589757,-51.51195289894608,22.664355914109215,26.918977564429564,33.28770518340526,1.3779319304849738,-1.9043132060162602,28.10365013403329,39.424742939245405,18.560098924509465,9.06523454073719,26.912548937474675,42.79212496779444,-5.85406882191549,-3.906833604709513,44.74841382489467,11.315314300160907,5.754201046618917,4.444722452461938,26.597865059660176,36.520561665120255,-17.337195975008992,-1.1881829096579961,45.84022296935642,5.815327782364017,-2.473503222168922,-1.1831673195510841,46.44848599995573,12.114759395114918,-10.213625,-1.678393121988694,45.0083890017939,0,-14.629327310160392,-12.172219068646571,43.93986465389487,18.283750983733114,-7.544509166994274,-5.1000000000000005,29.71247933294426,17.235911975170804,-15.450189425667869,-16.36741847313522,42.85327730873375,5.462105029864739,-10.275968297074977,-5.1000000000000005,37.11980518461294,0,-8.135671374085263,-12.904479834584558,44.71154678293547,4.362823122587421,-0.9529594484016184,-5.7662699734236025,42.91325759572241,0,-1.1,-5.1000000000000005,41.13570900333296,0,-1.1,-9.926829452268782,46.291358027627,0,-1.8356215914019471,30.305947312907104,34.40542799506159,38.26602968296711,-20.81691759150893,17.894023672217692,44.17395061130714,22.831941620555174,-5.37928003357227,14.696620157981123,17.424033614537866,35.84855230580343,5.20125854871365,28.393772418144717,0,15.274623945564372,-5.209156089568189,25.694333132237226,20.421843519697656,37.69373762178942,-9.932687267461418,30.376213000520345,8.294878577706996,4.423060210715567,0,0,38.33855054172143,3.93792471881026,1.3060776905651963,-0.1,44.5664034763638,0,-50.084536367339744,-13.654012560474111,40.697707831431416,8.36393592234777,-5.727852671905449,-4.809779518593258,46.950991748993204,2.9012376876557635,-9.141671533702553,-5.1051982978569,35.025572818222194,5.975869865654783,-2.928250781297397,-10.62489933287384,33.8966171336187,7.029630471100066,-4.96492118842805,-6.291444551548287,44.142225554845275,0,-2.4307730912529992,-5.107478490516703,41.93910814038481,0,-6.868616474866263,-7.212272589591958,38.954973912141526,6.284066062924557,-0.08558659062409335,-4.362244279615876,19.648377669272858,0,-54.78073378730434,16.07057376677713,44.40150564391394,25.164355632201705,-47.75061260357953,-0.1,39.247002974637184,3.749372585171592,-12.440851576955158,7.341217427119437,51.11023300430584,0,1.3891067871803853,-1.2186716491840859,44.28248223793363,4.124953426972285,4.1944379139111385,0.08844740499289264,44.06697019265413,6.491458606367901,-13.179511754429948,-0.9804241065167404,41.994777768553234,3.9892847991591767,-6.1000000000000005,0.9084029908680029,40.53661736620461,0,-1.1,-0.5105718946102363,34.41200991464996,0,-2.38662727754763,-21.445242335306883,42.64203095133452,0,-8.840482566809392,-9.692181242519354,39.37958071941269,4.177989888240414,-9.630705673959874,-5.08319203296082,39.21664740716787,0,-17.275857248842527,-10.17417982444632,26.839142309701113,0,-10.213625,-5.105511807527073,42.82603511973777,0,-10.213625,-5.1000000000000005,47.787966875346065,4.729061126715447,-7.640986233328698,-5.1000000000000005,34.25639820181951,0,-1.14734313247928,-19.306206726176825,46.84491757686659,0,29.899843418189885,27.486226548608645,-4.72802427626648,41.4565519318725,25.50804973818299,43.1872912682911,-5.189184779655565,37.923666543542744,21.633729901129794,27.03214121472621,-4.542646301423493,39.90335070425148,27.38301057364478,26.75679918600219,-17.001578797302567,41.616366922816,29.651218985594323,31.32749829898237,-7.461313145620001,39.37317473893797,21.532859802159454,25.963230753904515,-6.287539811067109,43.7411623048879,19.560593702293676,26.316095878136252,-6.215659533213139,38.81616558948145,27.748504128084466,39.08995452419018,-22.599379665484047,32.13120167064548,22.202401807706618,-7.764496065982167,-2.986958636100923,29.657906569275394,24.930447727901857,-8.187333678825095,-9.49034753758849,35.231564108187875,19.867886169826836,-6.455154870798989,-5.056227008318344,31.78509887916695,18.350241195833036,-20.356373792789764,-4.627866217306883,40.44793325820386,24.052886172781747,-18.47770076733144,-6.106170183690171,39.31401511754912,19.82261924388638,-14.60041249976725,-2.060941974445209,37.933346249854516,21.090923361412685,-10.46414263982239,-7.3091526507777935,42.26689323529293,25.56259079795873,-17.146174853017627,-1.9828537435393387,38.79756475314146,22.11458968809479,37.95507988283022,-3.9060979498902095,28.33830051111237,21.10896051587631,14.86022303066054,-8.653798767532372,30.925925702245884,20.643381315146343,23.046736315267704,-9.081663061861633,37.129816726772916,15.173236677157028,22.348557022690862,-7.6925569678576515,42.58040140170523,23.157184533760848,23.101445813137914,-6.190574144624932,36.060012176626444,20.820635136726263,23.71169798590026,-6.781907330417148,36.04433873979826,-24.239090141714783,23.63943203267612,-8.127349890022597,42.38226404001001,9.473406877592055,15.513042093877896,-13.407967546834042,32.50578721371225,19.644969991792976,-17.096991922589783,-4.078334007249373,25.547407434476685,25.27630129009643,-39.19636869172252,-8.25400078960856,38.16316792288179,24.342638780473802,-40.852743762404764,-8.71315154029066,35.716000754107434,11.572709374402697,-17.256437719554135,-6.2700559197567545,35.66750114095947,25.5185677416533,-26.98001567495551,-9.065645104804917,40.77311084963911,13.951559352118636,-24.02495251726143,-8.793138124060286,40.54908072673,8.22727166314704,-19.673576770796025,-10.610684682225017,36.30777445598858,-0.297155898412308,-9.690000000000001,-7.232949014567444,42.041519903221776,26.151225070696107,29.22239459377477,-4.163965802901547,35.37794822132322,24.19934652200104,24.140712452918937,-8.721188015757456,34.489791201648856,8.59728952494802,23.841518248191793,-5.817979064986068,45.74658361984077,7.3703023451804,22.35919065611872,-0.860004140457304,39.49635695737693,25.52939485210572,25.837662429902355,-10.215132566770603,32.41683384005746,27.897060235202485,22.50600431502157,-10.531242451870973,33.67860096661847,16.022561841505148,24.573550103305823,-2.092627720603476,37.381437253458024,17.681170530101493,22.206678773593474,-4.823720267269364,36.38634013415663,-11.567922761338671,-15.688082808466916,-7.707727034797239,38.324239763265055,26.583506743783584,-16.635319826676913,-7.273855052581846,36.89105736016594,13.884406020522192,-39.00530171638841,-6.799765092571538,38.81761488403132,12.932435647146278,-42.839997587619536,-7.804425291766845,40.908058792697375,17.191327523760414,-26.025374625651082,-7.687245223496535,31.79246738715232,7.8540024926149545,-19.71618518749494,-8.351209495147199,36.09143217596278,11.71671443286882,-26.961697626037825,-7.149090523712843,33.14637036641952,7.579799087248544,-5.1000000000000005,-4.3439921900550935,45.47932356302136,-25.64084396268411,22.641585952208125,-6.39366501471706,42.354020469560766,23.743481170421102,19.648130034427908,-2.7367528357146367,38.10347178866857,25.174713531464874,26.551877831842354,-19.200308676916986,39.321826281866905,7.08229258005259,27.937307955565643,-27.961637736518025,42.561894063006086,29.541483222534037,7.907847915428118,-15.543506761133358,38.561577752637625,24.848184876852102,14.959896866873134,-14.222173116977894,40.94808816799384,-1.1482506197209261,10.213921299553405,-15.352884795560666,45.66848193038518,-3.720662777373766,0.6737370630657361,-7.133107703642457,33.916149774139654,16.599178300843075,-23.022453625976116,-19.788798441805802,34.59275960590244,6.258679298879739,-19.3577458518282,-7.230353338228453,34.33251432508772,9.377354963280107,-19.06010166733765,-22.93148140770097,37.1486538805042,-9.795715067858463,-12.995055438991287,-10.168124812746894,35.863174803258545,13.79869342483301,-46.17238865837158,-9.1493286432684,35.9402560350958,8.713484537872901,-46.84033179001278,-3.7822096315575795,40.909793071450906,25.406160473216236,-51.348045134680085,-30.85003338157447,34.36452591037837,-4.830537266822537,-49.50841117786746,-30.531396679585168,43.82996187144346,12.20144559381886,44.64210796799732,-4.897191982550772,34.21661833614395,-14.721886026516446,31.240382675986307,-4.54707934232208,43.237996126195405,23.08162115282372,23.99626185800826,-4.991900614339412,38.17066176770487,-1.1247066979475497,7.92627324658326,-4.739245755155206,40.6205712285825,-16.011323948059058,33.01462350006039,-6.233960435208323,42.89473661504235,-1.73239344946096,41.05649612361129,-0.42868094083695496,4.154605019335753,-0.5306630141092126,37.60660505945596,-3.6040731490476867,3.434569991406913,1.4504236870381617,19.81494671966882,0,7.055064581791527,-15.959948210394808,-7.406717742872761,-15.318735948913814,42.72492197142141,-10.217714268968082,-5.761530949469035,-3.1563760581227354,46.862453309214125,-4.164761992768184,-12.428866261312033,-0.7773249668542754,42.815387253421186,-1.4555936259692424,-9.286134971017505,-2.6715711132051205,43.208543608423,-7.9735561787154765,-19.494690322955226,-6.697085881563542,38.59795438448276,-0.0918493546814354,-5.106999042671171,-0.41764493893167653,36.11678165802184,-0.31508944710299125,-5.1000000000000005,-1.3525551263371296,39.02407673778429,-10.213625,-5.1000000000000005,-0.9242244107883352,17.19507418868489,-9.701226459293245,16.66970443539451,-3.859436519598292,42.80695833781809,-49.85516641138602,-3.0589140543445157,-6.760013307987235,40.40434292559335,-4.4598666935847495,5.861920109969132,-4.233713414046909,41.60065289881215,-1.2543556807416187,-0.6799145744278143,-2.0194912707033508,41.3697209950598,3.1482495154981844,7.316807260841475,-7.618265431036789,39.65188952506474,-1.1,-0.20474397859866553,-4.721719159185039,41.675029096192326,-0.5860050891497016,-0.1,-4.1000000000000005,37.34908216239503,-2.0316646732061985,-1.0863408368494898,-7.124112914519945,40.74943947652917,-6.929775141583338,-12.195003400771322,-2.281974121158762,42.64211542140828,-1.1005113445343875,-5.20930109837979,-4.838816486016653,40.18199723181727,-1.0750752452744572,-5.1000000000000005,-4.117175025332009,39.93806810290243,-6.1000000000000005,-5.117227828125,-0.1451142571057872,13.474847631335834,-7.868073380972636,-9.6913551890625,-4.121302668199195,39.84589610365398,-1.1161520468750001,-9.697537318453373,-0.15715581922850178,14.998934559909298,-0.4033740254654585,-5.1000000000000005,-4.106633780834166,13.436797290344831,-6.1000000000000005,-51.0686249999817,0,7.240427771547099,-23.125552608371077,20.03257072730068,-9.327571473780475,42.22754014350779,-15.697509260199126,20.27589730322152,0.016388192105507928,8.330947434513075,0.14811393365509407,4.8616651609870445,-4.696161269218077,41.78891496280254,0.4245173200306611,-0.007647401554386169,-3.676320646611833,37.136455958082706,-0.05044706537226862,4.474343277433323,-3.999053691106682,36.98943987875433,-0.12575287456300152,-0.02947421682801479,-4.105020188959954,43.73975120702585,-0.205570395002737,8.857967386908612,-4.270636795337006,4.227475232886515,-3.3505664837960967,0,0,32.50100584886727,-4.313655826495367,-5.509298122830707,-4.209786113951133,39.5827627332761,1.576576452991197,-5.1126000000000005,-2.2059324034208716,46.695214923063205,-9.316877478422503,-13.807320682983956,-1.3193254284848914,40.239513322997716,-1.1545442230318093,-5.1000000000000005,-0.31875041475395066,11.161471701107052,-1.1110999277671894,-5.106869149125029,-3.8841271253659935,36.22763359222066,-3.2984720159485246,-8.116814518637783,-0.2675890422892181,8.410715813595367,-1.8177091643244336,-5.1000000000000005,-0.6338601927181196,0,-10.213625,-5.1000000000000005,-0.30403512814146727,0,-79.1823626534806,1.3080034288003115,-4.633037915713079,41.64496412865958,-0.2643685359381833,-0.1057375,-4.101242992136155,42.62598245404555,-0.8737353140679378,-1.0044510193940976,-5.672657674697631,41.54637095609324,-2.235109000506518,-0.1,-3.748728171484612,33.385419226827935,-6.915720868226249,-0.10510499334535753,-4.106863372161068,45.65371663245043,-4.834873271034716,-0.8101456520920536,-3.3028671024122773,27.6012359224475,-0.36400814035910867,0,0,31.179566546430255,-6.1000000000000005,-0.7579576597469713,-4.1132309886779,17.676823238664326,-0.8993113775559453,-6.911051300733623,-2.8283656640949713,38.50446588746212,-1.1069012140625,-5.1000000000000005,-3.5564694072018757,34.74399532413991,-5.928006957474232,-5.1000000000000005,-3.795333835907591,23.286967276064075,-1.3779802656589686,-5.1000000000000005,0,0,-7.439260696563133,-6.819271716883399,-3.8548152880121567,12.95618464501015,-2.1458340215375187,-5.112379823833972,0,0,-5.713571784654338,-4.988569790267908,-4.05351813016676,0,-2.121098999046418,-10.214901373748809,-4.1332105429968236,12.877238230112674,36.97648636320178,46.329784420586755,52.46217349710107,-10.202381355397055,35.32776406849977,46.79580705983237,54.88169208887279,-5.407074239608696,34.297866740070546,44.855090312036424,51.57855819213117,-4.568251566600505,33.91178214258354,45.887027169526604,51.4386720235617,-4.706232983644687,36.77151541002891,38.6576407704074,49.965596905758524,-3.9618624807599505,33.74787332277889,43.04698797345855,51.912318125220246,-7.498595910671673,23.656467907359875,38.008230938536414,48.166618744044385,-5.091972018170786,33.25873686828569,35.06346638554358,46.73343463328723,-5.222562260229214,30.34909900516919,-6.172317356680789,55.56616775578585,-8.74760892503765,33.78171142838868,-10.140121478984103,51.28851283140819,-8.114003047752608,27.902464130232495,-5.073892100683042,55.18358895127112,-7.981660828179889,35.47719337628774,-5.846610536251102,52.81751942235293,-8.213383931503042,30.524095770610266,-17.18007589156798,54.989775633744365,-7.974912508148738,33.12057046143498,-8.29637551863361,47.855436095770024,-7.624244264489879,30.323247894780042,-16.210598727264117,50.846345699282566,-7.464334200415028,36.016641225597965,-10.509483576361118,51.864435293641385,-7.760680075704673,20.106150654699228,36.55616492262152,49.66788525475416,-9.88075496062109,-13.21711813428286,32.80540066057558,52.321123315821104,-7.560779167754573,27.305150962461216,37.25381536261549,55.1814423235234,-8.47778458860458,29.9563105683794,38.024639859521805,49.52398743516463,-8.770967621192243,26.872397021651917,37.72615398267393,49.16986225341837,-7.753873882951301,25.550097999221478,33.9599858477894,55.057657768089214,-5.069097638823509,34.77998456140973,36.706176329794935,52.75633560909632,-8.828566413541303,24.83843169722942,28.493002940591083,52.93496247439108,-7.548963341348154,13.088508419438117,-12.494185163988988,50.52299980949713,-6.690460176602236,16.46145285332033,-13.65768288955784,54.39733772448314,-6.444414647793144,27.086263666445852,-11.276798342732716,53.07819264786907,-7.457218499689183,32.37480692393128,-12.032967253591607,52.1436625106559,-9.037054279190421,32.688162043247345,-18.05151490336936,38.771692948040815,-9.23517412832139,12.55956945689018,-15.846916516779466,35.979429164629906,-8.740202807218134,29.529107614761266,-15.51573333534968,32.04576890286686,-9.469590601225555,33.14982671675037,-11.021518259385706,49.93782065151616,-8.068465800325265,32.469956857524686,39.59860169775947,51.2671144185795,-10.959797560243361,6.311715332959304,36.70696447918137,50.44299096609317,-11.41792561801317,33.19170417308994,36.56149428410884,51.32969945970838,-11.439653180710469,31.17949634346976,25.009843790835628,51.403009006581094,-10.260263951997516,31.07062956157646,42.71121846843426,48.860353990243595,-11.773480280644343,33.686554367970466,36.434658066211256,52.19886563734849,-11.118495204378572,28.7403135120442,25.399216639501244,47.694830945905984,-11.33437917350375,29.54395477190928,28.978450107194856,52.71327348784719,-9.470497233463467,34.82812218743199,-13.352949280044815,52.22516098095221,-12.136707702857986,37.88196709561351,-12.606121429208581,46.71996479289309,-13.480898148468704,31.659984273908034,-17.974467271800993,56.10200232004444,-11.523441344281542,28.388872002666233,-16.207358893722954,54.34092632495525,-10.452214176551134,26.692177918740793,-18.162453630167583,45.100067042452615,-12.070601893818463,28.52206294798933,-16.13650329419543,58.46481655143593,-11.680280702921227,32.802502983084096,-14.886043353382894,49.50143301176348,-11.13899957303573,13.790710927876304,-25.808429420859582,54.02028545897452,-6.327288638406857,25.02546394242118,35.168691918196615,46.882021014160685,-13.381635920313686,22.929381199296408,31.373139830783042,45.58958848324165,-10.536134553365413,18.221330969829275,36.603232476917846,55.864432107232375,-10.567482876928032,8.140875011158247,29.07490947493596,56.44358520334164,-7.348483860167667,-1.52880222618138,22.995646736157084,50.846645656439534,-10.827768907199571,26.10622977764372,30.298538785077977,56.42686994977295,-12.722034291270461,26.370311925816782,28.16139643711436,49.44791994019547,-12.496433350614176,27.911463795573386,20.080994020310428,57.27416800165874,-8.454209852381329,24.94908169303415,-14.782760462226497,47.05721322886472,-13.932274853324769,24.195280614349862,-17.186088494872244,48.788169175557485,-10.977221985761911,24.378512197574732,-19.603841477488,49.68744511774823,-12.70272467778393,19.840141981040773,-19.993540908692477,43.68567711196286,-5.360609891232046,18.753756137819217,-15.689364830267529,53.18606087693912,-12.351925157033927,20.149689699079055,-24.781605496596075,53.351660717983606,-5.750079760978926,13.459864671973232,-20.537249789963575,51.538344414843046,-8.691952953278092,14.966756615186954,-30.167122757194974,57.343281737504824,-13.759789877422797,5.794692350149512,45.56332991707071,53.12838231457172,-3.6785273076567835,-15.348529187927184,44.53483060610299,50.30094096541391,-5.269278224534112,-27.557080106302674,46.64391131861159,51.24549900964591,-6.6039277503869,-16.4424413922655,45.51973340473353,15.265448686885076,-4.954460350162318,-49.72092269415721,38.96863538566886,49.82663532923233,-7.2645841440017005,-15.280295261948886,43.44498614728237,19.472136811286394,-10.655938747330946,-24.52436439776997,14.388632860180977,39.320101403566284,-2.960198996032908,-1.179037597859949,9.74631099104071,47.69571480398512,-5.1000000000000005,-30.084595764474983,-10.76224488464576,57.32919776608021,-6.77408635635357,-9.956979034731258,-3.651170035156925,53.30570922578034,-7.775866784869782,-13.883376497671504,-7.50696392359368,53.436338361534375,-7.196676793082438,-9.296061323516742,-5.221364607442435,52.830367165258416,-1.306235939819341,-8.586800102832978,-11.102197744212534,54.803534048242696,-2.5345410793335166,-10.380813587803946,-5.850335392170388,54.41357712051332,-0.18333925211283175,-4.661908427660124,-6.89091897709872,51.61462860829384,-1.564957267702272,-2.039204211980394,-10.865771529024208,56.53101223363014,-3.3929816786358895,-13.943807023504604,36.768754943720005,52.69281898265692,-8.046619229747327,-13.328638027140684,-5.646958648758196,54.26586312565171,-5.143715870638434,-7.671852210151891,9.928296320704332,54.331415706469336,-4.987170011107437,-10.213625,0.16650986060364906,50.21245042912622,-2.725265617799745,-3.823658687274091,8.055364329678527,48.51341029048307,-1.8952965274433269,-12.30688497604204,-0.10676694959309839,55.26821976487278,-2.0104666625245593,-13.640084970082153,-0.12103700350138305,52.52616351276725,-1.0421587657433393,-2.1339567458981703,-1.1122598707438978,56.73554755949583,0,-19.37371080411529,-11.124428313994937,53.514167026405175,-4.6025803356518455,-10.324823015241062,-20.555892788772404,54.16802226415135,-0.4073514635936384,-15.293434123022788,-12.038520295505812,52.67783697238804,0,-1.8834555455033808,-14.610056826915514,50.046743940733975,-1.081307982504437,-1.2082097122043067,-10.104179326070081,50.423180872576424,-0.35323564842663235,-3.1383691025222378,-53.70132390133907,49.415917965529516,0,-2.823160179947439,-5.085406617084157,49.04598657665218,0,-1.1058827550021304,-51.06879662970875,28.48893906780151,0,22.559637756585094,38.59897394658529,53.84952073677383,-9.120926422744963,-6.187044630501051,20.776994607291385,53.14366526808731,-6.418752892169766,9.240471951118161,30.994626573470768,54.02966215214298,-3.947549504242096,3.2218990827465026,35.237048379697406,11.314640160624696,-0.9679060553928445,-8.070847135370293,26.386990554695878,55.71052527131936,-8.706163669939132,1.229900547351284,38.67027022250018,20.459276058235734,-1.0834039303073548,-10.471010778661064,34.287521372479446,48.670561666195056,-2.9346925968859896,0,35.727233367420325,5.776322439838764,0,-11.099442986904533,-11.968714704469173,51.03085831581278,-1.5362629527556904,-7.444712138073648,-11.083021178329632,48.86839375742602,-6.910741992293121,-7.0688944838523,-5.698857755574416,52.52033505497313,-1.3366725800999257,-10.213625,-5.74640346937997,53.48907137929429,-2.1679052818699494,-4.353964874696739,-9.358890708895286,57.20788287208665,-1.178770502025317,-58.01873984595457,-7.0309812522501325,52.93211630255583,0,-10.189219127536765,-8.536060127330153,44.88283073330318,0,-1.1061963552895524,-4.999684296852163,36.423821466450455,0,-11.99088218183176,27.36968517467539,53.00123638631267,-16.233859978328717,-8.136253157203267,-3.615049908199975,47.11779394620373,-21.55232392578816,-9.332644916154003,2.8635633296740606,45.16794334818037,-0.5892413071968072,-6.1000000000000005,-1.388356802888477,57.42555300745065,0,-5.15803068458508,3.4631590817720954,49.94425256374253,-6.684922010968585,-1.1263976760670549,-3.415103887790185,42.2985128266346,-0.5798290161350445,-5.980233725618862,-0.0023582127271141954,47.92532119901841,-0.6962820094043138,-0.8148488909191487,-1.3965662052142709,38.45950102045619,0,-1.4222589835849533,-8.092987883938102,50.7995284606144,-7.5916126096956145,-6.105974194337296,-55.6631411710031,55.68443446623487,0,-0.9478651445337347,-4.9562649384218185,55.27519213577475,-3.0104178483901016,-1.1241319939299184,-5.106980221797337,28.59990161870246,0,-1.2361239095179344,-7.377223863157781,50.91982560061287,-1.2958772126288132,-0.8232596758594362,-5.107452873580553,34.3459635725204,0,-0.3929749570496655,-5.158558022513489,9.397112124789293,0,-2.645624741594237,-10.214875520156339,31.58896127336657,0,25.84412417967492,46.819107602328934,6.061918437801941,-5.250584726319555,-27.23287627009781,26.904677592589792,-0.467005864016505,-4.059389388406616,9.510663073295671,45.775041646723565,-2.2214819493857174,-6.4991562708128345,23.810553149641066,43.56464327121667,-1.2423914289385802,-8.233923165845907,24.512549517691383,30.96981804077985,-1.3621922064190841,-7.294420929003823,22.047749044419994,45.290911967454434,-4.41635816866386,-9.059348836774092,13.682139639621475,47.05849458384965,-1.9746445206030225,-7.1105435126951875,14.127040526510793,26.73955210788478,-1.2704204857948627,-5.099333699613355,-12.708084333446763,-9.341709117344552,2.771056341289566,-10.913239401440046,-22.447658642113822,-3.5169842711476296,-8.51509462125091,-7.758573557458887,-12.115250454339298,-7.025966735855781,-0.8031949018051123,-8.86332196454868,-15.483571101155697,-8.57523111778822,-19.782988531405366,-12.677073425566771,-11.943680979254959,-10.802909900460376,-12.48719259547046,-6.0075600068515485,-11.789970490972472,-21.08937050711048,-0.9400160052046453,-8.704046505519651,-18.10662803089893,-17.623883393950667,-24.77059115399435,-3.8842700620571513,-11.180605210118975,-13.548240133647488,-0.06012885673011259,-5.849514224409774,19.651008714669235,35.932254305846456,2.4935462453618054,-6.225651007110058,-26.32931317547184,-4.9002794105435425,-0.3277808035207499,-6.517648139907008,-27.495082081818442,-1.937777268960033,0.1658113111396807,-6.307545966235876,-9.51553702442654,-9.569936873146954,-0.44905954907161094,-21.76959489801308,-31.621077378738793,2.284780967866508,-1.5743833105627,-5.709496702402125,-47.90433514822171,-9.89929480958192,-1.4051617174977653,-17.35313212470713,-9.80194706490427,-10.11362626680492,-12.209513359853748,-8.055271643880943,-13.014596070689874,-11.02432225192991,-14.150156274306879,-4.4880678614785525,-16.721031787646634,-16.920147377952965,0.44195314349659504,-10.96636029539013,-22.256493233699317,-52.633676927797694,3.591613116634534,-14.007146837026358,-16.87671389101343,-20.929738139987016,1.1851452098901993,-20.260224240964167,-55.84678882527993,-31.268975857720083,0.7313856718073619,-12.417010825809127,-20.08882578928128,-22.494741450300747,-20.799997464416222,-5.969741844518673,-10.745663361551788,-51.07656797463611,-2.5281113886795086,-11.287862127311147,-6.1235240082553375,-13.460147450823719,-3.736442810124497,-10.804942862767964,-11.04465458828006,-17.667195473634266,1.6826558953054236,-10.851831375053548,19.122327417312768,37.73379930083774,-0.4154752028992559,-11.448900378777898,24.855559509140733,26.621583387382152,1.807575155384725,-9.3394597008092,-26.411549477562183,25.865758182626013,-1.5755216222620623,-12.106298440686377,-6.573041398700861,9.665375058389124,-4.9147839122189865,-14.267176915514668,26.626642553881524,16.652018490167148,1.7197658843698782,-8.642324742837271,8.3827951896407,23.705203189487992,-0.013119070323183046,-9.596416055131925,-9.223675449693664,0.11886324194462483,0.6982873048471533,-8.955456708394772,19.904840856784695,0.15757073116042492,-5.176769179206188,-13.355281108919222,-55.50570262287403,-19.32423247636113,2.2795459088679015,-20.38387803458671,-7.0642084948508215,-33.68090606042157,3.455588722700371,-11.838668015773216,-18.54101642624313,-23.912885282695363,-4.012579852347542,-8.776256111830099,-11.302476946696528,-22.82014525987134,-3.616697939899887,-10.476188864685383,-12.86316962549187,-23.389813553975006,0.22872202745661063,-8.150848574061746,-9.870671666689269,-19.46086908461107,4.45757993523395,-12.23663369527756,-13.63483827343905,-47.871274867062844,-31.288316694490703,-9.260024136490088,-5.9942563330224266,-20.208845739402463,-19.179742307720623,-13.75461550906553,10.185292030267243,33.16748900510107,0.31846094260474334,-10.751087809482296,-26.055125941449724,-12.108529518759555,-23.465245068515763,-12.198826612092356,-40.696897596151025,-3.5340405774171573,1.985681406388013,-10.461808709896431,-13.464152131190003,-10.602153564389619,-4.924722350139717,-27.14222344537485,-3.1601242040910797,2.4646668152041458,-13.011870826195095,-10.927818158513757,-16.83320624083146,-7.483419959808423,-11.468731152148926,-11.443507133412067,-17.642192955454604,-8.791751004857277,-10.353414866219968,-10.253447719597757,-11.639939599403974,-10.082114971584057,-2.8046203252075497,-15.97612991586058,-7.671908980190107,-16.572749264039793,2.4370147455666373,-6.127877682066571,-17.92409090930434,-24.163421550593867,-27.11881635822886,-4.651000931961693,-13.097583545867556,-15.654880452584525,0.05175328174335675,-17.35496683547224,-13.034881026427758,-9.695837187551781,-10.842135322133043,-7.176546853825255,-9.003129815984137,-9.696273796311623,1.2012823169779603,-7.797475133616844,-8.88510151751664,-9.729177235801586,-3.389914583799055,-7.514721865212207,-8.410444768623863,-49.1600917221761,-5.921427620311957,-8.383995455897026,-22.61853428911084,-43.419640547478835,-23.188852438815918,-9.43223355317664,-11.888024186321905,43.63947320481097,7.747114876243598,-7.470986090569382,-15.15709765198358,43.504222805068075,0.24945797973488892,-5.742757538081288,-12.438948835827706,42.1872991765772,8.759390530838846,-2.9222454887366958,-6.349129864732042,41.09191780757826,-2.75753129455821,-4.772412360189039,-6.306902971544009,44.288169288553405,1.4181522880557327,-2.394978981310388,-8.64405088202097,42.24710709403097,-0.5409357772538282,0,-37.36080201595116,41.9054732829823,-3.0160558148511494,-1.9889048683007209,-1.1,38.59922182496638,0,-0.4291773715930305,-8.05496519231386,-8.56486640659002,-0.7982256270967718,-28.945330756149946,-13.007829688749966,-6.509923779275619,1.8280733041612347,-6.214633489294328,-6.246972173804834,-9.077053486510948,1.4134679243430741,-6.210956662651601,-11.203433654208494,-10.42648616364054,0.435394334929047,-4.1647533790842095,-22.951505418277158,-12.747335078839724,-0.4629849653963533,-11.36835574026077,-15.730480300346263,-18.498035058608203,-10.605192301528367,-6.9718646330785665,-6.1000000000000005,-7.454639799366373,-1.8908629191941664,-6.414210007607804,-3.245640949329114,-4.747215424886437,-1.3061548753105932,-2.4229926051263133,-15.578393748655607,36.55015875438109,-1.3921931226045396,-5.565759922167093,-12.790368430456885,-2.8156582876494576,3.4274548276073005,-14.181117191092184,-18.618153026933257,-6.445976034147437,0.8648444166407706,-3.5650425986403875,-12.630080122643829,-8.635679015211025,2.178216984727723,-2.781182050288287,-14.94648413493618,23.651157262309486,-4.1000000000000005,-29.334394693782492,-12.176020283290086,-3.345163329640949,-6.826612031435767,-6.0319739848144085,-9.213950314513523,-3.6198659657307672,-0.04971602799006389,-3.9973805690882234,-12.212926157067816,-4.243375800756452,-3.9903693503916413,-4.002844923173429,-12.492946950130545,-8.436731781980507,-0.8572062497103567,-35.377607903340696,-13.136866280385126,-5.1184255151898865,-2.8531641749205647,-6.574306195211938,-10.213625,-9.691349074661684,4.526560487376149,-6.260474401539935,-16.550005590177943,-10.215384201160445,2.695473622996652,-4.772308829394918,-11.209848897032114,-7.154420805115603,-6.308829429510887,-5.074997496365335,-1.104852881359503,-5.101249580029219,0.1407061315016193,0,-10.213625,-5.1000000000000005,-0.1587272103775328,-0.4819796598431225,-10.213625,-5.101251769706889,0,0,-1.164790077525733,31.85385058906373,-5.9466678089240546,-3.3557803806180675,-10.213625,30.784686460498346,0,-0.5437977958072402,-12.878784514042376,13.062071307375488,-0.15469572185695485,-2.097932791963739,-10.55058947064558,2.7518479776210256,-3.6003537964087102,-5.118568152690471,-0.7758613764198712,13.563677251338413,-3.6837703602550405,-6.2980715813972985,-6.703887213529562,17.970122919097754,-1.7249721168417211,-2.0369682277423755,-7.995677149519497,21.79671009437077,-2.666324172194238,-0.7761567064024902,-10.806183719634372,3.1224338458474814,0,0,-30.13831916295861,-14.818164581951446,-14.754806279777553,-9.113261746827744,-1.105896907382225,-38.9685177763168,-0.1629796011840844,-0.8879241913159106,-11.205144619595519,-5.120902547399568,-0.5308345520821223,-5.107476943896867,-11.209710213515411,-5.1012426890625004,-1.9105245380402267,-4.603575629023352,-107.64169545717836,-47.16717970105208,-1.9143437027868193,-7.756351394688526,-6.105984148606317,-5.1000000000000005,0.3830649979797591,-0.7382055503497278,-10.213625,-50.84244034689053,-8.427662558044792,-5.423010342357429,-1.2165784312415027,-5.101671759896642,-4.101842185645966,-0.34646558217628753,-7.367776835564933,34.42747783678965,-2.8513388158883854,-5.321659211227413,-7.105716179480102,-7.261373145726509,-1.1196303788258624,-11.039683627929056,-4.624644945108151,-7.911429589259351,2.136695035080696,-4.194962734057935,-6.1000000000000005,-4.17724707889485,-2.1549935913531097,-18.46028849746045,-6.105865440625,19.727663827378766,-4.1000000000000005,-9.696300362777649,-10.715683329489805,-4.727098173344209,-5.5368300644102835,-4.320452695983831,-10.213625,-1.255472580955975,0.06384719419723361,-0.6379737806547539,-0.35433715329434,-0.6072625050502817,-0.7097293142382162,-0.6799879853878515,-10.213625,-5.1000000000000005,0.44646275384195844,-5.763363476322157,-7.100918456338762,-9.708595960749614,-0.7133986304898836,-4.65931120193308,-11.262823383540635,-51.1160282812221,-1.9381018134290997,-4.01442045427838,-0.8751354883369109,0,0,0,-18.735570843805608,-5.101362223256772,-1.707106639469046,-4.5277782337168935,-1.1046125,-5.112311739186777,0,0,-1.1110714258828542,-5.142067008276959,-0.05522780516008581,0,-7.342458226069147,-10.214874745029094,-4.727726208989417,-10.597244750402758,30.887534233441745,36.99176763088132,48.843094366999445,-4.3473837364259005,31.93351855283973,31.03232395931262,47.095812943544445,-12.213303711858954,29.979926087277533,33.671055198003444,47.28588272968883,-6.95558187176332,33.36582571664918,46.2554850741073,36.46259372722684,-12.431751278463464,29.40198819448519,23.750473309082935,43.248370224589124,-6.528581634767186,30.47601664584383,35.10309992486602,32.25993625802061,-11.777131250033966,28.397840160044456,25.12698242926357,45.69650510714801,-7.890130274110848,1.6960592223969018,34.141164151633475,45.424692511966136,-11.691813623876401,35.739950738039134,-8.653993689800185,48.37897864354792,-11.617064779449278,34.98732987259472,-9.487426926811327,46.79073322047603,-9.123766337096669,28.57795660542548,-14.795573663013728,48.11523875484837,-7.57424799225849,33.729704380740166,-8.795322066363614,48.48679526425941,-7.0520207198119484,-6.101290351190107,-12.991808202473043,46.41356720723705,-8.74932919356189,32.40710445443269,-12.880868566426386,46.839184611444445,-9.069857495777253,24.272481246214774,-16.38083119203847,44.82119186141823,-7.656441315402328,30.975638547380466,-38.14898667067877,49.2935474472401,-4.646775385460363,30.316090186625498,31.073188399358138,43.90464952554253,-15.615106352317483,12.59151015684341,19.891551328596982,34.983695212216944,-13.635540367935931,22.911176968013354,28.67400251302799,41.9830821410244,-13.695406723104751,13.067844052759,19.966650232069334,22.779692066201953,-12.495084640872925,22.178972618347377,20.933548304298977,35.39512926578891,-15.57460041744592,-11.229043605916518,14.461588851166526,45.09994896582111,-16.131682840615234,25.45661856611575,32.760544612309786,44.52699437757103,-13.026858860271972,8.206066454337893,29.87600771349574,47.45799201592823,-4.884448255125489,24.132402412851945,-19.537842377880295,46.217694684270285,-17.751160849686514,21.984469230248408,-22.07187849837147,40.921082761575576,-14.777607698583989,33.94022923871019,-22.534794772055346,45.49453878321009,-14.354257171389202,21.009260408318326,-22.491833207025117,46.379466227185475,-12.041973463969253,-13.003189849166986,-26.182340062767857,42.787884935367735,-16.026445476985362,12.473695754634285,-23.181625056840403,43.30020353316721,-13.147764384096364,16.69321837496579,-18.913970797190636,46.41049205356329,-13.369463325244222,5.739216571942185,-9.69010822480099,44.628048798222224,0,31.89962759427829,33.671705545979,50.1196103274431,-12.097060078435748,28.098606541143287,38.701269830717614,26.1627883732813,-11.186260348108295,32.97892706184046,20.306012494018606,47.83746242532161,-15.219637915947228,8.096115171237507,18.799159486176563,32.085646482416784,-13.483635122088922,-10.8000711708487,25.255477502666967,47.97617489912458,-13.35355709737422,27.22912742658894,24.510398712212076,35.72435274139963,-14.81216996874724,22.50205418386327,23.631209248365792,43.76665157848517,-11.124827993276197,13.310593537385746,12.511210412288786,49.37880517762625,-12.587533234474074,22.383399006316054,-21.209671077568203,33.01440539892639,-19.279096311136147,24.17737942249362,-14.753892386999336,45.614150024363916,-16.20415628495238,19.188766037851636,-25.30829655409606,40.81771908415179,-17.597379203160123,13.191312334712153,-18.09442097551381,45.300599886840814,-5.587724253875075,7.963212227068696,-22.837427709786844,45.724945614758,-17.18764255924059,5.881879749755557,-18.604415886593667,40.653823916678405,-17.139750799600485,21.091104699300914,-19.72494047660177,42.09536790050924,-11.957487485202945,7.417514770617714,-15.765902563067337,46.591419631033965,-21.033661138991764,34.75905006571236,38.38117731555953,27.4012167411419,-16.30614693770038,13.908609087821883,21.37345093838438,46.42590332454119,-11.747433024966107,11.622099414270458,28.466096216965912,42.725400732294965,-15.059601469679707,5.240157729835672,17.17169367557621,42.51728009368923,-9.170566858100305,-24.22383136809261,20.91067743586381,40.28689418128396,-15.214535672947443,23.672560338579828,19.056185949252225,41.073566439397325,-12.327896813077517,12.410854615298655,26.36460775784909,43.63408620403102,-11.543479136210248,6.1443522679552105,3.456280210864408,43.12772407440144,0,25.392146556487674,-22.58634381638107,44.435069510744796,-27.59791985497942,31.56691253845452,-26.679275589226776,46.672008571985394,-20.725313291265135,11.113126467245145,-26.471770638471,42.73207878936751,-14.387604238258346,1.6458473235752147,-13.795038441106533,47.35813207366345,-4.38975840513057,20.304210321608814,-21.329311929562408,45.772568315359266,-20.076707542490105,10.011428677039978,-24.002819538831442,31.442819983347082,-45.239368540789556,-0.07983658088230028,-16.63098012401656,48.73393477748839,-2.122320137566866,29.317253300805753,-12.429918842550917,38.813328608690576,-6.930397013723397,15.265930987675276,44.099067516165796,34.829524566946525,-12.650388477152203,-4.050672080899755,42.93229922220773,27.517191630466773,-8.473189859095518,-16.91794919512171,47.60736739455478,37.032646953148344,-4.415101402628256,1.6768429595961556,43.462087365255044,0,-1.171091985920773,-54.55326609390396,42.85351846669473,14.558975030155601,-6.780003893546983,-2.2170992203653745,21.23545104203958,46.16093253351337,-2.244504290166055,-56.92078040853036,8.18093230151593,41.04701079025265,-1.5755595649048617,-9.02686754060873,39.416844487476844,4.8799737891541355,0,-52.24572446858775,-10.75265224697447,47.2100871823637,-5.620656952960883,-0.9837879378561136,-2.071388115021086,46.252331579189395,-3.6650884657020804,-4.0118977729612775,-6.534665664110607,47.917629660717026,-0.4820993312196713,-13.102291542516262,-12.552129964627612,45.58898193398146,0,-12.529093009297263,-9.07280554359358,41.21481577027954,-15.019141200414923,-1.1,-5.1000000000000005,37.16811828630309,0,-76.32520598937101,-6.407097226005248,46.711866410274936,-0.8332589459358246,-10.213625,-5.1591360314790045,32.44723520428581,0,-7.672248966807215,35.96364211942323,18.678389961824557,-6.549514870387546,1.3756830452638726,-0.3694666974079698,45.815869422514865,-5.534586372333596,-0.4171866129630969,4.134631615076442,48.503822831069,0,-1.1312918500437799,-6.191533891955597,43.39137727941514,0,-5.7793688624837944,2.679929107880128,44.002337556593396,-1.0673355338040083,-1.5554346085026478,-1.2494972834996552,45.02832291561845,-1.2543078702160764,-3.2623310607827856,-1.0408871275541756,45.20489667641631,0,-1.1,0,45.008069940520755,-0.8872036928915492,-7.502552761836325,-21.769459573247875,39.173927396970434,-7.235250330489916,-12.038045117962717,-10.699627964209954,43.47630684421176,-8.439267768957498,-1.1114205495040212,-5.1000000000000005,42.10129479061959,0,-1.1046125,-5.1000000000000005,28.984334640211,0,-9.981939151032936,-6.5946637830787544,37.84467832880337,0,-1.110542602377736,-5.1000000000000005,29.146669240149397,-2.6321038536489247,-6.1000000000000005,-5.101216609470112,46.94642207021335,0,-1.105994163991953,-9.809265667679227,12.777877063081837,0,1.920406692207084,37.338070038443036,23.7731576240304,-5.652243562886063,-10.213625,13.03543504547916,45.94023594318095,-10.947121675843666,-15.776335038422202,7.47017464800281,21.603976807619258,-0.2510182873347411,-6.446666277258869,23.74540588706942,4.7388741599525845,-0.8683670483978558,-8.13890697178467,29.138872208387106,0,-0.40423487963409954,-0.22035561466048748,31.840653828455114,0,0,-1.9818426302984724,26.28735514767908,3.012457205109081,-4.5246727611249415,-6.129155712364188,31.689260852268788,0,-0.14551391820410517,-1.6135074040261224,-12.298879359998434,49.5254362223436,-0.33893501805326953,-10.213625,-5.1000000000000005,41.096394800676016,-2.4626978239914745,-3.4508885328337273,-5.034485644605128,32.67970368671333,0,-1.2297350590993448,-5.101265694974574,28.11250136231925,0,-0.7859818933238711,0,43.890257594968695,0,-1.480503255109288,-5.1000000000000005,37.75580643021762,0,-0.4373264232524017,-5.1000000000000005,48.73796990040957,0,-1.114326808545719,-5.1000000000000005,9.090630048142126,0,-10.213625,3.2245981151507097,35.373193187361636,-3.1656402078562005,-10.213625,-1.379624616758464,47.09318241192653,0,-0.5092860380489692,-4.944680161526701,42.50301356230743,0,-1.1114278706127885,-0.3435884496389512,48.152591898417455,0,-1.665150234506448,-0.10573960745576555,43.11380082034905,0,-9.300272708555323,-0.489038225623644,24.47146748119006,-2.6120780859459014,-10.213625,4.869065779932006,0,0,-6.1000000000000005,-0.7711015949708022,25.633824749369463,0,-10.213625,-5.1000000000000005,37.647769474669175,0,-1.1106905388365893,-5.106881865653023,31.600579001311907,0,-102.20720606764333,-5.1000000000000005,24.141105706572787,0,-10.213625,-5.1000000000000005,9.18477685161007,0,-6.105975758885361,-4.498857257949445,27.02691563388276,0,-10.213625,-5.1014748207996705,0,0,0,0,6.690036456104648,0,-1.8647232279938644,-10.215722813631494,17.93681984938859,0,18.561572580886576,48.545685308469785,-15.143800414018752,-13.138143238981591,4.172306684088251,46.63313847953466,-4.790146162526295,-7.624213568021085,19.197166302284412,41.97095477981256,-4.461262454946167,-10.507636391989674,23.232740359399656,24.765162784930343,-9.165314451972922,-9.667961768105908,14.094582017607319,37.0076173176006,-7.04947732264918,-11.97213494810202,-4.034932250802062,39.75368806767546,-2.878540726991477,-12.44974938522125,2.2097346796844377,7.642215970287501,-2.089091425189768,-8.584979856339109,8.557066118151537,15.881027438600642,-5.889381158856551,-11.622787656133104,-10.44761738212518,-14.972470371458364,-3.644679046449082,-10.324786939412531,-25.195670046070166,-14.032803850233565,-4.033263056512622,-10.6365092859713,-24.08107077206871,-24.685969648541697,-24.37332467705086,-8.142886615436923,-17.081460224004545,-20.153478249937944,-15.686899706433763,-7.846701833951095,-15.6887756843774,-26.512401074095365,-3.2897803864652975,-16.483178511407978,-10.771526941074542,-12.841673793353667,-5.186464101402009,-10.086808397726212,-13.391953601084483,-16.154674478492282,-13.8050034258293,-9.411591272922479,-9.263117321447519,-9.689985367170877,-6.479412892428421,-9.623442741343965,-19.204445951677712,36.3678101711066,-8.234111365663576,-10.145916414729356,-15.728952598223529,-13.680576554437057,-31.58183317762976,-14.648362015731113,-25.049056545247932,2.2773941906965542,-9.432306548187215,-13.964879509698932,-26.88976101342282,-13.87585199820174,-24.059150774562,-10.682928211921471,-15.649897810216913,-0.7477952353540969,-8.277321870860828,-11.905088887846196,-16.048379785979336,-11.04584492466717,-13.501836189340247,-11.6984390877461,-19.57893982213299,-5.055329058048027,-11.842460782896822,-11.688739483624058,-7.600264687334643,-12.502091066138373,-29.06761904627276,-13.728976361938242,-40.06623306955482,-20.310106625754173,-5.1400073067514604,-13.999884229771949,-14.23218054120982,-50.71986795874388,-6.25685463932543,-15.257062086077461,-18.715954530648983,-22.828158767370137,-3.1001274026194245,-15.871434216231437,-13.847253498082907,-17.556650887721325,-31.3636165108521,-10.607937121381696,-19.093897001423755,-27.715170384791566,-9.632234138757317,-19.53609864561074,-14.248578259147864,-17.565018842999777,-5.666922134903295,-34.32485410394393,-14.516703346495174,-13.471862888128598,-12.58817629136864,-10.782857996167401,-6.1000000000000005,-5.125221063085957,-6.410839757897785,-5.702303662927277,16.408173295369053,36.77823030273684,-5.6901722358763545,-15.245965186438523,18.6788722725203,38.62205214294259,-8.196445069076765,-26.82526133149236,-2.298577208463773,2.4264150561189037,-2.8826816263023143,-21.55694047603536,-10.055445342440612,-1.5245510472552426,-5.341229132327945,-17.4652717973223,-1.0232742075480523,17.681654979611473,-7.614857889579106,-23.637827367256318,-2.098337438228117,5.885361042728874,-4.839215555601929,-19.545976687407595,-1.231971054678624,21.98604109004905,-10.73479190713374,-14.907349118090469,-10.309966013265262,5.577102574052855,-7.9663389527424115,-32.351050697562385,-46.90449556803707,-22.229955446538316,-22.659930013556057,-21.290127361720458,-20.847271883881383,-18.456200983359423,-17.780886173073778,-8.011135842176309,-47.00238619722344,-20.564010178270426,-7.018443617401873,-16.18064398787649,-9.130886125387605,-13.58725035400803,-9.157130040342722,-10.245176439007697,-17.898083013665996,-19.14293253863225,-4.760822535710244,-14.763495786092722,-10.493121576474271,-12.157316329678697,-27.63363281790465,-8.941204055520288,-10.074912234913233,-13.46698927440589,-8.906047270531847,-10.8467507018987,-7.255451991327515,-13.821842850017763,-9.40203213312331,-9.699685921148912,8.05304029342599,27.01117107898042,-21.513010374224688,-8.189586432286967,-11.128809754673995,-10.998091511430088,-7.555685026139545,-14.108204252868147,-5.134881501413554,-4.546038440784747,-23.625133045428207,-12.3795732817535,-20.378812252164987,-13.253048583631497,-18.68325329624739,-13.042782276055458,12.101962347187435,6.808940493400178,-10.987821086484756,-8.375391253230363,-12.611375712277578,-9.379296224183639,-10.878813992293138,-12.987614422486482,-8.342978701061694,-6.642717561632417,-24.520579245943846,-8.559386045772467,-2.694097746251829,-6.1917607449243945,-9.812125473780025,-6.771833411663927,-24.663073603760353,-25.64369860823787,-36.83996369079728,-15.323667326314558,-18.5095766715352,-27.76394322213819,-16.701066366768327,-11.650232790785386,-16.64699270189362,-16.94139757196666,-1.3053067166361085,-51.01792965002445,-11.961943497095236,-9.798789842456136,-7.474300970834809,-11.37726493474707,-1.8656135993395853,-40.90986199342173,-9.535025751078946,-22.375132328266474,-10.776246673083364,-9.726798774528358,-10.19544658742002,-8.336450635381038,-8.748874948788425,-7.2962523476202135,-2.575086894742331,-10.195460764244064,-16.951562202974074,-66.10080651933578,-36.94681004089518,-15.873957585308927,-20.364761894308835,37.79920891396618,-1.6768964047908945,-5.518421168904685,-1.1058837219469673,43.150719759182024,-1.7624465025810596,0,-4.440610204798293,42.107321661362626,-0.7312334665416707,-5.574318949075146,-0.9098164687210457,41.25378857919669,-4.1048927412539635,-6.644920990870029,-26.18630717911354,31.576997339346164,0,-1.8381895451453614,-1.0276570771640523,38.37933706950406,0,0,-1.1107576802242887,39.86643791763063,-1.8060598094049505,-4.484897518998648,-10.213625,16.259581948747016,0,0,-18.704675529328387,-9.306546548514074,-21.318437565453017,-11.429922859568261,-13.021913740593707,-7.106495366189819,-4.764253035303736,-6.446720522957988,-16.14895383017646,-8.545162644152645,-8.771693152707831,-7.335711644477061,-2.4872663643675335,-5.101614325648554,-2.0978669501300184,-3.3821746596498,-10.213625,-10.027394274379198,-23.606148709161424,-10.102799608661309,-0.9289520004358653,-5.0166788466564585,-0.8208491788546071,-2.1441751015456814,-10.213625,-5.106954995427529,-0.2460651095635484,-1.136371612209097,-1.3675331390918757,-5.1069871770112405,-1.3766326030171159,0,-1.1058814460527344,35.63182819761678,-25.73101485124757,-4.826653211524482,-17.549940112197163,-4.703957954809099,-27.94749208886798,-15.421776517748494,-9.796848985605834,-5.732783569298525,-5.356729891144711,-5.7671692926171225,-0.9830047710532881,-0.5519133568422698,-1.3001691304315484,-0.20208409618792517,-1.0627966406791078,20.020352614669694,-4.100354475627991,-5.1000000000000005,-2.5419869582595074,-2.508100564199487,-2.889591274429595,-3.4759964844955022,-10.213625,-0.20038098990476239,-4.106743649899873,-0.4491828008221923,-7.762205807102554,-12.695841380185382,-6.299571437410297,-51.06862499999997,-56.11161863500151,-9.690762707307396,-4.522898944737603,-10.063458815406815,-6.105994689406534,-5.208405075670459,-2.1129515571828223,-1.9013203827697016,-11.203216277423094,-7.211064684164965,-8.89338334379015,-5.102855825021697,-1.1050271257867703,-5.1000000000000005,-2.137114171907775,-0.6257329074687767,-6.106013066997707,-5.1000000000000005,-0.7659039739533384,-1.4150201682229586,-1.1116062297024973,-5.1000000000000005,-0.3402633925424716,0,-1.105981194700546,-5.1000000000000005,0,0,1.944292019469372,0,0,0,-15.54802810851627,29.17732843813688,0,0,-10.213625,33.40585793523317,0,0,-12.505705148109712,29.108171653395097,-5.596310829482059,-4.765259185722589,-6.101375924160731,1.2793028160812694,-0.2520141429313711,-1.1388117652173975,-8.962375875189533,6.8296901671083665,-1.5390417299195707,-0.9510162005172753,-0.9175121272390332,6.1556828590019474,0,0,-5.891538158226614,11.49820382028873,0,0,-1.1,0.39531642756617286,-0.599192379823095,-0.7089133424350742,-11.091143701995486,-5.8169417011130005,-31.540632107549143,-5.111162446511263,-6.121053142145748,-5.1000000000000005,-1.7334478455807005,-1.631715897914775,-1.810537099644769,-4.47796874461661,-1.327861235208108,-5.897127830004358,-6.105107955058752,-5.133408183282498,-3.498116663734458,-5.106828505917297,-10.213625,-5.1000000000000005,-1.8209155728641417,-3.563202644723786,-2.0705607707917433,0,0,0,-10.213625,-5.107003649428141,-0.24326010680256546,0,-1.7396924170872783,0,0,0,-10.213625,32.69436026893287,-0.4189906956585205,0,-3.4055658878270685,-3.2624914437609287,-3.5337165376764124,-3.572312333273584,-9.841343981875411,-4.445168431517893,-5.8610091556785635,-5.106564861935091,-10.213625,-2.7642612391778627,-4.950260612316994,-5.100807853043511,-7.916920406214136,5.128585205710376,0,0,-1.8187504327431636,-2.1673997411135284,-2.7434262200357704,-4.575499833793681,0,-0.12345860127232913,0,0,0,0,0,0,-1.4586645787228467,-4.322303424116873,-3.584612946947984,-1.7480916754791278,-10.213625,-5.1000000000000005,-0.8979295426909908,-0.9691082608562148,-10.213625,-5.101356018656401,-1.6165788501023688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34.19052673567664,46.475812855013324,53.56697207472672,39.983935405381715,24.60797302962092,45.64945458127727,51.26540426820558,38.99840664380584,13.4214671932527,40.080687635090776,56.350061350965305,38.768439352285476,25.355475006130224,42.582140234037425,56.435117610006834,39.465853497629176,18.332765380848798,44.940982525501276,48.95544968093238,39.270916522498545,28.041185599467433,42.55592640901219,51.956467911277606,38.8960144024771,26.250421665553592,45.72196090867561,30.571248364770227,36.97827214631745,28.06941468837367,41.48307817561123,47.1177417906692,38.33686292182898,34.43577766100453,-3.939090707600925,51.53043471279518,38.30863297377694,32.6321092836541,-6.899348727575528,48.97031639218187,38.43692105306427,31.75057529945529,-4.974927892150596,53.687144181382926,38.51804530797275,33.7248579856425,-7.101656147528308,53.79793105526511,35.897538017057315,32.34933064119468,-6.259668915741392,47.24836986785942,37.71260551429803,30.927639066305353,-4.511808706675513,37.5191960320848,35.69594909612923,28.889057544372328,-15.697685667616776,30.304249316602352,36.108131127412655,13.725857865746962,-10.821526779060825,55.28728029527369,38.42305074662083,12.893942998455218,34.79498851305351,55.73464418837227,39.72942003079771,21.353892982314022,38.80292847221132,55.39054851487789,39.70731988296641,30.01312162633403,38.06637595602882,52.48244312550652,38.659768339617834,14.769074714659522,35.60086643213224,53.315967404561604,38.491915434123875,31.154758558799607,37.599857587946154,47.81078361007759,41.05007857352149,-15.900848610141317,32.07641693198353,52.75988854018944,39.717234374399006,16.965520401347543,38.27932779162688,46.71564353561954,39.15939459718254,7.770953404735928,31.93289575123977,38.36435999646166,33.83344700345873,26.565446743398393,-12.239724225791644,53.298479804593796,37.4240285837143,-17.843349055721013,-13.575118936904405,30.73089381930712,40.313165088728425,32.39615372177864,-13.683718013096069,54.528719673963025,37.781453250086436,25.572836877291554,-13.810734424474763,54.25262012276021,37.08870054395444,18.480568978556143,-21.11754995129412,53.33425152212344,37.87986041326376,-0.4168974924516773,-13.120119534630183,52.745315864976355,39.309560673583775,21.269833189827477,-25.094003566240737,48.13158036829057,35.3757305781876,6.149038384222349,-44.1377836698149,54.536695403023884,19.03798365077001,27.96909520806079,34.96397931781092,46.99628296323561,37.57930256011613,23.418683284252836,38.84038598413409,32.66128451214849,34.88792651881663,30.261871741173163,32.04724658993496,48.965337986211765,39.182883746381734,22.195201728938777,25.004446268215784,51.13879562288774,35.01343605687617,23.462575469472572,40.0411363387857,53.05317268489078,36.53858449103479,29.854088255413597,28.93711027275395,25.182286691567075,38.736527521465646,28.611561438647726,36.86188519976012,28.96397857055086,35.95084273845877,19.300196446890855,27.09489421694545,51.33924564862352,29.7403273802219,35.15633603156088,-15.111313893580123,50.69283853233692,35.744395126392256,35.547086716817134,-12.283692589518834,53.20803640042159,37.8088294289396,21.164091041754446,-17.313634154323633,24.62049790618435,31.937171089185135,28.349333822001825,-13.19881830074402,47.01691679192914,30.912518330515333,24.59370161287924,-15.312249897777345,56.87046035597007,35.740427781796186,34.87962714665076,-16.880789285976142,56.97714011544267,25.98213159136951,6.278574683151195,-17.09386380026257,51.25311387240774,34.34166687435941,33.74392099214513,-22.713815678058833,55.066224093096686,31.72715006166884,37.044494033171915,28.308524317723112,51.02546120612572,25.961044816788593,15.009475038171567,33.20866980466592,48.80535997091113,39.30537518964635,-31.63958448914877,35.4754027970004,31.887551888497153,37.80479045683272,11.436169479400695,35.81416454793782,52.115465716471334,36.851879962581606,-15.57429913801926,26.26702493308255,48.38697394000851,28.753130338169914,17.032148839324112,29.412029667091332,52.6087439685726,31.27629299061586,27.80145029712588,36.09237823345007,47.157489354454576,39.22377692270774,5.035320104381526,21.274189910553993,51.121052291718165,27.925137357137167,24.503032931199655,-15.768012693697179,52.35030752764809,23.764791600092053,31.923856364280613,-14.752608686896288,48.89924258819216,30.949134587708905,26.842348750948464,-18.140109336164194,17.941770432280713,34.10720938223905,14.83512479429653,-11.953227708224167,47.21776903069897,9.666753392489232,24.482188798123058,-19.750838255364183,48.994352081796954,27.356016987056684,12.746409477383246,-22.45874803954282,23.19100661654792,17.10713550242899,26.49172306067141,-27.993746683139584,51.20413417860422,15.182887946973793,3.9707659620981866,-42.803428874373175,53.39198993268058,15.69196318293635,9.389229232357433,41.308300931883544,47.79925727765953,37.346538316098396,-3.5744379596691123,47.09806596742564,48.58638595773973,34.807525298015925,-3.752604753263655,43.696638489410404,40.98798697793614,37.330413636445044,-9.407942438168732,43.12300391560686,30.14589962016784,26.337660519337348,7.2221536750109205,42.48490183341562,31.42746862119153,30.482553147045635,-3.382183753488946,43.379420089401634,32.327510003672636,26.285203975224157,22.764198755442706,45.68210690449535,12.654006710577294,12.4750758228935,0.5077212940335176,42.20945200706228,13.679401979843957,0,-33.84665781380303,-8.139357965486749,53.97021903620471,37.39446339373768,-3.825220712528498,-5.379506001892023,52.84680604143131,31.14612965059101,-4.335821314552083,-25.175188930955073,49.59332671844581,12.72278467591178,0.39619074430282314,-3.0713145620146713,52.15607202402097,3.4222566362034126,-15.727221636392226,-9.502076891045421,49.164011711223374,12.793329878000938,-4.373154114758003,-42.59054847100656,55.37511154605163,6.315806388819029,-3.1886917217768405,0,0,37.57783798523365,-1.51067779196,-5.1013433507994135,52.471788421839804,0,-1.149638887519744,37.7413801614351,52.865792661882104,40.38037773969744,-19.46310019103282,-4.01909955079033,53.33122092686355,31.485572648934358,4.0602800828450745,-0.21809680015620383,48.604430012946466,38.410165134788876,-9.88246999768263,-10.10626059758817,53.15069308451866,10.295930543004625,-8.781608174399821,13.10894384954091,48.767189153779846,20.9923950015452,-18.718316479951575,-2.9795135157793635,56.82356804650749,14.442620753651688,8.617680550480667,0.17402407531574093,52.065753133451,15.358102847468647,-1.1126215569028455,-0.7143825200642397,50.26891338660052,0,-37.13615395874097,-8.203862162551506,54.56025879691341,12.101796429838668,-61.04900280246746,-52.12358102698906,54.50629926982637,7.303046046282555,-11.005821700212065,-15.913379532665859,54.73275204644903,7.51128054084946,-3.634719842939181,-13.361502268025841,50.34964451100093,3.83481792727996,-1.1199895595080411,-13.01991817493797,53.19727482397691,10.162200520575695,-1.1172138154038407,-9.624023799703945,55.67838862633901,0,-1.1106363197925742,-5.106863646198345,51.02529729183433,0,-10.213625,-5.100720900948005,57.27420047618562,0,-8.593949085926544,34.918436271254514,48.79894686701008,37.19805438401154,-17.518870128266432,23.57141228102311,43.10468707436789,16.642366066126733,-30.22601871255544,35.35308967522684,43.560054419011294,24.70435311120936,-5.7521071569018805,33.63670038062008,9.702585979582647,9.866187893742426,3.8303007934423237,17.982287296790002,45.37398272666182,27.542352082558647,-31.914079932095614,38.42201192506583,45.48337065171409,38.70972783540743,2.465121265507199,35.68466586063735,5.355059681615443,3.7887610560019844,1.871110732500349,33.981113574256014,0,0,-10.42727874593972,-33.656245548444076,50.92825470172183,19.998355904712167,-1.1102976340818735,-5.1000000000000005,46.195449622937915,3.623872867885934,-6.688117400604807,-8.078059087129434,51.71145954208788,13.240439929531945,-6.106065753322478,-5.1000000000000005,52.951275885487654,2.7416684174935835,-1.8864267554972276,-5.1000000000000005,53.704564579046234,4.024346635932993,-1.110527046875,-29.37959974021735,57.49144092332327,0,-6.1162153281250005,-45.58176170694373,50.84007182099707,0,-1.1059878599713655,-5.101244223279373,26.322331644299563,0,-57.67786734687819,12.032692363955373,47.295846776500426,35.02587464177849,0.48834565350404424,-1.6035692838205597,16.781146096875407,37.20368822584555,-16.67996553062451,5.78159937837216,47.2361021001762,10.133710708524081,20.313848273792857,-10.552599340575448,50.13049816501632,0,-7.157194254587318,5.196706638713551,38.59449151165276,3.6701516009637327,-10.213625,-2.232089350194396,52.71635117671025,0,-1.1455398105866417,-1.4049263079551833,52.16358120918895,6.806205511842366,-1.1172354650645033,-1.3549166065594458,46.07841868731636,0,-1.1058096503217936,-10.832952899215332,47.45824836255589,0,-2.5747532844609093,-5.106987575509321,46.715478064467135,0,-6.11158361401548,-9.668394573435322,44.389410648198,0,-1.1058823289820197,-5.1000000000000005,22.73765664360478,0,-0.5445567603345032,-4.265035156858906,45.083175671519754,3.6542971954337258,-0.515183187079635,-10.243510697002437,43.20380365684849,0,-0.6344067082610799,-5.1000000000000005,35.45947837600854,3.926376221659807,-1.1115795727461595,-10.21487552701934,39.99027359680261,0,29.54528250999706,45.58206739453805,4.248063294420801,38.32072018788075,28.56814149693047,43.21070533941055,1.1341928761687554,41.048304608374856,-0.0018430015762294083,47.31645738386334,-2.4003203178171266,30.24159499351821,29.39243670077843,42.57087490737577,-1.1118818377988482,32.97945060142422,18.627317792946613,23.965841928334047,-0.09902985574982988,34.05925556856489,27.216611071170586,46.130858838295254,-2.065553505463714,29.567779570587906,21.612726912018857,42.07266284355479,-4.861286906629959,32.184148953224266,17.061098817189542,21.886132970453673,-8.102408952014592,35.34088937911146,17.302943613196106,-12.464733806726002,0.8818873534087444,39.84040876718767,14.840922778046673,-5.535387230935645,1.5536550964078006,39.617654533487034,13.864290923263914,-5.070689361632612,-2.447859198442015,39.79207657852254,7.127780861624862,-6.137370593359297,-0.3533075042818334,38.16797723635663,16.118906254569517,-16.5968101620465,-1.4522608936916708,39.726928307298444,15.029070403681713,-16.52679848626841,-5.191041142475854,35.2089475708203,9.516636906800331,-18.1400886759796,-20.653975036981386,39.42239068762849,10.434362161231327,-43.009290637951686,-8.583723727876356,39.6154179923265,25.835073645408542,39.50088806869104,3.172548070814759,36.663099664107676,7.928069534903953,9.586874947221114,2.8878565954287136,29.252964486472486,16.5819856484111,1.8377428582865736,2.6171410133137956,27.88201369194586,20.523987471785265,6.140638128976385,1.5754606324972562,37.990077796629734,18.98396758235375,15.837072971832509,-0.9598283424987996,36.403448039364626,12.33052208719013,1.3382005557163243,-0.9354926583677724,36.67009228900545,20.88329390006401,10.661472511380497,3.805137383097625,36.801150619150356,-2.3571845364086306,0.4629660286274567,-10.82605862312519,30.473965176889994,15.402138685502804,-13.497029100343944,4.405346026615117,38.6216899992591,9.422299964171856,-44.16117359725417,3.143127349013035,39.66334338093104,15.395456274686575,-32.491751980223725,0.1515660419148398,38.256170164666955,5.5861579284477685,-26.842189795066847,-19.80098374128348,39.11335003533468,11.522313809086613,-30.720778362384248,0.05096508227165927,39.023169456975936,2.176815514994027,-23.447341187689943,-1.067771227563931,37.760039875534964,17.843431628424675,-13.89576029668143,-1.8219951781798183,38.154424086189394,1.1479413559104164,-16.965459892248987,-6.473536122976075,39.1878413233334,24.6382696061948,34.89665070896316,-11.381827261650692,39.21472713835769,21.695300297595807,21.462282410838707,3.84154726476938,38.58780614291475,28.78678085315612,17.830889186413877,-1.2651731391940515,33.544233573253884,11.301382383745507,4.920217839958399,-2.1507072046776097,35.03447892649972,20.1877542939337,23.498317168086864,-0.4306813638211502,34.79208976522555,23.194139734415685,22.537410922465824,6.717925796888398,37.788957827557766,8.713987324489704,13.145164655509822,-6.300200345235511,39.30160359521185,8.560071714048583,2.4587198865243063,4.71872675056867,34.18195805094563,17.452994264209348,-14.198668028528848,-2.4597137738953694,25.322161938199518,11.026494144954757,-18.305751280556493,-10.166778966822095,29.902461391731226,12.206645671972936,-39.57172149918482,-3.9983199073667617,37.011651920637526,23.5802029368875,-50.67491169532389,1.588518434100303,38.497917706495535,9.927882449620723,-26.365771547561515,0.49520011007468884,36.669649343600824,19.105800562817162,-30.817498197214782,-3.4939917069676287,39.689398297317034,4.140489541082923,-12.925684042548752,-2.229883972881718,39.24586164563489,2.8911648819948597,-9.614992016251842,-6.154455862296048,38.837631520145564,20.19081970559231,21.728517554126356,-1.2394987479343005,37.136178395352516,8.30478042542727,1.3094663455116846,-1.153381801496073,38.23681434329179,10.327418125996882,13.081270169901149,-5.12195795172649,39.716638721906435,8.478194894923629,2.7926383882464703,-5.148348887597047,40.245329267237445,17.89532969576225,15.995080162763333,-9.932376575783278,40.04615146236851,7.844438102353311,1.2944524503094565,-12.218832451664237,37.86802408837136,0.25261774197043474,3.763309824118399,-26.55146769829535,36.02624150731357,-1.1,-0.4953170261179158,-3.3995749272204896,37.288284094671994,21.211665667959174,-17.335073865726685,-11.060531194337997,38.143794182155034,2.6659927211900984,-50.24151933858739,4.367042174042383,37.8815963367609,3.390178390709779,-13.935028265425066,-24.021183697617023,37.511013362822254,3.3333319048681593,-5.1000000000000005,-6.50948554729001,38.17699352038134,0.5961397412596323,-17.557921055585755,-23.04086845576287,37.51754882944259,1.8603504255234424,-21.211180172347124,-6.658945718269136,38.07131600602142,1.0514350765332887,-16.72683098210255,-6.1395569506453,35.233144713206215,0.782824392789575,-10.978679795542376,-5.355453478993586,38.38682881344258,-16.806572754962268,43.8476311090495,2.570117108932782,34.291184291419036,-4.3257473392299275,46.092973688674505,-1.1582573369037876,38.99839756523338,8.124128749162544,43.49406597201157,-0.6888561154809366,17.612229536267613,-7.275261227760647,45.36477656714459,0,15.123145426134396,12.945326208150389,45.225095394580364,-5.373066433918193,15.426387524402887,-12.359360424083647,43.55314360144251,-1.491183133555703,5.976740742552758,-13.981655006202512,-0.1,-6.500704796957554,37.95763869106512,-7.595287808251509,-0.1,-4.843890905606419,36.18271192183183,-0.9614005512120023,-5.663374835992783,-4.109935154377588,38.2637779387208,1.9610904074792093,-7.1876685567084335,-2.7913708387297618,37.78273691203007,-10.213625,-7.650224883089092,-41.06887072349076,38.32786021578205,-1.1115013768757818,-5.1000000000000005,-0.5500131295225064,38.40060580489416,-8.383495868543426,-5.106869216430793,-4.235794044826179,34.39352027403913,-1.110983610678545,-5.706694550140197,-0.6639526772029686,34.82602351973079,-7.641548599401205,-8.420281314808852,-1.997186264367138,39.439738210384085,-1.1059941555770487,-5.101250518885056,-4.106870356044041,15.108915502526424,0.8211197104352772,17.618219401085486,-1.7386340280452686,37.53842891234408,-10.464366382996769,-2.0398020717633054,-4.577924434960941,37.77548575742521,-11.146128258706433,2.763329799556509,-0.46348638779129514,36.24163988817337,-0.9735223747983381,-0.6579454917265062,-4.588821525182707,39.15283450235175,-7.847411802646314,-0.1,-3.489337524362008,38.25114420669587,-1.1107458429615296,-0.20449405076785535,-2.466252661568531,37.897664786503825,-1.0681225254682312,-0.4547112843010533,-4.1000000000000005,37.49678202362462,-10.778752870919526,-0.1,-4.106984350912287,38.75477495410782,-1.1115889349712442,-5.1000000000000005,3.861924991967785,37.70391592225309,-1.0556879574160936,-5.1000000000000005,0.12320572524493989,37.57326795606922,-10.213625,-5.1000000000000005,-4.1000000000000005,37.99077773024951,-0.15901328668135248,-5.18229822861741,2.0155173965022946,0,-0.7671742382864218,-7.806310579568228,-0.08794821143683001,33.242354519332835,-0.18339071662405076,-5.1126000000000005,-27.28714564239725,14.793771326131965,-1.106975,-5.1000000000000005,-3.7997480173174076,8.798108187646758,-0.311379744957672,-5.1000000000000005,0.6644560156948636,0,-12.423765427761017,30.642377133020954,-3.4961833701992333,19.838590177929866,-7.215114087902739,35.630294464130685,0,6.839730455430465,0.6378092996792695,6.5516994708896235,1.6220920021342888,37.41899699718931,-0.5571899376381261,2.384960310170101,0.6135318957572231,39.08201632928508,-14.471814755269612,5.261733701148678,-0.013386246919824596,37.73793508818356,-2.5504528344426,11.94857185286572,0,0,-3.819972556923706,9.329583378829037,0,3.6860123664172577,-102.15031604410686,2.793712033970436,-3.2001543860135437,0,-19.291680132825643,-6.4520338661509005,-4.1057375,30.81122443494181,-1.10558919701596,-5.1075823837966405,-0.9920005929079709,32.79799405147432,-2.3822713866754537,-5.1000000000000005,-1.1789235773325069,36.40173322632718,-1.1053053806796513,-9.553685927269886,-0.14395352968422426,0,-13.80447539626708,-9.630332769479498,-33.87886222528511,32.99287351155468,-10.213625,-5.101670691695286,3.2283519789712662,0,-6.1000000000000005,-5.1000000000000005,-2.990181422305061,15.383821633930944,-1.1111303431939026,-5.101243892994078,-0.1407930370088728,0,0.34344813780089867,9.319549374625801,-2.9262873782807146,37.21533271456255,-1.1194002712866151,-0.1,-2.295089874192848,37.18228541951167,-1.1103949664850807,-0.1,-4.79959629517697,36.941401310927404,-1.1012375,-0.6595215368204697,-4.1000000000000005,36.25595207489506,-1.0414426869214624,-0.1,-4.122942613388401,36.55430170740553,-6.100353294545871,-0.5674458288198685,-4.025931134486626,19.70488149111881,-0.8580796625280194,0,0,24.29296323878525,-6.1000000000000005,-10.96402701749589,-3.7163204129149925,0,-11.093185996506548,-5.1000000000000005,-3.843023647259291,39.67521075185495,0,0,0,25.024377485580914,-10.213625,-4.918339799267194,2.0045999646288952,0,-1.1111199386174975,-5.101263006265935,-4.100926167135342,0,1.0459000872360724,-51.063336680615926,-1.5907167856547302,17.326331573088424,-10.213625,-5.101250213240408,-0.2911859780894176,0,-10.213625,-5.1305028281250005,-1.9171630323899453,0,-1.1115782490305424,-10.21487552553016,-1.7150244977764915,32.49600419768972,32.661790701716384,37.913709311277614,37.304576888968036,34.433959974521905,30.334138443872444,30.32667152699358,43.25673275235985,29.680384729387754,30.869355135401445,29.475017177276207,32.15274134053378,36.6405610119619,27.947647381549743,31.699308339663688,25.9600073870846,27.962116862667607,22.59211925370142,25.174189162863215,19.681259612151006,27.598757238222188,23.90372107716503,25.90462401988005,10.445231376253886,33.31472467035844,20.00089083851449,43.58894532502728,46.082619719579355,26.063632900216607,18.097138637654695,22.352550628810953,23.183957401531465,35.67303002832434,24.604280399298865,-10.08543378094617,39.356067061597365,26.827040499738455,21.71045285829343,-14.82854994292027,38.71843501392658,31.573879392468292,23.140481665079168,-7.375601594474392,34.51421328976628,37.71366381339978,20.399947272141738,-6.947545514851605,42.87196612581169,21.68927415881695,20.82524770764739,-18.746842048010688,46.82904740378069,27.934269538282763,0.7756968474273611,-17.695674451665255,18.539194035812542,38.5698171629436,22.222215123884723,-23.6366633407096,19.748977326672303,28.001852342583042,27.639435423183663,-42.429687760953804,25.53973585837451,35.98056705985356,16.832266982275318,21.946552681799226,7.754375180222113,37.62369312160205,-8.818609535858554,7.930731843647556,5.691332461129704,34.905836157221124,21.545959277480208,20.01105751563967,5.027056611556071,36.68910045003515,17.246218829736677,9.944712927551262,5.719072489961292,36.09360627057984,17.34814987350407,18.126202098902308,4.426245892487864,35.13489539517025,29.57360024020067,8.866413290766964,4.579230056658808,34.556958972226326,16.934730688198556,12.605508796680136,4.032339071141902,32.13436064337286,-7.650629458274816,6.029830762206593,0.2811634782707624,29.12006468524424,13.55370266062205,-14.922011808283248,8.852910736980407,34.57108373889833,13.40011842287405,-35.677848312915366,6.028310895009492,37.838991233826015,8.198104498561925,-24.82228350413542,4.989673284704772,35.6662592816492,-0.4057434126631623,-28.548690860678715,4.647719479597328,36.27095483237117,20.559074809106285,-26.197477518162994,4.470346974585961,36.8569722639718,8.95977741950426,-34.30108668242559,5.755853118693079,35.93491921580739,16.656610342720768,-33.617727652648384,3.2664797950502553,28.0147688625935,-3.734682850034078,-20.911706808344167,1.3408297234296622,37.87683821541541,33.03263700053901,29.785217348427395,35.94591037471073,37.20546524858864,28.395579677428014,24.14583808076483,27.99212627941971,37.115288239594946,28.425469208716432,20.527869881229595,5.596461523937957,35.438220431176845,16.43897313273657,11.531777448653674,7.171022174285599,34.72749630652435,14.839231352244738,20.898656298587113,7.977796992365854,38.60628952796125,2.3669313545302204,16.35548987892469,10.360071510618095,38.91373949571001,26.150129232043586,25.376861529520465,4.3223245706344295,38.865461714011886,21.90676643890127,3.4622068262731536,3.772690921819394,36.39561089990365,36.140633849503374,-18.385993178938218,34.63548400236881,38.77778778838448,25.613554936349754,-16.445472686975407,18.91396159275247,35.238574422895226,21.57103587373178,-30.478097640956957,7.613185907216168,36.21923518972323,16.205280379695175,-48.82335374906256,3.682696025526509,38.409683234005996,35.14871305921367,-26.324513929581805,7.585464013218281,35.54688805585615,15.970717014414085,-23.635885556777318,7.677216708376341,35.911755314133295,14.024881700306302,-33.13020559848797,3.4804934452048393,33.004668395108204,-0.5265867860256672,-50.38011189756542,0.23254927407158044,35.29269207486448,-9.449128707039609,21.482081612534678,7.765413041037183,35.18484729098207,10.81151364161373,8.272727751610788,4.629308782786812,33.55777760655535,17.2013806215639,14.76803410813003,5.956564689873898,35.41499348107049,-24.050236890226778,7.025795597381056,4.794630680289281,36.0108818644869,23.179379217949116,18.152904146233865,6.750562310102901,36.603440965089256,11.571468018697942,4.650223486699511,5.510356206268104,26.71330139255143,7.3004351934765435,8.34392285879382,2.596925967907959,36.508144055013744,-1.8093335342985455,4.233570574649164,9.345194383657926,32.83406999292648,14.518943792551166,-14.757237129112093,3.9952690177232504,33.76450751028401,5.55595281150873,-45.93243585450426,2.1269106709460894,32.58434468493404,-0.6966427833159676,-29.322431223171392,5.490187871440502,33.524267093643125,10.95433800837478,-13.828305954854535,2.8795204651348025,35.81783821706653,9.867716551775702,-14.979470326203142,4.679062497796606,36.64197462006635,2.1566507141442575,-16.51467952207766,3.5792380779729287,35.85700325727094,32.80987878560339,-5.1000000000000005,0,33.50871244150602,-1.1342384576283817,-48.06468909548119,1.5460484643736576,34.16382538708163,-12.55855295558045,26.59822866802046,17.829541069467464,37.33479565185933,-5.983157349658327,49.926199728868056,49.93676945280223,17.84995409548614,-22.591973287467184,38.834900778075195,21.873743460860315,11.952978557610951,-8.864617799893555,15.222799032070704,43.025798670647625,0,5.681242468182691,22.831653989053976,11.000461106496473,15.933681207699884,-82.62676725236747,4.450346286282175,35.266950948918215,5.62680363371598,0.7926984051159844,-0.02805982170357592,28.139737849176974,3.752973501490859,-6.10036488560734,-0.1,21.52405278231075,0,-13.14498483792672,-8.732740017598633,44.31900215191901,21.98578378733995,-1.1012375,-5.443468032906193,30.006979113493276,2.0603296463109237,-17.85038272273176,-6.7326020938731626,37.2001461542745,3.123812624069096,-1.1049323903148567,-5.106980712800894,44.284230886198614,0,-13.276152118872167,-7.39194943689913,36.41065694944665,0,-11.105060172651799,-4.514757724869952,7.81411833419938,0,-1.1202581758402592,-5.1000000000000005,45.3066649219627,0,-1.1104196256460632,-9.709118912323909,18.729898105754156,0,-19.339320424530793,40.27797809834502,1.770285073411866,31.48987447482686,-91.86760841609406,-0.1,0.8057466245107483,34.84710567927468,-11.662035186895984,2.1429937803510777,14.529947671400018,35.981998513815434,-58.174052675877206,-4.908636404502406,13.06482493144222,35.590302693341954,-1.09219340484627,4.139278610714148,-0.491036647336151,34.12775625083479,-0.909096920760561,-0.13116732608989748,0.1227737369657228,37.616535196962026,-6.860758695200796,2.616349949872105,2.5655207296825355,35.55768840084949,-1.1081901336215645,-0.47245794994763907,1.5960179606878786,0,-5.818839075152746,-9.705244988076132,1.227465270015539,34.78599264250743,-1.1,-9.798013564802355,-0.12554507559090775,35.01258936631982,-0.8634968751197418,-9.549059873409412,0.09415910099322644,35.09741847288062,-102.20728588285114,-5.107014844425425,4.996405099283437,0,-0.3553395981439755,-9.859445005088244,-0.21339813472952704,28.942551385673987,-1.133188724200912,-5.106887070369141,0,10.204135789055607,-1.1051946700212074,-5.101373600071467,4.581848554617163,0,0,0,0,0,1.2046478151548698,32.710070507591055,28.92558769138637,28.712667729958348,7.190833030137191,12.787321560648522,33.747927426783704,2.503405681570877,1.447816259937063,-1.0924334329978367,9.196467241195686,33.92235382932328,-0.5607322834350564,-0.1329319864058697,4.762414244691432,0,3.8257937764276178,-0.10573893677706417,2.11368772652726,33.723860594648436,-88.29935604934606,21.51486130101671,1.0973935929339151,3.6420980891689676,-0.3997436918954665,3.1114997068006507,-0.20603253127957177,33.19163496069715,-1.1068702203125,-1.1406276647517688,-1.1513490585827286,9.600967894327768,-2.094333000240595,-5.1000000000000005,40.326317629621116,3.675507545529703,-11.19739089523212,-4.783593322669176,39.86867646053096,0,1.0279843226660261,-9.691395067399242,4.889305819082512,0,-0.9995733761387362,-5.106888491856833,1.9968110877485423,0,-1.0991982069865658,-13.783807181099256,6.356779443245414,0,-1.7784540726607552,-5.106751135414729,3.4044246250225845,0,-1.091588416138474,-5.1000000000000005,1.4147042229400402,0,-1.4066414948549297,-5.1000000000000005,-0.17581605258325866,7.026620627607596,-6.258497918261588,33.41994109760514,-1.1844463449290472,3.603699679700099,-0.509601400570528,-4.147697921534028,8.150961468040174,0,0.062275567404272536,-0.1,3.8733363978035413,35.38919612416187,-102.15025561762687,-0.0946882637707584,4.148588624809093,0,-0.6525084272504263,-2.098024278344719,6.847591746379062,0,-10.213625,-0.1,0.0997304731036063,33.85211098259324,-5.691191506927504,-0.23938271460401098,2.1902488425970885,0,-10.213625,-0.1,0,0,-2.531854861072706,-5.1000000000000005,-3.717791568471996,29.546327858421307,-0.7688008772020428,-5.1000000000000005,-2.5852432666101364,14.790922031948327,-10.213625,-5.061022467345513,-0.43854410299321234,35.59961508779136,-6.112024405615499,0,0,0,-0.7021578466544723,0,3.052664534135471,0,-0.23904221105277323,0,0,0,-1.1060260886182183,-5.1000000000000005,0,0,-11.346306707779407,-101.94402980294335,-1.2086943286381102,11.927821758018265,25.2258720605753,29.121945719805304,-8.917199207875901,37.38783006152196,22.740190698521836,32.22939030840207,-9.188158331418677,38.739998549662666,6.359767959669457,20.78707402532644,-6.154866412923799,35.88552631306108,13.930873951678196,43.432101453233564,-10.911776627388766,28.0209223722731,-5.418051491309662,30.400247800679292,-7.821419485691736,35.75349434087034,22.72167961875232,19.391826364440867,-4.986657065831838,36.515619566701524,17.78309327783129,34.83608898943876,-25.791585614512012,26.073733610259563,8.384935899780793,40.000444458274444,-27.48515176638738,22.70559931424915,15.56983134882122,-10.897194011085968,-7.352236887004512,36.55483402302266,19.722142378931405,-15.727875891935733,-6.526947021252337,34.24714475810459,8.725382620765785,-7.162382410899787,-9.931214073467867,33.66660281774066,-3.077048864944439,-13.684856664218165,-5.847340180602638,37.99009712734455,15.980776634406906,-25.024033877840843,-14.720093411794776,37.78108234615251,-1.0226109660613667,-14.616389085841895,-6.96335170602733,36.033331416920184,-0.48586526664786567,-9.498858364886432,-8.527699686114257,37.12262449057262,2.5023985404579685,-17.184497518476856,-3.996512861908899,36.99788099011184,13.129465297887194,21.507592352142638,-42.79496292530846,37.4309059077493,14.956955377017673,-2.6938595199962005,-44.41223016784097,36.616548749136655,12.143612130224755,12.35094822188905,-34.80345833864925,37.110324632455054,2.000414518850726,-1.9795072731261971,-41.798275268800516,36.83682644157843,13.5060898859343,16.86181873872455,-31.537246504915178,37.49553553442756,-0.7706333592589831,0.3561586133926066,-11.195973255408662,37.44815955095957,-22.62650197720879,8.605441126327596,-15.778573624719664,37.230761796191,0.8079250507149585,-1.5587971842299488,-16.663646290495073,35.70928793100424,13.746967710423233,-29.24222898419389,-43.952128708530005,34.714737326535705,1.224989003758231,-50.56351271019174,-41.8636286946938,35.70260672285913,5.614391583349594,-49.25019865691881,-7.360405209210244,35.310745238636855,2.2081258481277346,-5.1000000000000005,-7.855520240590648,36.53784358620185,20.882623177212796,-7.741216422283424,-14.448522324497914,35.4838552684955,-0.8765995003509451,-5.106989066174439,-4.1000000000000005,36.38594151026349,-1.0282509607141193,-10.116302046799914,-11.380639173365804,31.33565082708557,-0.7819831131288316,-5.1000000000000005,-4.1000000000000005,34.740215404876125,20.69082313471471,40.803269683189974,-13.665270435736584,14.482562463401011,28.998214532312247,38.39548221618108,-8.61362814489016,20.99726984029247,19.51460764632246,15.135489068320583,-42.60726900730972,32.949405301913075,8.673073009760786,0.16563437486834826,-41.80648481570087,18.326561970253277,21.662288772261668,5.34678344651118,-37.43170047153443,16.52384228676192,8.701140167324306,11.125483725667486,-21.525382127239855,37.02339547204325,2.480999559203349,6.555609063939421,-22.169270679684505,37.9312973802772,3.4132038748853977,1.020388943898368,-4.357520813138001,36.486196718595245,3.2536728001412074,-15.452033874971844,-14.605836926012273,34.55155831006215,1.8534849336239123,-14.506787195732102,-5.068291879084077,34.34555789391285,4.908392744039848,-22.32547332124245,-17.908360373590455,35.92033336964247,-6.02902666869624,-9.713054855270753,-7.936523223576087,38.51255365221268,1.11080861872962,-7.1545557428393955,-10.344920498907367,35.12235088705124,2.163436188422144,-5.1000000000000005,-7.791382925455512,37.20872873524685,4.341954722976026,-5.1000000000000005,-7.814968209745999,34.57641599441351,-5.82660887631927,-5.1000000000000005,-4.1000000000000005,31.09314159019239,18.79724622860606,22.466963887214103,-41.24743535171616,38.404978727573734,-10.811930094653697,0.26147604146554426,-23.89757375523499,36.67315455945529,0.721091804288402,2.3607772988406435,-41.177721342656355,35.31564254349955,2.133975790450504,-0.12686811847247206,-41.51428364933629,34.11600663726824,3.8832612260492017,7.407395742860814,-21.918593938514658,35.23797570704559,-2.7940018033379057,-0.8067885011702176,-7.439665014975676,36.82428728274805,2.0043933256928748,1.6828378499882874,-4.117227828125,35.91330303766948,-5.7936157037787845,-0.1207074131723565,-4.1000000000000005,36.49175986993225,2.7643438848930257,-7.0802378081032655,-14.479834497299974,37.86060091350314,-3.558061164196183,-17.25700306689737,-7.8124931961141755,35.58304200294262,-0.9478064385451908,-5.1000000000000005,-14.385879002773393,35.964853780625134,1.7118728323741566,-13.907830053733107,-4.108474881331831,35.29325443050672,4.328092193473621,-5.1000000000000005,-7.323183791563567,35.68050244517105,1.714054294050239,-50.49563551816975,-4.1000000000000005,28.87398288442677,-1.9580652629685535,-3.0302189236129915,-7.790873502421754,36.89671586409499,-6.061159561725889,-5.15784439536116,-7.790000000000001,38.57779560665668,-17.463270642806478,40.99610607986894,-6.854342684834218,18.042793170560195,-7.1549254949219625,4.015200152234699,-4.340943520994057,35.86364888185961,-7.615222498586935,43.5646214199737,-1.1601513371374397,12.322794536040771,-4.217246775802911,39.19534704539889,0,0,-1.9407585260806015,36.68038942780033,0,3.779862831953146,-18.047600442767767,41.53970460309029,0,0,-7.473530429634824,43.955233880753525,0,0,-6.1000000000000005,16.648016499552963,0,0,-13.463134013809016,-5.1000000000000005,-4.0118096164704085,34.72583892107987,-9.592281227998352,-5.1000000000000005,-1.4749597978301248,33.9000799488441,0.47358404894497097,-8.234057687998082,-4.084135867145853,31.03500310889824,-10.213625,0,0,34.500344760622376,-1.9148852307502127,-4.882637303650011,-3.67399234154621,30.984943459375188,-15.992514195438293,-5.106987412320868,-3.6609722360187256,18.44198630826176,-8.8782393638799,-51.01362924733252,-0.09430595345821545,12.80024055720164,-1.3560733755505232,-51.15592482362857,0,0,-7.003662208203854,36.127769363338814,-8.2352570852281,9.573385604783608,-1.1057390203643997,-0.2700778498061287,-4.1000000000000005,35.414314999296344,-5.9288013624406375,-0.832276892420449,-11.059645374227134,35.40881022473625,-1.1,-0.15161297962987064,-4.1000000000000005,29.413930453486998,-1.1,-0.19111375000000003,-7.548036848112549,31.5895076193893,-10.213625,-0.10689021667441173,-4.1000000000000005,20.387137552164113,-0.6617971965648177,-0.1005404155395119,-4.1000000000000005,23.466240049651525,-1.1,-0.1489719917994158,-4.106983093305573,16.604318082694004,-1.1,-8.991749143151477,-43.822352934568414,35.18407361949571,-1.1171247921875,-5.116896970813655,-4.728329152977905,14.575578548803234,-99.24052683547526,-5.105444359724201,-4.1000000000000005,19.52229812827807,-1.1554600476413353,-5.1000000000000005,0,0,-1.1476539187840167,-5.1000000000000005,-4.116953769720282,13.657414062867185,-0.7886366012226518,-5.371686908966817,-4.372757557672303,0,-8.84549729832524,-4.111128721391695,0,0,0,0,0,0,4.398007301270914,1.7771250386605926,-8.27849892580602,34.19530718478476,-7.757555981756453,38.94786386876051,-0.7693269279969144,0,-0.7723987595935873,-0.09619917275909683,-7.963772854464898,34.984283367952386,-1.0757694240956055,-0.1,-4.5324334800333235,34.43510682385292,-57.22060718316539,0.6031146089659106,-3.886554931693884,22.726719257579205,-1.0072375535054665,27.66581316189924,0,0,0.8529423187936167,1.4161896740661157,-4.1000000000000005,35.062748078496554,-3.476136882795849,-0.16289735827991758,0,0,-0.8430624121924565,-5.101062603770618,-4.103238058770011,35.654113863536566,-1.0437694547997347,-5.1000000000000005,-3.8282301981257287,15.58443457747974,-1.1046125,-5.1000000000000005,-5.082026759920173,12.292646656482795,-102.2070378874634,-5.085218967451935,0,0,-6.1116351853249204,-5.1000000000000005,-4.1013317164601375,33.34384982570112,3.265207407204981,0,0,0,2.076546241983485,0,0,0,-10.213625,-5.1000000000000005,0,0,-1.133686886966182,-0.1,-4.111261555439706,33.18723009656462,-0.19447562747667502,-1.4386479183127245,-4.367964848562004,22.799149387468084,-0.9818743835268514,-0.2286253829695728,-4.339427783831495,36.6163323650811,-1.1112949089756199,-0.1,-4.107374130707928,6.794720570475291,-0.3692973782602425,-0.1,-4.106981441218087,12.066695379927367,-8.238603932326221,-0.19528741425074791,-4.051394140678208,3.3876762228496697,-0.41977488674148766,-0.12002339365573489,-4.254648909322874,9.380770550844865,1.9093553407488324,0,0,0,-10.213625,-4.82060965496402,-4.615349837564921,3.7191547217395162,-6.105985057589047,-5.105745227887339,-4.389532841726942,0,-10.055815410433592,-5.209446040319495,0,0,-1.110527046875,-5.117227828125,0,0,-0.7963906479765273,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32.69068150596708,40.034466203242744,54.31962303231073,-12.93288178992908,29.785993680704326,43.24596948760765,54.49516846359792,-11.564411745341717,21.822554355333132,38.53090977774398,50.23584568518221,-11.706729770822756,22.61729504744009,36.56016259507529,55.348416277143656,-11.357036187614177,37.210113401127856,38.89528742564708,36.87771353856029,-11.328474293923785,19.51912748167227,40.4203980979036,52.193374819447115,-12.52211968046674,26.8287522449214,33.79825639008843,45.96347459641271,-13.368804335721007,23.23911935772612,30.42438092173516,52.49825017622117,-10.657870324666012,34.07026397212105,-3.24329837636084,55.119103821841556,-12.372804898828965,33.32660527628636,-7.131774045912869,51.97162204752111,-18.01765898191199,23.18070979197426,-16.040219844954212,56.05891921462206,-12.030728439445353,28.250123881822212,-8.625780445380208,51.05686304914819,-12.141976038605565,25.339652990344153,-14.734557775097024,52.04094023830237,-11.78340241277133,35.64197462625834,-14.45109061997122,54.803058605835,-11.716067934738053,25.562854703362316,-13.433138168619326,43.905401899094976,-11.943372514961618,26.2682814510913,-18.949639657224203,48.68552705288807,-13.761500707160875,24.012625429570132,37.20507968570716,52.99478168168641,-12.918567657337256,20.878222491691748,38.986706823581954,51.769864587005145,-16.16501937952231,18.384239459797286,36.2110272087171,50.3537409698821,-13.017536005813254,28.769624810693813,34.93277854736798,54.34856867697009,-12.489420729639592,23.125082805280194,34.1508401548867,52.091279577586995,-12.590796156227189,12.97950450089824,22.6125743656885,52.580154491993156,-13.679904283029085,13.36386178954621,38.45771390552814,51.60190441790943,-12.933820922095439,4.0662700811507655,20.09226985570818,52.56146166618011,-9.995207057285402,24.518339508304134,-12.104753569340621,55.22407077069036,-11.736485067431225,25.757370971903352,-14.021595266217783,52.023235100265296,-12.51981840405701,23.704471750638433,-16.330570680757386,55.44493017812053,-16.327017929187896,23.046361228932636,-16.002646183026034,56.14796792456262,-12.999953023177138,26.671559103187167,-16.256957892417585,49.96961073675702,-12.466618650055851,11.237598401127384,-17.492089884077696,48.461951149007504,-9.04169410314304,13.54757247719927,-17.484836673018314,54.841941253920545,-3.906368407581251,32.150098583127665,-15.960058022049653,55.52636859399923,-1.0553527301266272,37.255816439662155,41.34974325514966,52.68422221238478,-14.972175535456199,32.03450833645626,29.820455789749644,51.54910106186451,-15.675344852362297,29.370684548790894,35.08586726048779,45.24398754866493,-15.109328959518011,7.571360354936468,33.90479496216008,19.90207429047888,-13.098496560828039,17.213909380556714,32.87092134427608,53.72831703498184,-11.36210496642412,29.391363895861016,33.368014634619556,39.12157279622159,-12.77792418027057,23.82631910094946,26.57472764487614,54.95524215206294,-12.999799490764959,-30.937084600793597,17.959147357839324,29.48616625387208,-12.553396565185428,30.00667599913003,-9.395432344389214,53.15408101267933,-13.808859533200014,25.17029685814805,-13.67630563520469,52.834885725243836,-14.573744289538485,20.158761156398825,-21.00079661141085,52.92349738615399,-13.927921332874044,14.161647071153762,-25.013717620747993,52.912419292845925,-7.267121631231785,16.743955913956192,-24.972676635504342,50.828758183722584,-13.67277506376153,31.201902476208918,-32.14533168031299,52.620281158301665,-14.846337446950454,19.197723021532987,-18.343889940932108,54.564266185455594,-10.14460731017253,2.3159328847267027,-7.240903241818879,54.40088486244691,-5.583840144861662,13.05595051688658,26.76920223472814,50.75572515048373,-12.169785275498489,18.7554673421288,27.130368702152566,43.19565150516476,-12.773770827330223,13.059767819869553,29.818277091550584,28.626713369976187,-17.428515705195068,-2.287036282123069,6.4874674926945115,47.52888199708999,-10.940176152523884,14.183162191874327,35.96386140358372,47.55411272970911,-14.06727054283294,4.950405632161976,24.0099964280275,55.349806174326964,-12.632101913430134,23.092817829765018,26.228609855402993,51.34522632929444,-11.899387926702522,3.0516917854729693,-0.12651624611682838,51.93750284918267,-7.797995747488379,16.235136591733,-18.020997486077917,50.66037550161496,-15.171248235571017,14.603974380589708,-21.029948559274438,42.772259578126544,-10.902618007195382,13.428450434072056,-38.33819113309033,52.85856237497253,-12.556843451787993,10.56251625371819,-40.465694912863846,35.372196986596116,-6.993789165606474,21.0346374289719,-34.96403567922465,54.823194833478496,-4.277423804999365,8.308619495460126,-5.101243296610826,51.80109496773149,-5.270355401068508,2.1453505503092662,-9.691678551614645,55.32120502228759,-8.631213448149307,-7.084568237942511,-17.591727241660077,53.64727257335644,-10.139509771010452,-17.950453470450668,36.963616569769485,52.100073182570334,-11.39473016928778,28.233016638580963,19.545302414603633,54.65562660725658,-21.14123755650375,-4.958639085803841,43.13905170841465,52.0183289458385,-12.34505067522208,-10.213625,4.425198841105727,52.19222679840147,-4.481251097746699,-11.108933431684449,25.74382408887616,48.358824532409635,-5.36989913525985,-4.742232300013674,42.203974140792184,10.226119361536586,-1.5144571817374322,-13.510381686843463,41.16331823154718,13.627933200638648,-1.2253929805465469,-0.5543098979457824,43.00722910661766,0,-0.9920301017344237,-4.655982683583141,-9.098073556011016,41.30413248727577,-5.098154178425982,-7.888540062488841,-7.599200804827881,54.30315953451579,0,-5.851478082665747,-7.55007856837375,51.482349826127354,-2.5721157015602487,-1.5644016514402752,-5.1000000000000005,53.20742627337404,0,-1.1058871554933478,-16.99806969963975,51.18495655624122,-1.331537849385274,-1.4751841985968257,-2.4064140877133213,47.30716216749846,0,-1.104938233985823,-3.2723825853231236,58.014524105138634,-1.2206597937668187,-1.1115023527053154,-49.63964859719142,52.130312310526335,0,-18.96241237901644,36.98610165414097,52.4412699821984,-9.92743556510953,-14.75483149549033,-1.3292531927888112,55.91913730910679,-17.02399813562665,-11.316895253884354,-0.15086429676046512,54.305222028559754,-4.274092261924091,-7.601934369055365,-0.32117726952107606,52.40403967620289,-2.0434502774409746,-1.1058776094699698,2.0861333577305405,53.87537846972843,-2.962650118609817,-0.9510921911382518,-0.4537355816796766,52.020851909209384,-1.3231380201609484,-1.1013345419379543,-0.11153852141569257,50.386389105746765,0,-1.1068902530377462,-0.12494831822534276,43.53647794467476,0,-10.219363898102351,-5.7526553328392085,51.97352094311611,-6.627910551304126,-2.1110386929310323,-10.631275781114745,56.79954881641751,-2.6276039451133846,-1.1110584401070083,-5.101360548165555,54.04149052272422,0,-6.132229279929698,-5.211660801435966,29.99767373088916,0,-0.823269791078719,-5.100265223506906,49.45690182402396,-5.11583919747156,-11.45342944475662,-5.143149841087204,32.25380853639041,0,-1.1056716794367532,-5.1068625,29.026325240106498,0,-6.1162153281250005,0,0,0,-12.543469900302549,7.707032013388195,52.31692113299999,-6.771297650531225,4.192737299956141,35.2931585151713,5.682143482208109,0,-56.72328703348752,5.574402693729035,46.29302513270494,-1.1899586524826056,-7.550847576527769,-0.1,31.51116186611344,-1.1421526619030495,25.79785675124838,6.597163820691531,51.34563158711402,-3.59818527267764,-2.3044614039027973,38.69331858179544,0,-1.4457238278932558,-1.1059635057251345,37.79472966267365,2.355151478972768,-7.761309198931592,-10.031041237003684,3.487921612651082,30.845573549836335,0,-14.738259287624105,-6.775990183881561,44.99942670283675,-8.670960385178239,-1.2181523675278114,-8.630607051531793,53.9443140927348,0,-10.213625,-5.1000000000000005,55.192493109847085,0,-1.1104792814658537,-5.1000000000000005,22.057230311678545,0,-1.4718891029936614,-5.1000000000000005,44.05100485812664,0,-10.213625,-9.691328738082511,38.93324909766744,-1.144064855029552,-0.6547354163029533,-5.1000000000000005,25.676113587071118,0,-1.1060394019382782,-5.1000000000000005,10.699930327624799,0,-60.47734591558608,9.899596999249123,49.419070520167104,-7.245733985069968,-2.47094171460638,-1.748121684963532,51.29698342545826,0,-1.1049815437399606,-0.14752273519140746,53.447912941011936,-1.3380912059952133,-6.105876717141208,-0.43047994186925165,42.26314233240385,0,-1.1053811090635606,2.5202365586089557,51.8532325345507,-4.095585190695188,-1.198937321026469,-0.20392759094091614,47.46944754714894,0,-0.9841414479251441,0.49414921804930967,50.07463744600081,0,-5.765455356540654,-0.1,8.981886413538213,0,-9.943792440233812,-7.764709565186368,46.474864292047506,0,-10.213625,-5.1000000000000005,52.72292641427586,-1.4568382634651407,-2.6811345683591323,-5.1000000000000005,48.450180220780986,0,-1.105567627521421,-5.1000000000000005,5.797709216586791,0,-10.213625,-5.0053167282354005,40.51373635376102,0,-1.105793130373792,-5.206280661781516,22.03463538127651,0,-1.104761763380211,-5.101256431735454,55.57603164229556,0,-1.1115735991876177,-10.214875520299087,12.104356558656063,0,18.326402661815067,35.20577820893414,1.345550032840868,-14.630134115598281,21.99959396739071,47.66699702957067,2.1826946434897936,-13.900266996096255,24.573124386054502,45.89695598568077,0.009512250325012739,-17.46735700819587,15.876233366374496,44.16578554877791,2.3542379557231987,-15.28589376903463,7.893535951750984,41.31087184204188,-1.296929539227148,-16.341564475225123,13.922770954205749,46.89096462654357,-1.7013941216175397,-14.094162906644389,6.72497845808952,44.32019792347116,-5.134667413811705,-17.996935980420524,-0.5809561993085315,44.99984125099615,-5.6322484583421994,-10.463365698455203,-17.726740640794908,-13.786781094604416,2.081354325240985,-14.511350046186852,-7.2066571324266055,-9.22106624526303,1.3305086418060845,-13.067483290479172,-45.79658889326537,-24.802145673154282,-0.18322266008051202,-19.290617428644257,-9.385814662483208,-10.097820176237757,-0.7519094523179637,-9.994088407867224,-11.62027581184756,-16.595970210629112,-2.7934291431939577,-16.53209321326136,-17.544482584737207,-17.463657336293114,-2.046663863322816,-22.491700206316274,-17.620930073709985,-17.413722306135288,-17.777461973411672,-11.865082654399965,-8.587973150554685,-21.751690717484593,-21.218420153003358,-14.010641258880717,18.49541562015645,39.82146753452868,4.099918585465688,-13.78189816814661,-19.127119211350553,-7.692539939510538,4.186697178401748,-12.915295676220868,-4.114398404502894,-4.23511978159203,5.75703365894677,-12.453998532328928,-14.66389204179773,-10.271111187049007,4.120636384730888,-13.127220623567739,-44.275866999996865,32.47599021548212,-6.047622559313828,-12.221616932836087,-21.94398738314004,-9.94247120678746,-0.21699675650296543,-20.564409637110604,-10.662620896431989,-7.827864636522395,-4.281901796880319,-14.499382727868323,-20.718517451494755,-9.074712083370965,-30.425600416044304,-13.440016024919014,-12.114249714461634,-15.065922262095715,3.0012619424265456,-21.290053584640244,-8.1981123395761,-17.56048738844966,4.831070725137738,-10.502794599757173,-70.41866022437243,-24.754202808745834,3.67811195329684,-27.336282155939273,-8.643237792046087,-51.14782303263124,-31.711971034426888,-12.006969617793656,-14.659406656057898,-16.257175070711956,1.0498232182720169,-15.233239753243733,-11.71218932556751,-13.836638089629103,-13.119336657236927,-14.783673565152478,-14.517673966402997,-20.645850289308775,-17.42839212072021,-13.26495786719168,-3.2346111741273784,-5.1000000000000005,0.6139561895113097,-5.045040162954114,17.82369563120873,22.478603219115413,7.613004528013973,-35.04351246104175,2.2189399836503285,35.65120918906864,-5.481179942524109,-10.65611489980831,-8.755444655990743,5.351972750719929,-0.9683809693449011,-14.432323002864374,-5.528981890765694,8.374569729585424,-6.670767005223139,-11.652409032350114,-2.3721969876990117,-1.6809927558171376,-5.448443404341175,-13.000660592388043,4.008021033340302,23.71391501045596,4.453967580012057,-11.042997787457999,-18.064678059217208,10.15435162598349,-8.387255542042064,-12.311815339432234,-6.230400804593035,-1.6723015365219396,-7.334078757383825,-11.872852984552408,-10.90751718337429,-14.489694005688955,1.7263603356206907,-11.346656598658283,-9.786054105339895,-14.864794389112678,0.9688402769690403,-12.933413376275876,-9.389531723598118,-13.758542566024252,0.039235399425279316,-13.257761731132698,-10.732364988029044,-13.801334124891458,5.350083945703332,-12.530376495521233,-42.86821061967496,-15.692266894923133,0.94494372546708,-11.281688721995446,-10.468035122682945,-28.03933404380683,-41.06730415929156,-25.529879097812973,-12.281958264390397,-17.41844197065904,-5.960838101310505,-11.52881979597433,-14.576458503211496,-13.82210757628425,-8.769915216803376,-13.763159454732588,11.913491962514524,33.15420682599358,-1.181247858520988,-23.077149183812875,-8.76744407861755,-11.165647344642096,1.5978386279350736,-46.67831375542157,-8.488505458306282,-0.730015059344852,-10.698123217303378,-22.120107095432658,-44.4639494964546,-14.121285182873693,-4.675224505208066,-17.967719113396676,-6.918301062409553,29.476515958698336,-12.262628346222106,-12.93194710194009,-22.78950689910254,-9.651112302893118,-11.939687387712212,-15.095874877596716,-13.001408476031777,-7.347476901895461,-16.55118922538617,-13.833396935791955,-8.509402912546946,-5.90823436972205,-10.006316924495653,-7.475723075391219,-55.62025004906599,-16.068129559856935,-2.205541934701084,-13.136961523839537,-13.119546946531026,-13.838866322519863,-0.031083508951318173,-13.830357554295865,-7.269570735271602,-9.695942945851641,3.202515314899063,-7.305499750561023,-7.004778367316443,-13.882205411875574,-9.245098847620765,-9.945661529179318,-11.501628335278491,-12.537996930676872,-0.044222162826578454,-37.5378255797819,-7.050424589381992,-9.696925495986873,-1.1473536412950975,-5.449911122570629,-3.0773821722782775,-5.1000000000000005,-4.302521878770534,-3.2537371475690677,-16.56131105723771,-33.492961625907824,-27.893513285397578,-49.31244509025987,-56.576186523372876,42.81661340690071,-2.993860840276678,-9.474325607151314,-2.668559438235722,40.98602327560991,-2.0931387158339785,-5.110152071354913,0.762071210851458,44.37111857959967,0,-1.3808700881718394,-1.0919256576106353,38.54432653128063,0,-4.6940785393803734,-18.853761274369244,42.55671831330824,-3.359037996544242,-6.669672318325237,-8.028434766449736,38.98150193518513,-2.4187254292685534,-2.830783697554665,-0.3266894968086571,40.88251637269249,0,0,-0.5013144452035038,14.35724660697602,-0.19885487881323272,-1.056032111234076,-101.83469481047068,-12.97825566113115,-0.6881516505421913,-12.823129146905536,-3.6776957993357833,-5.1000000000000005,-0.7930456768332349,-4.676723459701576,-13.188986170296346,-9.691757267129805,-0.5734974486776234,-5.106868961804376,-12.181649260593804,-5.1000000000000005,-3.2168627506750793,-4.649960555581498,-114.55941600259409,-43.58791244206117,-11.621430717686565,-15.18077469356402,-6.105967339742651,-7.318265186886257,-4.250624377165147,-2.5244069836895755,-1.1061183658731202,-5.101252992423827,-0.4551481808037561,-1.3457055617269356,-1.1,-5.009197628332529,0,0,-6.951584168107128,37.556478185622986,-1.9523870187990982,-9.948852389216466,-3.326591273820899,-3.14895256719676,1.8582377579216287,-5.781463064458619,-2.1108234980678944,11.73208786086228,-2.5060593747340008,-6.840948248938399,-11.064181277106641,-1.5513645889033223,-3.7755842158644635,-5.117234083678842,-10.213625,15.56712778416529,-3.3773252972743304,-7.243670228569092,-5.827948913584989,-3.1717402867102042,-32.59523352308188,-3.4472160351070777,-1.0731811576835377,18.510298003811265,-0.9356922515451878,0,-1.1,-0.9353774723903456,-2.551619105190285,-1.2253138612912253,-10.213625,-9.206416427606921,3.09539031554332,-9.714588927765814,-1.105993423751721,-5.110637706890298,1.0654506716335306,-9.773974303455145,-103.85540236361092,-5.1012375,-0.6273870465292434,-2.33209161207327,0,0,0,0,-10.976894491065922,-5.08987550283833,-1.6143619157005924,-5.1000000000000005,-1.0693501473377423,-5.106992074993921,0.8204218110511725,0,-1.104794117949998,-4.818987522822435,0,0,-1.10971416155732,0,0,0,-8.19238367425496,31.26644458300359,0.45251302623171913,-1.1750245439014897,-7.105734722457817,33.911383081018506,0,0,2.069350358076961,11.119926197962927,-3.7552356248559366,-2.9020689695234996,-1.1052504556598655,-0.1,-0.1456053444923988,-1.2579319972692602,-8.790509427972147,18.040858402306924,-0.9482573529026048,-1.5454423226706204,-2.2072406569442173,26.64392871898315,0,0,-3.77459807304206,3.2283142823970623,-4.1068625,-5.114585442360033,-8.099632136440743,0.4132435592760776,0,0,-8.039240443676004,-5.101153318442534,0.09769175656085183,-4.4913431130392425,-10.213625,-5.110543167668952,-3.1097041110656405,-6.398587578633723,-21.35393530912904,-51.0123762752889,7.7805493527202545,-51.06957589385867,-1.4781150152927331,-5.11261444823917,0.5374000595951003,0,-0.9994866046229055,-3.910881874674754,1.4093315870638714,0,-10.213625,-5.106863878515058,0,0,-0.927542353758375,0,0,0,-1.1,-5.1012501630988965,-4.104824815768089,-5.106994665615203,-10.213625,11.716172554659549,-4.1000000000000005,-5.106980858483435,-10.810364981524963,-3.450759135794023,1.5076433823475306,-4.667142639662519,-10.213625,-8.09008413358262,-1.8038960509654545,-5.106654666963575,0.21264661222286407,-1.8128798738571215,-1.5421073254720643,-4.059469448698503,-1.04121653193476,1.6916789939518915,0,0,-1.1111713809484163,-0.19363538497592092,-3.3849402592270104,0,-12.385839144472127,-0.10734739952886173,-3.4031180401449057,0,-11.26197495251107,-2.384168253494943,-4.1068625,-5.1000000000000005,-6.1000000000000005,-5.138772345189017,-0.5285349251216556,-6.241489091510255,-8.463011610764642,-5.23296097677083,0,0,-6.120072829702334,-5.101243981470413,-0.006174979801012626,-5.1000000000000005,-1.1055121809703756,0,0,0,-1.5672925859636282,-5.1000000000000005,-3.4413436441418463,-1.1539001703862504,-1.1063524660098982,-5.1000000000000005,0,0,-0.3111156837274364,-5.1000000000000005,0,0,-7.961509201968177,-10.220507030650383,-8.627624602284856,-9.6968625,17.00458027431093,34.72679676139441,38.83011758113286,-15.388346871807501,-1.8401092223743913,44.89876913923354,21.44867261306335,-16.557412638334473,23.29723492106955,21.73388781613734,42.23513093349682,-19.191854149366716,19.323619142591504,21.66560215231199,26.5964589185313,-14.560389209745715,-1.06855604483742,18.245492498923895,34.50223257130898,-17.97595865282368,24.858375300984854,20.424432691508425,44.134390828712874,-14.748646310796643,10.517407795628616,14.375848948186004,46.7666075774347,-17.565348417918514,12.319730780813595,10.284123841968476,29.615189033187,-15.594642451008191,16.425830847219007,-15.671497928984412,49.59792966810776,-15.998195688603913,15.426131049842912,-20.465685416056527,45.51133134189676,-21.359958489990042,11.59908232726852,-12.60283656700808,39.86812850489629,-22.009758825137045,13.569956902240609,-17.096071226187657,33.80212696933836,-17.945126455775217,14.735797375311837,-24.928899753325876,15.515150703709038,-11.935464968654411,11.92395433794546,-11.355532196379182,33.55067424226296,-18.787036305582166,16.57645231515242,-23.578962253266745,43.437534664113784,-14.547248823574073,5.313803837213722,-5.1000000000000005,28.812410430101018,-9.298153478196422,9.527629205598618,38.56409212652563,7.82407608044562,-15.681318938339706,1.3826157078521977,1.5351031726931064,10.06091343306348,-15.66760504724307,3.276365374731736,2.398026964111764,5.319074152520265,-16.05305794417049,-3.852732880705947,-2.05132527437248,3.490065944650322,-15.736604584950902,-14.271324807831437,10.062441223547772,-0.3237170390218327,-17.15581791937885,2.3055799446846628,-0.06441652714824316,4.933270577092633,-14.82968725968553,-8.249916021917064,-0.736323327063188,2.3776530110151066,-14.639648024769834,-4.989149664984609,-2.899250466575062,3.999242542838453,-10.310929499181261,3.3296296794796665,-23.398226918268893,8.505167979899067,-15.701466238166955,2.526791963826687,-45.44805383073752,8.752761185820754,-22.697302914338042,0.306661368670877,-37.4514977503758,5.130298088550277,-17.44613361610591,-3.697113710850804,-20.795384681249573,7.904615486276983,-7.017459055853083,1.182803562229733,-29.704264659373713,7.538429326294869,-19.22091828942526,-0.5215406402322076,-31.122128759162866,4.623185322545346,-12.197324808927457,-5.31667905339535,-13.483753538041636,3.7953238509550062,-5.10089706814453,-2.5847378112633366,-9.70621475886296,4.102079100732369,-13.74971908630418,27.73498275058428,35.79028221097101,14.836571548073056,-13.107163761395247,10.749839065842767,15.39566556157486,40.724048678061166,-15.254088628017758,-8.835139777076467,20.832456761432585,2.6240636949688607,-12.916880283699964,-27.271016372225542,3.0576809824020557,3.3979725133109255,-13.419731166607981,-1.5078601174300066,1.6439807849580483,8.965081527264463,-16.547890680970887,-13.45522158960199,3.9885425656132334,7.637381725702443,-15.02293781127645,-19.055260626203175,-1.4125292352554322,10.88436378118344,-14.771797854173688,13.928404312514902,-1.0759288703351826,-2.2570622951009085,-10.054535187291608,20.946119242071248,-17.378844013708417,36.57194964276393,-34.794527654640504,7.877123945152727,-21.10399096846503,37.38237418905455,-28.015761666126583,4.3465872874942475,-46.13914859575585,5.3751608823976555,-37.228110826299215,1.5705887180080293,-30.46705712969032,0.4993203105961063,-35.497507279864735,-38.97841765285911,-22.7798571542537,9.078129016424878,-12.814888521522432,0.06771361728484404,-24.54048123331717,12.115163162594603,-17.237531243704456,-0.5694458059998722,-32.952273641459676,6.577240280006952,-38.92289640785255,-4.272931357153343,-25.99395139275175,1.823926497322144,-6.782292808083493,13.908046365214915,36.70099384768183,6.501691675794686,-13.56996371439953,-13.003560185708384,-3.3115402666370968,6.329232899268681,-21.523797998929066,-7.634310072250958,-1.1337948427287134,5.256735114538722,-22.585138688123692,-34.63513885181798,-3.4989809363986204,5.121503694400022,-11.707714376685422,3.293953951910251,2.940615297112585,8.842257499745493,-10.50782618595549,-0.04475500937578536,-2.0382432316170256,5.380535675750902,-15.990009053326038,-0.9138201935271573,-2.260224152456285,8.115221782740187,-15.874868959372506,-4.213776705032382,-1.291817192017948,6.010454439767939,-6.881813617865514,-3.233213276966585,-33.34809480764542,3.8089676320229735,-28.669784127654932,-0.8906756570050747,-27.60592353518396,5.571373688645543,-22.436240728376255,-1.636148215369086,-13.43270128410133,4.777043899025551,-44.588014175424966,-0.17593834221942864,-5.1000000000000005,5.584289610305274,-3.2874237384809124,-0.8151956024426426,-44.68285169923676,7.318850115475725,-12.064644465089753,-2.141351238264926,-9.690000000000001,7.004614385882154,-5.101386180878791,-2.982672348170084,-17.107824709436834,5.961488285893532,-1.5466760457655924,-7.719508370909796,-34.550009148307964,2.1022642895348604,-16.99613187024777,-4.2643845852674325,40.446637143781075,9.885328556022419,-6.857522044071471,-1.8338255824979068,42.29160475957418,8.023487080114283,0,-15.256543530468242,41.38001302686767,4.671773980370083,0,-10.213625,8.438512048452472,28.86282864318901,0,-5.129355710710408,32.90504572180954,7.546722982541519,-1.9347643047738832,-1.105086862723917,34.531588000845346,0,0,-9.077158253702898,4.060361898807055,31.730681493337823,0,-1.1,23.885867669235793,0,0,-15.13467810094777,-5.1000000000000005,29.23332741052631,0,-1.1,-51.01232665521914,36.102874894380435,-2.760955823337665,-2.8228388270959073,-5.107493626127315,42.81189481164998,0,-1.1058821930487193,-5.1000000000000005,49.41035776158648,0,-2.5968716343104488,-48.41128178180298,32.12217065473044,-1.1801637068286313,-1.4432135451559742,-5.101723967190271,26.43690670287452,0,-1.1,-5.1000000000000005,12.026506651276067,0,-1.1117213432201496,-5.1000000000000005,7.00916817646185,0,-1.1050849179679856,35.3020024999422,0,0,-2.233195697269079,-1.461102225346742,5.991159153180125,-1.9141352775856686,-1.515859211373636,26.186250354652284,-11.736576089973926,-8.704258174021042,-4.817581685876157,-1.072552142895525,2.8463047057524316,0,-1.5140232374861733,13.400987096402355,0,0,-1.1,-1.042109882544315,3.0288517792861516,-4.220573252095373,-6.1010097949512865,-0.02286918441942544,2.1100754489528812,0,-1.1055810482394537,-0.49951868982602854,3.012139568981684,0,-3.3420583529328916,-5.1000000000000005,4.950908250391211,-13.443728722324904,-1.1058493268655674,-5.101243002428307,12.558468759030587,0,-10.594255040261718,-5.10136853240185,3.7984899927222884,0,-10.213625,-5.119297807951481,-0.11150144469756801,-3.080409155858962,-1.4955802227083332,-5.1000000000000005,0.9472456052520927,0,-1.1056491549572776,-5.1000000000000005,1.2444281525612166,0,-1.454322832153692,-5.1000000000000005,0.6307132441262802,0,0,0,0,0,-2.9212340880995966,3.6366416834770114,31.722599478780744,-2.2649615297834695,-5.28564179668286,32.56508005144252,0,0,-9.858190825931091,13.784318479777758,0,0,-10.117466667409431,-0.1113654900012731,1.8016280456213318,0,-0.03719231668960123,1.18412121136622,11.846212349154358,0,-6.885451199863546,4.922101945965959,0,0,-0.8680811207544981,6.365325141375778,0,-4.4430742442958815,-6.02462636275007,1.0273320313411696,0,0,-1.5480917156160805,-4.10500614098536,37.6322868588384,0,-1.6213289701756786,-4.739675923526802,9.76976253969532,-5.117247209431641,-10.213625,-50.20987238811207,5.66929653772301,-5.1000000000000005,-6.110483319556263,-5.1000000000000005,0,0,-1.4962475723178845,-5.101848504830358,5.08076553272717,0,-1.1059065168389641,-5.1000000000000005,4.024121920047169,0,-0.4214849865513255,-5.1000000000000005,0,0,-17.795712921725112,0,0,0,-1.0994035217198728,35.58819191347012,-0.20275822138670638,-9.721224707332999,-1.2031714946610523,-0.6038871202682018,8.265154391555667,-5.116797532221435,-0.8649667588610749,-0.800319245750299,3.2683142976621937,-8.193012604017737,-6.116592801114312,-0.20462890310546067,2.9880703992142688,0,-1.9459125855023642,5.669710560298226,0,0,-0.03885622048550985,-0.1650486463479242,0.6789201249458361,0,-3.9464311634036906,1.067219838282473,0,0,-6.101363175162941,-0.11159745094718217,-3.9377033193006388,0,-10.213625,-5.1000000000000005,2.226097165719974,-3.8826007631621646,-10.213625,-5.1000000000000005,6.726166870126942,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,-10.213625,-50.2896837404091,0,0,0,0,0,0,0,0,0,0,-1.1110003682501655,-10.214874875414282,-0.1981832787098089,-5.106995054142568,18.38267716496132,22.07396133867433,-2.7597160476078018,-20.063540958214475,26.98645362255419,43.52120871835821,-4.513869257019395,-18.306308436202627,18.04085641118658,29.863138996306606,-18.01272972493857,-17.11294272379608,21.067775957588943,44.01059078802112,-4.253926977343768,-11.464820365565618,17.60908786574352,24.2319454156169,-7.478220715400147,-17.56409421915865,1.6514760501326653,43.43038487502532,-13.183786334893426,-10.16921174414913,0.0982422415594586,43.267336838500604,-11.365708010952579,-8.868775956020801,-0.7408194236375586,16.13505635120471,-4.055848928829856,-4.576379143229474,-21.423098876593286,-11.299623878748198,-29.0420402371783,-15.003537654550515,-16.186011761124977,-20.991310280013167,-39.37565325511296,-13.58940916098456,-16.433679721001567,-16.410837204456225,-5.869937733668086,-15.557814918898956,-20.40501132967706,-19.984966176565234,-15.098166240847812,-38.752366437484966,-19.684941386036314,-19.529694885467386,-19.54964714906491,-13.264090075082489,-11.68063046632381,-10.545901690893103,-13.598045565818971,-10.219624898399646,-9.377551459490967,-15.986293139091602,-11.176315925596214,-13.2345630804452,-13.461306765230919,-12.88519505358338,-10.853874577957846,-10.462666496663774,2.6804679442288224,36.722767763534506,-31.297028471318406,-11.729041644379437,-25.869280492267805,-1.5366899707090362,-42.581945909376216,-22.53882594608279,-13.127881924966195,-7.10421944742841,-29.369653579393358,-15.797576292619556,-18.694891312399402,-9.40700282149909,-28.18402091662953,-14.520714764345023,-0.915567366793534,24.25568355314253,-25.859282166119186,-10.379460049587633,-21.078617785450298,-12.563835655260288,-41.64930858791172,-15.185541341937878,-16.172122154554742,-5.549795140577722,-19.504140153529356,-15.044484037053554,-10.92821402819742,-7.973150569660678,-19.001235958153806,-9.769266262726225,-34.993534249366775,-23.169335749007132,-33.951848126252195,-51.18236005866748,-1.4760030756309186,-37.454190637657234,-27.82861404682584,-26.882418690387226,-20.904234681012174,-21.071609739120728,-22.203466205408812,-21.941410853185218,-20.80101695955843,-21.01117976064238,-19.1217164368843,-17.800903438616487,-11.86395333830659,-11.680410955902856,-11.948332704375797,-10.644394564498258,-9.330704687837384,-9.872679691635874,-16.867822983350475,-9.940209823336165,-5.9927563002408935,-9.289040974070481,-7.847847549139269,-7.6888795854790555,-4.393842690427813,-5.1000000000000005,-7.801722603923883,-39.9043515744029,19.136643846891413,27.652899177048184,-13.087316206835464,-14.685851695801269,7.892517624716038,35.50027539175002,-8.653432125249273,-11.391290250588572,-3.8353973817121574,12.222346242077554,-42.733147940081835,-22.592050996967266,-9.325276887348242,-1.6530901476137325,-19.603326039227195,-16.86932791900968,-18.579556591796656,28.38422724840012,-32.68025211804158,-18.556854854338383,-0.5756355326285663,22.689098831345568,-12.994577774754532,-5.111433631430602,-1.2497846803827661,9.920201445279156,-17.098625146782677,-14.354268026780069,-4.269893129992087,-2.3470173972098536,-11.356472752470607,-4.954021334464032,-55.230784765259386,-15.086649751986114,-8.42522464195425,-20.423947945538664,-10.177954234578387,-19.963381333269457,-14.983538549715774,-22.815096677470567,-53.7561949008377,-24.706628023111165,-24.022285966346757,-14.721605335476518,-11.650974782364473,-17.548012307566687,-17.49865346410924,-21.823212229663284,-16.116874713681366,-18.714778071111144,-20.096974476169176,-16.356000615405662,-7.1527774221283575,-9.371460853124367,-8.301926584794433,-7.5132278763941365,-6.4494579453164285,-5.1000000000000005,-7.995555717469309,-5.894289813040194,-6.033706382270495,-5.1000000000000005,-7.874585768509123,-5.706827915032504,-2.5769893751882393,25.28313367992434,-14.076703123508779,-24.39930103506773,-7.806307412237366,-10.737661187143807,-41.17402708748685,-13.270836224111878,-14.20336653828238,-8.80683593036729,-17.041674291282263,-19.907229183594623,-10.285185844991497,-9.851209583776399,-11.72819856404812,-10.589201724916357,-3.9118039531535,7.998129238316121,-17.446002991435325,-6.009077567588682,-10.104891227192802,-7.74363757925031,-13.919277374694977,-11.691532379694692,-11.870778971551236,-4.946565792689502,-7.807875949038291,-8.562510060246757,-7.943621352314464,-0.1,-4.101489474025264,0,-22.910152655226987,-51.06981713167445,-22.076445844767093,-22.571813733002173,-16.146479182575213,-17.56707028293344,-17.26505405736873,-18.7642583220414,-7.9217888313552915,-9.739266150901948,-10.927751099964777,-8.470907228118284,-0.9096958144079395,-5.1000000000000005,-4.076259018939082,-4.390512892315246,-51.6374649133621,-8.973609394438276,-11.084003571755348,-9.8485274172216,-1.4416816747039052,-5.106529927959936,-4.257443834028689,-2.6274580675514203,-5.157375,-51.116028281177975,0,0,-14.775212682621746,-15.163968483713559,-20.581778631850483,-16.748772517680557,-11.476660305925247,34.62216329277743,-6.255760621169468,-7.124003498563331,-0.23593718602894231,41.69044194656341,0,0,-7.104758824093457,38.08556694090629,0,0,-1.1051424004553139,1.7619155346881432,0,0,-0.8923983209605066,31.362941922214237,-3.1270688064763474,0,-1.111315200625839,17.755809411174678,-4.096302574501955,-4.244230608636374,-20.364507553784165,17.631211823631883,-4.106864047914681,-4.426505938876993,3.3158212483421057,0,0,0,-11.096473024558183,-8.647708439743978,-5.505465770456302,-7.158516528927293,-12.825657412096795,-5.1000000000000005,-4.616512374743998,-5.10690631175251,-11.21248699454273,-7.419514758563607,-7.280671603736329,-6.443587311525841,0.5739996686144873,0,0,0,-1.1114526774349407,-4.993966458946157,-0.6544623039174369,-4.720417464857969,-6.105513351813678,0,0,0,0,0,0,0,-1.541176176809398,0,0,0,-1.1,29.714239247605565,-4.300886433751163,-5.802876404375745,-5.867669020706655,-1.9780875270974463,-4.446145630713585,-4.847852736328793,-1.1047449900048443,0.8773788744248135,-4.186285803121891,-5.106988446644662,-7.076923760806862,-2.2506203761744246,-8.622829578553228,-1.3468495283485986,-6.1000000000000005,8.44945715065712,0,0,-0.20089366097143835,0,0,0,-8.453669420010204,-0.14787713591799898,-4.117227828125,-5.111142674465121,-1.0567188778152041,-1.494138443465443,-4.346023685871019,-1.4859245902427922,-11.116206397719859,-5.1000000000000005,-8.853890032121138,-9.60329333616713,-1.262812066370651,0,0,0,-10.213625,-5.1000000000000005,0,0,-1.1054396120192573,-5.1000000000000005,0,0,1.8169382303454404,-4.839631746790886,-4.335128484310419,-5.106924589353349,-1.106021904321805,-5.1000000000000005,0,0,-1.1056746381998896,0,0,0,0,0,0,0,-18.1049351684826,30.650629416991173,-3.185536073161728,-9.333640068685096,-10.213625,35.87467445147897,0,0,-7.08173473952482,8.041184260743478,-4.42425610663357,-5.106993546932374,-11.050765713594252,-0.010999408442912917,-4.153556553367803,-1.263417285195277,-0.4869257232819075,10.397003764388625,0,0,1.849841257547848,0,-4.3160257211552775,-4.4014682142433905,-10.213625,1.272258921848216,0,0,6.2354932637727325,0,0,0,-1.466201520621192,-5.1000000000000005,-2.505385972680308,-3.3723545569087174,-10.213625,-4.693270731196538,0,0,0,0,0,0,-5.775657615186312,0,0,0,-1.4794975042709453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.100617552284345,0.6377067855652092,-4.544760524354909,-4.375736614173517,-1.0861387817464194,-1.11816697546785,-4.434407326963104,-5.117227828125,-1.108781709534861,-0.33243251252198514,-4.213524852180529,-4.205865610242699,-8.691879885789353,-0.17520457961482114,-4.269776907906643,-4.705163018847839,-10.213625,4.56745587179769,0,0,-10.213625,-0.1,-4.107428804839264,-5.1000000000000005,1.7032866113072278,0,0,0,-0.9577212798643973,0,0,0,-10.213625,-5.123634133532605,-4.5220985242937335,-1.5109805706275374,-1.2061148870884155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,32.11477730519953,41.28217391026296,51.29648818886515,39.87687070665454,36.69295088452874,38.37400327872981,54.00312963841447,37.97472358969047,34.005474408276925,45.16605435961167,50.290441770859,37.92149427295174,24.742581160274874,35.03414484506135,49.66209572620771,38.692222313137606,28.245726172065055,32.80766165589782,52.09137844794763,38.893949761658085,27.143004876191025,36.92901940354042,53.78536896070681,38.54843278809203,27.643620942468843,29.93236330087178,43.22345868539585,40.03300246687509,25.247101022031217,25.326120949811802,31.474318799486014,41.89812296675303,33.3040486880257,-11.680500239383969,53.40757861103377,40.329582021428365,35.57593230476886,-8.599142514903395,55.345136114213794,40.590776397254416,5.463509480267831,-8.946485156288139,47.39004180218694,40.40831594193288,29.427128617433926,-13.30566140042526,51.090912715939425,38.610607272522046,23.245602036024902,-16.70567090800455,35.516545249555215,40.48774407846323,35.430634756040185,-9.765633519742606,29.073126891058468,32.814434151157265,28.526198907016166,-13.887911382290236,38.1721077737164,34.064727183196936,29.109876608800686,-12.701555620687039,28.611288705386315,37.149640770962506,28.535089746628124,38.3103109861381,49.48415954392193,36.50882698584413,33.514903894103625,38.18100687379008,52.89774074812017,40.0353603161633,32.87089256669839,37.205237047597386,51.505247802740676,36.69831534428056,36.89853656010617,33.89361374721363,51.02479340724833,37.0050407037579,7.209861454127814,29.41766293918904,51.57160402401683,39.04695549616106,28.611664488270932,28.371180872110447,31.72674834993028,37.98195266807435,26.10837381854042,31.482411627731828,51.70652683291417,38.006803000746906,28.43159157173912,28.47583964747327,31.07886308839728,39.73833005513251,31.280506468704342,-13.31994488492652,54.28627006262139,35.479880644947286,20.293175879234038,-15.868015636817573,31.823588875189657,41.583550817756425,35.08407254034051,-18.038129067016197,54.57981890793914,36.18171609831672,26.62647706973526,-16.09962148719527,48.9893712635275,34.04760849438681,28.813201058754768,-19.88007030412139,50.334281250066354,29.46026990904021,29.31366106721187,-19.616825543301598,48.58161786283928,27.13547424420181,37.86295631582875,-15.770702678008291,55.28354428809703,31.002784399131162,12.736782215694621,-21.129137250140662,56.47198788244423,21.348448390484382,-14.773993939939906,38.2677565760551,53.060900706472665,37.04454900246631,34.084943449023825,39.85729973896775,52.76300400040208,36.68359975582898,18.60640515403951,27.518641915298154,14.986490392497846,36.52412282296205,29.30852292176981,23.968745013084202,48.43312938389285,39.345512385538726,36.397300889619665,27.603486731617306,35.50035844180147,37.25979494323211,-5.6705156879296785,30.892383699469566,52.23163609496251,34.64183881551599,26.590580607185643,30.72611572579799,28.653562703414543,35.18419567285835,24.460319269228563,25.70280957719191,48.49501940486973,30.699173316484718,31.452014318837904,-15.001509965222413,53.41988126451016,36.13216377420627,34.105619610749216,-14.938013182561065,54.31300101416126,33.88509546892368,31.11925405730446,-18.303452824386703,27.497137571392763,42.82856786901395,7.396382677766858,-20.771798393833194,56.255729804935804,24.795802768986835,3.0676640439266616,-17.541979558303066,42.60768451890721,30.436802258199847,15.517051676735864,-23.70922147986302,46.094146817476776,33.89135076248146,28.40874037388028,-19.696942577634523,25.017404777748467,35.06480270544304,24.163438756761533,-31.766559192466865,53.82892155172351,34.1268468107914,-14.873834757956992,28.98204311362488,38.663037142006516,28.961815619478394,25.05443026450869,24.55327467137074,51.37539675089757,34.35627265493541,33.7383634803981,28.58292574694652,45.75609459472714,29.70159606926178,21.13054905981246,21.16742948309359,42.57651421458123,27.28022147894708,24.181806906474282,28.845635239764423,47.98234894609634,24.068863902682402,27.727728512742335,27.34125899626744,26.32999072272348,32.75424923833329,20.747301032509455,24.553401851667026,42.81042160562432,38.832944227702065,20.4502314081196,14.318964615080752,48.939310723756435,34.1759951522788,33.28277170108453,-16.273202931008964,29.589167732443347,31.11091482830378,29.194872473676636,-32.00762029756267,25.069735847337615,35.56714784679301,19.030060528535948,-28.798652090995756,28.044596834024965,33.888451761069476,10.655842765271073,-35.17650587926879,47.38311542219661,18.910573446943634,23.83658559023685,-22.43985318221802,25.91119357282057,31.807952169886402,-11.91875996977479,-30.149849349635943,43.25457316315075,19.812766739109595,30.634954583748513,-25.934692744791956,50.86357500517736,23.258134074710814,6.469491995318697,-16.33158576913501,21.85093846611196,35.740147215587626,-4.304200549408632,44.78059794065865,50.47751358307781,39.25159837837644,-8.679284371710388,32.57361565647549,57.117742555027036,37.50137747819262,-47.21382502697041,42.659706695837926,37.879075917360645,36.32779133935602,-7.984382411818507,42.85608139649371,28.267962656911134,16.764940393529667,-1.969792311216033,37.03204180663874,36.06422404147014,39.6341772665083,-10.379578317954824,43.13740397052622,23.210587120895518,25.88144294182524,8.551507156409274,20.15705548721101,47.666826295702215,13.006319824656128,-3.060970338008045,36.5353941985493,5.522612084432868,7.828844085288978,-28.264571775736705,-11.385895880369048,49.794643111010934,37.15513307789292,-14.783334564170143,-10.415001544650675,45.194236873335484,32.80948925192154,-13.252693310818689,-31.035823519946796,47.03797833543669,20.45451846129201,-8.83536855750232,-5.680647062855349,55.031118239862586,15.959217292278767,-39.06218325842081,-6.1218235952204685,51.47803792892141,29.68479056934427,-6.9746304522001985,-7.852664957102211,48.04148615286742,4.090591497239278,-61.063631184892856,-5.850867854472927,51.17951939520289,2.653617800230853,-7.608026601841452,-4.965201613262337,40.91261300859256,0,28.55369925216886,38.87639280414327,52.15237699892559,34.24052526749562,-10.203955955803151,-6.84270840713487,49.55778125638358,17.090614765046475,-43.08044534223137,-0.02600421966350959,52.16103940121843,24.272070233329714,-0.971328360421418,-1.6022222885899704,52.643128006417,7.4938199648644,2.3588445197198817,8.635055682604685,52.639506877781045,33.37526708059057,-11.417335245750614,-1.7356389266837424,32.452866964709195,37.66525144352586,1.8528483290300612,26.09534468487042,52.269636095132945,31.266628006232175,-8.897400068380655,-0.5318272656149053,47.57167036810914,0,-10.887372285547734,-11.760973506351867,52.851709423069615,32.909869926590574,-10.346869264541338,-14.34131669792598,45.22994174055078,3.9973769719619043,-1.1055372815358087,-9.56168013746808,49.138736474862505,9.708683022784683,-1.8114832013013855,-9.409636256822811,55.64094893785524,3.737939328995949,-15.428554412320345,-9.575560586362606,20.62135388097455,39.20387329366587,-1.1159974203387775,-10.064776564268113,44.02468056879787,0,-0.9713155942006403,-5.1000000000000005,48.438744520191825,4.154326678893088,-0.39376976013706244,-14.028197229375339,51.73943457748807,0,5.761958254832212,39.948966881582656,34.73239803720092,32.42990230373885,10.253778935095019,20.875232137546536,19.35960491948323,25.4224256037727,-18.827333117855236,28.23261137718728,31.609888549809252,42.65891471160169,-80.68729632757632,23.931201295212638,13.082363173048218,10.19951946158265,12.308980321901544,23.051343229739203,23.07758494072122,38.18604013856848,-8.981053719080313,33.8909588771162,5.698013539194737,3.4938915176615275,2.918699293140133,5.285332162313363,39.75199778626431,23.717260352925326,3.398034614290341,29.685001261739693,5.336899276958587,2.3131522070037227,1.6272249955791338,-15.253199334621385,48.090757109868875,24.848053360033113,-10.517280728859635,-9.993541165979456,53.10547540873222,7.736116143869943,-3.424497210695312,-4.426240804324734,47.01240496431669,13.744932614363975,-11.775672082183682,-8.358198759448204,46.17054969272246,0,-13.53839219120053,-10.210236730623931,48.40656739570792,11.590192365127013,-6.559374004544902,-5.1000000000000005,44.08592088648484,4.330394552022381,2.4580165224029975,-4.545673050674057,46.93579247922846,0,-3.0276143091772245,-4.0235945624314775,28.089829752466464,2.939345224914555,4.206244633016123,32.8014209270126,11.732941165546544,16.705534603923166,-6.225604138809851,-2.7501940571780548,50.27471575470555,3.740575221333627,8.043747441965149,5.506628273255426,50.730698423487375,7.579151771628008,0.17481943007780298,-6.942343353702944,52.01719711936479,4.128800271102585,3.773327007789767,8.616040851260943,50.35387753876618,5.9554054924939255,-6.107205813005467,-4.76971387258188,52.94958949954606,2.952419817895354,1.8718321290451339,-1.1409529325352539,45.66687317170215,0,-0.686583156884712,-0.1,42.024652225528136,0,-3.6511422945428045,-8.167334338905334,45.75450318714084,9.411701553127077,-4.704799335305794,-5.112725780790502,1.2178778052551116,38.60779063101519,0.9928838439734418,-6.721753303471454,38.22527455009622,0,-10.213625,-5.108152092378038,35.10997276879983,0,-10.213625,-5.1000000000000005,51.37320401023716,0,-1.1059639294944672,-9.714599262276773,33.28967684206884,0,-8.11712659467439,-5.010183983326545,22.953408829242754,0,-0.7995414623412387,-10.215846199574884,44.448578697175016,0,29.691333176412694,43.71535498387312,2.038332632600192,35.64856395608936,25.278915595524804,44.3379355037435,2.2349674310356056,34.94959787761282,29.6513387607968,42.34879450731425,0.609316148336686,30.492860753000365,21.15023645215331,41.30100751272961,-0.181607993376797,33.80812556621281,22.251248342507132,25.206048056134737,-4.55013261924268,33.55333039539492,16.868066086372096,43.40520519772152,-4.205310645600942,26.668536279882233,15.494796561327263,35.17499754402192,-5.370852631306979,26.480053395454892,25.265491649108174,41.94707428894637,-9.379881415307626,26.317086285519032,18.349397613444385,-12.626832756754862,-0.2690820212585552,29.993623407206723,18.75381925995689,-6.71913456401419,-2.0663002470889396,33.32035572638519,0.2705636381808474,-3.825909647726301,3.4348535409768832,33.10190966853591,15.095454027599635,-9.85655828620486,-1.8465696670517133,34.0563571809189,17.934083032045812,-16.16559197976628,-4.157362467573084,33.944701304412305,15.938214909665742,-32.12110387310265,-4.077123043721149,32.627572330691,10.639505373224312,-17.18568537826818,-5.291840815433594,32.545572774177444,11.371274951309168,-17.913848944048148,-6.068363196806222,36.14738664982894,27.935858165134025,34.56396218589138,1.8452218335622255,32.88816784791459,-6.424731004449566,7.906762374460726,3.4093711162858034,29.682662677012843,8.761221742870223,21.124188700273496,4.302650391462191,22.599599540240966,2.452115924374393,8.451961359692408,-1.0463671354196626,31.960210499132018,15.241302625718998,15.994618153687938,4.717161137927628,36.862692677876446,15.888273919780652,15.827054369022331,4.0892431447129125,23.432564181548955,12.484899799285888,15.707168417757632,-15.010767337168613,20.146931795415572,20.33414071594009,6.413325390337939,-16.665592779115414,40.287047897545136,27.72152664216268,-15.457759603627478,0.02327370648701982,34.78596538304762,14.468382798873716,-37.84063331244183,5.568616251569292,38.76299402372899,5.840631400733982,-28.86999121882318,-0.24993677551450788,35.78864291603004,-4.580201688946506,-45.56039560167417,-2.8617384038778457,33.41460124471172,25.999729238225356,-21.671238824830102,-2.4040725183022325,35.13520216617365,13.361255095733092,-22.443116533694337,-2.132109802195138,32.23810358983689,18.20601341875062,-39.39931435313719,-28.08945858625208,41.63576971957501,-5.98081659049852,-9.690000000000001,3.3751999372866095,36.64315659415065,25.64949565005658,35.1581316281015,-2.7924408810977988,27.671152206369875,26.767705615056798,28.568225970302144,1.3252155292428953,26.116413684937967,16.753189995080533,14.66735933490154,4.845172617066397,25.461370785776875,15.109843241539647,6.960380226921665,-5.058310017725982,29.147813609643595,25.172458275468493,23.207793968623378,1.51932323952934,33.58344531468309,15.69348401175957,18.280607486296674,-10.334027313803583,33.75581027658094,-1.7316242338943146,17.761584807818775,-9.866687768986942,26.085107842050295,11.608864459980298,10.72056446114748,-12.496829568689304,26.616501419591447,9.846699480486661,-19.715255094718756,1.3606833725266927,32.094808352360296,6.167038876883813,-19.682321132536483,-4.577408096042992,19.413020258450427,8.551661035285473,-25.38342326092381,-5.0850537619349625,18.421737825656514,12.929324445806838,-27.7595850016642,0.5984888140042789,22.69024341101418,4.017046287131511,-30.330661107859903,-0.8478515537221829,35.40692250679416,23.004981861937786,-38.73910112851467,-2.2733100967840194,33.749552123055366,9.667811705605816,-38.02608805430871,-5.861743731284126,31.78546689064251,-6.112279667310631,-9.206108329897829,-0.7455796515473287,35.15990718466784,21.33671957007187,27.970741229207945,-1.847007535150782,38.828836880823665,13.23460858084474,12.971769347821441,2.045219010716542,35.34739800105338,1.3196263966605106,11.190063623864852,4.268962355081604,35.47147534198585,1.2315662140902859,9.858118474822568,6.698408231771145,28.863298281329445,13.94904525412172,17.56605407842937,-10.4094975085106,39.16330114079794,-2.138108126707581,6.143823237265942,-6.106741491703323,35.65557088758133,-4.046030508215438,2.906741859535078,-11.081317012199584,34.814063225163366,4.981803759596037,3.717379864439766,-8.057176827961264,32.45956369160224,9.77143414727802,-39.103084219004586,-5.328334207483774,39.097638845864616,13.008585106890731,-40.36714614157909,-3.8602012516226676,36.524302478763374,10.05867608280191,-41.90782167042678,-8.754769504697073,39.600391095376914,-0.8352523981718609,-12.673706100633318,3.25472550077799,35.77659798576126,5.951120526659307,-23.525320144784914,-6.56133486253539,41.432587127141495,-2.341804048248067,-5.1000000000000005,-3.4520193277280145,36.44099299983245,7.219557224397533,-5.1000000000000005,-30.49058969742898,37.835656490420895,2.0204550758639552,-6.993294571418656,-4.1000000000000005,27.37358474515848,-10.596967967176838,40.850540120805114,-2.652428721435551,30.22338527229795,-11.34262695967249,41.79788705217268,-0.0010156525246169945,39.08391765468986,-35.501681447443225,38.2558582488665,-5.65682333268286,14.34709924218656,-3.0089254206309373,11.390424652664798,2.5733095291390984,31.920842450079068,-7.762694453025519,13.197436206241964,-4.188538927250965,32.36440498573351,-7.81325976110981,43.89728250243807,-4.627394316901218,34.51149840992867,-0.22307225173896708,4.1647094339960695,-4.106862910496308,31.479201248379066,1.2749303355954738,39.07764908645498,0,4.092586422138539,-19.463274351679942,-8.040506272217621,3.9903256347102056,32.97441355128281,-1.110117502174521,-5.1068625,-2.192935545942377,32.183994706708056,-7.988106770257833,-5.073789615959634,-2.8373460224751557,35.06574097832056,1.5610978465711063,-5.10124365147469,0.21420418720861872,34.8016173899929,-9.198212760463832,-10.524081697303163,-5.1623212885850105,32.468125002189346,-5.283332997974991,-3.8143983725416337,-0.26362372659596994,27.12741146178282,-1.0291019448051817,-5.1000000000000005,-4.1068702571446485,30.458002256884487,-10.213625,-4.657985598342781,-0.2196776879197252,29.730686297546242,14.851356949609151,17.990150293695873,-3.539429453279974,32.60080663825365,-5.407200560695456,-0.9777573240129029,-3.60020414005526,32.61287118850878,-7.399825640861265,-0.11052843906250001,-35.78805761796524,27.74082212114641,-5.806130659448821,-0.17517240695839226,-2.130463481305758,37.97502670493602,-10.343204384599485,26.75049530809539,0.6475765853863343,0,-8.46654833257522,-0.10112891214398233,-3.221282279172662,34.47219458864477,-8.412243361302293,2.870554350227743,-7.806828146309541,31.48344408545928,1.2263237648884648,0,0,22.12528856118188,-9.46199769284111,-6.253777122828625,-5.934741538612725,29.823936302561936,-7.082759744856982,-9.6912375,-0.0914816462775846,29.758186369522605,-13.505622329926297,-9.735502710300498,-4.029620893609335,34.52068033213425,-2.258145083755064,-5.112838453545056,-0.03354250905299736,5.542966578765924,-8.646651989231236,-5.1000000000000005,-5.823035058183399,30.234460997787625,-0.35287927204742886,-5.2221410187541615,-4.1000000000000005,32.921085368450406,-10.213625,-5.101206965012414,-4.101124520048156,22.854469465735523,-10.213625,-5.16772937740827,0.7934239713929911,0,-5.79808618387405,32.46463414404812,-4.344475058443653,13.748938223190926,-0.8870805829071924,9.828735397588392,-3.952458116373242,31.319911660925744,-39.35484849708597,1.600365761320357,-1.6847913401452637,33.283643033541075,-10.389982445670043,-0.1363413411573744,-1.8186669987142896,35.78549513858761,-2.3236150363001835,27.160663964499474,-2.1679628346723194,28.90314335141382,-24.24030630888904,1.5184657023824102,-0.6546055001388957,21.094199066888947,-17.130174174150206,3.2841861016373635,-7.620617404483369,36.8385997344494,-0.7464754932289595,0.6744424322147119,5.657098372310103,35.10822784260092,-6.111599569869352,-5.781792113458577,-4.045416901860779,38.03790797648695,1.8980570059335815,-9.692021162456353,-3.4337054085527865,28.139229458769197,-1.105905168252854,-5.0026236461209095,-4.028460490995506,34.13696417911511,-2.051535127835032,-51.014628379252386,0.7255042996313654,0,-3.1825785285238206,-4.856460736902736,-3.9451426457549013,29.909542621679627,-1.4822314722733774,-9.690000000000001,-9.540614968162616,10.460523901992396,-1.1104621556933636,-5.1000000000000005,-4.609123321121309,18.080079063198717,-5.994355466553575,-5.170964077610745,0,0,-0.5776348064178123,9.353990531119361,-2.6103476529094154,32.141205586809235,-0.36509195140108236,-1.4895047759837996,-7.719516598071805,35.172724479135674,-10.1985004057642,-0.2086659964712516,-2.590790168020567,35.41038235539858,1.546667619510025,-1.2925412362304818,-3.7480345728008406,27.895233602802158,-6.096545791536945,3.9627914382057385,-1.470830465401621,32.501536005908314,-3.54636726469638,-0.8272832765539455,-2.5571459996972807,19.627187771796365,-7.2928413165910575,-0.5926690047030853,-3.395519230519245,37.44790172066909,-10.213625,-0.4723178279729931,-1.8043156605897976,3.2655903219775797,-1.101376442784405,-5.1000000000000005,-3.400959623658456,28.11042035302629,-1.6853497661833619,-5.1217643551802325,-3.9649044844861367,26.667991411633817,-10.213625,0,0,23.68519206522526,26.620152507992795,0,0,0,-1.111441584760563,-5.1000000000000005,-2.8983416330139584,14.242895184859732,-10.213625,-5.1000000000000005,-3.242435257927224,0,1.6465913701187753,0,0,0,-6.1000000000000005,-10.2204875,-3.812077080575387,2.3393127181722257,32.7216334784901,38.564540743735165,44.78701684636198,39.241672842337984,30.414357194528957,32.06165640413127,31.553971243891517,40.36116833492336,29.52301746279867,37.10504240154354,33.929865728318774,41.25389050430486,33.086887796940914,25.774781204495035,34.604876414554425,39.46587307302174,31.97178367790912,31.853398068556203,23.519174087203517,39.0889216302606,-21.109651143054812,28.493197170796627,26.922582085250838,35.47999222894786,28.28058216485409,21.830782306907007,24.812003431211128,39.17037283698551,23.422962293154722,28.021788916083366,21.933274125889877,37.16778279050109,26.39085364148034,-11.753394210009452,43.799254549215135,27.128512367605495,34.484751248196496,-5.528913270087436,45.81746577799566,31.55845249559077,30.37492395753202,-12.739238918057554,45.14655257118817,28.275617384332104,27.200492459099582,-10.666198195067306,50.01809198827836,36.789024001387695,27.81162348968951,-12.75921451191031,49.17852181838427,31.715044534410357,26.0844941667222,-8.930566323313133,29.173192558491593,34.37834422139857,28.46683384244436,-23.640141449056927,46.21710689325752,27.406709265209813,19.559226527560153,-24.169252163826865,40.46698059721957,31.24036054722321,31.29764764286241,37.856519064692996,30.807987652779605,28.669341061264483,20.074641871554267,16.21596653512344,31.277798154931343,23.322248137475768,32.48766762639734,18.875644750354887,16.32917408883788,19.92108337561244,16.37233114402309,12.245381887236208,17.42393627179253,25.145291079236205,32.22317088115704,24.57850870097047,24.50933194470763,30.06966937173894,19.494430095835945,22.958091809454196,26.686170125851344,36.528481587902185,21.93546740971379,19.35848756956456,17.531712194651877,36.524192641384396,-17.125372060233982,10.783148819420365,15.720588888628612,26.623579743503797,25.25463781051168,-15.166406966897242,20.302444719275982,16.04560530471384,-11.797410040144518,-35.8739183853894,18.511443149116015,17.98381719756839,19.11397507821578,-31.931332557428927,23.46040286603647,37.39692388556628,24.337149031287566,-42.63185808563137,11.572812991358205,15.775967529324348,17.361543523715575,-34.39117140289962,27.640434622519965,16.473478902156625,-6.135222323131861,-40.08528620265499,39.718572987880115,19.404342523069715,26.884038146731953,-18.047626101634968,37.2352731452783,25.509524301507923,6.547525927421325,-12.78343621082733,36.60841000415169,6.674570632650035,27.547307431468003,32.514805093063615,30.103142944866732,30.35072881806103,30.487401218159814,26.56736738625015,42.962818270593885,31.6763105790887,15.658996017669029,17.398547942907754,24.92605263781472,33.61919422724849,13.973145131746236,14.990491264737482,21.18280464272416,37.55835582339365,35.660822317826536,20.612279351489455,32.90139496315818,29.72323546392314,28.488679153251006,10.941211633712948,34.26594234377091,28.437617142261946,-29.3827138801742,20.230059795549572,35.31554391883073,21.74163638415359,4.162141756166347,12.407677277928078,42.441852154344645,32.322164381754334,37.0938821873678,-11.618567818935494,41.7884109337228,23.848091232784647,31.538722726445606,-18.34530354098395,41.17846614475685,29.721694430158713,18.803815414301315,-37.138490242323705,21.664900137325706,19.12154026481496,16.209893586989914,-32.77165722929596,21.758607889204747,24.201584186397366,16.06829652792233,-28.297865039038175,17.217016786842866,33.845797236223845,25.857685416241832,-29.46598594994643,33.79168172155684,24.0959399103104,16.597307346110863,-42.926592279524634,35.58601515477473,20.199707736185456,8.476735304008,-13.354620408830321,15.864552809137491,23.824032415200207,32.40229853615874,28.296512120256367,38.26105583283612,27.10634427739039,15.550501952771278,12.810454476852446,25.994658193048526,41.35339274824721,28.104645801766555,18.775455680610996,42.410303898216064,19.469655841374035,10.509423297009253,11.570684401632098,35.609916388018604,13.466819353722999,20.67670083677249,19.0300254678101,38.29953341951377,25.801568324537037,3.9861895277207546,11.708652072651784,18.33360960109856,31.197427130187968,17.48060174009207,13.087638106711593,16.7665807373205,35.834240713698556,6.609170485754154,1.5927716537985597,32.55890930537765,5.7864923328257944,20.985622400062095,-26.886997797323843,21.454417117423997,33.54097712884292,11.467020408624146,-37.84860589706519,19.698722142172798,15.198915933193012,19.172346887918845,-40.913446451326145,11.500372993416006,32.46556247687438,8.443598738832565,-19.489595904977634,36.19776496323784,5.289978570447657,18.017105483898003,-19.626740312761086,34.642428949311096,21.237684313582573,-10.965274347173771,-32.552944545747835,6.9375441212477575,30.705054954150395,10.008120820776979,-9.434856133268688,36.352086848578736,20.38370563187326,8.439496102285336,-29.830859692877706,7.3417595161563085,12.490606219131445,4.871433405415412,37.836633683352076,31.43153571121217,25.544825789893117,-61.26821279929712,13.506008520713438,43.84207988003666,36.919824595914505,28.3615800113328,12.550884491171368,22.655598507974,35.990975073428125,-3.8360085642623094,40.36908314268426,6.716107651510053,0,-60.15317194761475,33.25239678137854,24.87917704961777,18.72667543995967,-7.3987973517878025,11.682520037391015,33.32026103610324,9.694511936677538,4.1523154907917,13.244135336571592,5.042909458161459,33.24443276495142,-6.0981762120366145,30.924007721423028,8.852807423001597,0,-19.961528923693784,-11.249941819767788,41.28262288575476,14.571887503579397,-6.52159532421951,-43.282007247594095,47.10986430446611,15.04964327671889,-3.23065482775721,-5.449757032088028,40.70215423201502,6.521770576340208,-102.20720606814993,-5.1000000000000005,45.13260362254104,0,-10.60924665529131,-12.044855090187118,40.82373653776435,0,-10.213625,-9.94663912163592,44.020387176704,0,0.3047927634210268,0,43.99161781155295,3.9034588420938756,-6.1178434886779005,-5.107389813403191,24.36844778023733,0,16.54179929568518,11.676212254443005,35.54713291516912,11.747478375898744,0.9102730892049244,-0.5453830643983271,37.39218835591872,5.413921589099122,-14.464102848920403,4.364903747766994,38.07992266595594,30.729852748259766,1.8729448100119486,-0.1,32.331951036047116,0,-39.42010901066325,-0.1206137676268812,34.598026357209484,3.7686520073147705,1.2452837477335452,-0.11089335126204583,0,24.007918315918385,-6.112594396657399,-0.561723046816661,35.272385911202925,6.395082440394144,-2.0605738387819192,-0.17371750425915689,14.596165882219632,0,18.187833319756393,-17.435139071768305,36.660240370967536,18.68290817435759,-6.932951318921198,-10.282304187245863,37.81413384427301,0,-10.724546220220649,-9.69904671760743,29.055252858263923,2.992506805610025,-6.116247042391557,-5.1000000000000005,40.24780515017054,0,-14.766141894018057,-9.212316484328657,33.84566842216195,2.387247898532794,-10.969413942934537,-10.143953325817805,25.85062988578018,0,-13.940148216842262,-5.1000000000000005,18.488833085846853,5.9198819207936735,-0.4335138291001621,0,0,0,29.047091231350514,9.232416124207415,36.91998613906444,22.63496567567484,-6.775469405696552,29.183138245572106,40.66871892679734,6.68439202356415,4.520763495351919,15.265668157116657,2.9210952900591525,3.259570524619287,-2.3215645183797453,1.243595419376312,30.92145746620609,7.044353885559554,-5.6661611737429745,5.528837483308334,24.830012925091445,19.87392063880066,-10.044526135734511,3.828303340789152,2.169705609586593,33.07449196173339,0.966335054231783,13.435836601569198,4.24471628958441,0,-1.1003230158982062,5.08279287864849,0,0,-15.595621192428954,-5.991367366512701,38.73118975789027,5.836704266597173,-1.490969274197922,-4.65843378630145,41.165160356523735,0,-2.418328957682289,-10.981073603357782,34.09870428296753,4.283806448104661,-5.168880635085865,-5.163112804814705,16.802423637114803,0,-0.3455216920334713,-6.825601743659485,30.131729188344597,0,-10.213625,-4.780989902350927,35.761985262105185,0,-5.187167218603362,-4.767410505683732,36.30465073824152,2.8221364565060463,-1.9183521218684618,-5.1000000000000005,14.331239851280012,0,3.392396439849196,3.7159155547795146,37.658575378865145,3.6001444028572864,-6.1000000000000005,-0.16388180614586184,31.520954214573823,7.426483876242344,-0.7686105038982979,-0.5642491555734295,41.48404102010974,8.93617651639856,-5.1659077310033705,-0.1063885582547723,26.372378425794174,0,-6.026959426452203,4.416914583037411,11.072081352913326,32.347403008327056,-10.213625,-0.1,37.67504035238048,0,-3.298959455511831,-0.1,32.67526953060563,0,-1.0852678619345582,-0.10573887354213776,10.341744986647047,0,-1.1,-5.1000000000000005,40.66834241726776,-0.1059660725932784,-1.1058823742365695,-5.1000000000000005,24.85027692270696,0,-1.019244373313051,-5.071412738283834,26.198743335179923,0,-1.2789879909436848,-5.116909284765839,43.32159412859203,0,-7.228882761740918,-5.004859241719299,17.26836677620491,0,-0.14490269957402613,-4.942495528626523,7.837081187326631,0,2.736221258467537,0,0,0,-1.7075624203308735,-10.215546007722873,9.140622788394385,0,25.706520611167313,46.11895143669678,-3.8079835785324665,37.71596482022701,30.136373463928223,39.560434900362914,-6.402814421481405,35.016614665303734,30.39242318019233,39.83290729605153,-5.687358495361419,25.577238433331416,5.131658125238485,42.71996074425173,-7.198499391577199,31.150589798940445,23.497413385212806,21.368675139234718,-7.896694640122057,27.14555632722607,17.800875830794908,21.200914110147863,-3.0348923105077192,28.25822111798037,21.127314262340807,20.28592253300581,-10.049400084817236,28.505009555631503,3.964690279828684,13.782776373077294,-17.146373059979247,19.765924231963936,22.980439781985446,-12.929238000917982,-4.673563624932253,40.814546097176034,16.358313486350557,-2.2799413317989288,-7.452133534844299,36.38663610409028,19.3589676238169,-17.68625816605267,-6.415586773004604,34.993560930034725,-19.345659799737952,-9.711927980138634,-9.353488906921992,27.428887158662118,18.447213436725757,-8.955134968709572,-7.2601638286561965,32.22642164724358,5.0973157753343425,-22.470125466951345,-6.047308822422431,35.38582753816406,14.082104652824944,-22.385727209855407,-7.984472878042133,35.81734698523617,9.528988834772445,-24.350210605979314,-40.656234032918064,38.806067083240926,30.26872379519615,36.25524490197308,-15.316465796868767,29.6281217306721,-30.441401512767015,12.8272555213622,-15.344977425595346,37.62082498361163,15.07146971067166,20.43604232828805,-16.145990633968324,26.43698617765781,20.397849181814895,4.8030726300991775,-18.99473897495359,37.907222615824814,19.724664588116354,20.270099680749336,-13.575197841335937,39.37009872258233,6.067721043825763,8.867114658880102,-7.275340564803199,32.81965356952222,5.8652572929354925,6.169454354666788,-35.29009505015271,38.81434595523061,3.685859759618851,-1.0189863307894225,-10.168091902560747,31.873611134171984,14.97461730846481,-18.31650983202659,-22.47015940031515,31.87776251876985,11.907641969964287,-29.013306497112467,-23.17793017860855,33.987606388191715,8.18770597318048,-34.83858147357089,-14.955559805921709,30.15046331848212,1.8175383098937299,-5.106875516429167,-6.3091885115389745,33.344081293762265,7.363524371234594,-23.00410668021513,-16.577175617303006,23.709676004401544,11.382649356252086,-9.489455392472998,-10.389396366203336,28.224378379648208,-1.511249006996992,-9.696194821296842,-3.5583964924753193,33.98132269477662,-0.6936383945800274,-5.1000000000000005,-4.1000000000000005,33.837046478709766,30.34718875823343,24.069355759172794,-20.878115630900574,37.81406030865189,9.25380821004457,38.17249882503121,-11.820615879404231,27.636510571689808,28.03245428560864,12.911474117080761,-15.041659746456428,41.1443496495202,12.716381012918884,18.73268745013745,-12.058375115575776,37.87316895320505,12.263339002699723,16.460608539046053,-22.758678128547224,38.88753181694642,16.95664815608324,5.365415225091655,-8.920957851838871,39.82561990486416,14.217989047675413,7.027429727189008,-20.13939636461439,39.57957877742857,1.799403534117229,6.590056669134178,-17.259522847198067,34.275259635325384,13.221256702379288,-16.522624655879433,-24.653060372530014,35.104179398963524,9.837424805154345,-45.43798409857651,-7.487226501712243,37.720758450815225,8.009228849663911,-27.10157281203027,-11.982681718204326,36.446136773822566,2.40865026228646,-9.567384075981469,-6.561347758431585,35.10655346128932,8.261549255942942,-15.0467263815523,-8.308194611173654,36.40503799237125,-0.060112912701667125,-5.1000000000000005,-7.8004072412230245,37.462132257408776,5.863274870525402,-5.100355657742658,-5.854645533923069,33.202636279764185,-5.3479169006318585,-5.1000000000000005,-4.1000000000000005,38.07028417721207,18.806680427250075,18.947078320083524,-27.680190433515826,36.255121468517025,13.551242198469202,3.441147809807778,-12.013538278459334,35.9647906685028,7.822181177868157,16.049760295156638,-35.37728392661771,35.56225530589046,6.7234518744998315,0.33168438986155935,-7.790000000000001,34.26815841520917,8.67808019142381,9.208352204389275,-15.93983089199098,37.33595101401258,4.925425221328615,0.2413014958677588,-7.816762608706982,36.63073112258309,6.650296653115452,28.83616512173652,-14.10624317252641,35.01276566789271,-5.157375,-0.1,-41.01249342924322,35.248908240994155,4.504326878178956,-38.422518903170484,-8.655463159010115,15.739698855593144,1.989435348181428,-9.747665373718515,-5.182962509790357,35.54880446796671,-6.2047027765966565,-13.584743502280709,-6.966699150908138,18.86935780241353,-6.1068625,-5.128913866047265,-4.1000000000000005,31.846111124839645,5.524726696558773,-15.660972383531579,-36.25288169769019,35.34960782322333,-0.40017263924151747,-51.11941224316321,-7.345274970379334,36.16303325777878,2.471773836279372,-5.1000000000000005,-41.012493379436506,36.894971977593364,-0.8192105164103778,-5.1577519566121275,-14.201633557080378,22.23221173150168,-8.842824113175116,39.72056877771959,-5.460822576395831,19.824042829943636,1.2376691950868208,42.26764730298165,0,0,1.7838646540437058,45.50220058223798,-4.026684410898535,0,-10.213625,4.239881867824308,-4.1068755531816405,30.529677894678148,-3.032730533833952,36.65518433786428,0,0,0.7906994038370354,27.77785006163086,-0.17027841938936916,0,0.15807210057439214,36.1066823835355,-0.7193330535194996,0,-0.01503882953276836,19.07926760774333,0,0,-7.537411673845767,-5.101244117581395,-5.5043796135385845,35.0234495106589,-0.867269843286782,-8.435013314835322,-2.14412115471825,32.79483592833258,-10.213625,-5.1000000000000005,-3.7099510773264037,32.41920790725886,-5.896694074814137,-5.109077789706281,-3.49843147639276,34.86145688725572,-23.656389044634015,-3.8932671543801067,-4.015069710306824,21.20996365052958,-1.4173770857685453,-5.1000000000000005,-2.5006058427261486,11.202202104185464,-3.5470219716376086,-5.111602828125001,-4.027040046556627,19.36444223853221,-1.1106843003857139,-5.1000000000000005,-3.5606600630068037,5.754484558369766,6.03412486495847,5.826432197359834,-10.010425318277678,35.451866125161395,-10.213625,-0.1,-3.735734891066116,34.772692245352005,-10.352359132740268,-0.11926203397196836,-4.023205607446648,31.45079482022233,0,-0.1,0,32.80296061090249,1.7522189129255097,-1.2897946057611456,-16.901477956260553,35.43199958565589,-1.1,-0.10707344075168573,-3.249218027356129,17.478801404501873,-6.00483528972138,-0.4104783697877665,-4.10784543099244,36.646502780886756,1.1667073144305293,-0.10607809991274703,-2.667214241275911,10.123182125933532,-6.569262995285161,-8.110353495224604,-4.1000000000000005,35.8008445438319,-3.9406858579710757,-5.110170447996016,-3.4055107911306814,16.531414371555954,-1.012072959110706,-5.053040854518502,-2.621133194279784,16.88564081575227,-7.581015495070309,-5.110024506221655,-0.9543205546039918,3.4521051357502084,-7.096985608093247,-3.9845526119817225,-1.1519618440250772,9.731641622183245,-1.1059941011617023,-5.1000000000000005,-1.5300933707110258,5.842001798104816,-7.440280073262058,-5.140776543077453,0,0,-10.213625,-5.1000000000000005,0,0,-3.5672974089645404,9.051634251117225,-5.589193592711816,37.58767652459745,27.061001727508817,-0.1,-4.1013919150929015,24.39283911513661,-10.061336363433536,-5.029922662956412,-4.0440397784053275,3.7319615973449114,-5.840027786525024,0.34167704744227373,0,0,-4.920016797627657,-0.10013385695948254,-4.484534308576452,33.56981898121614,-0.3029051952391302,10.209593288190492,-7.9398870819967895,-0.10690480470940496,-6.1004945548950475,-4.268215066505643,-30.129515262600112,2.371235806912424,-9.57765585375411,-0.1463856573624874,-2.9662904576559903,10.120055896085765,-7.257200713116065,-9.691197752072949,-4.107989368707518,33.6929886050288,-1.0105248420742974,-9.305680775019384,-7.801704377693805,3.4060311902140783,-0.9538543820106942,-5.1000000000000005,-3.4480951629339334,24.101398914975654,-6.105384255725294,-5.112601264921167,-0.8899384233540624,0,-0.31598359222857486,-9.041585765140454,-2.8910545026037897,14.144801947499495,0,0,0,0,-1.8505629292991195,-5.1000000000000005,0,0,0,0,0,0,-6.091449139938444,30.753769343249598,-41.1150739772937,-0.10589437956807696,-4.900704939971491,-0.11210352135637076,-4.106867918566055,23.286129958109544,-1.585887150951013,-0.680385465814471,-4.107240971178474,36.32239026211595,-10.213625,-0.1,-4.100887216176376,7.223889188534741,-5.288945624001184,11.673903419471086,0,0,-0.12360537992749565,-0.5243807314466767,-4.1115139136311205,6.302336182291321,2.9895326267780575,0,0,0,-6.1000000000000005,0,0,0,-10.213625,-4.931851575237955,-3.1578148113338553,9.661975817465747,-7.694112929456876,-5.101244132480081,0,0,0.1440871553916554,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-4.10034714875108,0,-10.213625,-5.1000000000000005,-3.4920082820429386,0,0,0,0,0,-0.8973177609876779,-10.214634482481111,-1.1317236133374895,0,35.06828871208514,38.13782691640087,48.673448544096985,-11.780708856822974,35.56569160979083,46.4553966868874,40.15359468797078,-10.462922588321025,35.68823278121624,39.90398923896615,52.09791088045859,-11.880546012214587,35.434545365852735,36.245669877034146,42.116772561924996,-11.446006164675968,-18.526950785664646,37.815886337872655,54.72581002654215,-12.669727360554687,20.269767702283644,34.71682059617634,53.90136509359845,-10.857722862436459,30.940005823931845,43.712263631714116,32.94204611498969,-11.064752138891228,32.95884356173772,35.57978050997201,52.8450158130118,-11.846190985331948,32.39738963276021,-9.72274719058861,56.54552304581599,-12.156246053253742,33.583950641544206,-5.418842400188619,46.24169261833129,-10.772200736493689,29.625522546556486,-6.06776865147139,49.51891302397999,-10.12884697753069,31.31641546517116,-9.925009921003054,37.387853751367246,-13.556867343325981,30.26683004813616,-14.11669139994631,49.021323611816456,-13.264901216994033,29.79324555454059,-22.20619138237962,53.09602830295118,-13.864991131584077,33.22023939336499,-13.841401141876679,33.44627648862323,-10.685215230756839,23.813838621040443,-11.046557378982214,53.73529853942064,-8.963776796353091,31.798494887627882,38.001896321751076,54.17434151359233,-13.183681206171244,20.67713186005063,33.75002705646486,54.63927606735683,-12.324824562751692,25.645902557594574,31.25936884405614,44.544135912080776,-12.541605546901748,-17.362616499542224,34.96187717016896,45.99052022571599,-10.994017654936279,19.423241976270454,25.957510626038868,27.4329806279666,-10.940673019641746,23.406165582433438,30.729459125720126,55.362731632633974,-11.899030064504341,18.1631318842349,26.28344561231647,56.398510984348796,-12.310775315867637,23.59386860952501,22.7515936029885,47.36268479880184,-8.596611488869154,32.84165930796745,-13.002823701673668,49.18824210488326,-14.671955358621362,17.24068755119428,-16.486571567366695,53.675701163867814,-13.39194729176685,30.13484329591532,-19.987136388790194,53.05318955580404,-14.307642385603504,15.816021085621498,-16.211133919046173,53.93750833274971,-16.321420228394093,20.796827160838742,-32.22951278896833,51.13976370223603,-14.945281396683956,20.474500501932848,-21.068753625373798,46.77017456560933,-11.234125134813796,20.49358449209339,-24.94251488345526,50.56305623312251,-6.269818647242889,4.24753946849876,-27.707938420393962,44.7295190061321,-5.074494986164484,29.211312407342216,37.782287824996125,48.90837843132129,-14.084866154740594,10.156506298207642,38.792372978140655,54.88155843920217,-14.94774893046089,18.99685265441281,27.074860512439727,46.49294543106166,-13.984028681284167,26.447480122772582,21.925070205170854,40.263708938162544,-15.894356873224256,36.11902062247131,26.980402650610788,48.73977898387402,-13.243928247896145,19.789030881494874,19.242177065904293,46.61546335846318,-13.758668236906098,34.24456814148285,24.944866486520628,25.00095266414197,-13.212745803266793,16.920617450723878,19.426478289442247,14.08240610097797,-12.868095723269182,34.97011822213954,-14.620073862307148,50.38308531196095,-14.795585727032906,36.76511670907366,-16.50826390676669,41.085847326289,-15.22534486093148,24.836586736089902,-29.151905359729465,52.41893892339802,-16.238680989371932,24.87225605436206,-35.29158302569684,56.01021286459756,-12.416011074959908,20.179038776404127,-20.864342681874366,44.43694729213708,-16.792439390105542,9.956830703890125,-17.28773605290014,53.335638526266784,-14.696973145294184,26.455757669249667,-21.787779767288217,39.13669954796248,-14.123935988645211,35.944249421691275,-8.986962159456764,57.3821466326536,-2.584028535895025,33.16866317040631,23.84922117387394,38.76322103827268,-16.21287657459006,-1.4290354280497652,14.087918467466833,55.59831200662067,-17.24141173993493,27.570795539883694,16.593171696310435,45.62292233498414,-23.235313384711628,22.529309960230943,25.705382662838417,43.56407698962299,-13.503454281340453,24.842013300304124,21.94509510977871,57.021958292083575,-17.64227584412736,12.923737704786607,16.733705494672584,52.621385825555954,-24.26812556078109,8.50022023204248,15.19925115527705,52.5534638008158,-15.030848016848969,2.4016785165365295,6.33283370164998,49.0802885885554,-4.508356947214441,16.65516285492752,-17.531664980129268,51.03720788716748,-15.71529171091742,11.055762822839101,-18.8813771499828,26.347528742446148,-20.84622774637079,16.592552886410555,-33.71090237297998,45.7343622011452,-9.620359484791217,8.851174113304284,-39.15904997785228,49.89462600631668,-4.723576494855659,17.21551788770287,-39.023021990082064,56.97843881826353,-11.477359803733252,-35.80386743000616,-18.166903301727423,54.5650515255165,-35.92402247068743,-41.41587601162581,-48.89380877854542,47.76025106512146,-10.800020019634779,3.2571007295132035,-18.900734075645165,49.670078917333605,-4.788762747789914,15.77848041743087,45.15428482507003,49.105519542331116,-9.597289155557629,-9.584995422575718,44.487448550266535,42.331016754875236,-9.246071491145194,-4.908764653373477,44.74221370658612,27.2268977811277,-6.037657235060007,-5.531093834666586,39.8113813506383,18.2492757322382,-9.205975854627289,-10.97173455161304,23.826461724723735,45.6869192926401,-9.488837874685526,-13.614080766050838,40.02802818147924,10.106156581754142,-3.598181782147325,-10.213625,41.792721831053356,0,-1.034802274928589,-6.10698315025877,-0.1,38.62667034985343,0,-7.023968162907779,-14.600993839058614,54.3539825817385,-8.412052319052705,-8.874443540580812,-6.163891530657985,52.00433678595561,-1.3031041314656848,-4.910466765288807,-7.359842892246904,51.281993188427165,0,-1.1059940746273624,-4.681633885816092,49.77869383859527,0,-15.192007090883546,-9.292123620302183,55.23387013381096,-3.9806187709854726,-10.247356710211042,-4.749133415861789,48.99135415543222,0,-2.7098189909349975,-5.1000000000000005,47.23603297761903,-1.1765970525379765,-1.1062442845984657,-4.85909443348447,53.7842920834556,0,-4.791783610093091,37.87494482741377,54.28468365267278,-9.694599288091966,-1.1054705954817539,-0.9543815745023478,51.79110776124733,-2.0737115331463802,-2.953629437936648,3.9655602630522835,55.064053705014594,-5.195949044981574,-0.16393565004289445,-1.597138940880939,53.14302492780497,-1.6094993714622443,-12.604147316238471,6.5928526088366795,51.28679654991007,0,-0.06289877386549901,0.05386127158870921,49.26237323634686,0,1.2181083557704022,-0.1642479739804602,35.560888759209206,-1.4938192635537086,-6.126498772896467,-0.9853751390953458,50.16636250782643,0,-15.885348892640359,-6.308100960881797,55.50890705907106,-4.849892326346707,-11.204043050564616,-5.101351267091514,46.07861084194267,0,-1.1057353794359048,-5.1000000000000005,54.1176886341386,0,-1.1059625000000002,-5.2382370080085865,30.376847515129782,0,-10.213625,-5.1000000000000005,52.86293349434027,0,-1.6647799738704525,-5.108153618871219,27.87292038761126,0,-10.213625,-5.1000000000000005,21.98652239189435,0,-6.1000000000000005,-5.239992809070014,51.32174091402939,0,-8.371552971901371,13.852481189438384,50.714441426416975,-7.291269922883388,-8.180025166318249,39.23333134333281,8.980350386890311,-2.999285217829901,-6.11709894476971,32.82397473579447,11.873572145774716,-4.795672584431018,-10.213625,30.82967274583349,0,0,7.363213521306513,-0.11585700999918247,52.52602238487953,-1.7804661346296102,-2.377701222122733,26.564268346183628,0,0,-1.1151681663144002,30.251080764927565,11.56464543626709,-0.740865508734268,-1.1012375,26.631895069412934,0,0,-6.2955981239628915,-7.511736747629533,50.131512017931165,-25.937784512196096,-1.1059792205310213,-6.3945251519512025,50.587851928936374,-1.1459597938388228,-6.104254179124711,-6.96188349901392,49.29502220318693,0,-2.811727213941281,-4.15613389973886,57.643973172591686,0,-92.98779910716287,-5.112084664506184,40.22511882461854,-4.565148563507569,-1.1023261717771689,-5.1000000000000005,32.09383149574913,-5.6600379148339535,-6.1048428547380995,-5.1000000000000005,53.69423508697958,0,-10.213625,-5.1000000000000005,0,0,-0.6521471355889266,34.54761319286323,5.66774979605961,-4.389065349416584,-0.014173405077748136,-0.10655223543457946,44.818968463102195,0,-1.9724122196781382,-3.295770160339405,39.500787485950156,-8.108743680276042,-10.213625,-0.1,54.9817504401104,0,-6.1012426890625004,19.25792448373294,0,-5.253280671552883,-97.78588358329304,-0.20060774558492955,33.58835967919924,0,-0.32113547521658997,-0.1,29.199516505898927,0,0.4230818311131179,-1.010164747946843,0,-3.8439349457315553,0.0963917624840156,-5.106880742244141,49.51219825481641,-4.227013963567348,-1.2808798220202349,-9.696845149399772,22.727509097497446,0,-1.0906509491177612,-4.531439774891332,37.62513331181309,0,-1.7382766289822156,0,0,0,-1.1185464264599596,-5.1000000000000005,45.89543470334308,0,-1.1713000882676836,-5.1000000000000005,0,0,-10.213625,-4.955582832027099,5.7575304129353855,0,-1.113420141289741,-10.214877597658951,14.084528816568636,0,21.406425784462893,42.54004769375928,1.7907743640478082,-15.613550569734922,23.077730063203234,43.9455122583278,-2.062448369554435,-17.884476600594155,13.487732334526555,33.25827550906735,-3.6495965069664633,-15.382839723272227,6.594780595296481,41.75474091948707,-3.948349652266458,-14.758651724869443,21.05207303832628,30.04523062781823,-5.346829089478562,-17.98062625313372,16.329089446286112,31.298227248237424,-3.6085132610762085,-16.676953611396183,13.620712419283512,45.500802471056815,-5.28460738784057,-17.805309762027832,3.589220155039727,41.13546229219799,-0.6008372597155007,-11.504264143523349,-51.35614495227003,-20.447341751407727,-2.879457956710807,-19.865769060389198,-13.325605282826631,-36.160050510621815,0.6309402011148069,-16.164348708202542,-24.262806110732818,-5.381247806248499,-19.53658853518296,-24.097016640518117,-19.49668233364401,-16.997003185892172,0.11562148947417172,-18.084025958138795,-19.13643219879736,-23.23533378998067,-1.1749062772725536,-17.533880257850036,-11.59730617547571,-12.75549926974873,-2.4645012691139723,-15.03179203649368,-11.112654337272652,-13.686924425532432,-6.3198981083947015,-25.062952616203745,-12.647637363589013,-12.35397011360902,-3.995019191930126,-10.534236102694024,14.082021672838252,40.006873684207456,2.087253470343163,-15.656336158863459,-17.7067954177306,-8.995172328951597,-11.96903831413822,-34.8174760398106,-19.41891129289678,-8.58556403072704,5.294463895042199,-14.5962402085802,-17.010335638614055,-10.753836206529574,3.4489944123525382,-24.29157866945606,-0.9535775205326931,15.186006758580197,-1.458072484743003,-17.37077532661355,-22.459474205189323,-6.31291622365501,-5.145438749902659,-16.41556755195575,-18.899178330428416,8.162698956492228,-32.23025429604397,-16.081850068972177,-15.536781514142389,-11.790301638782875,-18.268111573791664,-18.964801861358087,-46.909830366556115,-18.693103705174202,3.619880378505513,-13.57027898587937,-17.59504820292191,-24.224688173826735,4.766612736640869,-16.051595280614833,-20.0367367129148,-20.204768128625922,1.669542059844969,-16.424417490970672,-13.511984650736178,-13.953020457323262,-0.2735580762205237,-13.312337611967022,-66.83333084526141,-25.79016966357227,-24.900226127478703,-31.20213425486716,-10.482206458459695,-17.545762500000002,-5.712116862530754,-14.23946289377548,-15.708636210062917,-15.739523962079298,2.0674878125425296,-44.14243127110441,-6.687041850059302,-9.67140321385689,-6.855784669485357,-7.178303657319629,25.1696328462608,33.102889790199555,-1.372514451326296,-18.86290294823959,-14.44639561874202,25.74697355817669,4.4098424393084406,-17.539230184277397,-4.9011972536885615,9.33936601278478,-1.5588938503948404,-36.15330751083696,-3.446186573590672,2.6071512254134266,-7.98302032982596,-15.98846135581949,-30.67416855809935,24.492157387964603,-2.6335652652661015,-19.50647915024882,-41.73390287819859,19.97959526786556,0.27285520584922274,-15.42102812952033,-3.4432664274655185,3.8813608433676476,-6.793781044626634,-16.582229449021668,-50.853886010835936,-1.9827060336469098,-8.398233425524612,-12.152545087749242,-12.727939040537033,-19.200540386147967,-1.0228889647927555,-17.852773564134864,-13.028487733269882,-17.258701330689487,-1.831474846673574,-21.784948926263375,-19.624751706169047,-22.217136908119283,-8.851782547764472,-13.859046781682135,-9.672611562339263,-17.308888322657264,-1.8551020358291073,-11.183893053602697,-11.685701825351556,-14.266962790230966,2.419936301390538,-14.752753513161508,-8.54933933622793,-17.48379064247621,-5.741110719308246,-12.630809099574464,-12.333875917956796,-13.366204533596736,-13.309325039051775,-12.681585694642678,-9.973081270862235,-9.683055054042626,-2.2394018085149066,-8.014874258124333,20.123918499135854,25.5177013776239,-4.569659984274329,-9.822154421343686,-15.886320895312805,-11.75085882105305,-3.8574568333572135,-14.239490194073166,-38.06732031372314,-4.249536426249621,-9.955287720117898,-14.10311097106474,-34.814716699727725,-12.310150636136953,-10.133454790369633,-15.59629051724204,-49.13118682601149,27.93186365147009,-5.033145202873191,-12.683768336753749,-17.13670174740905,-11.164297247236831,-14.142481363291395,-18.288208576151156,-14.757570603375875,-6.554771701526207,-5.628400713816509,-35.46541105719051,-8.031338973651316,-8.109127201331768,-0.574498854725681,-9.753175699119279,-18.650028426786957,-48.42763181903742,-4.898461835650403,-19.202468450793926,-9.987746608544361,-52.56180513041666,-0.6627296445804602,-9.30662890297191,-18.98665485743089,-17.02731832175478,-4.67602231296848,-16.684678813920673,-7.887797196422735,-9.761830025198813,-6.310770853957789,-10.811048782998869,-50.13298713572445,-15.009962415663384,-13.453898621439164,-9.845001984302073,-4.3283557392650716,-5.1000000000000005,-1.6526391753924297,-3.8365514569864603,-3.3207009749293235,-5.1000000000000005,-2.813760417905525,-3.769918594184851,-20.27122673712619,-20.180357514964925,-14.941254380712026,-20.289619908336316,-24.08020968332915,42.87443935272163,-3.649698957019326,-12.91005664025116,26.410574227896653,44.78685566193816,-0.20845238449811931,-1.2137484994839818,-10.213625,43.18268355064055,-1.8902568656135317,0,-10.214376704468942,38.39770004645514,-0.037462633082911534,0,-13.405064055890211,35.398687454542646,-4.059067630614139,-4.702969112882119,-7.450452630572203,40.95846084791027,-3.999267119241112,-18.574174750066103,-5.265799469682092,36.19043173701049,0,-2.198707556495653,-1.7689382737842914,18.970671644885716,-0.5492104089137072,-2.8305951139155656,-31.116673646414917,-9.2733251250102,0.5110186041595328,-10.333348293826283,-103.32197333909822,-5.1012504385946045,-0.4874113260694115,-3.0417308125179856,-10.213625,-6.556586409786526,-4.114557219864126,-4.501251178850213,-10.213625,-5.101249910330395,-0.44729023862975925,-1.8218870448632538,-10.213625,-4.256260704704924,-1.6853648221764468,-3.425649493698346,-19.62729384410681,-5.10646330300482,-2.594943519307404,-6.160043503834087,-6.116223079618759,-5.100868036163805,-0.09945067483161979,0,-10.213625,-5.116850959489183,0,0,-8.707863301623997,37.35291934409445,-2.6540963567896405,-8.745578277555655,-3.725916571930849,-6.707684605451534,1.9516826034736368,-4.3639496333505035,-8.891664212530252,4.0484481614111445,-5.032040578883261,-5.1000000000000005,-4.54954137071828,-1.4588651675497113,-2.6023508908901904,-2.548778927549191,-10.213625,22.40579436591155,-4.1000000000000005,-5.117227828125,-6.100977172673897,-2.497159408625592,-3.488701523002245,-4.995157955291668,-10.59192779619103,5.47948936308091,-1.5200997312760371,-2.9810121004239027,-10.213625,-0.14671442097040416,-3.2973609554385144,0,-10.213625,-5.1068702203125005,-2.245870497265357,-5.112619763326363,-1.1051948523350408,-14.016356472199561,1.9493098524446126,0,-10.213625,-5.1000000000000005,1.1143735013521123,-5.1000000000000005,-10.213625,-5.1000000000000005,-0.37660547076697476,-2.896144737223195,-10.219215973893638,-4.969754572121811,0.2833169569072105,0,-1.1736973172044323,-5.11724325239372,0,0,-10.213625,-5.1000000000000005,0.6113916384497324,0,0,0,0,0,-2.8253463077096743,30.024247073463343,-14.82087614248016,0,-1.3316167488002717,29.930058827350898,0,-2.390855715774591,-22.853461849235558,0.2981943400802516,-6.958187539051361,-7.189689778870952,-0.4015358332126307,2.087914753488696,0,0,0.8311483513991873,17.20556553149424,-4.1000000000000005,-6.323996784942262,-10.213625,27.790015099293672,0,0,-1.0279552017020617,7.055052454628724,0,-1.5597998041099943,-10.213625,0.03672101058004561,0,0,-18.44102775845919,-11.069969688566639,-12.326020819661366,-11.799210265521968,-1.1111367070347637,-6.541249447111363,-0.7391772705413375,-3.077011269516138,-2.6343251001861008,-5.111602828125001,-0.3322730352794443,-6.507895753566412,-10.213625,-5.1000000000000005,-1.197270807860794,0,-11.200682117290775,-5.1000000000000005,-5.50382474746249,-4.178906239907702,-1.0256868791475229,-5.1000000000000005,-1.3129375127418577,0,-2.877787489354425,0,0,0,-10.213625,-5.1000000000000005,0,0,-0.818933381544974,21.52401470091955,-0.48105903905249825,-5.117231350906284,-5.7470451914795975,-4.51546485046085,-2.2368481464992325,-4.890620417632071,-7.058551634026054,-0.06595174030319706,-5.61277205650361,-5.106975,-0.20777763216615047,-0.5696730348289715,0.38910044547283135,0,-2.7782744622321442,2.563899660272613,-0.29117554692087205,-1.6093549802565577,-1.817600128744008,-0.4834977083761201,0.5744410660941561,0,7.636066421721088,0.12077785185554749,0,0,-0.31121987405378937,-0.11247422750804258,0,0,-1.1009227911570454,-4.847515680879133,-0.16057342615273318,-1.0307266682568028,-2.2176362955067,-5.1000000000000005,-2.6341291312631627,-4.842947910469948,-10.213625,-5.1000000000000005,0.3932885669834015,0,-0.7764465971143875,-5.1000000000000005,0,0,-1.113902959162124,0,0,0,-10.217589721613214,-5.1000000000000005,-3.524196989522283,0,0,0,0,0,-7.222301317820607,-10.220508311285094,-13.231096923352721,-9.621017459463095,32.25022129409717,31.976298895827302,49.01104047408884,-17.952942490877938,-23.354740860731958,26.38435330363121,31.85953816887911,-12.81956796464382,31.313879466202042,28.40247978413263,45.603609985336675,-13.226533631011426,20.584025327018416,24.229214850689086,21.170999658155743,-13.654697825563762,18.899703605791746,26.782559167674528,46.04097200695586,-15.993870204179743,29.764212613769864,19.387521466820154,48.34130132269081,-15.49141355530151,2.348255176785033,19.6710639479198,40.89579526016755,-14.243304855122352,25.13776337355974,24.01707961164982,24.562095446080583,-16.417996246464025,22.730510599003676,-13.725262962695265,48.42470963249084,-14.775649692587809,39.07915382420742,-14.643236852535109,46.987222008546546,-13.947149022044286,29.184780038416097,-17.304787597421075,45.139229452208404,-15.658621733977782,28.581769068952962,-15.752298167025732,43.05146534051016,-13.91011995786887,30.24088783613201,-19.114922632275057,43.75457250290989,-14.012986582294827,18.23291405426268,-23.327264363667936,43.63338226127863,-11.041708831255153,28.19349852026884,-30.596198793503465,39.74121283479321,-16.87137346009328,8.6870671026545,-15.962237524387179,38.37901301547984,-3.3606585101358837,25.57055789687663,36.956258196176286,27.056495893490975,-17.36203621172631,27.04088429780733,8.24464773218736,16.219872539329426,-18.044267828339628,16.27401182609303,13.776250441490696,37.82791011381295,-14.851728765473846,6.332105385059481,12.60817871225641,39.905292452221374,-20.511214545658458,-7.268736250426723,16.98229333686338,37.108354517250184,-19.191843067920644,8.370652580408482,12.514587179527034,37.990148731816326,-14.810007179770757,13.81643157932388,11.633562773338902,36.22996439390257,-16.12141315225062,15.87075115174783,-0.024071826371035776,34.365341691003344,-4.24233380290742,14.126150848312065,-16.907889457384304,27.30328252666281,-27.921838515868764,14.785220800750636,-45.85783721144055,21.78243359997459,-27.23001581591007,14.285482316046114,-24.984822231237686,34.00819446682418,-16.986029947718027,2.5380091299830765,-13.44693363740371,37.57003543360581,-11.375023944396952,19.081724092281014,-27.341244176705633,43.73218042711228,-28.864935680593057,6.263227997285284,-13.628401747688862,34.46604498763806,0,2.45336053122735,-21.018702117696844,35.99592826161639,-9.071132348917304,-0.3318799813306525,-5.1000000000000005,34.96276512787348,0,37.669568314442984,33.91808410923957,43.20314722598607,-18.014197820613965,36.00796245847058,23.73567747487175,40.267352895392904,-16.995714805374778,0.5445675178455076,5.271525321361484,27.8291505674373,-21.522924564477126,6.150627416148789,8.405791064181336,28.605147281607064,-13.881889631238796,31.211169726501716,18.65327637791437,32.77602898067526,-15.626422514853372,26.785551698464044,10.352829998114013,32.50802270554624,-25.654015648096674,26.118551563332893,11.10279026610288,41.09271240361803,-9.577357171885225,18.938666738306154,0.42387451521388186,41.201053330824585,-5.359734462470303,5.153127926070995,-16.85534228254681,41.64674873848684,-25.672025644780312,20.746561235849917,-20.779025567383254,43.54712886406007,-27.881712873392665,-1.8669707849536463,-31.3286964218114,21.37361431639656,-24.464987117526732,6.403984283807517,-16.52878257364108,26.495894663806155,-10.090516378242832,16.540914624900424,-39.15779051294761,33.58659213423978,-21.360114950264748,24.74284657157388,-19.122109453644402,39.530845745688204,-18.11388550130678,0.11993821175170716,-12.424122490873053,37.15785458943057,0,-6.1000000000000005,-9.159987095610884,38.50730359646204,-2.57264708717851,22.021253858146785,17.2953199797574,37.81203296004274,-29.93867097861102,-6.989068470077438,8.510356259043046,38.16673223586416,-16.96672564931753,6.049503253495564,11.324424040221063,38.406339484093884,-22.892409331024933,4.226231813592088,1.7084348322340295,32.84168851115582,-3.108784734326779,16.179272566303627,10.039816584076434,37.754244404128215,-18.163265590210166,-0.5006361154179095,-0.12723970794999764,33.78098350205154,-4.090147743882346,23.94212809605776,10.547469950018323,42.42004804251063,-25.547082898128203,-1.8487966297902503,0.4953971490134419,36.88937998647689,-2.2977194988017082,2.6617580973877475,-22.047275899295048,24.389958022868147,-13.432869452454188,8.431516166406643,-10.181635562743068,33.110643530123,-12.645292662287652,6.116397306787073,-5.102938276404558,37.145836595149966,-2.039217694560443,3.279386511260729,-5.1000000000000005,28.518353326127414,0,13.863429519875233,-5.7358409845048755,21.967030307058746,-4.051978437980816,-1.795709257577641,0,30.73953089646622,-8.022390988256932,0.5447145023683027,0,37.981606125935286,-3.9877728097248184,-1.0288547591392623,-8.301406603793861,34.174023418665925,0,-13.052700366179415,34.363191295597645,45.324197519801466,-3.748787067914909,-8.07600885948821,43.14845395494033,11.862121492893763,-1.407403189139005,-53.14182084282839,44.29514303127862,4.5365143682393585,-1.2258604849572479,-8.525282343300004,42.76879701647564,0,0,-5.189003283477211,36.42841410876042,8.204274667996756,-2.256635921517647,-11.239942555513931,36.1793241256634,5.098134112482338,0,-0.018299164537185053,21.72521682724196,0,-1.0564016902403353,-10.345373627468794,19.80050265591407,4.517785205135736,0,-6.357359803835676,-13.310507819293063,45.451789102325534,-2.8809897884640603,-1.1058806974826658,-5.1000000000000005,46.21681671774754,0,-1.1115875000000002,-5.101001150355569,45.609223288355416,0,-1.4660776150899395,-5.10118677239182,15.332391186815697,0,-1.6554227035536895,-4.8629958551128105,44.20356498671974,0,-1.4917720489475235,-4.62681422151788,40.16660792994899,-1.109902924842271,-1.110527046875,-9.69113675594825,31.23645030939095,0,-102.2073333868344,-5.111189989873332,4.846247238684832,0,-4.519524567200181,9.757971659986087,34.74706961614144,-6.507576954920385,-6.1219310567953205,-0.3364163559723712,35.78289075961731,-1.6345341640531168,-0.72709824924898,-1.2885340315498823,29.35533439751631,-2.0074117891449097,-0.6159313803747994,-0.18910427996296472,20.441430364619315,0,1.5133255578333111,23.32296070014144,2.865226324420873,-1.6228919730723996,-6.111607441405719,-0.3231750135345303,23.39276714764145,0,-0.8499154322686634,-0.18085831776481975,34.03833927787144,-3.503025553145358,-9.081573864285245,-0.4436903111481922,6.850795252762825,0,-1.1059860386646514,-10.904660913386621,33.16581468724018,-8.873016615580388,-1.3126875384040682,-5.1000000000000005,17.301541956012553,0,-1.1054843460791355,-5.1000000000000005,13.923308667397274,0,2.1321183163322424,0,3.4145834121394416,0,-0.1712425536550235,-5.063227303764307,8.518953987906254,0,0,-5.1000000000000005,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-92.8221846904888,38.928811100063186,32.03794476603874,-6.783594322493206,-30.109093376021697,30.009558312114255,0,-1.358021935892898,-3.9490740990836883,-0.004132155207499722,36.641349724743115,0,-102.1503160552915,-0.1,25.284223718358454,0,0,6.359691959345235,32.78536052174627,-1.7424014484959338,-5.910704116369134,8.34407366490386,0,0,0.015448394584999026,-0.026753670533252307,29.27346677167818,0,-3.5096094776571753,1.8336232369477832,0,-1.4410057254178534,-68.25097938955786,-5.1000000000000005,42.82974215959533,0,-6.4503157939711375,-1.6770726767902049,42.38616353217494,-5.105863539495441,-10.213625,-4.876310382628265,29.09949357408008,0,-10.213625,-5.1000000000000005,0,0,-0.23269869026440093,-5.105573609482054,30.22251319675679,0,-10.213625,-5.1000000000000005,0,0,-10.213625,-4.507832530312537,0,0,-2.1054208228304545,-5.1000000000000005,0,0,-3.8437228824462184,28.22433499971972,0,0,-10.213625,-0.22078979728064863,29.967253811446334,0,-0.9207651673433569,-0.12003486814125153,31.11215753359569,0,-1.030318008989719,-0.4694524391501304,5.710617411499875,0,0,2.6389751987204657,17.20035718360906,0,-0.47109132391231556,0,0,0,1.5918836130717127,0,0,0,-6.05944411816904,-0.5697362859822095,0,0,-5.251513471586738,-4.908568330103642,24.21089833556734,-5.10500380972902,-10.213625,-5.1000000000000005,3.6516632403406044,0,-0.6201921255298252,-5.1009568087159884,0,0,-10.213625,-5.1000000000000005,3.8122636260549743,0,-10.213625,-5.1000000000000005,7.621902751280241,0,-2.4758277722721176,-5.1000000000000005,5.384013232971149,0,-10.213625,-5.010972406248396,0,0,0,0,0,0,22.73965090661472,44.512562698311,-6.077470026095885,-19.29710153231007,24.833673639692353,44.82087702186237,-5.8748022463075324,-18.73985855864578,24.07211390565006,49.75063395632052,-9.699664777304715,-15.55825393557965,6.035469085668764,43.139729563446984,-4.90093887137244,-12.075214276768051,18.559000602986423,34.193964475881835,-9.126363141874599,-16.468233167261577,22.20560141320844,38.268817584376215,-5.103859375812705,-15.598242534856356,23.04289667682251,39.891327471715144,-1.2430157533642554,-4.240880070901698,-6.9611793899993,30.37406055072855,-0.8189711536691654,0,-12.813740577384173,-26.57500463777905,-4.909969870779274,-22.49934257851349,-24.23427450079956,-34.10093538829284,-12.26623310335829,-23.58271769202831,-17.98683877618084,-19.59168320964308,-25.80436796770089,-15.075913504219153,-16.07778756484234,-19.449032890802286,-10.942872445715967,-16.883860229593683,-14.668062141371134,-14.863532394453694,-6.843662764904625,-15.323773078013295,-15.138444884629928,-15.090754645745665,-7.325984687986086,-14.39808656779013,-12.71635923230232,-50.17563900337892,-8.18571534953747,-12.157371992790743,-5.847167772252514,-9.690382335886877,-7.662707375351177,-6.109202779234203,7.732489454289958,35.403377305178296,-8.792899748289635,-13.924918757539906,-12.77515742694088,-10.514213637343747,-12.080007538503235,-15.151457059180023,-39.45399639070322,32.4263950180225,-19.354491240360836,-15.47015885456844,-55.11506845721721,-11.670117963498393,-34.257334688608786,-12.732950726702349,-36.05626853594646,11.927760621189368,-11.392055744822814,-12.336626896874677,-10.761501878786055,-9.1758466502993,-34.88072922095046,-12.312699937618998,-12.251599902612622,-1.371103181806797,-16.284505627152978,-13.781854231162566,-9.216699129301897,-6.911418512026948,-39.24455279748779,-6.5888936917099725,-72.10092241810763,-18.98138566148399,-41.06905256040391,-30.26836259713733,-27.897927800486695,-51.53657837543518,-24.69733704168901,-17.45841996578338,-64.57403921140006,-19.38667281239102,-41.06987356557795,-15.461628245128257,-9.337518881681081,-13.842611032604326,-7.718688824487147,-29.893010061075696,-8.359185424140065,-13.886856475700725,-37.70774301617892,-18.959847188853928,-5.132529347919747,-13.94623600730479,-8.539154632366424,-6.381321654257149,-5.138479176035752,-5.1000000000000005,-2.971873179492943,-3.4345564738052112,-8.576020189600053,-9.690000000000001,-7.791250439048985,-11.157989292766489,17.143577515487753,38.07220907100924,-8.777203912545785,-15.674030634151753,7.114405891950696,33.92927231438053,-8.03517410061892,-10.539094501560477,13.892305291975603,4.4987867772053525,-17.406383048816352,-11.158125203362864,-3.6657960399428533,13.644478104883225,-9.6883223342418,-12.864705096103279,7.0418053912119225,9.447032124377293,-11.727838972488781,-18.136726852088422,-38.47156672833253,28.374731748424566,-9.72147882181533,-12.89552714935895,4.787431133697281,8.408198762683817,-9.781789195722194,-12.791299290783215,-3.344424873014055,-0.2846146862641199,-7.419132974215058,-2.6224161520744858,-17.91161647428732,-17.698254636862984,-11.080713307435879,-17.295284613576587,-12.558932182772914,-17.732212941878853,-11.030181747369884,-13.790970360879086,-16.981512122575904,-16.082754699833444,-18.07179836439562,-16.133454181340294,-9.405196647538531,-20.76290806872546,-37.61432933673499,-17.28525742038895,-54.80913376052793,-18.02380256908415,-15.682836099609327,-16.46770511629375,-9.826163923754882,-9.657801585385034,-9.278741271779307,-10.367963696397723,-7.379250756797931,-9.00936684019536,-7.221858518249261,-5.633319332241058,-5.157375,-5.103980783212975,-0.9789248570073572,0,-1.9640751714108369,19.930359813737685,-16.809273793754258,-8.893260666554932,-44.8312910126989,-11.29265450895111,-18.137749496269954,-18.746896890873927,-9.044890065949373,2.7830032081937546,-23.178750688673716,-12.273321815092746,-13.658766721662513,-8.702461743308024,-15.014330398459588,-46.94197110662689,-4.4010100268713215,11.964343583689098,-5.59693177759227,-9.641552350604455,-17.380695388031953,-10.00974986600729,-12.689811869898971,-49.65433712634374,-8.295554802627404,-4.2286330746505225,-39.72219370582519,-11.818489682863065,-4.963813019660523,-3.3420062290171018,-39.375690570617984,-5.1000000000000005,-16.42563894138973,-17.54001238318674,-11.646396271456819,-15.807240438064682,-8.544890017832344,-17.789880159378903,-14.295978220414156,-46.8219663263302,-0.26497215628449355,-5.1000000000000005,-4.105957989556202,-2.157316612181968,-0.40644178778387785,-5.1000000000000005,-3.683695547393609,-2.615763833571572,-11.146688994859062,-9.691515077869816,-8.334046936475328,-9.734561287952836,-0.5868153101750584,-5.1000000000000005,0,0,-0.6797763402818507,-5.1000000000000005,-4.104613541938027,-4.89159538913394,-7.079899916206777,-57.064602475159035,-40.94541545265667,-17.548588690420324,-90.65093761070285,35.790559459192686,0,-3.9627359529465576,-1.1167923063649652,39.85794029524473,-4.123157566195582,-5.102098617433713,-1.1086867306842991,40.46406569521981,-3.9263918019248285,-6.136964756551037,-0.24034997923523688,17.325124500929356,-4.1000000000000005,-2.7755727012739824,-8.313633301238076,33.787193995322234,-1.4904017656326702,0,-0.7349899757051177,15.968261106211008,-40.76374701817698,-3.150194171163925,-6.691329566149834,25.585018408699593,0,0,0.7924499017907909,-0.11148178040712553,0,0,-10.213625,-9.540669272679143,-1.805486165778473,-10.135139967006724,-4.595438805307571,-5.1000000000000005,-4.031845639368649,-4.71904517467312,-18.827740682902736,-6.66383045123095,-5.842926247645617,-9.711641042351506,-6.105470129813618,-51.16981268679384,0,0,-1.3692308548143306,-5.1000000000000005,-1.0241120020143533,-4.747189553858731,-1.842634076138332,-5.1019551395256535,-3.5272875853153884,-2.195938528334515,-1.9388822394252223,-5.101119025237143,0,0,-1.4919832463468627,-5.1000000000000005,0,0,-1.0947284440523923,33.0224496408962,-0.7346761887194568,0,-13.238357180029947,-33.28794917152426,-7.59454831099042,-8.127840772713828,-6.1000000000000005,-1.552415797042673,-1.7793512499016746,-2.7148997768153946,-6.105970360041826,-2.5341135426776886,-3.0071000014946074,-2.329546632281473,-0.23922264117054476,-1.2598925606854126,-37.739104075869804,-4.486855098377852,-4.1097335640022115,-0.28257402733173603,-4.101115902210915,-4.704261023570421,-6.1000000000000005,-0.16609897404862947,-4.101250021636093,-2.8919851499145057,3.929871161631865,0,0,0,-10.169593199690151,-9.03741744195405,-7.964930147247566,-8.795274238739468,-10.213625,-9.66269299148233,0,0,-0.16070354137774334,0,0,0,-1.5104241673192558,0,0,0,-13.0478886645401,-9.690000000000001,-9.854151882732586,-5.1000000000000005,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-10.213625,29.971248900496807,-3.9598823356226194,-5.122409547167217,-19.32098931607471,12.05557264954082,-2.9845439529240054,-4.636778669035792,-2.557624427755504,-2.002862960582377,-2.2016776538185416,-4.074613602060725,-5.6996663151658,0.6062329260205142,0,0,-37.0000685821966,2.637225102722629,0,0,-102.00898373120611,1.4282581805729138,0,0,9.067806793025003,0,0,-1.2526991210512108,-0.7188957478243987,-0.38502999076188227,-4.106863409852431,-5.117234028908468,-20.18460840565212,-13.408240334281963,-21.778745247447482,-11.995294107871988,-10.213625,-9.691256866139614,-1.1132747492895114,-2.5374013846525436,-10.213625,-5.098363928847237,-4.411310873973823,-4.220626117246119,0,0,0,0,0,0,0,0,-1.6132448180245686,0,0,0,-1.1061457107373254,-5.1000000000000005,-1.0013087130580052,0,0,0,0,0,-2.210963605378779,6.432738788201704,0,0,-102.15031604878135,-3.3964073714061027,-3.4918665594592575,-2.3332455047223504,2.7501359188613455,0,0,0,-0.5303728841144832,-0.2831260242298247,0,0,-10.213625,0.523290111955451,0,0,0,0,-3.407650949366786,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5710208608144677,-5.101786544895648,0,0,-1.1153262881933845,-5.1000000000000005,0,0,-10.213625,-5.106867927674955,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,-0.9653357411682674,-10.214711002708816,-4.125084839438832,0,28.77093665007799,38.04955190982706,53.778093918479065,35.05369250243673,30.702855165167772,36.75768664621649,55.201744034836096,35.30684956473684,26.539286310586203,46.23447951644139,56.689864724533145,30.020177228742696,12.771972254710887,27.895970631378972,42.73110972187893,35.38999977769099,29.542174900604778,33.25559762471645,42.67018828665974,33.6463429392494,33.55055979640145,31.792468124628307,42.03180741612816,34.14987467750717,18.776444846944493,23.70949776705828,24.08370056496658,32.31593392179544,13.030679647316882,26.97057881128155,41.32961732017332,37.17255145973176,30.869585915039032,-11.41263745531334,50.53408713136739,36.81145282503247,27.214855275487317,-10.471178326540787,50.49458533535384,30.743616177890626,29.675450151756436,-13.030336206397598,46.44499019538959,32.79826868483521,23.698865053129616,-13.55152127950465,48.84884928711712,34.0251253070274,7.841350896891614,-11.035699499781938,47.01648846169176,29.874866027628798,28.665069318369085,-10.67121035767229,49.38709421897909,33.4471688967274,21.48837152622939,-18.303849257144314,47.55769142349875,18.612315208196435,10.404896140437431,-22.655189681749906,49.90528713686151,30.531587426573964,26.6894598346884,36.48656706809266,52.101034438648355,32.47744897817553,15.15580177841016,33.91538735435952,51.84517297948534,32.75110879788095,23.142265649872257,33.24764973718601,53.25082180121967,34.42345173363635,22.731091928367892,27.376753519874,49.14245957131854,33.315674658468566,33.24588439151068,20.18997416153739,56.630360401105015,40.32113518469255,23.141857468103076,19.822801331698756,28.339168539479175,21.54867395246874,23.912057949873,21.998456343513617,23.89841506340241,28.5747548382365,12.130817229515792,21.719675392171148,48.402885993968674,18.299281217309996,7.99496441372959,-12.853018862004262,47.45246953298309,27.158515231949572,24.450016483535144,-19.98796323498994,56.66519350252566,35.17914967013627,19.729935617974952,-19.710158975332554,50.03889025326339,34.41824626647764,12.642215146438483,-14.643865808708837,51.37034089236318,37.21624601203414,18.073274490285236,-32.80161182699874,12.479224341202627,22.62316380019924,-6.464727085589835,-19.217237206877073,51.79903935239759,26.32556384210546,13.593735819139074,-26.101315118664065,9.091989798369962,18.456548128199582,4.658135893912654,-9.692923099771818,46.63906297451348,6.604207087716869,24.418702963296447,34.527771274980765,53.85760409123735,28.576653649022504,29.775288498640773,27.550940418364615,30.374935954828146,23.109333568501327,18.313100096527688,19.534679666346317,47.97105312942254,28.976481910966605,26.452843294059537,22.05704283321993,15.892534680132165,22.243452965486327,-2.848302947639127,25.843496165721735,22.294621088888547,22.843929117944363,9.04356023071208,22.63905207578885,19.959350844418015,26.583934362530435,10.965530085244664,23.319234240815266,50.34569750490955,23.08055417620124,2.1728162693886723,12.792487688493143,32.2880600381048,27.70701172571353,29.67307701218181,-15.77832877790306,54.06720808779354,29.412138180387036,12.677668670446486,-21.07639618124411,45.78418731025279,25.190371408745204,27.976904272463088,-26.923109686326963,50.49048753351964,21.69656760254264,16.89725198037414,-27.714486225357664,15.71103060820617,29.826791256589615,-1.7429619924272148,-23.00066404876234,22.078083974169317,18.749321722780017,-16.802551916949493,-21.764888219958813,53.084574202410984,19.96121039261961,15.739431845491355,-27.653124414903164,39.61941231033714,20.38245615195629,4.070241273008813,-4.34536820477181,45.302076910537444,5.412860929955416,-18.28218420796439,28.348503280121562,20.900844204882564,23.36342468926229,7.776221969859769,16.308635964757546,35.364629442919096,22.46007865893988,-5.592809025815183,15.585165713900667,38.693626326855934,16.912562526692927,12.704237080419226,19.706533047806627,50.024038644489615,30.787722544915116,7.415015605864688,20.748834793558068,46.70971345096049,36.47734875057496,-18.964016299215615,18.199696903020726,38.27691821608288,19.51191172838883,-10.553474331569102,17.048801370849944,15.492886143711862,27.702559354465713,9.105504773504055,3.0088956964783744,18.114028779673088,23.609277645337745,12.159753073492983,-16.931845183300126,40.61064827194404,15.7581315082371,8.059642979063604,-20.557666667854633,46.280250543898546,16.17133106864819,10.220945381818355,-23.13890107244745,42.66834924744825,11.745192703019326,1.5098532255801909,-4.53273150565328,34.58586883282269,6.806170270768989,25.650743442719996,-19.827491945801075,52.190565143227644,18.045047774711936,6.979294418143732,-17.423311890042626,29.06443212834844,3.37801616985147,10.48051830152588,-9.64729161201945,44.39047169143963,3.61194307283192,2.540426552533459,-22.894413816882636,52.94724388218111,5.871893434363816,-17.49439775131627,41.36105823965132,52.44299962174549,31.08822303805899,-7.8031382919424175,39.387936685774505,49.055716909138916,35.14083842894302,5.512320277588372,22.319344086680786,52.675703131237455,15.604515768597688,2.0943970703991304,44.36565383198529,4.876420972969786,5.004446833066108,-8.600861268169947,36.98841568500908,23.612225804638612,21.08808912406031,-4.057219901303691,16.384621742262343,47.938823292839935,3.5622381240318286,0.18111020322582272,0.13977777933191385,3.3321738752529613,33.67871480047765,-15.600986896853676,41.138374080286034,4.969828120657774,0,-14.465146109277399,-9.90128947116489,54.567055651307435,16.248794229246094,-6.353225358380866,-8.776620828062741,51.033361889741066,3.5931606510746854,1.0769442038898633,-6.337521477810249,49.553489023520434,3.85565059286161,-7.71280477114791,-5.106379522166061,18.897824416223266,33.183771915120204,-20.478312507135698,-9.653021514862452,54.402388396469384,12.028409688166038,-0.6167955893413907,-5.102146956122109,46.196775487992475,0,-9.193711349902491,-5.1000000000000005,40.502212057793635,3.7684416940009897,-1.1060758578230927,-4.941367947286502,46.73872988978433,0,-19.190086144809683,14.834991854325606,54.08481421676992,14.29255286119018,-4.504582343875704,-0.5421137983321803,54.32056139557668,3.560572809923002,-11.620627611641414,2.400355141911538,53.63243717082467,0,-10.559901822056826,-0.14450091725387165,51.43995986042249,6.524451575099979,-1.0858018253756037,3.9882315030633153,50.21983153079649,3.2485980194532207,13.58091590354172,-0.17994658340877062,52.30515951833718,0,-10.213625,-0.10596402140278947,48.17687008261992,3.195064009555771,-5.380656603443918,-0.7784907490844979,9.21382683266938,0,-2.909378307116159,-5.101244209681297,50.71929966723311,3.5299251141946892,-4.412459254043068,-5.1000011090843245,51.80765868438155,2.617857298859331,-6.1000000000000005,-5.101249953149686,55.22501185622011,0,-1.1047941652230617,-5.101243511654636,52.340887509526986,0,-6.105311780630201,-2.623040352277947,48.34350170883212,0,-0.8458670553525605,-5.47268473280822,29.874121163631546,0,-8.055788563391273,-4.037749835141345,21.138253991318702,3.361149074824092,2.2996410172344897,0,0,0,-10.04474916502535,16.51437555324276,37.617042287632124,26.635083166074885,-54.400070825147495,-0.012361576254654972,53.55266180290132,6.40115225147073,-4.911774803646052,12.730467706911497,46.16854389576468,6.41760804425255,1.2074527116529037,0,0,30.91946646659544,-7.932619973239365,24.897085102910097,10.556629594287257,33.56589502126588,-6.091446235909955,35.3354593988832,6.360090041330032,0,-15.685186980055015,24.44505665679461,0,3.4310871734859307,-1.088183369965781,26.93870241582584,0,0,-1.9837569945634796,-5.1000000000000005,47.281030121334396,5.859843686572013,-0.16897965057071698,-8.167234703253829,38.59088619440428,8.818453751543199,-4.670793798582336,-4.934821791973579,56.52556021249895,0,-6.10650061157685,-5.1000000000000005,26.649071952644533,0,-15.744990317523683,-5.069834579229805,20.54761232604282,2.0747661608905243,-61.68306696417525,-4.050321683865216,33.16918296118818,0,-10.213625,-5.101688424936796,17.767445456875098,0,-1.1059205889753025,-5.109689676193643,12.035724833812635,0,-0.21869211681937967,7.098251754171753,51.38788035877134,20.91809393655172,-6.425601442284346,-0.24528578110719376,50.65391825607233,0,-8.32424958939775,-0.1,34.446845682300996,0,-8.930179913140522,-0.1068963442239964,51.776580862312635,0,-5.61664097098488,-0.1265551300812923,45.006973589461055,3.424199030888381,-0.8069408597467164,-0.11126626173911279,30.544404993499157,2.8876634245291135,-0.8336096692209255,-0.12201986609211213,47.56034455612736,0,-0.2763006425288117,0,0,0,-7.773448906225294,-5.111602828125001,40.0950773486632,-0.10596739225568129,-0.30710468557132437,-5.1000000000000005,21.929889588537975,0,-1.1161520468750001,-4.428580009744842,12.998691751783657,0,0,0,0,0,-8.22999131687121,-5.10685926871857,19.172935523389,0,-10.213625,-5.1000000000000005,10.373940195864773,0,-1.9055345797794616,-5.1000000000000005,0,0,-1.11157347206977,-10.21487552015608,12.304652531715522,0,26.973845886344385,47.82935380677689,-2.073650317973534,30.8353153278256,17.991926371528347,41.12042738156361,-11.460868283539314,31.137833634459305,-1.8754748936468335,43.317960295890465,1.5542180924544997,26.63747920664715,4.799461841564105,43.757877419907416,-0.515352586039324,23.949661916656144,24.9032602424032,37.76057385813586,-37.32998121488113,28.506603533261057,19.296431102781256,39.58245689981468,-1.511142344560979,18.4835882543396,24.233275312849027,43.99824094694859,-2.8659508412711165,30.967814290712777,19.88960657060028,41.262712937212825,-7.28447744226298,18.308503778425795,17.04888758737259,-11.723320247947616,1.9635471810921314,16.592375771920118,16.72882650093903,-2.581972694171373,2.7546445703917968,33.11655747644015,5.833985460489598,-8.94799628604084,-8.448287396036347,34.144176068177174,10.245768463601976,-6.46785802402793,-8.220606268111228,30.29538912851603,4.84738090575003,-19.08226140736984,-7.827185257590079,29.732847741874004,3.7712501883167424,-32.202018013057476,-5.584220458191845,38.20720734489863,7.719154143319624,-8.162070790231507,-18.16134449015639,32.24186261291751,-0.6695811612201453,-9.582450535167496,-2.70231173622872,32.98751381987811,23.224902395126403,29.49041141663981,0.9621113091507081,31.01056273840177,-19.376176647271887,-4.675297393280227,-7.877802522205107,16.415855516721734,-7.726416259946273,9.934083419977892,-1.619812652867925,18.117236387904807,0.7183195602140362,-1.9688879362717264,-17.2197159399392,17.986317969944412,-2.6764771039267137,12.474659330560863,-1.2261133225052927,31.14014766574957,6.560345230376668,-4.685317624161631,-8.434545749224792,26.4574208744464,2.9033052061778863,4.577184540263852,-21.47206262761665,20.584960868128274,3.6505351716325913,-0.9341061904441317,-3.0685054182726876,32.427493761302514,8.138585210510488,-19.704429855283358,-0.8036705746893481,36.220704659135265,4.054397881157381,-31.866697664519403,-2.0206103503502177,31.901940140548803,5.630158697318063,-32.682960577135944,-1.7667682503219087,30.826887156936987,-6.265710194182011,-50.21858906683508,-5.03958978893585,32.85613125179523,7.057653197981841,-7.74866138032996,-0.6064013647854487,31.99793592335152,-2.0600810321955945,-13.821000000000002,-8.126690871448915,33.11536908863373,-1.1579342010765512,-9.608156946271263,-17.476996392744702,26.834195719577416,-0.6145825344119749,-5.1000000000000005,-8.996222882510388,30.756789361008526,18.599606125571018,36.0825398119124,-2.9587456861608827,26.71693204132245,30.500572839911467,23.162882292335688,-2.4461544418114167,36.56197511471838,13.290967345460418,6.094255701869816,-8.245162255674726,21.386432703199905,12.173484572149508,5.109432058656968,-9.854508535458283,13.33459836112101,12.709299466082506,13.831269686506236,6.9337836030279965,29.229325061339715,29.4633472985149,8.259254577967708,-4.039900114277562,33.63224546760084,6.254885627698872,5.324166165719523,-14.840470052893796,39.81735794412356,-1.8652756038843838,0.11452288698265656,-35.87925805125376,20.604275141381486,-17.071887959508405,-26.65986124652032,-4.1986845523974665,30.636020559777414,4.793633421351247,-13.409042142068147,-7.731778283325396,30.39854789257765,2.943751076993341,-13.105819357750006,-10.048028845545764,34.788509300741474,-3.599511883833065,-13.8293638577989,-2.7320971326867425,26.45954091657745,-5.056062191138181,-11.849943803353574,-2.549989629423378,35.95226212099775,3.4436413791995264,-5.1000000000000005,-9.47656651072415,28.662892908220947,-0.6465954929432263,-9.332878177715774,-4.1000000000000005,30.52799219056127,-1.0279129521481554,-5.1000000000000005,-6.6409951189483,29.745622249043944,19.391504319299184,34.180296805576305,-9.472483581244049,24.006547202943512,-6.221022206728884,1.2423465469593413,-9.207572307456374,33.28413252990752,2.2064097693318727,-1.1693990543723742,-1.1654979815808262,37.04649666450776,-4.6593421010080895,-0.09005571324240319,-5.617677427043545,34.25408188022906,5.7011375472810055,12.779310335158353,-6.3469325865148125,31.672141060857577,-1.9308280948627905,-1.038941016510475,-4.101238927726462,34.48317133797719,1.6455001713057997,5.194343764222129,0,29.983106784046626,-2.2614839910663567,-0.16601100822496684,-33.82114079747218,29.517129014756442,1.4221785334056443,-15.47198360977833,-5.578148863356504,30.657981189386103,3.4862408650359797,-51.168796702300355,-5.58597726640428,30.93635860569244,1.1397780516599556,-17.549194286911128,-4.1000000000000005,29.868131257856522,-0.3673816343056415,-9.721287269014063,-7.814966772687251,26.23202865262224,3.933093365372775,-5.1011990632037545,-40.10203050469156,29.528721495951576,-3.2814895754686026,-5.106072124300038,-4.101244011269438,34.994916269282946,1.7295284858950142,-5.10122031171502,-4.1000000000000005,33.61611047724625,-6.101307826861681,-5.16423897130522,-3.9466583725565125,26.016671590730237,-62.36650416963873,42.34638397719084,1.7979528671166227,10.544713684022812,-12.382172740698945,44.51830090951001,-4.835769141637938,-0.11865023346484856,0.9087878724365062,45.05608278169036,0,7.109208372581193,-1.1113576703959698,43.340161521918034,0,0,1.275327401885709,29.95519485245966,-0.7712693266356778,0,-0.651824476956323,41.55135989694087,0,32.880543890147564,-8.598706428792863,41.81816324514118,0.6108009587824105,0,-10.213625,-0.1,-3.729039950683255,19.935031706275055,1.1200098782033447,-13.555107034129797,-4.200539303295696,34.508108597023885,-1.0478835001987619,-8.13733622650766,-4.023757614862258,31.229898283546884,-2.5576526023990027,-5.1000000000000005,-0.22466292438655147,33.102573215012825,-1.2413172719722354,-0.6528043809885808,0,0,-15.557890100052754,-5.113861371658367,-1.2374993750906436,30.61947663220899,-10.213625,-5.1000000000000005,-0.08715679177591351,0,-16.533757756426187,-4.989124707499542,-2.4362945028092025,7.3033471255972024,-0.9704532838125592,-5.1000000000000005,-2.8218743811977975,9.408991269249121,-0.9310828254538861,38.461965016356125,-0.9331882387799951,3.524852751016522,-1.1,-0.1,-3.089068825391659,26.02514047354063,-6.100340768344644,12.602270888493667,-4.1000000000000005,2.205467103430405,-3.432490890703756,-0.7308558050145181,-0.8402064146403788,21.166811977061904,-6.044652164418763,22.13799849508209,0,0,-5.977794855928587,0,0,20.266079075052463,-1.1112913102348112,-0.13875149079441876,-4.133213138644128,23.39536170154509,-17.524099569325546,-0.1,0,0,-11.433463437366303,-5.1000000000000005,-4.10698162304993,35.419682880581675,-0.881371492854812,-5.10123102331725,-0.5093342487515493,0,-1.0274819729155742,-5.1000000000000005,-4.107107921413469,7.3836386759830495,-10.213625,-5.1000000000000005,1.6588025961888744,0,-0.44382530131163317,-4.958159420670611,-0.07832736569086905,5.960720385604262,-1.0081036842299367,-5.101256866062714,-0.07893972623879786,1.285301661239636,-0.3085766676266055,-4.909929604607055,-4.1000000000000005,3.4764413732398562,0,0,0,0,-6.244415770792017,-0.1008078870644186,-4.923026913182916,34.56446684141558,-0.9867630848192483,3.2302715243082036,-4.1000000000000005,35.73464703847933,-1.1,13.34823353092463,0.6386584905848516,3.0847148371377475,-0.9865280507616027,-0.06335301023315101,0,18.77541234574648,-1.529324161936329,4.15651454924622,-7.790996802246512,34.035023454046865,-7.5933384809955555,7.666945181730601,0,0,-1.1,-0.02374856996276207,-4.1000000000000005,18.72057624455983,-5.292584732134251,1.1379034778510997,0,0,-1.1518568745316946,-6.161031870907083,-4.556301264929268,34.08550536566503,-0.7936556039716636,-5.101249725893726,1.1000233868134939,0,-0.9051988877505945,-5.1000000000000005,-1.4288879196603532,15.538597292526582,-0.3565627244182429,-5.1004791204464555,0,0,-0.8975955122545106,-5.1000000000000005,-0.48009959902652466,3.6631998809470203,0,0,0,0,-0.9282735797112981,-4.739653819618088,-0.8206261780007544,0,0,0,0,0,-6.100314269646872,-0.04432437864550483,-4.108364006600559,29.66831643903084,-5.481256666495607,-0.1,-0.8654721366029876,6.968169669326333,-1.1,-0.5566312681699499,-4.112885108125352,18.761082525102548,-6.1000000000000005,-0.1,-3.654198220050835,0,-0.9994438852988656,-0.1,-7.439044352586426,10.179533429973866,-10.213625,-0.10999720321643465,-4.10601423670444,12.288159788784657,-10.213625,0.2879493882485412,-4.1000000000000005,0,-10.213625,-0.47246147090290513,-4.11737497728423,0,-0.5859952856683536,-5.1000000000000005,-4.1000000000000005,14.27297500465199,-10.213625,-5.1160062378057605,-3.3113003454080294,0,-9.671920895946968,-5.1000000000000005,-1.8170181366775853,3.097398026670623,-1.1105226809609388,0,0,0,-10.213625,-5.1000000000000005,0.05563404128703056,0,1.8756400387264422,0,0,0,1.852417314871369,0,0,0,-6.1000000000000005,-10.2204875,-4.1068702203125005,-0.016431793650524162,32.77089651722349,40.50796319696022,46.52852123237476,31.52182056641645,20.24153779175591,23.829729577722517,31.930083397294702,24.976318866355975,28.19570194208657,22.867331167186062,46.09255795348031,30.31567387087418,23.16893606324915,19.554553665942404,36.69740925677124,23.84796359863832,-0.1457181748852472,26.87268762881859,35.700546292762894,23.103476895695568,23.729991829146396,23.52476717434654,21.325906069151387,25.29481857923162,11.297057203294631,30.669575443998575,24.437395488144098,21.19655739554596,21.538717172774344,21.59305681243067,41.74523368079436,25.64500943269454,33.10646674387888,-11.929054060846648,42.75845688989491,26.34959633889538,27.076442496876727,-8.171995325075287,43.1405724079716,24.270283661389634,25.024933180150594,-17.62266911186465,47.020064391048535,25.719399377171385,16.61136466421211,-18.80073930284238,46.822837190822106,14.56436362946543,-6.444755064245267,-13.811795276625782,19.390672598456206,22.49026853720252,14.624465121390916,-14.129981277452512,43.354778619604474,17.371129461727982,-19.12690092109388,-18.14919912126667,44.44322555219971,21.30595993043457,-0.5741727814903694,-13.486184380367925,47.837461005622885,3.7104595862062624,22.68710916418168,17.84970973680113,5.131733799654382,33.814216736664555,-18.473256653259853,20.342059515913878,5.552589601936007,32.389547694666746,-20.789295993490814,9.482253168956557,9.096101369119639,28.37937979914896,3.4666645194022347,7.041289042561958,0.4006914930823888,31.77697803364178,-0.9054001841849528,10.00384285426807,4.361693501183885,37.29968051878372,23.308849750507058,8.33882174131671,6.208325650363493,37.56780004368789,25.386140689361557,11.985940695015099,3.9523032586763187,31.56412795658482,1.8824129969667087,13.163183979100136,2.916794415438733,32.973848652734425,18.555907006689214,-15.993618395735387,8.015407794933456,33.511028894902665,4.432903100929669,-19.30855176555145,2.4032878010441765,33.8370286817872,8.523945207579267,-31.60355972643354,2.6605613164991517,36.81796444495486,-0.025704718588517306,-9.701992071364176,0.24044761900643918,34.83490236596265,6.35749084883118,-21.956868683784318,2.6615216753129247,27.745243930011533,3.094716156611221,-25.656036135017153,2.144669528221268,30.787801128615406,-4.429894637185478,-17.554057141974823,-0.16204136665257612,35.49683687099542,-0.05951267037513457,-5.11741030223099,-0.12051149785868584,33.66776876277776,35.70745541123854,27.877080608654452,35.140585129092145,30.788794861040945,24.921084627471053,40.73133707205038,21.585956632137584,30.076339137471926,-3.2769454610672404,8.548809912996553,8.173012924107477,24.867533505487614,8.903907690343752,9.219594872002112,6.1155572889008685,30.624624276681885,13.77376806051013,12.965370406885961,8.396773743712028,32.373468013788866,18.05342016744273,15.453064399795146,6.9464817687485745,33.84383733020637,15.409557373068195,11.783376242553548,6.011403250426321,23.448598900863942,-1.8822226681841747,10.86912720088743,0.31266871081537073,35.7075438014009,16.296158392578285,-19.534207487960273,37.42011484358157,26.59736178142889,13.460173721609689,-26.049662133171495,39.75157650968974,32.94700209404558,11.118891409669233,-38.739178200011274,7.6894482860044215,34.50637287076796,18.654886466279358,-19.547978519996047,3.9894668871846317,33.79907429168619,16.053014110691752,-36.172301266014465,4.800151070250432,28.4655152061528,-46.82814008211632,-49.36597313667348,0.6914772142290091,27.310185302600864,15.809577545849603,-41.41283062923345,4.107068784422572,25.423300410429242,4.668289812024167,-9.690000000000001,0.8924447420141447,29.57966947001402,21.92230578270988,25.293285817515223,7.311239386985281,30.22151345052767,14.059717988715795,4.656276597952139,4.45966142119075,34.82743201449561,6.089867307656084,8.726982196480293,10.458555997889947,31.776394320913777,2.5318098009399583,1.9081171589208517,5.014692255095239,32.96284360550993,32.50430013770398,6.118667330737871,2.532521391833661,32.114786009341834,2.1590249937759975,0.0913083594115773,1.0363561433919959,34.345350069200585,8.33069692380252,3.7501237391674795,0.2943629598772981,31.580430194144792,1.4227198016213083,-0.4436506753232204,-1.0833263246887335,32.01546511914094,6.945306639038671,-14.262054262728968,6.248563225754959,37.92032913441475,2.2917895759022615,-20.3722930574752,1.5465517985850263,24.775046348015394,-1.634350339222296,-5.1000000000000005,0.6378638046454633,30.798127076290797,-0.09542404918715093,-5.1000000000000005,0.10217133754036577,20.35265069112415,-1.2100285346160513,-11.120848651402842,2.390730635957648,18.860606240656967,-3.291216134289264,-5.117002449013171,-1.0418660225129963,33.52306745884679,-3.363971183200061,0,0.8148649962433722,28.54241165816332,-2.03867041196633,-31.582167656112574,0.17404755809428196,16.79392426367129,-28.790378021469788,18.464362593328044,42.51228740931852,18.934437680695943,-12.447653708825454,37.52530271925026,0,3.3796189038836197,0.5656726725768371,12.056822031030604,42.20416546227339,3.7259951034855927,-7.789122766753353,1.965780139604882,43.70136846607876,0,-24.558390712447487,33.60115843312723,10.869088083438545,9.593831471083178,-6.0865883270807135,29.72985094151697,0,0,-7.583326305596905,34.08430632773721,4.78856078529608,3.586035103226889,-0.48450748178294056,14.085843881758073,0,0,4.26446102768433,-11.336358596656762,46.92175808144793,0.8892339279528688,-61.84354628976052,-4.358000115975789,45.37131051052695,0,-10.213625,-5.1000000000000005,40.01856486913835,0,-10.213625,-4.744727275147263,47.66369744275518,0,-8.016418150534621,-5.299465639011375,35.11571222201214,0,-8.049528553501998,-4.781270059881394,17.870432599195787,0,-102.20720601808043,-5.1000000000000005,41.81791805035387,0,-10.417841828924589,-5.101249749165003,15.084271833255418,0,-12.483276467164654,-0.10068107496290353,0.2657718876123579,33.80754157177561,2.0835113101653118,-1.0617855014269932,-0.5221845405793643,35.071477468718,-21.879578627013686,-6.813509804376427,-0.9673386018451282,27.80488686069084,-0.4459447704587943,-0.1,-0.18345688463313944,23.48249797594941,-0.9918054364840426,13.900284298329739,-3.134682548835317,0,-8.320904091923374,-0.11015124673965059,0.8517491354680903,36.547883602812185,-1.0525623439926992,-0.19352185236998581,-0.0011913988116381447,23.344304321942392,-0.25621826472053255,-0.20521159217564022,2.2137888148355707,0,-1.0629698489871984,-5.101267503506152,6.9365705771752175,-0.2911905428799545,-1.1059634762223263,-9.852769912831658,0.7481391543359481,9.552521324697079,-5.74430253693443,-5.101353186982557,1.3360663877672962,6.606273972259956,12.404000186025653,0,0,0,-2.62463585318784,-5.1000000000000005,1.9793793940619926,0,-6.111500293461649,-5.405362892272092,1.811206407755893,0,-10.213625,-3.804738461585421,0,0,-8.280048254209442,-5.1000000000000005,0.39325366743264945,0,-0.6761855605013529,5.777773972669857,28.370069851057956,4.029275831507569,15.67349689650381,30.429087647942623,4.1478853297189024,3.4713946813135608,5.189314511835423,1.6746481771183457,3.3374272744778137,33.81062104336758,-6.104985106381648,-0.1,-1.1893644914421593,0,2.3873215541075195,-0.05663048294001732,9.355177581531724,0,-9.684248040280398,26.596552582932077,0.4862736038153117,0,-6.1000000000000005,18.476273691189874,0,0,4.747925414377318,0,0.6241707976405546,0,-0.35929294404069556,-5.1000000000000005,39.52778582543519,1.1967447083032805,-18.249676689177875,-5.1000000000000005,24.766224106797857,0,-7.770905693444829,-5.1000000000000005,2.2404713051544887,9.298136969301154,-1.1053534491872326,-5.1000000000000005,2.1528527945778535,0,-10.213625,-4.899167225882007,3.116814846102946,0,-6.1000000000000005,-5.112364169966472,0.2926334052857286,0,-2.265026757407341,0,0,0,0,0,0,0,-4.061485476162086,3.9224470698140235,4.708135684096624,0,-1.406832068670829,-1.0206383576734568,-0.49869164415646794,19.840204080431178,-1.0493801912902903,-0.1,5.1822363443723045,0,-0.6393749600873555,-0.1,1.1729228908123226,0,-5.848019352206243,18.94324087986911,0,0,0,0,0,0,-1.4194904187275466,-0.1,-0.6006785469466731,2.6755345727644873,0,0,0,0,-10.213625,-5.1000000000000005,-1.008929494857252,40.347170367247756,-0.25886845946271464,-5.100111654662826,0,0,-3.8220327819614894,-5.101073719291404,1.179910326078056,0,-1.4831712563757522,-5.1000000000000005,1.0309663805546538,0,-8.188121769127484,-5.1000000000000005,0,0,0,0,0.1166581443090382,0,0,0,0,0,-0.7856359180311845,-10.214508840407786,-0.6249976848441692,3.4936042458710492,23.459279818109216,21.52858947234639,-8.438318282951379,26.169744678411444,24.245369075961335,42.32650308954655,-11.267779855903834,21.6989183379819,28.338909659218068,46.07684430497223,-12.949575223604041,29.339525685376042,11.369348986157474,42.51042582842902,-0.4035806682471503,11.993781707170937,12.637825906312525,30.650713537809317,-17.119816264615316,30.453467639695425,11.79081584837193,13.348311037441784,-7.676127434403307,30.19761210970277,15.842893729199083,36.78964864423574,-15.441086736018121,11.841672173374995,0.8825704373470238,38.12017160182241,-5.49114727986852,22.882690343952696,4.775669527547407,-14.970982774923392,-32.57888201564451,33.81110990450879,3.385924497468239,-16.159317260035415,-9.502043052713885,37.90253145424457,16.235226907960808,-22.238632960874707,-10.202557732354906,33.7613367562834,-0.5580795441526994,-11.255861953587779,-7.791249280829339,30.74966993250197,24.664266414646427,-14.880855035571983,-10.29699451220338,34.837892336767325,2.888666757619947,-7.7559394845534175,-7.481518403671228,33.41857374421911,5.7364937322821135,-5.1000000000000005,-6.0206401085035965,32.09352470566901,2.543509413554587,-5.1000000000000005,-7.264010582077531,19.389292004288954,17.152536077367373,37.05856732749001,-41.66966181452146,25.930640735881386,-2.0968144036468774,-2.2032106305599424,-14.83061420953232,37.775591992374096,7.764175321614109,3.1781033558057445,-41.87894026056106,34.441949782107514,4.587940662175086,-0.7322846410021544,0,34.87448024500145,6.1271100596406285,2.470202753009164,-20.35922470710164,35.252674929550075,1.2202459204537983,-0.7494655828927457,-4.101238409068727,34.542759280515035,-0.2635427055160312,0.27301852104889124,-4.101237960108737,33.21086399523801,-1.1449996284728003,-1.166061008787675,-7.868987623446883,36.40323889136906,-3.4138829768684165,-5.1000000000000005,-7.817985176343948,33.52051710159673,-2.2935795321179486,-9.714295048614805,-8.078172391993263,34.83210405184033,-6.1000000000000005,-5.1000000000000005,-17.23961007944871,33.563067011771075,-0.717528142424633,-5.1000000000000005,-4.1000000000000005,20.51619646303781,-1.0376695648066518,-9.69527585214625,-4.1000000000000005,33.57287744521755,-6.1000000000000005,-9.799656741265217,-7.790000000000001,34.52188622947394,-0.12669001591074522,-9.691226421179524,-4.1000000000000005,33.202847196075794,-0.7364654245187965,-5.1000000000000005,-4.1012375,6.907036287052008,21.011198515374627,19.776053052134003,-22.617404325825838,36.20386302761425,7.787845388276121,6.585895362850555,-35.51327246187343,34.92527241430702,8.533660976540336,3.298027734812833,-11.032291473738164,34.28533407432376,-1.9178946776633907,0.6738242412830829,-7.907666569801014,30.2804629893254,1.6815313514362735,22.97361974038628,-14.140559007981636,2.8836142207961624,5.763598163639658,7.764579011291275,-3.8902140229120357,34.893258152591706,5.248524772798328,2.518718673483649,-11.126756180151363,37.89950124956927,-5.829886140077388,-0.7415656631322521,-7.814646570851014,3.153236705230024,-0.34132691378960534,-18.481491512540224,-39.54629675749448,32.406970486156446,1.0419293018510585,-13.255114941725967,-7.575637219326057,30.300009027247704,1.463475821316794,-13.320076007457274,-10.973011170115921,31.96183436007002,-2.7301478061481377,-5.02858519589064,-7.820366390915348,26.280746541487204,-0.376598145659215,-7.8382355994497575,-14.213110901213078,32.64490662657825,-0.6145502829285747,-9.690000000000001,-4.1000000000000005,28.888576649842967,-4.519465963246141,-5.1000000000000005,-4.1000000000000005,23.472716896124346,-1.4432124498739656,0,0,15.444073825762127,2.96931277039444,13.814418895296841,-11.45494599145797,35.266221267419716,-0.3611760532249253,0.07204145611848353,-23.320752995995274,35.72441782773283,0.32539408117431945,0.9343231370648708,-7.710454062378274,34.624168756503366,-7.09,-0.28840185818259184,-4.1000000000000005,33.58833011252534,-2.4173268147011173,1.8109717822033629,-4.205308420630657,36.3899814968523,-1.0368984745647143,-0.19,-4.101249380026763,35.892562354457176,-4.43481027317329,-0.1,-4.1000000000000005,34.316304251313966,4.365467259374505,0,-4.1000000000000005,0,-40.07157322642381,-8.988968773827054,-7.809057868147635,27.49657382359153,1.2865670982999486,-5.1087972719582115,-19.653808014138082,32.22423817175057,-3.3024881226401996,-13.846217463923614,-4.101244242601721,32.601277134383444,-3.3129049085692435,-5.1000000000000005,-4.107242085577105,14.195918577093746,-3.9800024584453064,-9.691379645064568,-11.123622581933416,8.601785609061714,-0.3728645338494665,-5.1000000000000005,-7.791249615656676,5.637195081809437,-0.18810988774654566,-5.1000000000000005,-4.101243619563522,2.1772044999011846,-0.5895446851137808,-5.158038237770754,-4.1000000000000005,10.362386745116948,-2.852665255078544,30.9549084201882,-4.1068625,31.53404998426073,1.1963306621744614,38.44576895834436,0,3.717861063893905,2.0608891196868804,-0.10060030810123095,-4.195108577061314,31.317819322989575,-1.0704988234720954,-1.0573949657881148,-3.126079863777311,35.99045701375579,-0.5204673621663841,-0.1,-4.101249308616048,31.78538774384127,-8.005576966325265,30.839263261586428,-0.2562688326796206,3.4742380611262664,-10.213625,1.1533168328711088,0,15.986798970470165,-1.1046138921875002,0,0,0,-9.593639719856784,-8.935686509368107,-4.967469803671522,25.27237200131398,-9.59969455514657,-5.1000000000000005,-5.872656269800026,33.687839918755316,-10.213625,-45.07811366266751,-6.818297817148972,15.070143445013532,-1.1047915429514599,-5.117227828125,-3.902693514792455,0,-67.03494071327287,-5.1012426890625004,-3.0162646260749493,6.602824756247815,1.9797979282838574,0,0,0,-5.311072186975563,-5.1000000000000005,0,0,0,0,0,0,-6.101318158098185,-0.0376529598297674,-4.1000000000000005,32.72684463537112,-15.397805650485399,-0.27777440308932694,-7.941585386822074,21.129474246877063,-1.0726835691292647,-0.13161842433744325,-4.1000000000000005,36.024843764212186,-3.8357226980389605,0,0,0,-5.9976421511295195,22.91042844511478,0,0,-10.213625,-0.10640924194641302,-4.173927636532039,11.272278138840669,-5.222251698373868,-0.12009170233964071,-4.116702567184701,6.722423218841223,-0.45922308659880917,0,-4.1000000000000005,0,-5.975321595556064,-7.796609854762284,-4.106863844279272,26.066303558239646,-1.0621465853235967,-5.1000000000000005,-4.1000000000000005,34.20431989108424,-102.20720606789683,-5.1000000000000005,-4.232322663050612,3.0143380842959058,0,0,0,0,-8.115276505735284,-4.99054336509562,0,0,-10.213769237618145,-5.101244023320992,-4.233429306429839,0,-10.213625,-5.1000000000000005,-4.106975460108737,0,-6.1000000000000005,0,0,0,-0.9934679462802318,-0.1,-4.101351249108283,29.083309367107844,-0.16479179692098464,13.453922769998606,-3.9380996194252393,-0.06682984156154112,-1.7226232634807586,7.015160723010325,-4.151014892759337,3.593826601581644,2.726733255210684,0,0,0,1.786637004084822,0,0,23.021242736799454,-12.07051980575729,-0.017652867467121757,0,0,-9.202701476020952,0.8873043808215009,0,0,0.8232463320176628,0,0,0,-0.5489353638622492,-5.1000000000000005,-3.5624841948862342,14.325995607690551,-6.101138582079,-5.1000000000000005,-3.439711204182496,9.725257165081864,0.8915892771348632,0,0,0,-1.1,0,0,0,2.08486933871799,0,0,0,0,0,0,0,0.935332012304221,0,0,0,0,0,0,0,-0.7319995864984898,11.643923879627927,-4.166570186938826,0,-0.7952336197981034,-0.16143870973187463,-4.2260811527722275,5.193025929469312,-0.48360586260790095,-0.1,-4.131873644553693,3.5831884895916533,-6.097451605097255,0,0,0,-5.930962922088671,0.8639914279294931,-4.1000000000000005,-1.181471094370594,0,0,0,0,-6.080203874807946,0,0,0,0,0,0,0,19.91034679329806,0,0,0,-8.401138445613675,-5.1000000000000005,0,0,-10.213625,-5.1000000000000005,-4.1000000000000005,7.022342933922158,0,0,0,0,1.9651858797021795,0,0,0,0,0,0,0,0,0,0,0,-1.1167436577272214,-10.214881336614944,-47.90131386452224,-0.3083277268609335,38.38155932498802,38.58814267003497,55.396301927000025,-13.472041235569591,25.733939349828738,44.01662521631155,47.82810488670298,-14.631195143434438,28.184586422825447,34.20556406192996,49.137928424783915,-16.076477951179484,28.091597218252616,44.41104805947373,51.07981565839331,-13.576925127418727,33.46816510808668,34.46180056840072,49.67633791516321,-14.628000412942242,20.216131335208033,20.286881371425814,38.25305435506149,-15.031730787583117,23.359684079141978,28.6993090486936,48.25839309908218,-16.67019105528433,14.47695489163917,36.61660859813068,22.03981743536278,-7.881861359854178,30.07838079186918,-10.171652436072483,52.650223939803496,-14.622135789641703,29.59397802380096,-10.575243366267973,52.81038972783514,-16.00072996456589,28.625485192316802,-10.751247545968143,50.31886256740894,-12.75357421829866,10.276780849239211,-16.086720620855782,43.968592606651406,-8.996192739114907,17.065598865176426,-16.885036998034092,49.601152494685586,-15.783608326276637,21.356305617196263,-24.706754174788216,44.82653504220393,-14.904247784103024,14.980888083283709,-17.109072829210927,47.92108853837104,-14.582981850539895,13.936678567974253,-13.097060169014096,47.68657985224812,-13.627170365704403,27.09291200687601,28.50904876317562,54.053778252767486,-15.687381326686047,11.4879317399388,32.875662893339204,53.36132330903105,-15.476264791248727,30.618217785096622,24.736252297601194,54.165949999099084,-17.98858076179417,4.032340938069396,16.879579558856186,53.78943040144641,-13.746846347694223,22.361900209942096,25.44785280925989,50.00839886254649,-17.797892273206607,16.26467657240379,10.408273993977692,55.877426120435764,-7.738503895939957,10.309488827336786,12.745167940781403,54.01273856665039,-24.010597612595394,2.9476430593803604,28.11506768641789,52.21072725756343,-5.822315004115699,24.22801725959495,-19.00619691332275,51.563772446430576,-21.38439367609699,23.972320854145078,-23.377728507577686,50.97615909060485,-45.75242276667605,2.9539981335275094,-20.057151784100395,53.11141077640905,-17.137894022760065,11.684245977748565,-14.881862165460195,50.81328269520564,-1.8296624492351157,30.953717961266484,-9.432267657542518,47.222878685352825,-10.746110569968405,6.303899158736784,-13.515678491980758,54.86832345178907,-4.0860382259839385,4.013202022931254,-19.1618113515864,50.63764035423317,-9.022966564497718,2.6411289778149905,-9.69678732542282,49.56159505975542,0,27.526318275176195,30.531563048786005,48.88252932076341,-17.73541938448409,17.349408665019787,24.82728171918675,47.487021309873526,-17.63520147862775,2.727548763856131,13.203633641645881,56.83138410147285,-15.167362927852478,19.50283500514391,35.315022856553334,54.77577133807652,-10.516694148873384,32.47014985714766,20.120163931598984,48.425911044305,-20.794057674785737,13.767997136772992,37.65484338809918,17.971185820005278,-16.674472923945828,14.38484679897847,26.594966628697605,15.685690714938872,-19.43095944040688,2.758383192813629,3.5019685666350737,46.91500422633717,-4.867116128664435,19.53389374450017,-17.56398386065679,50.487348691902355,-21.38383153374859,20.501809704676447,-23.657543292091848,54.239709255797315,-15.637623870027625,7.965453533940423,-42.41411756194128,46.25405567245619,-16.120608420925468,3.008979235064,-13.616985029142107,29.791551546978962,-2.3453955256824894,10.294565637816405,-21.11539729322468,43.67535244381058,-21.8906129456093,11.127614052207864,-11.575626916664037,44.40692622046603,-13.668849033152505,6.000197541846095,-17.719095902330608,46.53164527339469,-6.880689395637388,1.6655227767183864,-5.1000000000000005,49.366395162511076,-1.944869569828153,24.529822923082047,36.68156171028524,48.34668477781911,-26.500770153076047,12.170672157219737,7.66488098354117,46.847491934648836,-15.088224323059423,13.870582955018717,8.898372474390353,42.653528909754904,-25.223396602094635,3.708270223105448,3.0213565806918363,49.15256901259714,-15.948905717801335,11.809345229896964,9.74570644900999,47.03381463886226,-22.42145987964821,0.6298776307460239,2.5689720826379787,41.73227462344103,-10.232460146573867,-2.104640459987184,8.737214249851988,49.93838447040573,-16.323859082523,-0.46980771410527516,-0.1,41.115567334179005,-1.928522539096932,7.145516946654185,-20.271257486596376,43.92105420845187,-22.4788222264442,2.572721167334418,-17.55196800088646,19.039244865140425,-5.394467868746817,5.9589502681418836,-13.578975156832453,50.372734974294005,-35.094446729265,-0.2767827541045875,-5.106870220478662,42.653307200968484,0,10.08285024887294,-11.240312914052978,30.569574050018044,-40.61835260858564,2.9380842556635534,-9.690681411846224,23.144578008364107,-4.998264299878004,-0.5127111929412154,-5.101250447809207,43.42920860778459,-4.80430441494563,-1.0717820141862024,-5.1581698748027085,37.17894541095382,-37.26413321988897,-4.668450153485441,17.16190169906144,50.23830620049414,-7.753015690179732,-7.519158462742377,41.519066437425316,4.0479959810075234,-1.3982141801935741,-1.0558203784366493,44.57751845662305,12.86736961910619,-2.028590758512714,-1.1110525196490177,4.39882199737345,45.5871332869132,0,-10.49348806744875,38.51507858372414,5.474212521324887,-10.500964522498668,-10.213625,4.479682168902488,52.71370277874715,0,-0.9350662965543682,40.57774214540897,0,-4.658316756611457,-2.1955668422323393,24.979952991162754,0,0,-6.578199897758216,-5.1000000000000005,46.12574054468564,-3.4755473640354646,-57.24756684666103,-7.193904461902521,54.84443475465245,0,-1.1156908694902343,-4.8316892875956885,51.58778873356216,0,-1.1046125,-5.106869501187205,31.244948646269215,0,-10.213625,-5.101259203712695,48.20054937668972,0,-3.0269285470236893,-5.1000000000000005,34.823155216409,0,-1.1111048855082781,-5.1173616564576765,10.132041142390632,0,-10.213625,-5.1000000000000005,9.2748772061274,0,-1.1023207404018804,7.152246765233608,53.04084666660758,-3.759798207008689,-1.1,-0.1,40.256739663989194,0,-1.1067465118806266,-8.117972741775208,53.786926090329416,-1.8197839188211824,-1.3446878818619914,-0.9807315412261973,17.690695232023298,0,-6.105835108470422,-0.1,47.07449887580315,0,-8.972616813853817,-0.10216969123017552,53.84333686731224,0,-1.1103704442001476,-0.5823440739891969,45.27656142064468,0,-1.1098529590818669,0,50.747445794202605,0,-1.1058813780333376,0,46.88394980933075,0,-10.213625,-5.4781421671230754,36.81975669220835,0,-10.213625,-5.1000000000000005,50.39071621281558,0,-1.115340426451165,-5.0139656364504335,0,0,-6.105258153512619,-5.1135129221140945,30.29713543773654,0,-0.7845965417380409,-5.1000000000000005,11.953812094921052,0,-10.213625,-5.1000000000000005,0,-3.920656434461219,-10.2193625,-5.1000000000000005,4.574888810346613,-5.1000000000000005,1.2464167540024795,36.474726511129994,10.04644528352837,-4.043211902940561,-6.1000000000000005,37.34751215479294,5.630088095856835,-1.637393538820188,-0.673042846654297,28.966740184591462,0,-2.3369421922223887,-0.6787030560699112,-0.0141258741811384,23.14793427637047,-4.846179491277487,0.4382679729229082,37.10822002182852,5.214483954133357,-4.640627783065991,-0.10164956327929708,15.819410840188922,0,0,0,3.9962720929503606,36.58691340068173,0,3.2715904205048663,0,0,0,-0.01270644459060577,-4.883887755374961,39.661143296440265,0,-1.3153767771237868,-5.1000000000000005,28.058471422999233,0,-1.1201254914919947,-5.101245771770788,32.42754590803475,0,-19.314675265855456,-5.101226067119752,10.902868787352197,-5.1068885729158655,-5.107990121624834,-5.101597191805625,30.17360283990488,0,-0.7171676777376954,-4.699910837952991,0,-3.1159258737084112,-1.7316073306607764,-45.14739570752534,0,0,0,0,0,0,-1.105971614075982,-1.0686298761361426,56.2772075284164,-4.596614526711874,0.1378606406764462,-0.1,21.797602449478035,0,-1.0854447446459479,-0.16872808986232385,23.299241324161887,0,-10.213625,-0.5066210144872919,9.570388000989514,0,-1.0676012310154772,2.8792985537197238,0,0,-5.8319768346784855,-0.4195923630802755,5.5784185571344205,0,8.868266719457377,0,0,0,-1.0441169625885312,-0.1,6.933922133042154,0,-10.213625,-4.729145148375859,10.293251199330772,0,0,0,0,0,-5.34598818172447,-5.101715990685534,5.374076641941419,0,-10.213625,-5.106987921197968,5.504727877906723,0,-10.213625,-5.1000000000000005,5.305888037918939,0,-10.213625,-5.455338597277446,0,0,0,0,0,0,-2.112303702921584,-10.216001341665788,10.046441597742067,0,17.699612325749747,45.95933316715648,-9.760552951996578,-19.993758644597442,14.94012895628144,44.69285637379496,-5.818839215989058,-19.37784479960129,19.856532054739226,43.88574647636345,-7.552353035443262,-13.078607731774428,-0.8379640910295443,43.928943986470635,-3.8697802571998663,-10.513746521687784,26.766082931700478,41.36838987527924,-10.284043841791869,-16.755325048192102,3.391813356055078,42.15195867016772,-4.989149826070838,-4.753480784564333,0.9486539396695832,38.630123618124664,-34.90798051049294,-10.791576213897834,3.18860302805379,35.36974340671444,0,-1.9659807776441227,-46.51868136261867,-27.122490863966835,4.646809916222553,-48.711329663860866,-20.535442508826538,-20.629285120182587,-23.50970529131991,-15.826462849840421,-15.422192394363188,-18.21514704819014,-1.6405449087531987,-35.97705731048747,-14.114024902779125,-22.007191561885037,-3.4645939664646566,-44.914967848360774,-11.755886628991723,-10.916720556730422,-0.2345309325999021,-17.34913036864244,-7.518733244982804,-8.400992172271755,-3.485279239700369,-9.221244244950011,-61.016481516403175,-17.262391444119306,-16.116646533679308,-15.82863967177826,-59.53927798783256,-12.636567031059865,-41.01324327543862,-12.018113900686588,16.15421013444037,37.71525486388022,5.4283804676066,-18.0887708736887,-13.686474022784175,-3.465377858787644,-10.566542347711831,-22.8372142070083,-14.032146048384162,4.837497360102919,-23.396204122731532,-19.366093092188272,-20.448702657332877,-10.235493985945938,-6.840843092696133,-24.66758012434038,-3.960493534648565,8.735460345244634,-9.651922714688029,-17.78188186086591,-12.552154842783484,-3.851619173056967,-5.4665105182476506,-12.852483252471947,-11.160678813650218,0.33072224861243493,-34.10430505361143,-14.38334036174744,-14.849569790432557,-5.508783537188629,-7.915615941799038,-12.531684332128908,-16.66222259201106,-16.87051613485994,-0.563721767492078,-41.73696686756707,-9.766737000500385,-9.704308519464796,4.652735619023408,-49.19830862476087,-9.056443033945733,-9.330453032532542,-2.2345332953136112,-8.242839958585437,-7.377679123572258,-17.615642255125913,-37.571479311311826,-13.76802506845027,-15.205555889704625,-22.498274982308615,-31.625047777982406,-33.66282616294774,-5.837638748231818,-9.690000000000001,-27.841000956175424,-6.474214263187072,-5.157375,-9.690000000000001,-37.292161107095254,-5.1012375,-5.55011724394597,-9.691124438909924,-7.791250440146794,-9.680714449706178,21.99143060401192,31.90967156598933,-9.813396164177718,-15.49526016728089,12.485545408139703,33.88285629356925,-2.206673190638193,-16.056982779567523,-24.311888380190464,14.53261014172989,-13.194395695653068,-15.015287404912735,-6.54917446129706,2.7495608017020667,-7.845097501635933,-9.155241696315532,-29.592268669665312,21.637161893625674,-4.176831150416929,-10.548086735904494,2.350663854639261,22.07118826828799,1.0534237021124007,0,-0.9357516943646499,4.942685916844892,-7.791114929785914,-6.260714247118035,-2.304633937065223,0.6542589384539416,-4.1013144149634,-12.501544217892432,-18.10241497853037,-19.574810457416756,2.3746517474244575,-48.775785037536515,-11.26111627146578,-13.822168788317391,-1.9285598974163982,-47.47890105322147,-9.107726518024505,-9.690000000000001,-9.952176935009458,-9.650129343070594,-5.527825277401422,-13.844648472959774,-3.3732947830082978,-10.257534667355966,-11.788698064863329,-13.595742662660214,-10.685933598665681,-9.691461900595469,-10.820540495518511,-10.643451736190862,-8.229021841402714,-9.452191289265334,-6.85096452322275,-5.1000000000000005,-3.169307296153689,-5.115333690613233,-6.158831175772343,-9.69112532858713,-7.715138508836372,-9.691467836975924,5.100000164605381,33.75057231100657,-6.86727218064733,-12.219336204501172,-24.694960588321365,-9.692043373196658,-38.52389097755482,-18.155902936252364,-8.589850926806825,-2.0441850948795035,-8.736210618852555,-20.35113775771084,-10.629003282200816,-5.691090497148736,-13.926048886586129,-11.050336354375897,-5.343194599247717,18.922824555571232,-0.9261702013590023,-5.1000000000000005,-10.265533363249533,-5.752922580257537,-9.111836157689895,-9.076988963991655,-55.21290453654108,-0.3440098914840991,-4.1000000000000005,-6.326482287308379,-6.2370995400809,-2.5967125282477133,-5.630303045301421,-3.225867644790986,-9.122318708644588,-12.676769149204901,-11.679338265934447,-11.096034345581131,-6.101993696674947,-5.009741500325195,-1.702822541502449,-3.9323065447527656,-8.411867116986745,-9.70233941003478,-8.250375667795105,-8.90956546789904,-11.29900692510539,-9.691051853992636,-2.8821486403146754,-5.0864154784117765,-0.9109634079750336,-5.114637337069127,-1.5822389057185182,-4.41501662886344,-5.913134651334594,-5.1000000000000005,-4.2936895532463355,-6.826280634211059,-0.6611338976999256,-5.117256838423773,-4.101254757979758,-4.342098563009208,-10.709421646085229,-15.259052152353515,-16.35082369365701,-50.066924814293756,-11.629590407263166,43.2195968424776,-2.8966445675901236,-6.660262157260556,0.7851538650846523,44.123327434234305,-2.6710267204323124,-5.1115968829051885,-11.113731966146867,41.699972240813196,-4.101244109966417,-6.626209615011915,-1.1104719047740808,15.713402125599004,-2.2294839870915726,-2.4229179034174306,-9.74771529007075,25.78143526833505,-2.353686261847884,0,-5.880389032633171,14.376771324106068,0,-1.7337898425896008,-1.1047781405308743,21.28255724142565,0,-1.2765410800020995,-1.1,2.3409440193077833,0,0,-10.213625,-9.691247109946211,2.101136216637675,-11.735938869197494,-3.8116277728005503,-5.1057505531816405,-4.890974116910458,-5.1000000000000005,-11.23204949873254,-10.631181472579428,-8.794894811863056,-9.516174479822448,-1.1056574938416086,0,0,0,-6.111518842507669,-5.1000000000000005,0.3604180258816761,-1.6391203135745096,-1.1707112025388793,-5.105738981681366,0.10054318020319286,0,-10.213625,-5.1000000000000005,0.4800947639402338,0,0,0,0,0,-4.837262508053223,28.826419369375344,-2.9256994170498545,-9.739404739795768,-0.9332473162799474,-0.7896819364474371,0.8954263374870333,-3.880488394593037,-2.966788069911865,4.341926334757767,-3.037441822836843,-3.8633316599160006,-10.213625,-0.08936365270781199,-2.9821121342489167,-5.12278511865938,-9.934240870611758,0.10848340604043427,-1.2456309480575183,-5.117227828125,-10.526359494880658,-1.4352237027800656,-3.2717342875860975,-1.9580470908856829,-1.1,1.70416905735442,0,0,-6.1001072180614235,0,0,0,-10.213625,-5.1000000000000005,-3.2451495966620163,-5.1004774818166,0,0,0,0,0,-5.1000000000000005,0,0,0,0,0,0,-10.213625,-4.981896926785707,0.7519375917170174,0,-1.3566007453418778,0,0,0,-10.213625,-5.1000000000000005,-4.099119029656721,-4.530981886704142,0,0,0,0,-1.1046125,27.61676187578354,-4.248918466729382,-9.290042657668868,1.0727762124509201,32.90353594644711,0,0,-5.91029426532159,8.64928749136457,-4.12728244910092,-3.3186298877874876,-0.7265692677733195,-0.1,1.2345009251679273,0,-1.102362315413811,-0.1,1.9662886040604874,0,-9.451525222153043,1.6731007039389856,0,0,-0.4091431547170709,-0.1,-0.4713711456273515,-2.9542847882192933,-10.213625,-0.1,0,0,-2.919124275082478,-5.1000000000000005,-1.6844061957132985,-51.07104755721361,-1.1103642830317069,-51.0109354633044,1.4086027466716244,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-1.1172125,-5.1000000000000005,0,0,-1.1,0,0,0,-10.213625,-5.101243414791837,0,0,0,0,0,0,-0.13040508558908126,11.141829443753725,0,0,-1.0565753225461818,-0.9917963423053557,-4.113005871888062,-4.756640305660652,-4.170622321322833,0,0,0,-6.1000000000000005,-0.569208639669332,-2.3573477655584494,0,-8.169111648647636,7.337324162158665,0,0,0,0,0,0,0,0,0,0,-0.6883440757327783,0,0,0,-0.030196266816574103,-5.1000000000000005,0,0,-6.1000000000000005,-5.1000000000000005,0,0,-1.1107694726005808,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11.41634399769765,-10.214875471172817,-3.236119242283843,0,33.86701879153847,45.92013778612578,25.346726501612885,-17.055863920172648,18.266733750237968,36.27298292112901,25.90378431543129,-17.98665800869261,34.54860280664706,44.49390203336006,34.335034321804045,-17.294916881024363,17.143281714578563,49.66040455041784,16.044423413778222,-7.449930008918612,4.797804509303756,36.90164079651684,18.080313959154957,-16.852889398976043,16.759795242540186,20.816583385772418,33.61018996866145,-16.51736700176706,17.761779319216203,36.404591422596845,28.302754411461336,-11.722168212278484,2.8567811164311165,20.94577439149855,36.1403379918908,-5.574321780165883,13.403397917800474,-15.40151986655092,40.964768539688144,-25.219659625097385,13.267326095546855,-37.31310311956338,43.624547010159056,-17.88188462531867,13.147519071358431,-16.05048425735198,46.03759266460364,-19.43768348237389,6.163515028442392,-32.66635795153881,39.70001314559974,-9.095208734643904,19.377784160652922,-16.905430799802453,46.889031086902754,-12.13160501078927,6.219204273712348,-12.388686639041932,44.5596624708507,0,3.2212663131152843,-18.13096419368469,39.00255527808351,-18.40066157884598,0.8564121873982071,-5.1000000000000005,17.155721066956964,-4.809344759861778,19.55662528341253,35.41253637964777,3.9763464280607,-38.05342294628449,-8.005008056335338,-3.1102638919706687,7.217000079924472,-24.95075372103948,-38.80270833497834,11.038295532893533,-1.0299839399865016,-19.42454282872575,-4.323733397652931,-4.587431417603975,0.07783554126990277,-15.462338753913627,-9.768163175301158,21.924962243967943,-0.008168979254940187,-15.484368878400163,-8.345325731958164,-5.8356443710230215,2.102807054790007,-11.690998830787821,-10.312012881414896,-2.6165096411965454,1.0787923333052474,-8.531332710280513,-40.039617057494446,-2.392867803268232,0.7571403180670947,-6.676936295515221,-3.819207036437417,-21.26832843875147,6.417237662165369,-16.428305120921898,-5.885388977616099,-50.70994591712928,5.77331518443984,-6.812320944942584,-3.5033997917280684,-19.177541189594525,-1.0222183060344276,-18.577053763844006,6.071678832874922,-5.1000000000000005,-4.142208476722298,-42.88789935099406,-7.271382812684719,-25.54711645077964,0.6131162318489096,-27.409356978593838,-3.332004625595113,-9.639097946008551,-0.27306926024367145,-7.6374751035660715,4.29403344562767,-5.101119226677475,4.505588528556688,-11.920779209124573,1.4081877622710148,-9.653399622318187,-0.4409753061744156,0,14.292167183367559,38.18595797524251,14.14528657880517,-23.093825459753404,22.50699645857978,35.32535436106902,37.905567463324694,-13.071028416558462,-29.703809301290377,-1.6159812667161655,8.180793129664515,-19.912574141918046,-2.259086710444858,-0.6310519908285668,5.65723856980852,-16.89652487261418,-1.7413062391441008,22.36440007438175,4.218326418374112,-25.30036384368435,-0.7794077025375197,1.577927663017269,5.453489431862847,-49.196299415927456,2.3755168994471942,17.65628350685119,2.8355787769066483,-16.048686033715324,-0.9862070524725679,9.385326870162352,0.14075231173409386,-6.253748217388138,21.696396052532037,-20.929370987650017,29.21155881378366,-17.839037354080247,1.5731480062058631,-13.827735305589385,37.20648037593031,-22.000552882587392,-28.680751969284042,-16.087646281670626,4.663784190660839,-21.634188542956597,-3.2589233450268256,-5.1000000000000005,5.0049014261394476,-19.992137120363875,-0.04395700506809952,-17.55885898510116,9.453367014115283,-19.326669036887075,-3.298827738029522,-5.1016835396847835,9.188250280665091,-4.66136679380235,-1.5918548928598208,-49.40712571205482,-0.18592224903066262,-10.517909592273265,-1.0286985845327308,-5.1000000000000005,4.7945042128055615,0,3.954764687695913,27.857286240172062,0.8142832047423049,-47.53635169190649,-2.0183528968062925,0.5366651730171981,-3.5219086666679953,-35.10940609520207,6.51141215660354,5.942611568552109,2.858984653783131,-25.214914004407902,-6.9897426412933665,-5.457841286662799,-6.217927983864586,-45.79147505693816,-3.1017820662840583,11.61879042235088,0.7322235250780921,-29.247731765665932,-2.4891688900244144,-0.2001547297631262,3.9141936913717297,-4.2833522798728305,4.326870579806881,1.4916708054529646,4.115775559639138,-4.946572451276211,-1.5036893356916916,-1.7557069963123748,3.698240299936645,-4.733584057636411,2.4513088363508118,-21.067667998354676,7.28863583025138,-8.123991588751489,-5.737901671062517,-17.501710787666518,4.407635674660485,-9.369476730191153,0.8647123266785397,-8.903918611428296,8.976280435872862,0,-1.8458107878312333,-9.690000000000001,0.9388100352280884,-2.397740069159704,-1.3853839519442994,-9.691165029842836,2.1621328233866564,-5.1000000000000005,0.22322647528517384,-5.1000000000000005,3.4881554515812767,0,5.8196265269986895,-9.527034636172527,-0.40196780049217723,-9.157759263816105,-0.004806498623541522,-5.157380407310952,2.3367085832719345,0,-13.463085970538295,10.167965980724029,39.46057087870068,-1.7121166678687836,-4.656052407781387,39.483242527601746,4.757545890728847,0,-2.1959351138222023,-0.02546800361423164,43.68760446312776,0,-5.023181930032056,27.796337287314714,0,0,-6.556778230390113,29.056654873437353,0,-1.2801872521614124,-0.6416503348073672,13.454402454372229,0,0,-8.857546139008686,11.641386126396501,0,0,-6.1000000000000005,3.897060348615602,0,0,-6.1000000000000005,-5.1000000000000005,43.50618485351061,-1.0543452958907567,-1.7863873484939612,-5.102035231161707,17.032255613699483,0,-1.4792793989026092,-5.101243955957866,7.462063063526196,0,-10.213625,-42.15984960658568,3.9873757727882224,0,-2.117431303684088,-4.59937681408969,14.740799690384403,0,-1.5533503600405472,-4.975127862638541,45.68774019990631,0,-10.213625,-5.1000000000000005,5.09320218470701,0,1.6079413387944343,0,0,0,-10.213625,28.524893326283625,0.6918251541595061,0,-6.1000000000000005,-0.20349393047566042,2.506328291491668,0,-1.1,2.5880075746110816,-0.6529568995256309,-5.101250688867518,1.5902415573063249,0,0,0,-7.516598622407088,11.705758405642637,-0.062119329920967026,0,-1.1051395474208539,-0.10496765723166775,0.8980106784023685,0,-0.8860464413429956,-0.7786852432152442,0,0,-10.213625,-0.053474404757230004,-0.3773805191766346,0,-1.549465774341657,-4.671410101634685,2.662749711612573,0,-1.105255272777985,-5.1000000000000005,3.8291614762784385,0,-1.4916116719088641,-5.101377792695773,0.3780209800326511,0,0,0,0,0,-10.213625,-5.1000000000000005,-0.9628485958105251,0,0,0,0,0,-10.213625,-5.1000000000000005,0.6952437262208593,0,0,0,0,0,-6.105910333359525,5.317578324699991,34.36983157575556,-3.7714660195956764,-1.032906846073265,14.388949635983218,0,0,-1.0745531242310165,16.619517634076814,0,0,-0.44978585764402423,10.785112006006088,-2.0708849209578393,-3.582081954849082,-0.9450164275783073,-0.0344277574481078,9.43722368769434,0,-6.364997767875487,0,0,-2.0880965132556843,0.14316180453580785,3.14792465065663,0,0,-5.691007402846653,-0.2707581546388746,0,0,-1.0904008160917813,-5.1000000000000005,21.9519024316064,0,-2.1946616216626227,-36.159110266404866,0,0,-3.656705539065638,-4.852223241530406,0,0,0,0,0,0,-1.5992492262724944,-5.1000000000000005,0,0,0.8084496881840867,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.19,3.7549386974155743,-5.117241187865578,-5.538102921991092,-0.7594623442086841,0.08007100922055348,0,-1.772174822174823,2.533524195998554,0,0,0,0,0,0,2.7728311891453234,0,0,0,-0.881808269359805,-0.20015763295557357,0,0,1.0622286312357736,0,0,0,0,0,0,0,-10.996162539146445,-5.1000000000000005,0.7423037189427466,0,0,0,1.1059617620924111,0,0,0,0,0,-1.673870667539421,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-6.116233340994912,0,0,0,0,0,0,0,27.012278790602405,40.31970099116101,-6.802904208135461,-21.901326369875633,5.394268115259485,39.05093414464198,-6.9817518704412,-10.938753612390165,25.73624745960996,42.55994821101598,-17.62665129453504,-10.129286460677333,-2.799212762281018,42.74258138071229,-1.8780219018024216,-4.862144561930647,1.4579368960473258,39.295946403466225,-4.286945280211237,-16.82840093087004,1.728113277573609,31.929097194408765,-14.947158085650841,-3.560650594505318,0.547509526281599,35.813148656467135,-16.228646753322103,-13.895336117271366,-0.3286542613173995,12.275397743337574,-4.100817390426245,-4.910225611755585,-17.756898393680835,-35.85171458288036,-10.737069431200332,-18.57244189772854,-17.643254435583547,-19.36732312673178,-5.045871222533908,-25.022519099172403,-17.171275578769645,-17.707019533770556,-16.909057317172387,-17.76542674216556,-9.94550711926802,-13.291308194896367,-9.642021322049075,-10.745865170536817,-13.483230982670532,-18.865913607701515,-38.34967827027163,-17.169525975093354,-8.677575543658314,-11.31401026128138,-12.123032510910095,-25.932023819558903,-11.520873454217606,-9.690000000000001,-9.331118867512885,-9.369223058993494,-1.0030346392097385,-5.1000000000000005,-3.730477551139884,-2.7562183399069493,0.4687421285014657,36.29075103846422,-19.609280002163807,-22.180086173868602,-24.046963209929125,-11.923428895876013,-29.22288787168055,-21.507318462191137,-10.151802498207319,-7.6078187952692735,-14.31513972989558,-27.194502416012067,-8.013741958640573,-8.074708187269716,-17.450088695373758,-11.430503651352959,-4.211652037909612,21.652701153543223,-8.108028410162046,-10.095962600594373,-30.195380394104806,-5.131975581636557,-14.634731001500692,-10.427327366752277,-5.808851896048164,3.815808640945037,-10.95503578935024,-6.226456120316583,-0.8508580583088614,-0.1909786391656304,-4.1012375,-5.0068044928485325,-16.422474138347884,-23.817710654616203,-28.00809464729334,-22.069058148066212,-6.031081680973613,-21.3932351303136,-41.257840377718374,-18.823665832132033,-53.654402256781445,-16.437604405100632,-41.01317050102738,-16.46555763180777,-4.243128800127437,-5.100119947259488,-7.732300861299864,-8.950905558580892,-5.399452600606552,-9.690000000000001,-7.9644194862565065,-7.3200231598285725,-2.5787391210307335,-5.106856838320724,-8.222030004967333,-2.6372187959617786,0,0,0,0,0,0,0,0,5.070470868753247,28.1167127639646,-18.65148539969075,-11.216503150172391,-0.3319978603463378,32.945595250096176,-9.888449864530301,-5.100893497400422,12.027152097006933,16.49141885207072,-21.85030284214115,-15.945321031163203,-0.9768577726203374,2.896632707174807,-7.910392633036223,-5.10091932707628,-2.446564853713703,19.27083048009014,-13.870209036012099,-7.634306618476924,0.22095925817789297,14.409994007968853,-4.1000000000000005,-2.691584905145154,14.15384910410435,6.60539742450913,-7.792483150106829,-5.0781883991760965,-0.7926393862515976,-0.1361869777055649,-14.575984205462012,-5.106885591769391,-10.414631703256914,-18.50410615884725,-18.517359815724152,-19.011843728885164,-12.051029622628505,-13.842429720526319,-12.405455070569786,-15.539660995787479,-11.92928078368193,-12.765424699163905,-14.392996777236208,-51.04625232210517,-7.0220548362985395,-5.1000000000000005,-7.707090941227035,-5.110066371778732,-6.5913149326548055,-11.515621850001258,-7.930960632361737,-7.207713178068349,-1.2062736749118184,-5.1000000000000005,0,0,-0.043628321326108305,0,0,0,0,0,0,0,-0.3131414164075267,19.579144926893157,-4.591241068377488,-5.106805080300645,-13.917945804549639,-4.078974584606987,-17.36546307396285,-15.18254475888498,-7.086542468080676,-3.5903828250963867,-7.753905008289426,-6.035057495914261,-1.0101776256299082,-0.25339788765274174,-4.107292134869733,0,-46.301860623826954,5.73201021255643,-7.796988272214263,-9.162703191909582,-0.9301539876404811,-0.1,-4.194191049839027,-3.1400353548852653,0,0,0,0,0,0,0,0,-9.392561625499578,-13.799400402253553,-39.336690578901866,-12.872068589160634,-0.03579488370598065,-5.1000000000000005,-4.003171421051018,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.62782388686578,-14.293976955850926,-41.02149161755928,-13.84065832749482,-0.6444203547792551,32.766993471513956,0,0,-10.213625,10.875234921720567,-3.921769873935853,-4.2612337886345335,-10.213625,10.021981017607867,-4.1068755531816405,-5.1000000000000005,0,0,0,0,-2.5880245971434226,6.057676545520897,0,0,4.309216434623217,0,0,0,-1.252601033621791,3.4229485302455576,0,0,-10.213625,-0.1,0,0,-6.06712308822001,-5.1000000000000005,-4.4667172945798095,-5.107419270392828,-102.20728576150103,-5.107004242101507,0,0,0,0,0,0,0,0,0,0,-1.1974298849906766,-4.809468139802874,0,0,0,0,0,0,-1.537141802153997,0,0,0,-1.3267810433825054,0,0,0,-1.1,5.560276343407976,-4.835901669357355,-5.10607395684269,-10.66732601864457,-0.9004846717783986,-4.033269446787097,-5.1000000000000005,-0.47711976171038517,-0.45664742792446417,-4.1000000000000005,-5.105780258981153,0,0,0,0,0,0,0,0,1.5326103054596718,0,0,0,0,0,0,0,-10.213625,-0.1,0,0,-9.5656911614637,-5.101640215207921,0,0,-6.121840328125,0,0,0,-1.6602134723120465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,29.564301774879002,0,0,-6.105963175346615,4.126766473420706,0,0,-9.8503692201336,7.1299774679124335,0,0,3.1568490873918855,0,0,0,-9.096419631904745,3.2898768539424292,0,0,0,0,0,0,1.8384444909992788,-0.09530494348721112,0,0,0,0,0,0,-6.111282395535142,-4.893005456884607,-9.603185509396463,0,0,0,0,0,-1.010296314766804,-5.076300131940904,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1148016658681388,0,0,0,0,0,0,0,-10.213625,1.5097715593699608,0,0,-4.882524210931399,-0.6158942793683853,0,0,-6.1000000000000005,-0.353934583727589,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1110785307882451,0,0,0,31.18982434443521,45.62847970447332,55.85415234959628,45.62351681428838,35.730607355176616,39.401319139516886,55.03332582739402,42.624551732014616,33.66238007049175,44.404777217428936,53.812489433277804,44.9977105902189,33.041121515023264,43.93082303972886,51.94804706786056,45.38072325949548,33.11190521223548,35.51993179123028,54.113070668791266,35.24727838054126,30.54563168906552,40.6320583521717,36.2502697462879,44.98673694359942,32.145322479007255,33.85715150658392,50.0442163739879,40.37380808522828,26.793909945958756,37.12047946287932,35.661230192502984,45.87551467222369,35.77840837467044,-6.217661297415074,54.03652017713619,43.88174938531621,34.09739637308539,-11.31445543417989,50.18364150141463,43.410960768803065,35.57571947366663,-5.490601268539793,50.22491309512662,45.437507411929445,33.797793193578,-4.839785179629939,55.32994953963091,42.425481997161796,35.7830328761884,-9.211290592986618,35.17878753318349,46.056283293203684,10.047013568344832,-8.694833693553853,42.4342739206615,44.515589157891256,32.79249486243846,-8.938085695172195,40.64328122340148,44.23179278207003,34.95005554037857,-8.113095235765721,55.91257449063115,35.07232868535159,27.430751021381766,40.02720236994884,49.68078795743591,44.62404335224394,16.27469153110611,37.93582997202884,52.55921557732182,46.618766781201586,12.091529284276396,39.2452199901535,56.52054667164527,46.4718666942099,33.7081444986191,37.68997748977504,49.71441611091024,44.26557327199486,25.71481840081855,37.77890957776971,48.26311883225478,44.530531450168795,17.82563832440899,38.05851635661437,39.051395786839635,43.57043055662903,29.269978348524376,28.39042992300946,56.23618658255551,40.43277657347358,24.541822791734916,33.92974247965409,57.14330687270101,46.789396592215276,34.931048891649844,-15.387614489323505,50.303855565953974,43.359199637652075,17.899918126383284,-11.739789703637282,53.33370965696464,44.12181369447848,20.320829303181316,-11.259593766872264,52.60497407397226,40.44321555053836,30.69865823361035,-9.9531170594195,52.92752672458453,43.217162158208815,30.073302689017233,-13.311039323546925,57.14045684868618,41.63824989879943,22.71883814132388,-14.116039410396894,53.07860458195477,38.54840539847781,30.02935214289002,-13.87692949067372,53.29122695747706,42.26168539424401,25.310385443168872,-40.40490215653487,53.93104979714231,38.61001949913792,36.519675006674746,40.966023688283876,47.085453593001816,44.13658620212269,20.93532140141858,36.92450834181492,53.09541644444524,38.99983196367501,-3.408377413207489,28.904452073314115,53.98258397396163,38.931714111315216,32.60093756864552,32.094930209935875,53.03484909552629,38.04765502254584,34.757824509466474,36.028193593428604,45.10778875200584,38.19831512538553,28.208119312432434,33.964395382899816,39.241396947150704,34.990231396032755,34.49493174530431,30.304246084743905,53.06918503306134,35.24813931641137,23.654881983757868,31.29905619153164,31.844305998921893,37.06651885798412,34.42177156604771,-8.178276237047712,48.754768233460915,39.45341046386889,36.38246231018044,-10.459486138479607,47.44138615865337,37.663330018812744,34.26768788043935,-14.646489761498191,56.097177573684384,35.21773872243496,27.280708097760265,-13.002954418223949,28.135503986072898,35.11338704190066,35.57173818297717,-14.569018876568745,53.464300161983786,43.28416055425985,-1.1527225968500163,-13.182063032420324,48.821930756468824,39.10663145337513,26.78578236550652,-14.735245021517128,51.11431041088015,32.64991949528258,14.698401577712481,-14.49986219096126,52.93739929258969,37.3621629650046,20.711285300375028,36.71508811575276,54.189102032859005,44.65573373476856,24.80593342290492,30.39880405763124,55.24531252000782,35.14429706505411,23.985722167003292,33.14695396415482,53.61202816945714,39.75757094167943,21.83569307323311,31.537090546018792,25.93821302316133,42.51936274167774,-11.393118436120478,31.138860392208535,31.612625338567927,35.62786063608115,28.847026213626865,22.109463196365333,53.19339822673902,32.65814568601041,-0.5948583196928543,27.615654245703276,27.954898627167125,41.96778122154872,19.27966061665434,20.367103317843807,55.27930775236466,28.35117304879779,27.429625582663903,-15.930799543119662,50.97497838219506,33.16909382547749,23.215003261310752,-16.34744396450343,33.03602524488347,28.219272997178006,34.39173779733691,-15.043153072903774,44.677244763819616,37.02154926694784,32.38480023734426,-22.868022152837348,55.425019369854844,25.002694472137676,22.99335024183783,-16.382540096521517,51.44608925988651,26.634277642518335,16.79331694603212,-21.995702898391773,52.00325711600741,20.19177457037456,12.776677036090732,-14.757610748584149,51.439162599542605,42.83757497515629,17.97796555803669,-19.420989739718365,39.02422921614804,23.420815085072242,-17.844923154255248,44.75229623883701,56.82416363291771,42.75499702897958,6.009043819017613,44.994750444790995,52.517316231834755,41.59072898020578,6.811811079422186,42.848049039572075,52.38708021241208,42.19069958854375,-55.87433530020038,40.51421570114609,52.02033786968218,40.60563844489856,-21.182619580432476,41.66868218461507,30.90107882784716,48.209465083862426,-1.7967851873178122,41.029217984757274,32.57033126412167,44.44642762397515,-13.25173073500249,39.56049657986426,27.170588713178304,27.797251476212594,-84.86947625592441,41.22037686402581,6.358567448277009,7.945111390029094,-7.65893106380239,-7.060821512641856,52.45846614337026,41.97042097399896,4.515227343817466,-6.158126430359959,53.68193858186116,28.87455025354859,-16.57012807699696,-4.500820779499155,42.63316064822601,43.854781098803805,-2.496795076014122,-5.056284397045626,53.046582073401,47.18225106156908,-12.861781172632629,-9.523334536833117,42.500408462312144,45.552852279945405,-6.654748480081889,-29.13813699662928,50.89511337361699,8.396965835412246,1.3725006593350821,-10.826225269823619,51.92561474526752,8.944484496584927,-0.83797418094621,-5.101250520156338,53.62078282278861,-0.1,26.50366815824322,36.618191041852825,52.31866710301231,43.7232751952221,-6.042619122418148,-2.2818140150594397,51.11635989901566,45.09817938778921,-0.0769517899828478,8.495842734418726,55.285717211470946,26.14733935525722,-6.8087538518821535,0.15752147209341988,54.94364897678614,12.140204303325206,3.2734236685708,25.88555942154443,50.881479665512074,26.621092073118678,-0.16760383243982346,-1.1971268833590614,44.823011139414746,18.44258317886975,-3.5960713923300585,-0.8562202583387593,5.508106402816936,45.75097346878593,-1.1572454763280695,-1.242901594614674,54.15040492224647,4.659336785686313,-2.692048407179567,-12.294503667837255,54.16831675500056,18.38279279489604,-8.558251285358683,-26.460481065594692,53.525858962048986,8.695623894245768,-1.094395552479728,-20.746497408332363,52.837220257259936,8.211316615496692,-11.65511167575362,-10.220488948412058,52.510305041692305,0,-0.055005626495835624,-9.852656435214097,46.201355485637556,3.4050164583136486,-1.5357098159420954,-62.486951111283844,50.5562868877543,4.4577533338283795,-6.1000000000000005,-4.641728690847943,52.070205249746714,0,-0.07549472022362957,-5.39552098610958,32.31495241057823,0,11.224083827061294,37.345997094280015,45.845519711835955,33.32535122043282,-3.516188001394696,38.53428747631363,45.20402431323224,23.87233297713476,22.02053934231509,36.38740193392174,25.47001283678995,27.470145845861452,-2.412120490240195,9.342164800677653,40.1487371375877,19.55344820740968,-6.622982693708857,29.98638865990155,28.211961621002125,42.72468548390409,-5.091029596760256,36.17038846684225,10.257227049239013,15.228135155914956,-6.758026014806727,34.47998073745167,20.019720342890423,8.422916586551935,-13.544865911412844,39.81608404207983,0,0,-8.952230521528861,-8.00967920891699,52.356275004387506,42.87643522927542,-9.592556656478408,-5.658302508776013,54.968820015053765,8.010804519210573,-14.203466706402146,-9.402553738823729,46.482728193460424,8.131288271871444,-4.224277231836713,-5.1000000000000005,51.889802107268444,0,-3.3688089371492436,-2.1587722161592473,35.11699425518347,6.639209048176879,-5.395951923716871,-5.833528058034718,51.860487367181555,0,-8.109839107265621,-0.9475767885438281,50.79919740027245,0,-1.124906766475179,-8.126913761971496,25.589321279892975,0,-22.817819800773872,21.569401700672437,47.78999883112552,24.013747328341548,-6.607535801190224,-8.715899583443463,45.330554057420166,26.47545080758354,1.82093205030591,0.2954655448445813,46.135441144164346,21.875720501913623,-1.1054244854006277,-1.8150224716632346,53.4920223851396,11.880648697495893,-20.479935838866623,19.098729101533596,0,0,-6.2496472529103,-1.2567249182892326,48.132127795866886,4.689320568449399,-1.0592658643002835,-0.5754459411842348,49.50102196859468,8.56552708187844,-6.1000000000000005,-1.641593205789243,47.655361441600476,4.086501330757068,1.6822519739298123,-44.67598829528609,45.64232607976356,8.055025529996065,-1.1,-10.294813631606532,46.3175691716949,0,-6.1000000000000005,-5.101389188553206,40.76618692842949,0,-1.1095733618772614,-5.1000000000000005,54.440224003963465,0,-6.112613036103663,-26.261624147261504,40.29630054065177,42.11074302770929,-0.9498542799121488,-5.119928757684721,54.44046023845584,0,-10.213625,-5.136277274642651,23.678371948998134,0,-1.1115787092220877,-25.170476789560908,57.73342902807224,0,31.424486239265633,46.339646616776065,2.3894986237444624,43.061516660512645,22.28292865937574,43.82264519148241,1.688788292313563,42.80101198851195,24.42797413702267,47.463099621339445,1.1487759682823586,39.85426076541267,23.688374879990082,40.61610454462292,-1.1067987129989378,43.14292100142006,28.702088457688134,29.47244311380034,1.026426070444124,42.893726334648946,27.2075205506139,42.41256424281509,1.6563400625252604,44.7390663383731,25.01218717440918,32.14876405178422,-1.0740373044812555,43.72018498894626,27.51538748770226,33.98715441177109,0.28833845883356135,45.816565384638025,23.111233479331624,-12.277364679507302,-1.4802305559281668,46.58342273935562,23.693030769425977,-5.467764378777237,2.7831355000598172,44.46663261376171,26.781828040800377,-4.607596902018731,-0.6021394007957108,43.59126894189219,25.107908713848854,-6.261921264674568,-0.24042385652266918,42.59246393015274,14.338613784426446,-10.866406725992027,-3.4497191294520366,41.3758643453486,23.83303702700381,-8.260801326498392,-4.666948755000769,44.60317993195177,25.15408228083787,-7.641891573653378,-2.407446036796868,44.183770968771356,11.52400215900399,-7.006398556707188,-3.272931253550485,41.2531681680925,27.9355622786086,37.938330191729136,-5.519856717293823,44.46787605861109,11.272023479662277,33.53747689699032,0.7299223988515473,46.78189498824293,16.101890383278544,31.148171431744235,0.7377807223515818,34.75106842604611,24.863284281854874,31.82375310133155,-0.11367743858404253,45.10796335741523,24.350995267160847,31.225019166110435,-0.7215515477149591,46.47474967550261,15.556329449234003,23.400419451609142,0.21661828164566482,41.592218643089794,18.11131748354613,21.346886689853832,-0.17254263997864266,42.18917843819446,5.393862949489349,31.069942796584716,-0.6442018447330938,44.46836637653311,29.04992098213213,-12.09343358869525,-0.2816579866737435,42.685567611330775,25.49585177245523,-40.47892339793939,-2.947776663293326,44.54712057457324,14.590134106337636,-18.032480776253642,-1.5351333064224097,45.48889789418245,25.553398552767906,-12.325958755459329,4.2851642375737615,45.564886938716306,27.763884563154924,-21.58820018123342,2.4146210945593007,46.26591970946326,15.282157031601091,-8.302712612386902,-5.976941339260689,46.13034988417428,12.496743007067519,-14.4975506641165,-16.884103407268924,45.522501224506364,-2.6498728613784728,-15.222499949616754,-2.9867878141650226,43.25489008972508,28.708749174604794,33.35485246827765,-1.991575995629272,41.95391609147176,25.377054141712673,30.40157688564779,0.5024399405961096,44.80302459875426,2.648164917418127,25.727016609804203,4.673023159103852,43.07819155192282,26.99272865678276,22.90975171112304,-0.18277093317206627,40.87060045014301,20.999403346886428,25.90177680570524,0.5935132421422301,41.29481479990904,16.9700421854262,22.93394310368311,2.0188726981157825,41.94926851391224,14.052111916965512,20.920257292236915,-1.8514015411325468,44.86311053627051,19.33712184380322,30.383724639355684,-1.9632658261623805,42.32245575875067,17.176925781086748,-22.568283846663437,3.378160066741576,44.88020791039139,17.396415583435918,-15.055347349855538,-2.237928127364641,48.37017830486014,13.651138460923644,-20.460052595660123,2.3637701852362643,40.90685829177371,8.911070147901887,-17.68957563863494,4.536387032091323,42.77579329945188,23.12037385912885,-19.631519756205584,-1.7166855339773879,47.6652223444444,3.1142058801147963,-9.804340022851052,-0.947411890034282,42.78638128643345,8.943189668837695,-21.19266090955228,-1.0762382283086835,41.206301491894784,4.69235923788983,-9.886455590385857,-32.79484297240904,44.629716101204664,24.636735011461248,32.018297792684045,4.908825613394739,45.61189769906729,20.812878130532958,24.991220865563857,-3.812730567929985,44.990024251200786,13.177086130324348,22.521697144676864,0.9655732758341872,42.84581296969654,27.96766474382424,18.026735934724286,-8.150110029182574,43.963529179721064,21.14649137455079,32.028010115224816,-1.9648812548220111,44.88073538094476,21.095677915630564,19.596433880797367,-5.265281918307003,44.46739282286249,2.754632566343605,9.629592063944012,-4.494717226565573,45.52409321868603,10.883999286490374,2.91832624778252,-1.5544370262584608,43.43215701171253,23.34126426909539,-16.815223906605457,-2.5778054985852075,47.703413506600356,17.86232254996911,-19.154988387255507,3.896823656415312,42.938631182363316,13.882212206172092,-18.79538368089094,-4.143920141641332,43.89558558944055,25.953778266538762,-5.1000000000000005,-3.2459597263524476,43.544692225389305,23.277117616904228,-18.89869404112998,0.12326251001724253,42.70168291876578,4.004750421375913,-14.22199295296545,-4.1000000000000005,41.91518071196511,-2.219237507826612,-15.180182962427553,-1.5119871481405613,43.28069583540291,-1.5436227939814755,-9.668052233633407,-5.566425653671444,43.207712435363476,22.723042666120193,43.84094119945449,0.4810235241189432,38.24883912615085,-3.7176999271612834,15.617036717148963,4.7304020788011725,42.02039059672833,-9.742097393459591,43.07500773961782,1.5842034817576318,41.41383134274881,-4.139058371232065,45.053624246407566,0.846309626207263,8.241937420278331,-13.018920699850106,42.807023870006866,0.9056183819972907,8.509781371670051,-17.50691933312278,32.8847490924052,-1.7444265379933874,11.809066667592086,-86.02480914887964,42.3246793468783,-0.012653347386064696,0,-20.009720799937195,42.0653056326652,-0.4837274691727565,45.46956080370678,-59.464135168364066,-6.017552418175549,-2.3173579616964757,44.14561352404855,-1.1,-5.101243575785562,-1.4056809401210801,47.602955847394085,0.4932112187539244,-5.664801652610963,-1.7919715565963066,44.96300153070784,-1.6447048528986858,-47.43995505365728,-3.3217120454848965,41.96167501034077,1.4050550902243362,-9.062204125794478,-5.747643721458487,43.82969058955992,-3.3839159606251714,-1.9795384558247964,-0.6303398041002931,46.58282091900078,-1.122617002147363,-5.1682795633124305,-2.9156571160333136,42.25139570290125,-10.213625,-5.1000000000000005,-0.367788465168718,21.644466839972807,-0.40337946053320284,37.280366441185535,-2.77029377730327,43.82721393968277,-1.1,-1.1812001193108719,-2.4938892074710557,43.91444288893691,-4.400378057538574,1.5761013573269884,-0.8757517110454369,44.60156166035894,-7.094514661346658,-10.344716883623619,-2.2894807229211134,46.07919773803413,-10.672086929157421,1.9603273999926445,0,45.30501181233876,2.1625881377887644,-0.469283289446808,-2.5443596048865427,43.807409410255886,2.077248809624323,7.546306501878917,-0.8049550577055634,0,-11.222341116231647,-1.5157285096506865,-3.9311496066384373,45.432645316315856,-4.362654174502899,-7.126640649521805,-2.7922763445853627,44.27273046776515,11.360759359788453,-5.1000000000000005,-1.3208784787616996,45.276357113238916,-1.1,-5.1057375,-2.4494276939468493,45.1445005612484,-10.213625,-5.1000000000000005,-1.0371416547929382,30.96266313842342,-1.086987398918971,-9.688081880391337,-0.0329773242402365,44.51659330668153,-1.1058862124955684,-5.111594334351226,-0.09483300171752447,24.548533194765383,-1.1,-5.111602828125001,-2.869263398472733,23.789981028253337,3.8936691106565693,0,0,0,-61.243800334317235,36.175188386082624,0.4459271947165131,8.64223470873236,-22.73195916728183,31.628622280057,0,4.221019167239748,-0.30961148507693614,2.2711013080350497,0.06114507532467087,42.499927623438545,-6.106863127771139,0.1443026366481684,-4.106870606539632,43.917980536998755,-7.3625027234177995,0.701363900140803,-4.1068640187500005,43.977636494727506,-1.1,18.258349190806854,-3.7409796183390434,0,-10.213625,-0.4570273820517626,-1.5517389345863426,43.61298644157949,-1.1013580939939018,-0.3610198935739797,-0.15469710765169792,31.623321701773964,-1.1112925976848742,-5.721102415525886,-0.6911413474018618,44.65709156338807,-6.1000000000000005,-5.101250686511123,-2.7281164516121272,40.852416169660984,-1.105626345875513,-5.1000000000000005,-2.7089377118689724,43.25385255195801,-6.105989375784485,-5.101244080492724,-3.0043249722216236,0,1.7681759048672299,-5.1000000000000005,-3.0110974946842006,43.095280910536445,-6.105985284390805,-5.106359735088677,0.4727721312668145,0,-10.213625,-5.101577431960995,-0.529861357659458,24.156609217085098,-6.1000000000000005,0,0,0,-6.215031605562579,32.98624547427144,-2.701097871426805,4.358695082379475,0.6437653259242744,-0.8786748674624153,7.529402982957164,25.05948174914712,-6.111593986983305,-0.018228815922771757,-2.059181557890753,42.63515197438113,-9.787616219519357,-1.1098515877648985,-37.251061405509056,25.029380232397372,-0.4818002433436386,14.696415074245524,0.5935787169613874,0,-5.725000652602225,-0.9652361971573731,-0.4911551963998868,33.77498231556015,-1.6363702950701284,-0.24445183361026218,-4.1000000000000005,41.04916081495887,-10.213625,-0.9932415543179064,-0.1089394285933416,7.963570335607164,-1.1115242248109243,0,0,42.81932207537257,-1.1056146116679557,-5.567407866667275,-0.1569798457358047,44.25376083627712,-8.741838079996246,-5.106087942570922,-0.8034198539968997,20.34595875576742,-1.111609221615978,0,0,4.576285897996113,-7.618999930593432,-2.7166692087091073,-0.14946471354386148,11.955216438167634,0,0,0,0,0,0,0,0,-6.117354754148217,-10.220507024098417,-4.016467668951708,4.604637045799868,33.95827118084397,40.001760855354064,47.34934602918517,42.82837721865596,27.335568888239912,37.2062803156259,49.77499097403991,33.26347380422089,32.41746582495265,39.44603832995753,37.53274618252173,43.34024916568393,30.24366576146548,36.420548987595325,46.022018555967776,35.32121861203132,37.70365735100433,34.18995100060196,47.054545476023186,34.634565707650054,31.066644541159047,37.58887690838731,46.699901377727286,39.14203186855743,28.976024849350754,39.177059628880244,47.70096138541188,31.11193757424315,29.17775372057718,30.95381565641194,42.38981966900584,34.67477405351668,34.252180541265155,-9.575252668826812,43.3633934103004,36.7387165866862,30.782988857368117,-8.1611695479401,47.00118594669752,38.937963853697994,29.625607123818668,-10.637906797829135,47.03913377298002,29.142592231314545,23.186722895545056,-8.02290078621953,49.71107829804215,31.715692104647943,28.83892002110523,-12.909775029597773,48.30030765217456,37.42113916431926,33.519979271942255,-12.460460357883115,46.88540458627815,38.91854528290363,29.692881697213434,-12.299294713029965,28.45899878203108,42.137901295923655,29.69468910498743,-13.765473526473762,42.888417791485594,29.177696440312573,32.74459905368106,34.45438144345956,40.44731436304089,42.68157624517134,25.479770589482886,26.90908394096923,47.8819462186293,28.97967612943868,24.02890717136418,20.9193227279953,49.70422143203615,29.83422357597758,19.07238864396407,22.782632825676288,25.329814607258417,41.456486621412225,23.36046131319205,21.442753166136825,17.826499454396657,35.358333089616735,22.268082822968633,24.96739631403992,44.39898745994953,31.24697356327044,26.93372247235866,26.25016513581263,45.386296317042756,28.7680536803272,19.120208542598142,10.992993112675517,44.7450503724766,23.270184237973268,26.328471780199923,-16.52616724873642,31.50572532856026,42.78971847670195,24.55725323329935,-23.782057100508357,44.385461199621616,36.369636575153606,19.437251559049216,-22.01395322555718,46.29767141283499,20.802935971726136,18.113235413541528,-22.63400967684598,43.7632766693791,28.736848437151817,21.502666314707334,-22.2083230016366,49.14237126391782,28.544632390009543,-16.68626537362765,-24.780635468520696,32.96577347294017,22.701093194245594,25.28371374351551,-11.741092942844142,44.92581095765154,18.220751973146758,-6.365161391567436,-13.854679199247737,46.89087240105168,14.897739641841014,33.04747359656365,33.645193950329734,25.15659747539761,41.640559038224964,34.794074894532926,41.85930365899317,49.49919626467667,30.2901182313085,26.646013327748342,22.75609155948296,49.41204755284191,34.13459058330845,21.723864281835713,24.38555494087494,25.335814837087923,32.50604245885612,24.225488351932803,31.73117909856511,47.01111067504942,32.007317844491574,31.899658834792255,24.88594216402224,49.62503254425958,33.4213512475457,16.224275924829733,23.20558938259012,43.62440310853872,30.775713244972827,7.985023492251306,16.070408963569683,23.7402108337906,29.964849392163213,29.717957343667575,-13.65748940592095,44.16993099391406,36.041775116718746,33.69690202666355,-14.704290759580141,46.97167520896078,39.4595421596696,21.936783870853013,-22.433628509837295,48.12625602936852,28.464832488909718,16.443814127695394,-23.175396915233556,25.292979017029868,41.4339218371119,27.57626932121341,-26.665099796624954,49.31254548903646,29.97500412644063,27.445846098055867,-19.548937639642592,45.53131373304876,30.82224736623818,-17.88750040367985,-27.882893238840097,43.382737890474694,22.85834678755077,0.9572012959540577,-13.053140671608961,43.05756422909254,12.344432810467048,-14.120925375816125,22.555157125352867,23.350805282025433,30.035291292195716,15.762271482147215,23.86496060331536,48.14158856651364,28.59592871313971,8.68074865311969,32.586154182074296,44.409420113838095,25.142879712515924,19.82405234033397,13.329427927204524,35.54904112374673,22.087027451264102,21.46122895861356,25.497512842789327,48.5126407075818,30.895898148013988,22.507687685924527,18.732155356478614,41.96756332059698,24.129563228899187,17.680841347807448,11.482129202656793,41.91471367718845,29.43261828247833,3.488858661229564,3.1707586609439367,43.23308088964856,0.516655157692119,21.023936653452218,-17.317824969802544,46.47383593860473,18.61999480770787,28.629404604395017,-15.90885804243782,42.3431103717132,23.156807910556125,36.1251638943685,-19.885178182872316,46.28344160624389,27.052072246215847,33.02953098128201,-14.595293271977695,48.44911529494997,40.27479331296689,13.126550697136592,-32.91857667195183,44.273684634474954,22.15277021034254,2.702845981409024,-9.419163784086061,42.501191139815234,8.477957873804485,4.322582202273647,-15.740247544994219,43.098807629401136,10.291170238645602,2.833820709700641,-12.242461337863906,43.60367527148183,9.247616786164555,-31.431765986043697,41.38249165809993,45.70029554392189,39.3417501504234,30.405498105159776,27.24058822487325,45.47107999761398,16.95143176699507,1.6685630951815469,23.41560570577305,45.271008661317694,24.134687035972767,-6.1000000000000005,42.050631984036514,12.504119387081593,4.229489979702508,-42.20093821589518,38.56024215906524,26.75082881395646,26.790102489839423,-10.54510239111612,39.79832376055372,16.45741990699798,4.348471116964762,-3.8183346592457985,33.17872793326712,4.457796825726187,0,-2.5970802053427247,21.393034071657958,8.18643843686898,0,6.354035264003842,-7.556847588052689,45.13685901621845,31.847249472394147,-41.19795504853854,-4.848432447623854,48.57538886388219,6.576556022969536,-9.34870909172102,-3.4307355781191005,46.79391110204483,0,-15.279998585414651,-6.106249526069933,44.66749967541677,4.237834138605833,-1.1058551099769776,-5.144991686394981,27.13409724022485,16.190120544995377,1.4554762720527505,-4.5729870783022415,46.64417160505863,4.209764260340317,-3.3765733601973773,-4.664879311644969,46.96333835117192,0,-1.1068165416716857,-4.300413869865684,44.73076853057651,0,-0.40787096317530436,37.73614955625817,17.446755655630433,36.17888759302325,-6.11621632392105,-2.5088502157759622,41.65941028678171,11.799725660044842,-0.939451813347473,-0.11782843294897416,42.92006646358797,6.806494399323672,-10.213625,-0.561365558034779,44.45715054748289,32.887902389410975,4.480327737197218,4.94266147029851,31.723039846551817,6.817691700257013,-1.2123821498490956,-0.4914140371121125,44.65127104964875,0,-1.111476371459682,-0.32177768748555097,44.12135085149096,8.427166978237263,-1.1068902959075526,-1.0115114052074832,43.191387538213256,0,-8.678310853063412,-5.322560846474848,33.940520233314224,0,-1.111788584705306,-5.1088098221319385,33.8183603533965,0,-1.1,-5.1000000000000005,41.91588244689733,0,-6.040710460299367,-5.239336877722568,26.592435302500114,0,1.9297621773101774,0,0,40.6160534912028,-1.1212353795642478,-5.101472155122909,31.31412859885887,0,-1.4860408099937186,-5.202096178010864,39.432298033954865,0,0,0,49.53109527782337,0,13.557135313432973,37.14641513562991,27.416217425295834,27.080125694311693,-63.809847756635946,7.073243861046262,43.67706435685552,8.647588077034886,1.176908112083721,5.723742996388323,15.45861430639095,36.16968846260821,0.7658324619120824,26.568469783725728,0,0,6.627696040941617,14.62631333491249,3.46243276280821,44.886861807720514,-2.564413986273632,-0.022277868369357634,39.67716127458024,8.441514087298373,-7.725915842744331,27.243902143498236,0,0,-0.29899891757170244,-0.1,42.99292185434586,0,-7.039594591745212,-10.485580617618215,41.115713977009534,7.099491304647466,-3.5385595274346344,-5.10698916223165,44.58701264892157,0,-6.193691206451214,-3.426838087060095,39.79428298245799,4.247333277251693,-1.1059807815944682,-3.707092664693012,31.648531487198582,0,-7.611230147099576,-5.1000000000000005,32.50955249082486,4.592495767824335,-102.19365298937947,-3.9088354535244947,24.093517237384525,0,-10.213625,-11.145398013537518,33.95021219017988,0,-0.6823324498078662,0,0,0,0.40314657646717356,14.564036484614206,42.974743781325344,15.743596132205509,-2.538302604196102,-4.759713467069214,21.021923577496505,4.3957149933668695,-1.105976360419629,-1.1533312712477952,44.513323422154315,0,-0.9759877593800147,-0.23493282866732443,42.94431069941861,0,-7.138649324415637,9.890162329319582,43.412991823083615,0,-1.5698078920959668,-0.16415372313933535,45.34587658159673,0,-0.4403199434540013,6.865423805965372,0,0,-10.213625,-0.1068872921875,34.828279155789474,0,-10.219155303009215,-4.9158248970794745,39.890177691298746,0,-0.3580027417521945,-5.117041164715849,33.451663829531746,0,-1.7772440595151133,-4.8132855652626425,21.03688721667282,0,0,0,0,0,-10.213625,-9.705972481970193,30.919124425813056,0,-5.4471747055591235,-5.986313253784842,5.755325339646916,0,-1.1149516159691593,-5.1000000000000005,12.55614965504131,0,-6.139835673344095,-18.710810620495305,12.171713947481287,0,20.457002902964348,39.80925827545817,-5.499224892073704,37.97669964680014,25.48749966015055,31.477145746091445,-4.91995033466068,39.33820083122685,24.69078258530254,29.62681605248749,-7.395618353694705,28.357202273555814,21.662409117917782,21.164657403954966,-4.454625592282209,43.320873636822,29.017132933057315,26.95847111197273,-6.642336360671199,42.39576992730683,15.824274758962787,21.2713286512076,-6.792898999666243,42.66011411240758,17.79911106643992,26.10195958884386,-6.468777851388349,29.016277391388392,12.649378556731623,19.60518931978374,-20.918937445564346,42.644537513684185,6.4115117286247845,-12.49304543000027,-3.4517548004768384,13.21985975776436,7.266067258007395,-7.745540998766208,-5.1519231737456455,13.835325300912535,20.31196759592994,-7.339723254939422,-4.535130664113064,37.61122123810466,21.118928575880506,-9.707003474643678,-8.717458165136332,40.23199951610297,19.094273119510966,-24.457157741861707,-3.9888889140473376,37.11066251632483,13.68923310274035,-13.961223678508613,-4.296414614767334,39.769374466246695,12.68818019571797,-7.866057406822208,-6.091710772440456,12.015883463971575,9.253556989143362,-16.648981718541005,-6.62161908892273,43.07502716561358,21.594288661071733,33.24717202203464,-7.65399778516597,42.636124624943314,8.41974022627494,14.062372820558714,-3.891148177360774,12.985430062349808,20.38241155761024,23.131152477841006,-8.464358831905743,41.45098440899606,6.116454597529257,16.520434343471447,-6.685005080504716,43.99572294109799,26.81403060605042,26.266310943369717,-1.3780126473705976,45.59749172362831,-38.41603534850101,15.956959650151907,-4.811041398691157,46.28745903099694,14.824703247065784,16.320292178071334,-6.405450448652662,40.95521137188186,-0.6542648305318006,2.727516921913781,-4.92048001082723,45.26886189897584,13.868690289575454,-15.448513216376373,-9.213368373938332,40.52068959253748,24.487819594160914,-21.185662982220304,-6.0851560759283165,43.804966626561345,13.617934308961368,-18.694855197163285,-8.121199677649907,43.328401833870615,4.102740332832113,-11.658374379009949,-4.631494549774984,42.72995846698704,3.0134465254838014,-20.4545450123246,-7.093062193315874,40.516577603036275,2.500110567673878,-9.69040113306497,-5.32773443463528,42.36414225227467,6.969697497377274,-29.284924595779597,-9.15935840796113,44.54243731201901,-6.102630606061872,0,-5.30006768918357,43.518615532596115,27.811335263235296,21.736366194827006,-6.080611958160771,45.278963661570856,13.292860664441445,18.19183850661708,-10.715101529131012,32.594231890203766,8.362837484239742,18.847268053428085,-11.551539674181424,43.3159044956328,18.02215027027775,18.534668809896115,-6.482188097901151,30.027337304565794,-2.574243823821432,17.334883212669958,-8.199143934952687,39.37797072324373,15.140429617212167,16.829311557141484,-3.5940920945369514,37.74971350310429,19.893885619768717,19.269683508859874,-23.472095451128155,42.51455493096658,6.232311988231495,6.475097000656587,-6.527220996610068,41.49625391964907,15.056361477718662,-21.384963210786573,-5.16457966904672,40.087674270496485,11.248747294039482,-11.154740558155588,-4.4114411652208485,45.42015519008073,28.58691025980229,-16.414457035623293,-3.236183408064414,44.3521833746273,-6.0325336536813925,-9.549089515587685,-8.141401462494029,40.06050347979143,7.8111406477990935,-17.578603664443843,-9.086301020759894,45.28489206132979,1.473406329954022,-12.805540274923066,-4.100659255725294,44.39925317668764,-1.923256376151345,-11.894125221966744,-4.239517131751627,44.91488534854836,-1.9836344462627205,-51.10038494807334,-3.9012536844247614,36.64385769573284,32.21082843091627,24.909216035242594,-3.7190405159608706,41.71830394238621,10.068844764304341,16.716174349800223,-0.5397489914462195,43.16695521724253,18.01218670040107,9.660273540310449,-11.047994530876162,44.609395139512486,-7.322742470486945,6.907203392135754,-3.9355665656949177,34.05121817070487,5.0353308506993795,15.689052687176565,-12.142001565354024,45.133966043803056,-1.8861364439707708,3.4912564283915675,-4.113858051456184,44.10407354636535,-3.8850450655509765,7.670367804688789,-8.880600873038151,42.96059335811122,-0.07866393874979011,1.6727119074822936,-4.101206406829894,44.87842381904209,11.320808737732293,-19.38514924915815,-6.853585089580572,38.98775287739828,2.057111731285266,-5.1000000000000005,-4.094565783505436,41.58150981926095,15.257463687462172,-11.664649709327907,-3.8779961160172594,44.525752000665506,-2.3466873464396323,-5.12665546829596,-7.724159937761355,42.1046306433955,6.133706399094631,-15.315765115138317,-4.120967885749244,40.601944312211856,-2.1090524710193392,-5.1000000000000005,-4.1115787815544325,10.07863592285343,-0.04945123581697096,-5.100544056595434,-0.4152714830509588,45.07844845022196,1.1350247895004704,-5.157749428521173,-10.805054532818634,16.584975227822504,-15.356158847224352,15.532065088347771,-4.527617849690618,46.875382153557624,-5.575384028178546,4.551744244308046,-3.2284089120968846,42.82898896607601,-6.449584159317006,7.299367084106758,-3.626932199610491,41.51672264362703,-1.1,38.67959450160929,-0.11268973461247783,0,4.846854560913065,34.10373818793933,-0.7655029684971489,20.042035542297093,-10.213625,1.0714892456415668,-0.3010002293813521,39.157204825447664,-1.1199147149267987,28.23737918522659,0,3.429939819012549,-0.16038370593158113,9.807930793327412,0,0,-10.636968748325085,-5.4301411215318,-1.8881484909861515,38.518812649124364,-1.1,-6.0124829071803445,-1.5920843256221704,39.87442612183757,-6.106977357515147,-3.9383852460931403,-17.862854531486963,44.68513955859402,-2.110592903112604,-3.6310827846475657,-0.20165034866345266,28.32642283905887,-10.213625,-4.829198229472975,-0.5849556317274278,38.98495330784925,-1.1077028511798328,-5.101573776910182,-0.18714528100755176,37.74948012626394,-3.840064327284628,-3.566684060588733,-0.1484065149296349,8.634421783310534,-1.1054941279609793,-5.1000000000000005,-0.5278976684614612,10.605284683772187,3.383788118862713,35.88328979784242,-0.5284875288875992,0,-1.1,-0.1775413493311392,-0.18688096626369557,42.68380223076073,-11.412471945019105,-0.7483824392375269,-1.461271823229658,43.728614783541175,-1.1,-0.7908909903702802,-0.3112971031464049,43.5063761344952,-3.474335278053987,-0.12807002452110852,-3.6372391406390747,41.575133930673935,-1.1115905454190986,-0.9431233303194372,-4.111404112968541,22.97626136370234,-3.2555690350887523,-0.6069508538255292,-2.5425600182828165,22.224885650744135,-1.105973411388966,-1.1050336903249998,-3.791532701354858,14.538332677877454,1.41934166903761,-5.101357638319965,-3.7481033622252244,37.65917381494869,-7.921062017549082,-5.119325536052873,-1.683031679287285,28.346928422339275,-0.8464511514197925,-9.523608480891067,-2.2744900603859572,28.615998100446312,-0.4244282814211606,-5.324128515290032,-0.20465242256164373,14.876381809453049,-2.087377432175131,-34.44387146898903,-3.4299078113300117,8.194599385108301,-1.1059122716305783,-5.209426153113775,-1.6246042589476037,4.14180245382926,-1.105169612644621,-51.011731737418785,-4.10659492303301,14.915858620783839,0,0,0,0,-15.437147019640456,3.596426662165142,-6.943017456065733,42.65244696550747,-0.9422661284435501,-0.1,-1.933684599936163,42.329150962598085,-10.213625,2.6290071058007274,-4.168702205542108,41.790505567717624,-0.9669697229976821,3.3127459950720506,0,0,-6.101256866713189,29.33292181928686,-4.352965817480286,4.198104860564791,-2.716811623273733,0,0,24.457258957544013,-7.021261034302244,11.189149997874217,0,0,-1.449578009097344,0,0,0,-6.1000000000000005,-5.950689575105237,-3.4365202500529173,43.06390114174389,-7.379605730740395,-4.50477536754536,-1.1752627054362155,14.669107999422653,-3.7642977618060685,-48.37426674649915,-5.8289731918244545,11.294824828999884,0,0,0,0,-9.639681778985222,-7.338787393238694,-0.21620179405915893,21.688697482829472,-1.867250533184209,-5.1000000000000005,-0.3250556925907333,0,-10.213625,-5.111875324958481,-2.335553603749781,5.134483509137964,-6.1000000000000005,-5.1000000000000005,-3.5350635964074657,0,-6.101290545824858,31.758912052876585,-3.4035119235631117,4.306365971172206,-0.6055645680990783,-0.8207403627347469,-3.815689725756794,36.622350340767625,-1.04472660970572,-0.27817561718925465,-0.2152495622321375,8.625447788980686,-5.251672188747235,-1.0513806628359201,-2.8532895051103973,18.07909714530633,1.2239838030225272,-0.1005657141335889,-2.3519522896060012,23.341821841429837,-6.125132898294578,-0.7587297052028694,-2.045647216113904,0,-6.048960267239697,-0.11764407536023054,-0.19243691398512155,4.343647279597096,0,0,0,0,4.702135042898409,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4833245832889276,0,-2.133576231015932,-5.078082588312757,-1.2213395518325942,0,2.6937871646040534,0,0,0,0,-5.107093023897846,0,0,-1.5444162286626744,-10.215362468257247,-4.1000000000000005,3.9733509351175407,36.14010320032445,47.39441063984969,54.701224362009334,-6.384201212669695,34.766201066167156,43.84212067445209,52.881420940217765,-7.5032896507408955,36.003987584423456,44.588636511592064,54.77418096475772,-6.720435116148091,35.28195407528251,42.591392743025345,55.43340190539565,-11.729098165284453,36.18634120959261,40.121950188906624,54.75430576901997,-7.799771004611082,28.540709589229394,35.41899458712448,44.24256126774613,-7.260390204758443,30.718932727619922,38.88203472504457,47.82610223538542,-7.180773693901285,21.411517644435328,33.921935430760854,52.62275810629974,-7.656785787581777,35.91247708189278,-9.960184851350423,57.03094958456228,-10.17224609203999,38.184451916158,-7.200133869063176,41.12064755382446,-9.925512515247679,38.745417775939806,-6.466857505631079,53.967956183210795,-11.346895107041915,36.487537045807585,-6.917690044785914,54.46774028268176,-11.604784226403442,31.275315540189826,-13.744566557125392,50.84303158832493,-12.427398097533594,35.58033614405415,-10.23375070681557,56.13996840861378,-10.084957202915072,23.785434219400674,-13.447933254492499,49.13870784408321,-11.581190816350318,29.352788048297413,-11.052327135021903,47.524741223564135,-12.330251087393783,30.317190421099156,38.814352482066994,50.36485407832153,-9.69401132041645,23.749397534517087,38.72864862461142,48.17937285915488,-9.74978054728251,22.283953091871922,37.28759731502698,52.47625475925278,-11.172763926406251,31.829444052190187,37.138417939789704,53.2467901705287,-5.180437302999717,28.78189254021541,37.383870764877244,49.33934353559495,-9.691052608357433,20.530683335769584,34.74839427854979,54.83576911594435,-9.699922282286169,27.132103537032464,37.19912266583473,54.705563630270895,-10.144404753375579,8.293360185816969,22.430243759608476,56.202480456254094,-9.179036735439508,32.68644451900888,-12.53605872940974,52.710567452018374,-13.136949739227063,32.51235858055262,-12.522587771436248,54.986221616881984,-12.749572086825502,32.251933055238254,-14.159644536736401,47.19044960435737,-13.162699453107841,33.382712761342056,-14.857670462753129,56.076218826209086,-11.250342510074127,32.308964309390184,-19.69333388939843,54.77431122850632,-14.330130262276425,17.815262024907923,-19.723498768147174,46.22322944855815,-5.01921436484899,24.460532325041736,-17.083119815619995,53.771358247226814,-12.762067623710356,13.305812780048413,-14.552227160687908,52.30738486981191,-13.043820652304637,36.82452996228801,39.52733230281097,45.433545327160694,-8.00647367362263,34.953015664359604,36.39610842195395,43.31647040703987,-10.265942617850639,34.03027742983517,27.862536691753675,51.19341383153832,-5.238842694705151,16.169001252649515,29.879019077489694,54.006797968675684,-12.770322517532458,31.234163293476037,32.64634618668698,54.07567205256217,-14.015861942983179,32.06944117780219,28.590696721261505,44.87484925962261,-10.718196969975565,16.931742642690867,23.750902271554914,51.100326273151715,-8.687005679668111,14.44095160256706,38.72432736624411,45.59737845625299,-4.02392982490233,15.674920109427624,-12.283088233257834,49.38582842829069,-12.855860100777472,35.39989542324644,-10.89707951652824,50.38802422729113,-13.572495143448636,30.200276962833875,-15.709383785482297,55.08757219720586,-13.923231322091434,23.881459424232148,-11.947033723686726,53.23144527880825,-11.455379784153182,34.13438034013462,-16.750661122879535,37.56280033552145,-13.089570708309163,23.118910956824728,-16.893593042753334,51.901281190166024,-12.603627771720925,25.040593759439172,-21.995577317030058,53.537756535263085,-11.597824196562605,8.112120248716588,-8.08930661742152,54.74378798672174,-13.389977439149282,22.380400541013454,33.377689772233325,54.0244034381902,-13.418415912422766,31.32405979604268,23.467770772369928,45.4392621849244,-12.877044994974684,23.617434290529346,25.803592867570057,48.41619544898742,-12.242312815996765,13.218112474206759,31.429286783554076,56.59779919084824,-16.161619080295985,22.197153988495025,31.489827373540123,54.55295185073026,-7.435305428923386,20.792635682400896,30.022283448647592,54.37368605302774,-8.263166983335633,18.05233366549335,23.398311518951335,48.09686320000254,-9.978736564828516,11.635317433243397,12.716389585130477,52.343670623053065,-5.190082187027134,31.530685455701104,-16.151406136062143,45.97695801203062,-14.17056946110938,35.12289461143077,-30.10394052745234,52.75918807213595,-18.022614277057357,22.921231883019658,-16.755696126879556,49.655113724634404,-29.430825643837892,5.56996291056673,-8.6859254129597,50.509611388681925,-4.3843087085528945,32.28212980633644,-36.45014718724631,55.61427254296652,-9.545193958767364,13.347150293867184,-13.841868349279187,52.32801432128711,-5.186233008917284,5.2556217802936995,-9.487944157867117,32.556811243453666,-1.1158732518184664,3.5085344932851688,-12.523155825907391,48.805592594764555,-9.00556402498052,22.131930814947705,45.421682201894484,43.34856447511734,-5.108387396281302,-11.587533893967798,45.9541628675317,30.594482955784592,-1.4875698643774333,-2.0727884794971034,42.988637118749345,54.26660515225662,-2.1297697859233766,6.44510265367777,38.69382381576558,0,-0.29591692467380354,-18.400124467207274,38.9931922580752,30.51574882858342,-4.74379207288899,4.539594511717523,44.17809006971458,5.431993581225455,-1.1354302931110523,25.563718181489268,40.55140715929055,0,-2.61134897253851,-1.110527046875,42.825080047282356,0,-1.8417905437810542,-16.44564372974865,-11.194040999190024,56.54049636736667,-3.865787378981004,-11.978568401469742,-6.699532336131363,50.59276579699004,-3.781480204733011,-6.689251330782366,-7.679695211331023,54.84397531267906,-0.9153872741995223,-1.1117558354600818,-4.957933389935883,53.97434118055627,-0.533239419946581,-3.0356756036009465,-7.36635825120512,52.02628276066271,-3.7495988978380166,-7.195650950538177,-4.582675861223957,51.56775517456677,0,-2.0939043259610983,-5.1000000000000005,57.6147383926641,0,-7.751065020163652,-4.843195896136773,40.20394954663186,-0.7615335037153619,-13.549540121930221,20.217943452750873,48.33290685719394,-3.221665123684107,-5.083198280354795,0.19281666756900523,46.37260435690533,-1.1627121001467962,-6.220006465750516,-1.9282001179199142,52.807797872165494,-0.7396355965174165,-1.046907834870346,-0.38034549818737573,54.445374196534175,-4.333185808730892,-9.682240925886006,4.453837491277528,47.74303144805519,-8.07680693997901,-12.998420664402623,-1.7267378774729591,54.33756418042716,-5.476684499393345,-1.1011262480109167,-0.1267387832383828,51.3784379605485,0,-1.1,-12.703503292963877,51.41370022504472,-0.5185154873822562,-8.441127788277797,-5.371705349030366,54.12908677907316,0,-3.249272640058866,-53.40655919698777,55.22768953848622,-2.352437635494895,-1.1,-4.9881159730059945,54.49561283176908,0,-1.563125211614756,-10.215383515863067,54.53240629141496,-0.6277374720357671,-1.3614569060910675,-8.23275139596147,51.959498743457345,0,-10.213625,-10.145127977019026,48.36534291979861,0,-1.3028353190346469,-9.657275483683248,33.080219909482494,0,-1.1117538233694588,-5.218401080654149,25.802259874465626,-5.101243662636399,7.229586883289116,21.2445807963639,38.860235738707175,-6.653440109003048,-11.2692971284511,36.784467744886584,10.966622116291056,-0.7297743811865467,-2.9570754095778744,30.087934716927606,11.091782829224258,0,-8.440388857894654,30.55105138305328,5.697027707511808,0,-14.187626554818973,-0.1,49.25760237082052,-2.8916674935936246,-2.7912246013027797,34.99368451703346,0,-2.1547271926815745,-12.186083428195143,1.6948893946104708,47.711091854316315,-5.164033726365099,-8.119554418135289,23.63407232484148,0,0,-18.51322256538069,-8.716238399498707,49.95964876885966,-2.5444573442284177,-1.1058747921875,-5.101249556978686,48.82523797127821,0,-10.979814330732184,-6.766626492007941,51.17331135888221,0,-1.1114122431634237,-5.1000000000000005,57.008323915489775,-5.1015510817326835,-1.8906956638089922,-5.106869216259591,56.30314413022976,-0.5112709316176961,-1.5997904231781892,-5.1000000000000005,48.194816985623625,0,-2.0719125702717456,-5.0827743470653015,23.493203215321643,0,-1.6436801404312171,-3.1611488416919675,5.438692937384178,0,-8.040564761786925,2.7707709470764583,57.44727936994251,0,-4.114272584986732,0,51.837813054840524,0,-6.7051198456533765,-0.14116894904123242,49.6560898235903,-6.088645651772166,-1.1,-1.0160924871330614,43.047982762684526,0,-1.5186693066847887,-1.4721146999022248,52.18028285989036,-1.1373498337861818,-1.138537289305537,-0.39257614814046166,42.99564792110416,0,-9.823356499825367,-11.459637155163316,28.748728981416832,0,-0.9510494950447246,-0.21144517187445913,47.547090681831506,0,-11.761045092707267,-4.819267127841038,44.606220223860014,-9.178166895928868,-1.1109926484745374,-5.5659528128877955,55.324058147265426,-1.3926952268760573,-1.1145996311983972,-5.105879673788255,48.35641468723203,0,-1.1058754103995765,-5.1012427217973375,9.335856418611886,0,-1.939532821572595,-3.9375096615180354,27.94351693238574,0,-1.1838033286923644,-5.55645315240065,14.391204465445057,0,-1.3515465916392781,-4.058370306139211,7.838774892925027,0,-1.1172113190190878,0,28.50879643604121,0,25.605213818825284,45.79481309033948,3.6464168033175586,-8.7761629140325,14.312049264280544,43.27793518086593,2.9456525760655783,-10.320662252820144,26.564975155481022,47.76098606815682,0.15952251093203274,-9.167785129603772,15.782018805202958,46.858783606081076,3.225264518937744,-3.3309009704702457,25.402033152125377,41.517224055732655,-2.3272261234841514,-8.58288649016762,21.572288780844243,44.920191013929994,0.10198852608397094,-7.76448614193266,22.663639716050145,43.00026320948092,-4.699048834085087,-7.721010126004365,6.090405344792623,44.58869094344411,-1.2351786722533058,-2.45195702870918,-11.083907134178151,-8.735290574143129,1.6923045105438173,-6.919406921944535,-9.59326941118602,-10.897593506509304,-6.263030958818043,-5.741470502762071,-7.883274832687846,-8.251553287452216,-0.03622465329477109,-7.406609134681039,-8.12349678319661,-9.748574395678808,-11.982319825537992,-5.159132320511344,-12.021842157546144,-16.2295762706732,0.792708720363536,-5.615864619188017,-11.950442002001305,-10.825021803146372,-0.36540450200966235,-8.44392508519207,-9.016631333292565,-7.894632727966185,-6.425618581483974,-5.516224545811769,-11.324106707127843,-46.142868324910886,-9.553758257051472,-4.504826818621799,18.134699290129184,38.69439383366746,1.928833170554214,-4.711323991060896,-7.73337316876814,-5.523526992701351,-0.414831159168368,-6.269977901100185,-6.290461740911082,-3.425170316870456,5.118316618281572,-4.320548325626656,-8.247002341123238,-5.83523380513282,1.3408312532277764,-9.346561042597834,-10.116760543583077,18.71713964507597,-2.334518587648969,-6.080248962546886,-8.526635804659014,-8.356344015233805,-0.17326444396393043,-9.356482178805308,-12.02498302050518,-8.755382397733511,-8.848500024712642,-7.333928055232175,-49.54184638757377,-11.794836174269406,-13.122525227361383,-4.007443139255074,-5.675759148629533,-14.954504692376172,-1.7396575148964029,-10.936822398085342,-9.989772613866633,-36.196579756971026,2.663290765598599,-9.661946993671844,-19.14464606790676,-26.05814504333388,4.62755239494067,-13.432025989162197,-7.648880115302312,-51.08011180179244,4.06775886559404,-8.314321088042504,-10.751641392359126,-14.56915806298866,2.8621059770355166,-11.787041254667313,-8.172609556825979,-51.159749924013404,-1.696869848529462,-7.976190030813026,-10.893345612762417,-18.43845494356593,-21.926104961309875,-7.843240141806907,-9.777852709740298,-9.789482768730567,-26.932004971227318,-7.904038056148868,17.124285334855465,37.90147552477867,-12.228899878245135,-13.471904768428125,7.699053376605839,9.8587607624263,-0.6252931243176738,-15.33241456399674,-1.7518640314482186,7.040650908615716,-2.833933009117527,-32.78943851104948,-2.5475755829409437,2.050256891952502,-5.645503930903298,-17.81758466282135,-2.9080298722050024,11.714144417080158,2.3681838194260796,-5.799987523560566,4.165841219130966,30.295239949268566,-8.655003410403229,-21.221835600065596,-4.970401027999815,18.242021432876758,4.228293531174526,-20.490519038413865,-4.571374088783637,-1.3921953908583378,1.2558827261662455,-42.59692836351172,-15.49806421166047,-17.446473819215008,-15.165594568051173,-4.441713768301364,-10.289256685063144,-12.73723025028672,1.3970776887986753,-25.46665138360145,-7.644869236421149,-15.30874497208832,3.771750589637482,-9.577795613188798,-7.888760316599073,-16.770919250676453,2.6730290126111873,-5.27139232463495,-9.770351751147814,-42.56529482443257,0.3113693429778614,-10.731444621120163,-48.77840250743281,-14.876306883290736,-12.011005753546883,-5.154532706220436,-12.209022008696945,-9.64052278637108,-9.179133808339456,-6.018455663486236,-7.315608938059931,-9.738201128006706,0.03248783816134626,-36.869311478615124,6.567659669941263,26.029460270029656,-6.20539322934198,-7.117419553280687,-14.682578695859897,-11.500858982807316,-1.175854226041627,-15.216874926594876,-11.9566605966933,-5.129723365367887,2.6442350383686257,-13.40335418448906,-20.279826148377,-12.406564286308837,-3.9769443300847382,-13.747349586245605,1.7918786912516902,19.312343338154147,-17.310199951257065,-7.413648456897093,-11.827485827902201,-9.850703822823238,-2.5931874007542346,-12.710751467861305,-55.05599119861494,-8.347161172094893,-2.348148324084463,-13.037234804245424,-26.706477623043288,-10.796493275456132,-4.261935702914809,-13.115389846042149,-16.3855914538573,-16.062951818156733,-0.37393122449376015,-19.040833357552636,-12.175593082366156,-9.728705350151376,1.2501244188099152,-10.613444966944204,-54.168402634034905,-13.842676839453052,0.25649167600230205,-18.78232379620903,-9.464343858113011,-9.7121996966896,-2.5559158785510094,-10.723952320062057,-9.179479302298766,-13.72851336829443,3.7975839145385617,-10.949401422372716,-0.6986480789496078,-5.1000000000000005,4.377862812111062,-5.1000000000000005,-4.217717824516442,-5.104613972203249,-0.8572118423007844,-8.462742130972597,-11.57189563176432,-26.96552634699995,-15.982601097760625,-10.96995586072341,-21.696133725574583,44.44012749680184,-2.8414148800165213,-5.074392287174936,0.3234385663029433,40.56700817762251,0,-1.8721253220902316,-6.216949815276321,36.411623391598205,0.07397581842537898,-0.8556576252738843,-10.213625,37.760094911265455,0,0,-7.269114226743966,40.03180281439233,1.9430648250189675,-1.4047787531737044,-9.504890332170007,40.320351524267345,-0.3964497220322429,0,-1.1115012920947627,41.178115685827066,0,0,-10.213625,43.524195137825096,0,0,-14.578802263035115,-5.671445047870525,4.06730519538505,-9.179845256187502,-18.25791231380731,-5.182488471041438,1.4664355849408266,-6.893060414287941,-4.171058130345223,-8.16699923229207,0.4818687425590693,-5.307621602552036,-2.111009237092973,-5.1000000000000005,1.0674938219347183,-1.8292267569080787,-3.0039986798861036,-5.950854239583452,-2.010924860499683,-3.044524692809266,-12.881736613167831,-5.366470382321543,-18.26901648631825,-3.3572174742007457,-2.7454959301075568,-4.4844799118638194,0.25868002301222115,-15.505209314802242,-2.381740796091612,-4.892104784532869,-1.3404345096813086,-1.1913700314749458,-10.213625,37.6314905997723,-2.762448617192886,-8.197898424298812,-10.381257463401798,-4.419121983152832,1.0769212778576085,-4.463594160467312,-1.1,22.210462880931875,-2.972568826471615,-4.152943314004786,-1.0776338862476837,-4.33747785083964,5.65023376078344,-3.2305568309796264,-10.128438760395007,19.06738002596453,0,-0.7360255591477881,-1.1271092534885172,-1.1946181449386772,0.1314723373391662,-0.9648679781286212,-10.214295953119958,-1.9942950476115826,0.080597825331086,-3.148760577267119,-0.7781706203129751,-0.21579648888472944,0.33436126803179295,-0.8043808844996733,-7.095748821216749,-5.888387555634988,-0.13381188768371866,-4.653220399761954,-3.25940348841411,-5.112711974635373,-0.6291452073342305,-6.697557109678542,-7.105489652427519,-5.1000000000000005,-2.4505954089973794,-3.70404686630179,-1.1110881987463384,-5.106987712890639,-0.2736344686361662,-3.8378826820014953,-10.213625,-5.1000000000000005,0.1427742075754072,-1.3360943077095457,-7.1010298000805365,-51.172278281043184,-1.0723455530044577,-2.2016150851265026,-0.9575431945243195,-3.67250469560255,0,0,-1.109821203663074,-5.107075913392415,0,0,-7.5562230375345365,18.223129892838188,0.4313519786437411,-4.52298852546984,-1.3307709745532592,32.1314400549344,0,0,-1.0727332898500295,8.271060229917767,0,-1.0220539609281651,-1.1113863199397593,-0.1,1.100513459473455,0,-6.111565176437633,21.34073596744768,-0.025896297774339418,0,-0.739425936069606,14.180517433336737,0,0,-7.691004788288842,7.751636442899722,0,0,1.7026795651457687,0,0,0,-20.73959799462601,-9.051171119688115,-1.5915161252823105,-9.701373859504484,-1.1075684444115699,-3.419033747597429,0.8891035284376598,0,-1.1116776582212233,-52.702342073217594,0.5827815372656939,0,-1.1643289515254018,-5.101313944836772,0,0,-1.7362169687838447,-5.091601825021129,-1.3488782443380005,-1.4861640474643822,-10.213625,-1.5829048530202536,0,0,-0.5305480571565556,-5.101437922341102,0,0,-1.1110968468186897,-5.1000000000000005,0.47373954436454685,0,-16.172242415655727,24.161200152494878,-0.6950794169471642,0,-2.2481377246804746,-1.6630979972691842,-3.011446820514206,-1.9581590391547044,-1.1110426225112888,30.098819075417243,-4.11281123941978,-4.658959690632849,-10.213625,-3.121699792244618,-31.003323837043922,-4.262007075023059,-0.3919976300717088,10.428557904574756,0,0,-20.35107202046818,-3.3874155296298833,-0.8408226026974371,-5.1000000000000005,-19.976983650514107,0.020899721860712872,0,-5.1000000000000005,-6.08391198321662,-0.24474700291126733,-0.010836114870019743,0,-6.11525598200705,-4.039788298862156,-1.1074802114262163,-3.9222698310963433,-1.11113133258998,-5.101433583553199,-0.2605868251405872,-3.0659691356742957,-6.941161237863544,-5.1305689284919085,-1.9569503699724975,-5.1012924747922685,-1.1050065483434701,0,0,0,-0.8980015513809397,-4.530784771011986,-0.19270955827362002,-3.2874328888584845,-1.110527046875,-5.106988248438529,0,0,-1.1202644826953063,0,0,0,-4.7415038198397434,-10.214881869846277,-3.8977638932421588,-5.1070008955078805,34.60997341712305,32.45654522027266,45.74844148944203,-7.0771412500856306,33.60857112087026,30.613698746126108,47.93135709961566,-4.234139419145266,29.660643301134627,31.951727865054437,40.457388722563245,-9.52428184445411,28.232148316779217,42.81211877890512,34.11400153926458,-3.9894357727071936,32.37566312836768,32.38634067207705,45.882142606490376,-9.971790510800409,29.728107928912948,31.86271500281966,47.54263824430802,-5.542407395651172,22.314037004039314,27.76000277873778,45.07826757977385,-10.187211894939491,15.183183915342154,37.60333533607512,41.65438562471901,-5.0903692687359445,30.444163057738958,-9.50944836636684,49.822189385956996,-14.182975773087232,32.8834363541379,-8.859713329236456,48.24662985362035,-13.086711579375454,30.01649172176369,-9.673964981305243,49.79253140184733,-9.18376737449766,21.97846434699823,-11.68082672686472,47.82173989045666,-16.88228924657166,24.15964008487754,-20.452867036497846,48.404451251006236,-11.886007300157788,17.05173367633785,-4.749248231838333,48.27674225808065,-9.270401026157653,18.940294407463366,-11.290965403768235,47.6339627117098,-13.512478498681569,17.965477059189144,-4.825055036800359,45.92554237403045,-8.243542847314215,22.89054665880595,33.90456047336888,40.966413410293626,-11.911566904601218,27.84267756896528,22.164257047809475,43.13283088442414,-22.950207039838453,30.475373336053337,28.734669513224045,40.838785884786994,-17.299202813540276,17.547595577985593,25.74832829612348,38.48250375859269,-12.580928860260421,13.165005636608928,27.2326350383651,44.02061369156715,-14.544109951002955,20.80407541232356,13.429281480697709,46.99110891152104,-21.566911119862212,15.040965903442093,18.242576131807482,47.6606413039837,-8.853945116538236,3.4666152675011466,3.1898819893739905,45.40531620522274,-0.9173919708626187,23.911777656389955,-17.317938144099962,45.40332750286137,-22.69469928110278,9.201243956592428,-27.222354713560907,40.9441864006413,-15.331727484440043,24.163755689660732,-20.031646516771005,42.28203193926329,-21.533611728804537,9.845307990056927,-11.281228766328224,46.531494471110555,-12.898269403386037,11.087564920622816,-25.67512763637221,43.13972214220177,-15.575487774607053,12.98006717010914,-19.43042975503542,40.007711416475246,-4.957772920960325,2.5639775665666695,-14.56111625055701,46.99609040289371,-2.529756888701306,-4.366341806555884,-5.1000000000000005,45.18326506608311,0,31.395702512607418,31.384003365776582,39.38696877517253,-14.999546567065737,27.703699503417088,29.888043290620306,46.139564298914536,-17.26604606585025,11.700419039121149,25.67125602762061,47.07519184652474,-16.243916052204174,25.848960755056183,19.012289329751617,33.09544052685635,-22.242306189820216,34.874202522431446,29.094630251762272,45.35648462144182,-5.529217176995743,5.267770243658779,21.028557381145163,45.39471574115091,-18.64779073130544,13.042997389399336,9.080562384843764,33.56147450330054,-17.79436230231334,3.1824081984305312,31.288989492789177,42.00415752967571,-9.75601067011597,39.15531628146946,-18.670589848017663,45.60152742402938,-16.94034301093076,23.817614811990797,-11.96638682794487,44.61562594647134,-17.576959346773858,27.98714010349211,-21.669723052519117,43.8418337053992,-11.356864956669972,15.077041723522939,-13.588890190823932,42.188183241645,-10.761175992006594,35.96875195922054,-24.299488101276587,28.481769755801473,-19.223210099584247,3.2704467277669163,-6.127931794500248,41.68035175410588,-4.015730806394721,10.216873986297704,-17.524760979334918,46.2491407248084,-7.566322873769163,-6.023874642183354,-38.588939962839675,42.11619480200399,-19.817260425107225,30.27027611460778,31.338949736064983,24.878937048468984,-20.32564424726881,17.706393449021483,10.914420749672763,41.49867516599801,-17.97558952836564,21.396638489987875,18.23190793941947,47.86640052017104,-18.441157469975366,4.044502186193032,21.394393253550028,43.89249377766056,-12.26466891386816,14.942520887277364,19.186225788200233,41.840126667232454,-17.22768386404036,8.420137680594115,5.790666315843655,29.806585507550366,-6.908855906318189,35.59402560578715,30.111880241055466,41.90656586692403,-10.67443990604597,-1.1010841865351926,2.797428081059805,45.161007748029895,0,18.21125011850468,-18.55503315532926,43.35244686230561,-17.125800808256574,6.558178785629062,-20.3032468973499,43.04656314181219,-2.791878735696954,33.54099577029602,-43.55305382410634,44.52360502142655,-13.84745419614324,1.4847305933030364,-5.1000000000000005,48.17530111254773,-2.2335715470095927,14.331913105793234,-11.144122144935524,41.490217730409526,-23.445093147099332,-5.157375,-9.466685702474734,45.49565156860315,-4.394966880619232,-3.4137388167997074,-9.474063458746459,45.88174012862277,-2.1556791778968694,-10.819585929065259,-5.164164127223074,41.58440708001411,-8.462102165965455,3.8494233803043922,44.72878349952915,39.80342460124767,-2.499265249316253,-6.1000000000000005,2.834418965371253,44.91700693479805,-2.8075398781874785,-14.1500880507948,43.29410640379456,8.697376865020635,-0.5119898649481635,-0.7635745980632755,42.649450694874886,0,0,-7.984318327825246,37.56681894023033,19.502028635661055,-1.7684178547930411,-1.4827852285458523,37.65621747866132,0,0,-40.607824077439396,-0.1,45.065119809076975,-9.833769581302994,-10.213625,25.655055862337807,0,0,-9.076847427784397,-8.142773423195026,47.660324975331335,-2.159841104346118,-4.917556943591875,-4.065161982849239,48.73405042005591,-0.8218749264307941,-8.648802594891544,-5.873264628195368,44.65026087374485,0,-10.213625,-4.435264796857367,39.16356299539508,0,-1.1107173143870464,-5.960916118908312,45.730796991211,-0.5610058880131881,-1.1115124382813413,-5.1000000000000005,47.19175838483354,0,-1.336968356821956,-7.4416334269879645,23.202199892891223,0,-1.5309200092044404,-4.418260340635401,30.180102701633217,0,-7.478317818430593,7.060564789295938,45.09468156649797,-4.807707178545375,-10.213625,-0.1881337528138222,42.30216978714025,0,-0.4721334216759794,-0.049134710481772086,43.495871512757915,-0.6813754284125452,-0.9816434627701671,-1.2768611249672315,28.845338328217174,0,-1.5036522317988248,16.567663039441015,0,0,-1.1897633333530249,-0.19125932543713609,35.94971753403144,0,-1.1057256451152178,-0.1,44.114835133531116,0,-1.1110575263171663,-0.1,21.253727123511563,0,-10.213625,-6.4812647105869825,42.33232985141619,-44.803620492018986,-6.1000000000000005,-5.1000000000000005,45.1987636735641,0,-1.1055608929454348,-5.101247794871316,28.685903783308156,0,-2.2902009703977826,-5.1000000000000005,21.887082813646195,0,-10.213625,-2.638092541605876,19.717220467369287,0,-1.4627852702566186,-5.112849330379661,3.8843185670437066,0,-0.8961288556954652,-4.150624010674414,0,0,-0.9484629843345657,0,0,0,-6.245146805870471,35.48457507904672,11.810854115589855,-2.9312339733600177,-99.35683504342201,35.273052495980295,4.501107225702691,0,1.9909711627343372,30.807506069871177,2.912488138490162,-1.7191899663754733,-1.1012375,28.68156600973917,0,0,-6.105970008525196,5.462062008144066,48.06728942679433,-1.660555120198344,-7.205300086848282,34.68658710839968,0,0,-1.1013578615598294,-0.1,34.15084243172156,0,8.407027217190377,0,4.63692887168426,0,-2.2427680895731372,-4.892728856647229,46.648899604001734,0,-10.542028036686899,-9.071528843344394,46.74147213290591,0,-1.1172303606720684,-5.111602828125001,30.80979872058362,0,-1.4141754580693042,-4.0465287358339195,4.437594775581813,-3.9896411150195465,-1.5062742873852983,-4.32226779951035,50.04095946093278,0,-1.3261267330805024,-1.6321874730950228,9.40160191908572,0,-1.1116037687145839,0,0,0,-6.101816103862856,-5.1000000000000005,3.710577648908927,0,-10.213625,34.59267223983639,0,0,-0.4687088680372804,-0.5717249611650408,45.66675890775734,0,-5.92108886646857,-0.8857740135672549,30.599513028721933,0,-2.015297993010553,-0.6187418176557747,18.898807881172868,0,-3.1027600542302927,11.241402483282206,0,0,-0.4170728700176933,-0.9438240329696438,16.317300302182282,-46.14250162554619,-4.810738098038032,-0.18905491439967104,19.014924993612603,0,-0.8354342684011977,-0.1,4.008660270056611,0,-1.4380626098539193,-5.130496718596589,30.34734121008891,0,-6.106359410217541,-5.117958440298289,17.995500637136796,0,-1.2286716418720776,-4.127997768399332,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.6166856644793306,-5.119450491564105,0,0,-1.1115723967629105,-10.214875518946359,16.415727849672553,0,27.31526505686462,46.50091244828239,-6.292988064597868,-12.442154397651537,16.378481160067228,44.181788031031026,-2.772767948162196,-14.44124849383192,6.921823958532007,47.23254904105896,-3.1564378200762935,-4.879781657545186,2.5230777989104056,43.91761256556387,-3.8696994413500585,-1.848380738185325,12.030848477269462,39.502515005542186,-5.9285406207612485,-9.360342216167098,5.343322104565703,43.74915196197141,-1.632419742559724,-4.030099076926417,10.504104775302922,27.441904211628806,-4.275572229171897,-10.62911737194135,1.7356032690795211,35.040991790828784,-4.031925666238444,-5.1000000000000005,-15.237791209812501,-23.129884165157296,-4.410223422817953,-16.52284891676142,-16.99590289645287,-28.99380732039932,-5.251963824187147,-12.49169707791171,-23.141449881125073,-25.44433562774351,-5.966481171558774,-26.95190146272304,-13.09903060688198,-14.348527017720128,-29.761370402431414,-9.668599787525242,-10.110176476850985,-12.740323217289239,-3.9123413442491524,-11.800468604461571,-10.690810778955045,-7.52536893524103,-4.4584383353350345,-9.128084242519105,-6.941246433347993,-9.951537740765584,-5.807133722291815,-10.203324306563104,-6.633322187785249,-9.200766566355293,-22.897964371800057,-8.039860430158567,20.443055053560894,36.7603245012827,-2.605163334909602,-8.719562598827606,-12.909778097872023,-12.565156911056086,-6.29674675476783,-15.99612884735109,-12.335657652458531,-1.409254587162513,-7.618276661044932,-22.790033317587593,-13.331588465744067,-12.290845855234354,-4.908069841403563,-14.79107068854919,0.8779007773257625,20.201969212789557,-10.3443220614293,-31.15604279202296,-13.880423912208892,-8.069288373854434,-33.52641071602629,-12.493278318845718,-10.322349984937222,-3.1696222583240052,-12.094831551427685,-9.480472511486669,-17.33550439117303,-9.983302367500244,-12.344119250591342,-13.390527018504283,-56.3664603019404,-37.5372107148836,-6.00452622961853,-44.25634742150014,-9.688326176549403,-17.54132704311905,-5.1558869906695515,-10.67635098281498,-15.772887601031874,-26.391170360344052,-21.194830010920708,-23.731529694209144,-4.383701748431758,-5.13269741356525,-3.731962462770892,-8.160930345398794,-13.459274483666654,-13.340765975944075,-8.102624026163188,-11.48297927373179,-12.534044217266953,-17.599116701976005,-7.147546772781026,-13.381317798243426,-9.786053815114597,-51.717561493031916,-11.222855576311972,-10.411393773440466,-6.810672302300439,-50.45774707912707,-6.748000700945144,-5.378164793902299,14.967421225300951,34.02000790789464,-8.41656321077336,-13.246417559026334,-23.24108144181541,36.414556401748705,-0.8990882376375329,-5.9767294110695515,2.193101696927226,9.582162959942165,-8.443126663268448,-10.056110169696092,1.1537070998734464,3.4605128908512723,-7.289564421190501,-14.527072749868314,0.9093909674735918,3.659152024258582,-6.974554048381402,-42.110997414227285,-1.255279987705467,16.486249724285326,-7.928685462804645,-6.878444919041442,-5.117393305085045,9.25538214588967,-6.561616151397052,-6.236722830805288,-4.318600649060332,-4.854921413238473,-5.176646477944316,-4.515982301389445,-15.408476228090219,-14.332272238289757,-6.086718795760582,-28.372668925547362,-11.692722856756216,-13.995663168501046,-7.011643283949907,-25.249498908320366,-11.89950826694579,-21.363871771556852,-6.852497417700931,-28.236414886181855,-8.186888461626433,-9.707229226150195,-6.195509543270852,-7.380890744911294,-14.14212287922961,-17.65335478277828,-8.403550116821481,-11.158988788924626,-11.648700571731304,-9.98690756978701,-34.69505067499071,-9.689106031551896,-4.900057215693128,-9.627356055843888,-6.174414478890543,-7.469552576790737,-6.071583631469977,-9.560101170733878,-5.676669855975705,-6.63298831909,6.638096493331431,34.768296611490605,0,-17.712212482903595,-12.696694231168339,-12.475216981158361,-2.201145493337548,-33.127937514238006,-11.1824103691953,-11.31050889685544,-2.0090232908656915,-16.84997882968851,-7.7849753204554855,-10.282699521204732,-22.117184546738542,-17.91602315052927,-3.778016838997006,21.272435801496968,-41.061912957758814,-37.98658790969504,-10.401464592715172,-9.031479149908625,-11.957083619150964,-16.885064412134454,-10.840653795326437,-8.439819232317245,-10.70942227240711,-45.85075500396925,5.064704005204131,-0.9554845380500848,-4.346754978758312,-2.608272120073075,-11.772308988440637,-14.531212406428867,-9.54937491384871,-13.823565270795818,-13.489334235355752,-14.402943913917905,-7.141055234806625,-18.146958313131346,-9.348418881878255,-12.971132623862932,-9.848517889083546,-8.804252383416292,-7.378177138405364,-51.280103717845535,-8.307562522764286,-51.0106993055835,-5.265124873814877,-9.456776349976916,-6.802257078492105,-6.118496801363484,-9.648715692176097,-5.1000000000000005,-4.393970332552103,-4.742683229498258,-5.157375,-5.107230749688578,-3.505763774563674,-5.101207140903477,-12.163312170546003,-23.371525445226965,-38.374422850484216,-23.763645410322308,3.5783547523004318,42.35535891505549,-0.25214038574929276,-4.93627561877442,-0.2227694774052107,40.22714082191287,-1.8651938398971968,-0.750457354271672,-1.1115875000000002,39.99943773969522,-2.4001708681470766,0,-10.359310013002283,26.650141561391017,0,0,1.073021893539812,33.734703044763606,-2.3571321807035654,-4.479923425329137,-1.1,45.11752082806711,0,0,-1.1102865329904328,23.870235047460664,0,0,-1.1111342461031124,7.309680477399098,0,0,-10.213625,-9.166420287158132,-5.453778138555367,-15.27437878496417,-6.93387909450616,-7.1584613823983,-2.804515851806716,-2.664816618668857,-10.213625,-3.666808164724804,-3.6901973050399866,-4.607745567219409,-1.4800605140160923,-4.730163955808282,-1.360266107502025,-3.901363559482127,-16.227813007462217,-9.690000000000001,-5.769891845229915,-8.853336358640131,-1.130249166154821,-5.101243831238668,-0.8430144975806422,-0.20616059755842217,-1.606921882752128,-4.5575881876319,0,0,0,0,0,0,-6.8870131468953515,31.660768941691867,-4.126376700670627,0,-10.213625,-3.1990654855704026,-3.1652541617316725,-4.725391950650869,-20.110108683984755,3.2104815385390957,-3.7567848506890074,-5.110028866422764,-1.1,-0.38564957272275335,-0.5831142142304369,-3.399422184370903,-1.4484645300435512,11.259731917452244,0,0,-1.977482280723424,-1.8396437662938105,-0.37488986341404906,-3.8514005119694477,-1.0522378104550232,0.3266740902726673,-0.29751262668727135,-6.333336690439871,-0.22258953356085806,0,0,0,-12.904760010560612,-5.1000000000000005,-14.523185518829951,-5.118533555954608,-11.611715142263831,-10.532618640362612,-5.697378730139186,-8.762396194871126,-1.116136478735956,-5.129740000746234,-0.5337304231505151,-5.107010001242694,-1.105211034899824,-5.1000000000000005,-0.25972230003571467,0,-10.213625,-5.1012452203125,-0.27735626313920675,-5.1000000000000005,0,0,0,0,-1.1049724035567499,-5.1000000000000005,-0.7071400131718527,0,0,0,0,0,-1.5683282650953183,30.286774030734914,0,0,-0.6408367933915603,28.566652562286542,0,-2.5550915004796826,-6.1000000000000005,8.73176236642144,0,0,-0.8723369583468603,-0.1157147562590333,-2.2539909175974944,-5.107128139398208,-7.980796685676912,10.149868529798809,-0.893464772662663,-4.3398366095168335,-1.11097774389533,2.9018623783944366,-15.631340290038732,0,6.5558572496134095,0,0,-5.101249610942016,0.4405228600932942,-0.12966460007739083,-2.534761847901476,0,-9.480861591787763,-6.419931955205398,-4.894451056049095,-46.30508723323148,-1.2079831333040891,-4.662838868469353,-1.016731591856971,-3.216133271651721,-2.5568696629176006,-5.105738674896686,-2.2234811552020757,-5.101938664793367,0,0,0,0,0,0,0,0,0,0,0,0,-1.3071282296324522,0,0,0,0,0,0,0,-0.48929629968449107,17.598006035491395,0,0,-0.08291872812562567,-0.24397700324022034,-0.9813355018713367,0,-103.3633794736749,-1.2663514068190092,-4.1000000000000005,-5.105739034339393,-1.0671192004288523,-0.7881180808669526,0,0,-10.213625,1.9506051999735226,0,0,-0.7281665592590528,0,0,0,-0.2795201830428823,-0.12185750189702596,0,0,0,0,0,0,-10.213625,-3.470182249220642,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-3.8775265582731304,0,-1.1056686839275318,0,0,0,0,0,0,0,-1.814817782133745,0,0,0,36.12591939115406,43.55006620230115,54.547711753977545,37.58020705697137,39.92617899712056,45.35949875758788,55.19552264592446,38.261461310259435,25.59732605588347,40.258426340344954,52.385240186101974,37.3555053742268,25.81498261634502,38.26776653577312,45.09427301311971,37.70165358688079,18.49093002019478,33.067608734605464,50.5112241185227,31.37847882878208,23.72163376491462,37.44161552486401,51.42286325322296,33.53504467982906,18.103255868056852,36.869434298203686,54.11804515712908,31.631641281073744,10.056874076000074,36.41601756149733,51.404986443697794,36.91733318720763,25.037413058905507,-3.854749946363383,54.84294796851881,37.58710238529572,22.60265629760447,-6.505383650591427,49.1177338745409,37.8336532018517,34.80711948053793,-3.4856073157230547,55.34202995197099,34.13534993994407,14.516836854653148,-6.2624197896063585,56.103434251006526,33.6607615667851,27.378970715011942,-7.7834712628793525,51.802606952948196,38.604948959517984,16.981150245922684,-7.1896378037006965,29.870818885689054,20.999022191039643,15.02064833879662,-9.955466020017608,54.381366439939434,27.46604450504135,15.487166032395944,-7.541171168804322,55.68277320322432,31.029830661031426,18.849902107739936,37.12708090698168,53.89297505087042,36.86169762947769,17.421701444764615,38.406628876627686,55.020037333867386,35.82230807641311,2.7343994657311947,39.11242483977808,52.637914169586224,34.57726007729165,21.35842461438815,23.253966907106914,50.95940474417026,28.84979938797677,16.325380419853648,33.54285053305624,54.21849977027323,35.20764360134794,7.903141249402246,35.57450614894954,52.04527047914954,36.50549109836615,20.42462381130629,37.70740529790487,52.43320711305283,37.67662345202475,9.190972268520573,31.973411194096776,52.9691337182348,27.76726898771542,18.49103349054103,-12.329558410522056,56.2214156090357,36.71886599540934,-16.711770991516268,-14.102410771321182,53.660775794857464,37.815422925060496,23.366647078685077,-18.893675686417208,51.86339354626077,31.801120634355403,13.839880918070913,-12.08885155951349,49.661988626912766,32.81542662475715,12.738410129855481,-21.255124434284184,48.5087915336211,24.39221988538838,10.178750919870236,-17.08364722462862,53.598302290847656,24.278652029910948,13.617351958087202,-13.11362745138748,53.69076937588579,29.68759579359837,6.3424213251363195,-11.716568909588739,50.788734488218395,10.29475831316275,25.171008689746742,35.39005161416393,48.77866839527495,34.52638823046866,31.21189219882036,40.307877581884235,50.22478554432579,34.08171337893833,23.650555039297082,35.21449811588811,39.06953719475468,28.8044710195704,24.20794769629109,28.78595826283699,53.66875404888566,31.390836185003167,-11.57518796874609,36.11041072226874,25.353977490592264,28.87059524518323,14.107616273297843,26.876895066004437,53.43464083187944,32.22169180949524,22.17608633523018,27.410705687104084,52.63029713953332,25.39894531377017,18.87819635176749,20.838467912897297,51.19776580438991,28.64366525784784,15.789278555734292,-13.841506535630986,51.42816849491071,28.36522610223391,30.21913231827399,-12.281282613461599,51.36972573086533,30.709107783402228,35.99929428497596,-16.82633213776925,48.34447249621445,18.417415108970385,22.45095493697941,-12.97977687481066,51.67292935891179,34.76894073294832,16.64808269953402,-15.151607412133899,54.32613707360995,26.071467623967223,23.889573433099365,-16.147034765725092,52.85679224305072,27.21787603396144,-20.620792235661515,-35.96078350083814,53.404519892192496,19.008139853359925,2.5959892554783925,-42.2099727388497,52.47384037854421,14.799034608105176,21.168848489368035,34.36077335476239,45.5225737580181,37.128110513482596,6.559194965844063,36.45164433561673,24.84216603588532,27.66925725849947,17.16950403823995,28.271541264629207,46.72959212653553,25.68767552874509,0.6273346518846186,22.77987708244065,49.40494371317143,22.6684135053335,19.518078090578328,30.9689392978156,48.27247719425665,35.09414869675819,-3.5940382597870233,26.86479356218563,54.65588695520824,25.63231535373103,5.321286255205618,35.26131005848477,52.41681017258313,37.32303912533438,15.983230719622716,11.594678066912556,53.96904272109336,12.566564445068632,13.295032218385426,-15.415619076538832,45.68075422948348,16.324928307184642,5.5969397258644635,-12.934740830429071,38.43825665624311,31.760694944828305,26.0321374625517,-15.10972903468874,49.67828378947579,35.899179444049516,17.764202864205906,-9.379661267717566,49.22894841715667,3.804111120724629,2.2693241952219942,-11.454290552156083,51.567672119754825,13.26799142078974,4.7503664403943215,-18.096581516984138,54.723527198083254,6.886443697775931,6.033009426645894,-44.72967983900544,54.69482174188213,10.115930760989803,-2.4058441369660155,-5.158196727223744,54.95737507854149,5.93276100477617,19.311222162555577,44.94025973948453,31.69713975652652,-1.6334722819374141,-33.30647708721614,45.60833025606202,50.432082314097904,-1.4867783746926282,-12.743596076186453,35.94850064117422,53.21548167980697,-2.484282638853877,-3.2387531401543463,12.13074206567664,54.79724030891121,-1.1338957986035942,1.0797566639339597,19.11654726459111,45.35485425916185,-0.8037863268483076,-6.111600440438577,44.25385109273799,5.284665252023219,-0.30852603116867944,1.684328264098597,3.988789828455098,49.930374665752645,-0.35315542500632047,-1.1008424629220008,39.172433261966205,0,0,-50.13631259490168,-6.366619172785674,55.56289069872564,-1.3997214467581145,-3.7477277570256353,-8.149097680768921,52.54215289312781,-1.8665444189608555,-3.0989151499159413,-6.349226894129041,55.06995733826685,-2.464750220748735,-8.877569351356449,-6.480810479066971,55.9814285898325,-0.4219170607317869,-3.0451172007523133,-5.4344835710824935,53.70134885537311,-0.3823370893146202,-0.6884796506262773,-3.650408714741581,56.57591072744986,-0.41902341575886093,-1.1271168827456477,-5.1000000000000005,52.266924102567515,-0.14785307354814692,-1.1724248455038708,-9.347492383262992,46.001080982110494,-1.4583661330070412,-19.365824342713577,28.528770027709697,53.51159307256217,-3.8316559779860393,-16.377849194905853,-2.153193472911557,53.514781066985904,-4.066252996320449,-15.14509493853972,5.311163158764077,52.8673925086481,-1.8149170923463775,-2.5612633861113636,-3.8798096830545683,56.2620343177803,-0.8139683329510954,20.689998990900946,26.744473105116327,53.41945546590398,-3.3118055677652727,-7.345791923479778,-2.2787273370883536,52.56441130942465,-1.7774185861125202,-9.25991956404547,3.948549412954825,54.064849962992476,-1.412444762130419,-1.096368321777686,-1.200576983449319,54.40117756149411,0,-1.6933639681455093,-7.745263200303544,52.68396832461259,-2.0331199279253824,-11.781529485817812,0,52.58872796181691,-3.1633643511773624,-1.8350276745777947,-7.944812449234656,52.89240259361236,0,-2.8159579710581486,-5.1000000000000005,55.72536085358347,0,-1.0681896872559997,-8.8720254417748,53.12829570648167,-0.27759100729825015,-1.1,-5.101250574705288,44.69887296577125,0,-2.1113256699056016,-8.732173113649434,45.40844655073695,0,-1.111084165699943,-5.106460314201033,17.781164034426222,0,-47.032326423273005,39.71291817448335,30.56230683809541,-2.340960483937347,-1.2610351710243404,40.41062564576972,15.299326325235116,-1.1401895818807153,-8.611474063729338,32.1683266877802,11.540985569365596,-0.578554417913957,-3.0061630652556666,3.422151621098371,51.501103583285456,0,3.427519579337873,13.007720832735464,47.83085546964429,-1.70544093616311,-12.208505395851333,34.08297000120875,8.967914776700717,0,-0.5283970815420465,36.81006583421044,0,0,-1.280700921243886,19.80479635463924,0,0,-3.5496589813061123,-6.53480891751464,54.8946659181564,-1.0397985503560898,-2.4395580872170575,-5.106993791944216,51.55978171201389,0,-5.783053165157375,-6.0328208324252754,47.518395238010974,0,-5.393196177508971,-51.069812026952256,40.55187514088379,0,-6.402661722514859,-8.3455846674332,48.900540808744196,0,-0.9831602315109642,-5.101102548881194,53.67783453883637,0,-0.320237089804314,-47.3313179680281,56.924426263478765,0,0,0,23.147729422587823,0,-7.759462076437814,10.83112899675113,32.31245170039932,0,-5.625690404322857,-7.357455421932364,51.241477525239524,-0.497044388424945,-8.202438164478002,-1.5323103975810861,43.780299876186966,-0.8895627701504893,-6.302352664142227,-1.383656893018883,53.57604396080309,-1.574328253610076,-0.7941834296598609,-0.14044289723257833,45.9601831719345,0,-4.887223834353463,-0.1,51.25837689692868,-0.784572506817049,-1.1,-0.1,53.36159578719592,0,-6.1000000000000005,-0.1488073961975622,37.85823578803763,0,-1.9262316078769093,-5.101250270132772,43.647068800229434,0,-1.1,-5.106881824453512,48.285207069925505,0,-1.105914546875,-5.1011972301637725,56.39832161617086,0,-0.9631640757566949,-5.1000000000000005,9.096277452780072,0,-8.989659678416585,-4.312068100550076,35.49115805838996,0,-10.213625,-5.342682378002711,18.09158766397423,0,-0.6492467083856099,-5.006881252961172,9.743176341996925,0,-1.1115734721068875,-10.21487552015612,28.51524142539833,0,29.118152702996962,45.45999131962657,0.9077063673245531,32.01441761135335,26.87945471841348,43.97534058762351,-0.7443693240716691,30.11173627367028,14.727796181073764,48.62223376876566,-2.446883868353379,24.535445985813965,-25.493890827557518,48.69548539228518,-4.287266302500335,29.249684057949157,15.160248327000415,33.001663747187614,3.530133728701713,25.59299960715825,3.244467870241436,42.20779963170974,-1.9439231639050694,27.741143732678637,7.704471318041871,41.011908324164025,-8.855812697838509,31.16288747691521,18.130812480325456,39.55394264113684,-4.2569085028355005,20.135422990179297,-9.776496808488952,-10.81208434313829,2.5761397531011174,-6.871431022870169,-11.276593311114675,-6.331917253366497,-6.986423747879262,-0.22716575488785895,-11.794272837683033,-6.949374659262981,-7.270063477101409,-5.2463315814637435,-6.745485286282278,-22.32361174157425,-0.6401380675546875,-11.21602723059981,-14.71303234605222,-19.003913626964994,-2.462763029484917,-7.674762765881322,-12.863177334724444,-4.577587802506824,-2.9767559331844624,-6.26045362673896,-10.04175928030679,-12.308882375854626,-12.736475175212783,-4.222899413652961,-20.83369850277874,-13.749238863566838,-14.346312648993164,-2.3101480274132635,14.528260499815342,39.72458965543767,1.554375557214109,-1.2542491305140893,-17.99900713995811,-0.919697525336598,3.657823836141106,-2.67870610407116,-9.424493646118034,-2.962555447157788,-10.468994006093768,-1.3488910186435525,-17.13959276530931,-4.147465777476205,3.148879508431875,-5.424311171899072,-29.23795737426281,9.099925499439514,0.343448854686996,1.1018819903852124,-21.10296927196532,-5.689073507964225,0.8428978171533579,-4.879831098599716,-6.802410421567664,-3.512697766469715,-5.98031637169206,-0.9868919968137998,-17.56223445191031,3.086687297300871,-8.274845902162795,5.925654838037478,-11.122645397469395,-19.330506109461826,-0.8762257303626096,-11.943441265179992,-1.788685532111259,-24.090270890323808,3.7043585692985124,-7.854464774058803,-18.03999404276006,-35.9146854103658,-5.523370679101576,-1.902409597619621,-13.262689463473965,-17.692944649771473,4.41137920516991,-9.57563813192278,-25.2340094952307,-29.65929761362158,-4.511725902411814,-11.687571316946801,-41.781377618167284,-43.17477274583222,3.378087947127003,-10.022561260870681,-6.565444280608146,-8.004441727680968,-0.02316066872739403,-6.04228256710993,-13.527038789253083,-51.11604891133202,-38.09958239202109,-6.973037927711149,8.828495078055823,31.89558418481343,3.328061019557816,11.060606667470276,22.39365714551734,12.971222240212777,4.673085760494442,10.82284865626605,-4.249803866006589,3.7597359610481123,1.003779698711568,2.9250059801600794,3.8707662014842725,5.709023839044722,-14.327289009490107,13.017812584069434,-20.533989782901045,15.289744921362347,1.3216503254346317,7.4914961565810385,-0.7956717354139986,30.128362123035632,2.8735946543951703,5.044117856496744,14.600151022089033,2.4146889261623614,0.6438088534817726,6.967693342147783,-4.614304716712869,-1.897068918778676,-1.4208906721151282,2.422496807788725,-34.20242853402549,-16.35151455420652,1.0373214478149078,-7.238099937214748,-15.1964333985938,-11.881397332926856,-0.7997959259857759,-7.883383421358801,-18.856653325413465,-39.78459851596422,-13.878385100283335,-1.5361676539794027,-10.92544202821413,-23.657017468567044,-1.1756587486672734,-10.244656214843701,-22.081803367563293,-22.06387107825406,-0.680860598155406,-9.533221341298695,-13.528507663686685,-13.83196907053852,4.953653722753683,-9.686323079620854,-12.033969601837553,-14.3633474880724,-0.6102190808750606,-9.257997038684435,-5.994779627925354,-9.451868450241307,-5.739261902253513,-7.779910440696964,9.159374893291663,26.017846443511033,-2.995940174300839,-2.2320226593071304,-11.981599669453837,-7.587903901699089,-20.183044034984114,-6.399800904208875,-6.899229257039419,22.46661911050395,-7.409437345507672,-5.5342698022944745,-18.22116264739801,-9.160204122894173,-18.0137542327068,-6.116453611522901,-24.75887042562412,12.240323154502343,-4.216262323222815,-3.1598752077301913,-45.12652091738627,-8.907919357007952,-9.224278975445113,-8.131280585215663,-19.088446858403064,-7.398340983578282,-9.134773338494282,-7.248366122587889,-14.683642336879188,-7.387058001096743,-9.349770256743769,-8.123099867716325,-14.23794556971428,-16.933151509847775,3.53198678318706,-10.12973482089923,-16.888773322356595,-26.53025046761057,-5.459844586975565,-11.058157960370485,-40.860531506733736,-47.62073953487642,-15.851177543266619,-5.060734869347901,-12.63224298286739,-17.339668259364675,-18.080126929887527,-9.68462046379547,-16.274821967494617,-47.813543190086776,-34.12750572192949,-10.60179242447359,-9.702104988642914,-26.693083476976565,0.522181618417301,-8.49925434444649,-9.902556049028366,-9.649036116995664,-10.233522162869708,-9.194204096837089,-9.776496030464537,-42.43885631923451,-31.617877470584634,-11.52717460058452,-18.545516313365255,45.191742424810585,0.5877029209187536,-7.032019259594727,-6.340929012095238,44.60841194007753,-5.081329150961864,0.14540919268245286,-0.8508853478994918,44.406013406970686,-0.44194974371188384,-0.8863386471061289,-1.1051020000763534,44.322997241265,0.11128012342695665,-0.5252925486552663,-11.413121041197645,45.74436735636194,-1.9427777322122168,-2.9231708603555475,-1.4473202856868415,41.23226176776477,0.8272816267386098,0,13.105895267591588,41.50593778417359,-1.459507467845197,0,-1.4049091331048933,22.84044546585627,0,-0.15050153578175346,-12.914194606978125,-9.9694480168343,-1.084865833932947,-8.341014078209236,-12.48852064118181,-6.96185849642608,-1.4483063349874166,-8.730388597576791,-19.194379001788775,-4.589137983616637,-0.46920046781971236,-15.863129768310179,-1.1058113487261376,-8.575476089739174,-0.15818623789796943,-1.46577495921678,-4.8710895555414035,-5.092888849483881,-3.821793284171713,-3.63418324186862,-1.1112066646690657,-4.680605981722649,0.21367825498106113,-0.46822489768106534,-1.1105738516896098,-5.1012375,-3.826286694828746,-0.027599666675262858,-1.1111384927775694,-5.1000000000000005,-0.01944124464455399,0,-7.782200034635569,38.8612281159287,-2.2027743923726724,-0.29630731915893777,-4.705299655330001,-5.0158698318257775,2.676790386834062,-4.662772961504954,-18.844954100325793,-10.88391736149516,4.345555272027464,-2.939571154751533,-10.70452202604436,-2.895414937046364,-2.4342729654116675,-1.726811796776372,-7.519720436806458,24.11108919850639,0,0,-6.48744489325683,-1.697880542806299,-3.7507904950480606,-1.5575241817275964,-5.965614786749768,-1.7038591888007995,-3.3400055404302496,-1.1732682473807767,-12.421086421777566,-3.3381567024944157,-3.958664216244148,-2.4727186771360237,-103.42730720168149,-12.883131922967056,3.1054445429344537,-1.6498150248179766,-10.213625,-5.1000000000000005,-3.2497454047078045,-1.7535346090716208,-12.015076590422177,-51.013147822733046,-4.156285088225557,-0.39928630059033354,-4.573459134642275,-14.300397477777052,-3.398032444634185,-5.653493102727997,-5.318238003374276,-5.101541644282239,-1.7913458087210377,-0.49122272554912333,-1.1068625,0,0,0,-1.1050539370796717,-5.1000000000000005,-2.17781743054016,-1.8507596629054386,-11.101698828311347,-5.1000000000000005,-0.412954258386057,0,-5.055728532107673,31.36988338089709,0.20878914117615466,-0.6136772108460489,-7.239429546430067,34.31290806213459,-1.723324932240291,-1.5166249457178198,1.4860547453344153,11.882911758863973,0.2273961175656922,-1.1568409484046953,-0.7593534857147481,6.354440188312275,-4.1068625,-1.69830850868868,-7.050028964116592,28.185623977467372,0,0,-1.0499500148765466,10.482623402102266,0,0,-1.0872364489704802,24.863573069925785,0,0,-1.1113656856004919,-0.1275191127573598,-3.664351168106884,-0.5668417991283706,-12.400675764872602,-9.097352643690492,-5.748100940047225,-13.208162419962825,-7.702635152567586,-4.1293591395307905,-4.70276434369353,-3.3952121662755608,-10.311886430051839,-5.082386276899168,-3.335354688547284,-11.997877503208201,-1.1106369506330895,-5.1000000000000005,0.5488997205286993,0,-0.6861129823430443,-5.111602828125001,1.6233197522498442,-0.4527681633076745,-10.213625,-8.523475529138407,0.5231407817390558,0,-10.213625,-4.942632517036848,0.5183484375394961,0,0,0,0,0,-6.111600892296836,32.75992956617803,-4.117227828125,-0.7697690534065766,-10.923201806704169,-2.1465641064805228,1.819247148806046,-1.1122697990999093,-10.213625,1.9296012608379927,-3.0383627703933413,-0.49515394264925483,-10.213625,-11.6572192773076,-6.7115734197954104,-5.868236655520975,-0.17556887582151168,7.35264736825207,0,0,-0.16221177847545062,-0.17830767391936198,1.3838676384963011,0,-5.930986815928873,-1.0916984100044496,-3.7839271259183214,-1.4690515656366205,0,0,0,0,-12.288450411469775,-5.1000000000000005,-4.101390639398208,-2.497413452010976,-1.1808659862777526,-5.247252958309575,-2.098023919237929,-0.3476802535736953,-3.3720825603907474,-5.100520910636227,-3.660121225820727,-2.4609153981995355,-9.37250286393077,0,0,0,-10.213625,-5.035905758540679,-0.03312578439201843,0.3398634816814779,-10.213625,-5.106987713240407,-0.523124713555626,0,-10.213625,-5.1000000000000005,0,0,-1.0906255158103664,-10.214851953705287,-1.4504491488018176,-1.4698510352107714,34.52049029433733,29.711711310088404,49.89260490838226,22.61331727145862,24.601813685556166,40.16471582524396,43.01859897908896,23.954400983797164,13.948472238003973,37.498106555086835,36.4161033502066,23.848102337724825,17.80693049323721,42.79487899294877,39.73190185958126,23.25132216803006,-1.134127916750293,49.36152646057127,28.94416846185953,19.685949390528908,18.450325762836435,40.83511058030725,45.23232562867465,19.596926435800327,22.785306366061192,35.7833983144985,16.75372129815619,21.056455609930318,15.055675455076459,15.135953644023807,34.14967068151574,17.91179352421522,25.10733204888953,-7.044297084070657,31.075862281723673,18.59946845099613,24.040754994081194,-12.360997737093143,35.509386609525805,20.897958867774996,17.976734437555606,-8.988210514855036,32.329339382984266,20.540518623266873,11.82491210403896,-12.456976725841827,44.69103953918503,20.430974959768363,9.797691514921052,-21.339106109049624,13.691590519600815,7.5777498661720255,11.397604074412948,-12.823583428192169,41.294186861236255,15.988890415982,23.752371655037958,-27.000745644909085,45.39612017179322,33.425630983623186,14.857521003852103,-5.1000000000000005,44.55732825783966,12.757003169282195,27.107340486939297,25.700983776655146,4.1058758160110544,11.066576852157223,1.7886248383578276,1.6734606446574336,9.344264927937063,4.364387631905574,-0.9951313285372323,0.9845863897451744,2.1583668422390363,0.5899402592026476,0.5678921777733099,0.714370570605926,5.600145632491902,0.943916809957008,-15.703088502664366,10.36911148995889,1.3062525995277205,1.6210828583046841,-4.417422239641631,1.374264174921299,4.312105103367672,-1.0391688755720185,-3.5894274613402164,3.050642411229053,0.5595618142012506,0.07797772974587608,-30.476115607460894,3.1255617521382106,4.740195241068772,3.0954737245983845,2.995500852319459,-15.389210741736298,8.023518960937569,5.186099937678671,-4.5712457982195405,-35.32525262531907,7.975992023045239,-1.4590945244630458,-4.968655099082376,-28.489670313518154,5.994520851323346,-1.858598807157557,4.157238285676485,-24.77038261795112,5.639860818194984,0.3148551411815838,-16.423471237418436,-29.98718919783692,5.062410507541546,-1.1235588462527948,-2.778833444878014,-15.788531606026641,6.998730547718338,-3.993027362561103,-3.9940767714962773,-26.22958197481994,2.7988747687984135,-3.128176960363846,-5.057270562673391,-9.757239492852868,3.3823622196348984,-1.0683626158705344,-9.125959812903542,13.182501056124392,40.730250393997224,11.96940518390182,30.90459431915439,29.931171183861704,37.18807343908313,14.362143636610066,-5.1503068988320635,10.822302626012483,6.029165137518442,17.51797999914427,7.341785824171229,3.162313706577174,5.978388376881902,18.62343694417526,-24.225924392001094,22.7322232061178,5.11348995633069,8.466533011661474,-21.413461123236566,4.480536027508066,11.617263412116177,4.313511953417386,29.664139908825298,5.425489993585312,1.2957382100962125,1.3010614251619086,0.06466625958673244,-1.1585865909733997,3.265551335217258,1.221568912407349,17.55277179011075,-18.201390928060462,40.76440530084765,14.365161156805577,29.216899554151446,-19.11921807337298,29.668256387170075,13.092881963869303,1.4150975009144342,-36.480459571215796,5.193312102494101,3.6881101350030105,-1.6939297357895424,-20.136312034526323,3.2473505895329264,0.6318478131473597,28.089869357284527,-21.317574371338967,8.851462278017527,9.851559532955793,0.009502562318439918,-43.809033059179505,7.695826717289889,2.5839607060875807,1.1177078992661027,-32.757442110111256,2.645204522250721,2.001414156473084,3.2592458895632896,-48.33179919891155,-0.3638965542268194,17.39868607175111,16.31069514200528,35.90285757389839,7.586044237566604,9.12860882368129,-6.628290123875514,-1.0017796659190572,3.042176489323988,0.22636321181131416,-23.284171638490808,1.6082325793979717,9.095756532532887,-1.4265160650122144,-40.935005485147784,-0.041478159313047186,-7.57297599466866,0.11965647344421616,27.915813981461127,14.135330076331753,9.361011672067285,8.588844540945251,-0.8559775419011273,1.6908008172476405,5.621991924989981,-1.153456706688701,0.6599352007373782,-0.5934112092603038,2.981076476137159,0.6657070732317599,-38.95151634726578,0.1799475376345725,5.093697665416209,0.9156989572627379,-30.778800526530947,-28.19559538848077,-8.178371641648509,-1.5065206485259945,3.9894638827054814,-32.41347294151812,8.394792445783626,-2.0737151045932145,-3.895966742753537,-14.18105581971967,6.825372462909264,-0.862349845684836,-2.654407855800871,-9.561711387197544,11.294929611112256,-0.22094811800062258,-8.097725758811732,-21.920439361105274,5.386321565665979,-4.737856067042962,-1.5856605978200022,-14.643509251848029,7.392086517729415,-3.4914421127018462,1.1780516486506887,-7.799286451680954,7.449377469041066,-1.1255348995371892,-13.317682567183946,-56.81479131241022,1.3086735475687994,-8.187937889388063,-7.653880945667646,43.414779631670584,17.709156422824094,-8.531403946375825,-19.581932328300425,42.52561478967502,10.565697137894375,-2.4999266316605135,-0.7373634759372216,10.92766390586379,44.06501206897861,-1.1754947765044368,-7.322372188533877,45.38372450280248,4.796797691924773,0,6.536251367479024,19.496768950683684,49.755408562924046,-1.980258382949167,-1.199327130757599,33.912265073585516,6.434032109958292,-6.990521227205549,-1.0057886658205697,7.281301111122811,36.71768726851799,-0.5389450549446843,-1.111420622197449,23.827782868287052,0,0,-7.540770770749446,-8.595972938192645,36.477579419564044,-3.459566943192315,-1.1298564991277116,-5.305186357222629,42.258951078767126,0,-1.1,-5.101096418350323,39.25386581164902,-0.4897524702222787,-6.552392486788143,-0.5155883549232954,41.80429172898526,0.00097538009089293,-0.10727728666395908,-5.869132371895832,39.51011662545676,-0.9393913580230685,-6.111596418089359,-51.06862499981428,29.29487244742034,-0.9172513526245023,-1.110751605426324,-5.019762132248955,48.56438332206624,0,-1.1062860933412961,-5.101674154036738,17.495883191585598,0,-10.806238371694265,35.39101340991269,-0.297820569935607,-0.4818060392555241,-84.0586048982484,-2.3979102320178023,7.271517161675593,-1.5161865658751892,-1.0726787649649947,-1.7717095885641072,6.51725783262974,-0.7255559143316129,-6.1000000000000005,-0.5726199045307631,4.248139643725185,0,-2.8271440667698013,22.03949862237101,0,0,-1.1057738652734135,-1.2194480511079013,2.5326221855233513,-0.7483726902196235,-0.0682468001542953,-1.1215152791188934,4.065311509564612,-1.0161687018033758,-0.48217747363631713,-1.669956388809277,-1.0774123481187783,-0.2788399936686294,-10.213625,-5.1000000000000005,7.55584583362706,0,-6.106049380886465,-5.1012504404385774,7.990679057470884,-0.5952392519201748,0.17535306153784191,0,5.38550082571377,-0.5990258818600823,-1.042031518264953,-5.1000000000000005,3.697819266030363,0,-10.213625,-4.287208248640437,4.201387460646087,0,-1.1,-4.99469262127802,0,0,-1.1243481138565927,-4.803874638536726,0.4547473226305105,0,-1.1212559165556655,0,0,0,1.1693247539500455,35.72693099622348,8.167857069125944,-0.4935449647628783,-4.124470167006499,36.81065961281102,1.679638045982538,-0.8118313985763254,-15.056086727202604,7.157375447664413,0.5514336096699455,-1.3280991265430484,-4.044764471755093,-0.35621314649996005,3.3910436086200146,-1.1835378331501145,1.817197075464795,24.422210747632978,0,0,-10.215269788241054,7.70856378815877,-1.4620339920473915,0,-7.444627342242049,6.942353127415487,0,0,-3.826055405908935,0,0.31113197929876,0,-1.1058758527390629,-5.101250551094548,21.474787129809723,0,-1.100445037341699,-5.1000000000000005,31.771083586672823,0,-1.1187388898961776,-5.096881251491538,7.933163213144887,-0.8085945063307257,-1.1292503971721155,-5.116842914488737,1.215527996817848,0,-0.3508192337472041,-50.54148287795054,5.976535057186572,0,-1.2040914397009685,0,0,0,-1.1110470442668285,-5.1000000000000005,-0.4002588919299278,-0.5429971504338107,-1.1060420705658522,-5.1000000000000005,0.3545711307384847,0,-1.1544082542220309,-0.1,6.009192676027389,-0.10603591280931089,-1.101159060697608,-1.4102593390788198,6.79733923482704,-8.107041966827058,-1.476659215596276,-0.12009016607522138,4.103583018521473,0,-1.1104464759029462,-2.238205490162244,1.0015861601708336,0,-3.44254611316351,27.230484934012235,0,-0.8890879101214311,-0.23430239851371706,-0.6083314550549872,4.035841963810361,-0.4866781523250227,-1.9819576015255393,-0.18680659313445241,1.6612865499129874,-0.5657547115283607,-1.1,-0.2906743585605493,2.552021545274693,0,-6.0685953383430125,-4.806317012642307,3.5689633095731677,0,-1.141329794909944,-5.239933708332976,4.742981790853838,0,-0.958252768761021,-5.101023883394561,0.6181429689923665,0,-10.213625,-5.107403897592368,0.5585934485977333,0,-1.111513883231375,-5.101105515946571,0.2872329379661188,-0.49087818839864145,0,0,0,0,0.9104357516965661,0,0,0,-1.1514771205322543,-10.2149204117606,8.820164096261633,-0.10690947179980018,20.38890669187508,27.816821278914396,-7.107222593711706,20.417590040093675,20.617420653649447,36.16482142901522,-11.5958473651354,27.32336222607481,10.062899275738813,42.32545693931971,-9.505088487820807,18.12659462109039,4.011660798835372,43.75637388444578,-6.127581498704992,11.8859052510422,-10.302283847446361,22.59948215197006,-21.204676005782773,11.014248147351143,23.46373847758056,42.82420316805314,-7.327054314934516,15.80008435691402,5.874815663463078,26.10762993980462,-17.578679015118613,10.846562363139796,1.7643217265339453,37.11683863358047,0,3.94988437996843,-20.76522817127159,-13.55422874562839,-8.12080224587432,-12.158185369224853,-34.38607479585769,-13.859450500387531,-13.129450855893225,-12.0978508404302,-17.96676861334356,-3.4442178725093093,-15.526375843688438,-11.291109831196474,-13.799256075285898,-24.872941099860917,-13.658144802459853,-9.077266562048774,-20.12621501590107,-36.299459038489736,-13.01352197476897,-4.693132014084071,-15.240961569222188,-17.018866167366074,-15.26395441616601,-8.44627705091616,-10.437188608016521,-22.578635458198434,-15.064196944962887,-8.94522759875924,-9.790252818951029,-12.42353123727283,-8.719260678218923,-6.127044901228879,8.054623007068624,37.37349179215707,-42.483915238557344,-3.3785506833728256,-16.605698742996164,-6.337211989461496,-42.80246108565366,-0.16426080086775885,-16.535997619158675,-5.61905968645065,-42.39348315544941,-6.098357293633142,-4.472895265161138,-10.031204698314905,-41.80046335364702,-8.553093099783606,-9.607519306980585,8.834212927979,-34.65351594694306,-2.907170243999815,-27.1786301027812,-10.969599391187755,-43.653488016057814,-1.0211836314404314,-13.337985125522248,-6.769373483839549,-41.58025374119488,0.5706302669312252,-7.664469524806545,-4.194531382348692,-21.639122074074006,-8.668062173187431,-17.818534105943915,-21.761588156049527,-44.78502280975201,-4.627162393540405,-13.19365327908372,-31.875556426145426,-39.10183872430652,-10.827858331477541,-16.314696864054866,-25.809688073241627,-16.540566614838273,-3.6490950380628546,-12.700341109913252,-13.804353861008217,-16.820259660935804,-9.389244254284703,-17.30776988680074,-23.778733109066895,-19.778983815930953,-7.656548757373317,-11.297890352881058,-13.889115722167755,-14.623571900544501,-7.333567245978582,-8.010507258130962,-9.402146625560988,-8.070739841483173,-6.8493998659778565,-10.754287344239138,-9.690000000000001,-11.303328751387065,-11.307706723096437,18.293753528293394,18.65675769449336,-14.592242530616545,12.474671324258834,8.693270187421172,37.77452762063185,-20.1625175352466,6.652095339084732,-9.118051844289498,11.692879250260825,-41.69883615023703,1.350805714427238,-14.449537432168738,3.8466189827390407,-41.27747827325841,-4.207107836060827,-48.95963833892395,34.63830338662533,-41.19116039216946,-0.48060439601511185,-0.43348399475443333,18.117308361953604,-18.374513433567095,1.5748677097345167,1.0342728356631088,4.6254868836417975,-41.25688411221806,2.6958758060155894,-5.400759011227388,0.32289683543501424,-21.32479455187703,3.303040738799231,-10.846709835773051,-25.63079503038041,-12.990971750781096,-6.834765892022466,-12.202209947488049,-14.472762274589346,-12.997081850965824,-5.4664344520844095,-13.615111177303774,-48.6029258928871,-42.97963716091051,-6.931701966018711,-12.594681779982878,-16.747829853001683,-12.626834711576198,-5.1326282219194415,-11.811761701490806,-17.051152701709974,-19.11768105269754,-7.814626504210289,-15.860409521328343,-13.317769525164037,-14.449429418268176,-9.579030496204549,-6.7367896327766195,-16.577652196973858,-11.636700838343844,-3.9358520780029287,-4.453655629384858,-5.100630272050372,-8.175939681862701,-4.835684840195696,3.992206756994269,22.329062181601014,-46.24705928644115,-2.209246695658618,-22.44360906167617,-9.064785469129395,-40.59777248529389,-7.175606368968133,-9.920994964391227,-8.513244835931694,-25.533813764564943,-6.437437308763423,-20.069098450952662,-8.034457354316947,-44.2052992441722,-3.7008739790327407,-30.657713338814336,-4.172909211184956,-42.35647920153152,-4.3809496705797155,-12.178719291919098,-7.8415041774287655,-21.22819177529637,-6.743444523257623,-4.3355374825417785,7.326116872434349,-11.08613001144619,-4.1921771051448955,-3.4762903583643547,-5.857250909025764,-11.010945388813273,-5.387248027281547,-16.483213576032355,-25.889865974311714,-41.63414819777057,-8.865496358435287,-14.017212348620887,-34.06934999170179,-14.413175626714139,-8.738044759540722,-8.215833452016756,-13.828192533392777,-11.156840668289329,-6.298529730926708,-9.553877930278357,-51.011811503651366,-7.791242689062501,-6.298146705521845,-13.716139478991632,-49.47175211442441,-11.505494439125988,-10.00286069952555,-3.4670078176804986,-9.724994723138797,-41.189988738699014,-3.4225306782948675,-3.0341362028747234,-5.11622317608931,-4.1069806555165105,-3.1786948835147304,-9.420852852799571,-18.398761352779058,-45.63117360788759,-4.144206037794568,-5.270980885181482,39.4773521749163,-6.895047464882077,-0.11261965360867512,-2.0901800703740108,47.585604776842025,0,-0.3590517506271886,-0.4721684746217598,39.97934606003249,0,-0.746809852794645,-10.086858374631216,19.469473550196902,0,0,-0.7173050085854247,29.857157958217165,-1.1402360063492165,-0.7181208366591396,-1.1104265285381734,24.349565639315262,0,0,-11.89323009247717,36.84392263754154,-4.127093017904197,0,-0.16610282336921378,8.153597671935255,0,0,-16.037105842931332,-9.096073753949852,-4.791952464627468,-5.984578254416628,-1.9745138521307941,-5.147305439936661,-2.655724870004282,-2.4440885055737596,-6.719959722599365,-8.822132401430284,-3.53363796172357,-1.1587129163699603,-1.1014870061060318,-4.612795337491472,-1.8928262782919496,-0.9316333043990505,-8.427600891122312,-4.888469301657152,-4.0178312624399535,-2.9330145609913103,-0.7569697877250605,-5.1068755359375,0,0,-1.1115783171975413,-5.101558902466749,-2.5262585372642086,-0.10690579768015503,0.20513681933012562,0,0,0,-1.1607653629915051,37.75502100759099,-4.4368406646025065,-0.5670689062709015,-4.385915388110025,-5.856093981377608,-4.019048558503416,-3.300353810704345,-10.331839936119295,-3.1998787138136753,-4.1000000000000005,-2.730310815381178,-19.30860825259378,-1.1252299035714792,-4.205479128813357,-1.3652435130960472,-10.213625,3.3498643944127933,0,-0.21916852215959284,-6.122921708088867,-0.8711073222277605,-4.319491875154944,-2.128897524277468,-10.52414170195882,1.1401576290064248,-4.1000000000000005,-1.1285479196409907,-0.0020873396265724156,0.014279847593486973,0,0,-3.2882027120703894,-4.263120029051918,-4.561038708749289,-2.7820419965208814,-1.1051236325363967,-5.1000000000000005,-4.117227828125,-1.3174969182540168,-6.104656582188429,-5.1012696310668915,-4.11723509934088,-0.45064562923905616,-10.213625,-5.110842432993109,0,0,-10.213625,-5.1000000000000005,-4.419438724088716,-1.9687524160374514,0,0,0,0,0,0,0,0,-1.104721874904956,0,0,0,-1.1056111705592029,33.614358055737085,0,0,-0.6657351076652891,36.38469446376199,-1.187414735508953,0,-3.323574641254064,7.103440844490033,0,0,-0.9684048629060114,0.6145205789734398,0,0,-1.1,13.9953458332499,0,0,-4.07083313389427,6.169883561062494,0,0,-1.106986703844999,7.3247453544374,-4.1000000000000005,-0.9423198938254234,3.787596794941874,0,0,0,-7.5948501000791175,-6.40205932250865,-3.8433061973442975,-0.7926255345375098,-6.1012375,-4.103234833524357,-2.661529403244973,0,-1.1105799017014364,-5.1000000000000005,-4.722501337482171,-0.1,-1.143106753885485,-5.101249148042447,0,0,5.047538605290926,0,-3.8505615114761356,0,-1.4936997165576114,0,0,0,0,0,0,0,0,0,0,0,-1.0210179164691755,16.413883760049423,-4.101308625109804,0,-0.8353717022908449,-0.9553899856620158,-4.4962543987853705,-0.20182828437584188,-10.213625,-1.3241628303463793,-4.2500364497985235,-3.513640306901009,-1.0535680743609583,-0.4975924909697951,0,0,3.982351419290489,0,0,0,-4.459963056344298,-0.45532499112585917,0,0,-1.1,1.8789410612963997,0,0,-1.1086085257418394,-1.0151792005879818,0,0,-10.213625,-5.1000000000000005,-4.188697787814809,-1.8145898822443856,-1.9017003276539461,-5.101244241540735,-4.101243482922281,-1.927232578389352,0,0,0,0,-10.213625,-5.101250251697243,0,0,0.854016901595275,0,0,0,0,0,0,0,0.04980107267684169,0,0,0,-11.092145733511458,-10.216018399383973,-7.796883311285095,-2.4729556531135244,29.39218103227503,37.89623740851676,56.085047975816906,-11.444025303772065,32.11343842841566,40.16237776808987,54.46801408300831,-11.684844732430964,32.44305133352567,41.24686331729367,41.021737802045045,-11.63837682091009,26.394383578217496,40.0285597486875,51.49848964456876,-12.403075388890784,30.66538839289261,40.29112201752293,54.291782234372,-13.123973940060761,35.58688762560048,44.1988926595183,52.60325363316842,-13.198008812435491,19.647648434204985,40.70401582624114,51.25102264353748,-13.685140276715847,14.874827578041563,24.80645152677497,51.30489343981194,-10.021842890886596,33.55933974649597,-3.7858251548554485,52.576400543163594,-13.938643862372897,30.57309729043557,-5.977019126708824,55.99320322392293,-15.532476593476499,11.130525067544704,-14.65179890779634,55.333768859792826,-12.36221722822798,30.483783244805853,-9.037610134029194,56.228954681592775,-10.335131360540027,27.882777862307783,-15.10801660547425,48.81089629108082,-11.182803134694796,22.01795883640146,-12.034499162114598,48.842030414750035,-8.735868517745395,24.202746370347448,-12.382761761416802,50.76451642727284,-10.108946117291609,6.618169296136113,-7.034957256519757,51.85311560396632,-14.040863185078193,26.262246919970202,34.75235104981673,53.944984004788886,-13.665799939433356,20.831515333419322,38.87676753510145,53.084239378242444,-14.269623840244103,27.57759515998803,35.103298478986915,58.496289384937214,-15.635996238454375,7.218716300575249,28.509128964700295,54.269965769139496,-7.268958788248768,12.350243928022964,33.24861987608443,54.674969633672475,-17.825937710280858,3.1423453058313395,20.500998552990268,51.7859818163414,-10.010262305838786,7.556575411946179,28.668320297134272,53.72259519102205,-14.150286648584268,-2.293361060658386,7.141473635380494,54.26990744028399,-12.509799031606553,5.5446456779711735,-12.418628367384176,53.252869366853474,-15.608487827298067,2.8029130085735683,-11.118266338585517,52.78384552181444,-15.360661176285955,7.862410962076355,-15.12032377027269,53.51943891601023,-16.840207688037633,6.104398083156637,-9.614575202098628,53.30616943633001,-43.9264615418127,18.23971303017555,-14.452779324074834,37.77551419968972,-8.384088864414382,6.566680784567829,-9.1235893663623,53.40470397813002,-6.2177976133088535,28.682592783034817,-9.834531580792127,54.67515730352821,-9.679638482462178,-0.5846450793583204,-5.134949901511129,54.28990884602394,-4.385434667578447,31.401562370195105,36.46435507056624,56.55561619694955,-14.554892960087892,17.942114099286183,32.91314489521041,41.940536101257976,-15.819386328447086,25.518501575022647,28.983857997218134,50.041760457230524,-14.763863651328696,26.209622988006707,19.125260042005305,49.300488378986735,-5.872097174869193,22.25574876256347,25.43820160666598,56.477177923856466,-16.046503039469282,26.923175004292776,23.649194890856567,23.315018442565815,-8.81204210562423,9.415985579966074,15.647121555281505,52.69943197985719,-5.654989605480594,-3.5659395530740743,39.91268080210479,19.04558382889217,-2.592358068720767,34.45251317380356,-9.941101284616218,45.90602806797521,-17.682698345220235,9.829697562831239,-10.85013205406526,52.5508548877539,-16.348151301335903,24.870266553763216,-21.666463289046188,49.86690344465131,-15.18027188903955,2.4028677729905032,-9.818279021740782,47.52892015365788,-13.211733993474894,18.519182682902752,-16.609139081530998,55.3913160871775,-8.997686002660327,5.502685090530216,-10.61349460681198,51.93128878132463,-24.05464817481362,37.372381164634966,-8.87212669877913,53.22587823137064,-8.20828347811412,2.004612144949408,-9.697150387179994,46.509741006537105,0,11.725264788472666,24.324781946648113,49.10665532471246,-15.419226618436355,11.87165089239964,25.751536869622115,45.08050625316979,-15.407246654897879,16.3229503268239,23.326233920960625,47.12601850781416,-15.664769254183389,3.3887860060271695,5.449931707839378,53.259431953616584,-12.69831784518735,5.330611932580051,36.11687927896376,51.79063630906368,-6.281753184005643,29.35374302893924,6.117818242532191,44.63406027192418,-13.591815246470157,14.510028023411202,15.667194472317215,53.117329905743844,-3.9352406716018495,1.833863748832767,-0.10622177497335739,52.74874075759442,-1.562658904524735,15.062743993060286,-16.857307482434532,47.9105588260279,-9.102566228554181,-1.0233839143013104,-8.862762648908662,53.76122400622552,-3.648083925390525,4.850484845274995,-32.72335861064401,53.350142272169606,-11.863375915394736,-0.3229327344215315,-5.1000000000000005,52.981966947960544,-2.016824226866491,3.1562232002917705,-6.70420516827751,51.678006429083396,-8.594888816171657,-0.9590882623633581,-5.1000000000000005,50.172359142883494,-5.100299165793941,0.2040158407120921,-5.101139979674485,51.12351283852466,0,2.2456830351500683,-5.306659221105052,53.01731115730751,0,-16.967927505100775,30.789974610893385,52.16749537027143,-29.211532099758877,-9.216333419175564,46.268897447454535,14.353161034394276,-21.40674026219585,-3.495712848584452,44.294004730201166,52.04702779862504,-18.937007513780838,-0.0020494922811424843,41.665327226974746,0,-9.584908892034132,-3.8846176808035002,13.21539531605549,53.58265646065829,-5.077441862975346,-14.443045461325244,44.39197912818614,5.041844084624872,0,-0.939713610411385,43.74587178492266,48.807031008940804,0,-0.6438230942228764,28.34128321887626,0,0,-3.776435218345245,-6.782778747683004,52.07254762075651,-51.75418336961053,-6.482155452195082,-3.389039520870148,53.28454424999158,0,-2.646082080754735,-3.977690307577266,53.42336757476879,-9.568580268232942,-2.4070204993911473,-5.101244120212009,50.953756811773005,0,-6.45730018196641,-5.1012375,53.074168872484464,0,-2.280656638458979,-5.101244520853286,48.857193993855546,0,-10.213625,-7.61922744462659,27.141229441600892,-5.618224611222473,-10.213625,-0.5114291603789056,54.637890271709736,0,-8.028675791952605,37.99486264332764,13.126918268502369,-5.05706861124211,-60.86841212075681,-1.7633101880328514,51.06404739319678,-9.779148766120846,-2.686680111504353,-0.19208611099553125,52.68693655520375,0,-1.1114190728482518,-0.48097898095125347,40.32668485334939,0,-7.315813337179097,1.8122554408136258,54.533306228352096,0,-6.1000000000000005,-0.4530190984919836,44.582012058596085,-5.043557285557846,0.33186602977833957,-0.14037136092248104,39.14810852760548,0,-1.1612211903935041,-0.10637466500276982,9.633454122844274,0,-2.771795392232089,-4.849494029824854,52.55344657789453,0,-10.213625,-56.41809412004642,40.38944071532835,0,-1.0170733982832634,-5.102013488781732,27.860212752777194,0,-1.1048939670437647,-9.855732219587185,16.914976869124892,0,-1.111256656140945,-43.816555863114914,33.086034416209834,0,-1.1050940674006757,-5.1000000000000005,31.206134787455866,0,-16.044761835555143,-5.186024699652779,18.710537899108953,0,-10.213625,-5.1000000000000005,54.94166665410206,-5.455878916664433,-8.044071800117681,-0.10011915386523439,51.188990503508904,-10.13806444896331,-10.213625,37.14647636878421,3.689240838699644,-5.152297108775425,-16.646987359076924,32.73219183958931,0,-10.011172404526917,-10.213625,27.761288699972432,0,0,-1.1115011773876124,-0.1,44.93100478075832,-5.429755634695499,-1.2951583790779322,25.685135285571103,0,0,-10.213625,9.342093613057434,0,0,-0.8348434950377744,11.022411351612153,0,0,-1.111748385618138,-4.861442082410048,55.69034311086389,0,-0.7243829667794843,-5.1000000000000005,56.60198253789094,-5.41779216172157,-1.1053427520485863,0,51.25843112485808,0,-0.9196685779911702,-3.712159745379401,22.160101898450606,0,-19.30930163639887,-4.932274021215823,36.03489147138953,0,-1.4990970534308508,-5.1000000000000005,9.73274020791552,0,-10.213625,-4.692236948586645,58.68673990013708,0,-1.1115172687998862,-5.10758594759696,0,0,-10.213625,-0.1,49.086078804525954,0,-1.896444787538817,-1.2558748791618497,53.53693543528801,0,-1.1259301553803522,-0.989881024566237,49.59175188745058,0,-6.1000000000000005,0,0,0,-1.1,2.18261944394574,38.94614465872115,0,-6.101212542536473,-0.18412457596833598,59.961454694338045,0,-0.9368049379741864,-0.5703156592584828,8.697739952661559,0,-1.1215121633373681,0,0,0,-6.105989916124924,-5.1000000000000005,33.40494001270714,0,-1.111392936389288,-5.117227828125,11.033092374377949,0,-1.1108701508343761,-5.101365337283447,16.39596136511277,0,-1.5171625606074235,0,0,0,-1.6577878769848429,-4.924678812231004,0,0,0,0,0,0,0,0,0,0,-1.11087844748715,-10.214874738253423,12.688125879828124,0,22.64030135442815,45.19990312965564,-1.6600415201591314,-18.90971526581093,28.701571555676697,46.89242192734373,7.406693916860255,-18.135309143576965,26.243540714269518,43.7791168711706,-1.2736958449886877,-18.704418792312115,4.005063601280358,44.489413675123096,-17.237093412031886,-6.204118292318833,9.76010446166019,44.81520716048193,-4.934815091687128,-19.215190982261433,2.022520775942224,43.26126406231084,-1.4229370706635618,-4.974279375974918,7.414872837318121,43.819409204096104,-5.1369812916879045,-15.328038038181845,6.630835574260197,42.657046583724444,-0.24655794160011973,-3.933515309484031,-31.68756731847204,-19.528495111826313,-4.404336508031343,-42.08322153588877,-17.107486220072776,-4.894319905146356,-15.159745901489096,-21.8833632764523,-13.755922621908256,-16.049702861411358,-1.6564003764461157,-20.999148048457517,-6.562831487063353,-9.564658346760734,-3.59228492087597,-54.47062336276559,-19.219053342649236,-16.21236286189033,-3.5735630061372623,-24.12386059787412,-14.239164811901956,-9.472353268504406,-1.0084975450063227,-49.16955096432672,-14.092509153270177,-12.659729322791456,-5.882233304214359,-15.041763470004744,-11.609412445114476,-19.220875235690702,-8.081631425186458,-14.558996984702173,7.380550230251577,39.7084763205161,-0.19924416161475725,-27.858495382295327,-15.625224790784081,-9.01449617729017,4.185405080665368,-23.93208338313083,-5.6005437563554645,0.47565868588847593,-31.840664857412094,-33.102356296253554,-20.16884060804174,-9.515016598211467,4.898595049195342,-30.787104483214797,-4.626342617872467,-1.3992476379465804,1.5874850927940058,-29.637548207260075,-6.165230498123258,-7.930881200637115,2.5349267490865532,-16.56594252170953,-9.939834814170146,-6.1930409834332245,-14.754049526554248,-26.136451633668578,-11.4658622986565,-11.018030267343178,-12.452200389658879,-50.02310751445307,-10.48559408363129,-16.022852859212442,2.633066478369288,-26.864853332157175,-6.834902532257033,-5.1012435710696025,2.58844539772725,-9.84225708432816,-14.200191737793272,-13.54499098708935,3.958773535313472,-17.807083354820502,-2.4793124007843295,-5.112645359072853,1.7242201671853166,-5.101250150209714,-17.77388393569328,-20.422262669984683,-1.5771668404581427,-17.67108847808658,-7.129360055974511,-9.690000000000001,0.5904290671036456,-17.455687159265096,-8.996508110093297,-13.620643315854373,-6.600265295534996,-9.684809819627816,-7.58146684263302,-17.541289966328584,5.2792681939159865,-9.83017356890216,17.04082252662371,39.338386581605214,0.38030975121651456,-32.56735839926449,-1.1159168036022007,26.88939081384783,-3.5477903032264244,-10.265311735556551,-31.588181652043847,4.067019679823978,-1.3066110755216624,-34.50821863885243,-8.293195871360087,5.155222253326552,-33.769339967049646,-14.291388445259347,7.1753118103997595,20.943554383773744,-0.27671760437664883,-34.0301654459052,-0.06064196428253431,8.653350360386302,-5.986202469135755,-10.753873829345704,-2.6216266228264753,14.395410820785047,-3.804566428596641,-15.259745138103256,-3.7353474340971218,4.509925870214069,-4.750248237534483,-8.200301296999116,-63.39688784333512,-22.39281473868032,-0.08264873691078112,-49.69741496697739,-10.539964098821148,-9.696865221433104,1.5679091411091364,-17.649272273913596,-7.772084456132274,-12.628964424513834,-0.5464717530484307,-9.862103236369535,-8.624052218035537,-5.1172417075798355,1.5090830299385536,-5.102498535206411,-8.252271931416423,-6.37969848311714,2.941862836453472,-5.09680119220782,-7.579477925253379,-9.697291082236752,-4.095195592967981,-9.894517678569958,-6.096156475009114,-9.690119950567045,2.8854303992432504,-9.680645436760262,-0.5700744651306304,-5.1000000000000005,1.8767290040438382,0,1.238429407272449,35.598561672099905,-6.797167899214949,-20.683422401701847,-8.603087599177853,-5.81607845457356,4.135912298525398,-20.792847882175533,-4.370621205714009,-7.640885291245956,-9.175172007249891,-26.52222223180949,0.03936617749050475,-14.867964643479104,-18.087234621649465,-32.890113240732816,-4.810527212777117,13.121642915973254,-5.657022682611887,-13.606968505132206,-11.884728003755427,-9.914380940235636,0.09741214122413233,-26.919886196588823,-7.7573789219827045,-1.6271538694137484,-6.770500766982147,-13.805778847946522,-7.8641830482731905,-5.71653369934018,-11.786253687787408,-9.977639603143754,-10.292739945470121,-16.339802386233888,4.961969056250424,-14.019400324382254,-10.621245423988617,-17.655789403659703,-29.7105092410221,-21.245255404505016,-8.391745315258662,-9.416942343570025,-10.63746842973898,-9.692572409627132,-10.817098383908746,-13.821000000000002,-41.01564981456917,-10.022506818879442,-6.613955391096084,-18.762086066717366,-37.80461968834553,-51.01276020132496,-3.2952819742190904,-5.1000000000000005,-1.384393147254436,-5.106869209530515,-5.955580834234955,-9.711933407578796,-6.959764937000288,-5.1908972572687855,-9.96502495268351,-10.212625775445646,-13.780742924878892,-9.736094008432667,-3.4876435864277093,45.67845170184526,0.017001341823211648,-5.272083283257841,-1.1046125,44.80031320079055,-0.3099154905360333,0,-1.1,44.180664425233196,-4.1000000000000005,-5.106981703898736,-1.1001125,45.08844111974741,0,0,-1.1112295006949882,32.46966703868014,-3.2974786597239447,-5.253863928571413,-10.21802281033755,15.403344921232282,-3.909164744486844,0,-1.1,20.794339507100542,0,0,-1.071095009217273,8.566305320381142,0,0,-11.0023737407281,-3.127467417341151,4.715484170625035,-9.712855711828247,-7.101808724888771,-5.110363459553985,-0.37005918290612766,-5.082989890395989,-1.1058874553707367,-9.259412447859123,-0.379335309683698,-50.999800082176115,-1.193286169599468,-46.424462432980135,-0.815699684412984,-5.250606511013462,-11.299533009219953,-10.671857679361104,-3.766813267472669,-9.710118033837217,-13.10886520336994,-4.6650485405298845,-0.6560269802667321,0,2.578765611466244,0,0,0,-1.2609149074614339,-4.333206263404917,0,0,-1.1991774770525805,35.133029388133664,0,-5.1000000000000005,-61.005598287449104,-0.10659625795386625,1.820706597155179,0,-10.213625,-1.7245538248152337,1.283109926380548,0,-2.1114845279081726,-1.082941549174031,-3.8687499165507213,-5.101267435362788,-6.110665786815166,4.91039707703595,0,0,-1.1059279390319112,-0.19315943768783003,6.053636481371878,-5.101242954935512,-11.208447053975457,0.6438195357257257,-4.107122375848333,-5.106205692358455,-1.4814152916388892,-0.564755366756171,0.43517177669558155,0,-1.1055127033866206,-5.1000000000000005,1.6362458907055397,0,-1.1051500836473869,-5.101244127935909,0.21897868825536582,-5.112640608698646,-1.1008606895968587,-9.403112065306251,1.829388121595639,0,-1.1051597902598178,0,0,0,-1.071020356239079,-3.4984667772825184,0,0,-1.1113003472338796,-5.1000000000000005,0.6632415192496918,0,0,0,0,0,0,0,0,0,-3.163270368823218,29.27199629064485,-0.9444925149134392,0,-1.0786871338518982,19.455055210224625,0,0,-0.22119307922494846,9.530018822743344,0,0,-1.305000515446189,1.3245599566756758,0,0,-10.213625,17.404583909801524,-4.1013618429277345,-5.1000000000000005,1.8823543426208074,0,0,0,-10.213625,0.323003501671782,0,0,1.0589591562695486,0,0,0,-11.209576158965792,-5.101240408901087,0.07175104533556875,-9.837639010407022,-10.213625,-8.592449376117363,-1.577814400741259,-5.257876790216974,-3.823532784527298,-5.1069878902231,-4.1000000000000005,-5.1101952607458205,-1.1056870079149848,0,0,0,-1.044888200649819,-5.1000000000000005,-0.3056850117336126,-5.106412528996558,-1.111500137994564,-5.1000000000000005,-0.9699993762480006,-5.1000000000000005,-101.93950125320569,0,0.5632844832023817,0,-6.111337886448207,0,0,0,-10.213625,18.97581532034136,0,0,-10.213625,-0.2033960299930509,1.922129437346765,-5.084475098271337,-10.213625,2.157184557703986,-4.1000000000000005,-5.1000000000000005,-10.213625,-1.078874448722722,-0.19216772153143893,0,-10.213625,2.5319713754288644,0,0,-10.213625,-5.588691177376319,-3.2924029956647325,-5.101249237833028,-0.7768163051868853,-0.1286985653416864,0,0,0,0,0,0,-1.1897007932578492,-5.1000000000000005,1.0417797002742977,0,0,0,0,0,-1.110465949072524,-5.1000000000000005,0,0,-6.100754897574154,0,0,0,-1.1126841839011083,-5.1000000000000005,0,0,-1.1111079808310063,0,0,0,0,0,0,0,-1.1012597961236474,0,0,0,23.223265141145326,30.216607149686798,45.40890667522981,-23.85788951751586,27.761702937721402,43.84327982954997,26.1582233690892,-24.83865880447684,19.469576306351552,23.02774385769479,37.53281185062189,-22.37644942825965,17.713644575193502,32.862501714269456,24.764155284873333,-12.452216075223367,16.491751813753854,33.09826334795512,23.787600446364554,-22.85522969071742,20.372219217954378,26.219606478521307,11.784915481090007,-18.48053792846808,10.782423621658882,14.87733756172518,22.15331231438196,-22.74230377091795,17.931750411944734,11.196766766431132,10.746118496663474,-5.29795281410174,-26.979753297044184,-11.662892561577879,41.67465863141922,-23.80002233501415,21.79452100381104,-11.3755803571316,45.123891230258046,-14.757912592506258,23.774319336978238,-21.139704954689815,43.44471378326779,-25.385606166327413,16.249348181387123,-21.346117363142636,45.089319983168295,-8.828367549167597,5.942101059707348,-19.115578548810326,29.310917381169986,-19.303778589168267,8.286017519055928,-13.891043591265367,36.58497308150354,-12.970545351827104,2.1194074408363077,-8.00447692001623,46.43531357547583,-8.94325646693523,2.2430054831123556,-8.490723661705543,43.41352819538379,-31.366437423145094,18.92290281706962,37.00112699083065,8.649297552185331,-41.028064959595625,2.7478203728993984,0.14351262700973832,7.577809979174311,-41.18270921575118,-2.7705806998397873,-0.20336999318554588,3.8776455259487403,-35.430330227360365,1.7580725885469835,-1.105317035718496,6.364656224298492,-26.971787963744198,1.5013498516369201,16.60929199620898,-0.9128269152462379,-40.48126441220045,-5.7566807472513934,-4.836953963286972,-5.170195235708886,-13.253279221785622,-4.947770776835533,-0.9353638589455535,5.407331182080632,-25.30852742763469,1.3275920854452794,-0.07093595944228497,7.672408509729631,-39.43977289669225,1.8390610551382682,-10.081461697790417,7.458319780751088,-50.38578774518915,-5.483940846045964,-50.3160550697573,8.489083194363184,-17.71536749823795,-6.101808925619466,-45.76181469437309,8.807982351835726,-23.285818632364187,-6.504192962109817,-13.914933403433587,5.750390528109092,-9.552220636955996,-0.9347439087932454,-11.950657037374489,4.753286880771684,-21.011238505949326,2.504295479445381,-5.071568862207577,3.7652897756431942,0,10.941694437328536,-10.315575087175082,-1.3910263659407762,-23.940600099935768,-1.8272292599398778,-5.1000000000000005,2.548722321128756,0,14.684543777111095,36.734791366334306,21.021716180836503,-37.10176012822594,8.439284113806293,28.63290058716032,8.005046141159937,-16.20689921838155,-27.885987897496285,21.201363698360296,6.771581898109506,-36.77281508272587,-41.396547688756044,-0.19405543784214924,6.679619708219199,-20.798018416306558,9.618372716061419,27.232346089597876,5.639438443197166,-34.586148908166614,5.993872302747324,1.0587609289476059,10.985645545527547,-41.78928998044246,17.74872763855225,7.505775901976139,4.73886435899392,-28.128660330613496,8.242903705528962,-0.04930057199179638,-1.70957162695288,-3.7339376345843807,10.541183961207283,-22.857973990939847,17.320787077446504,-25.600831823311815,16.684884343985413,-12.660133052392661,31.839781122846578,-4.850497334614516,-38.37340938450967,-10.960377151274162,4.587509153301944,-19.843309860549923,-3.2024748111279404,-9.665115723905165,5.779133884395536,-5.125259362777266,2.753481563297747,-18.76947598035258,10.365200391020638,-20.700431463457377,-0.8680738347386202,-8.169845582170558,10.998200489925194,0,-3.5579163410627084,-46.73084845903379,3.540081259098985,-19.077799201606563,-6.1000000000000005,-5.101250444992116,2.2022635923899965,-4.009892870201975,7.566807464751813,27.492404619129932,3.7763165671520866,-9.503690624132314,0.5248005041238759,-2.1803708872861245,2.2393615385843724,-23.605172852653194,1.9731833481916945,4.929565178998189,6.4341876503993625,-29.66995615462959,-1.0278709506638026,0.6452385956579905,6.044836436877641,0,3.4440169996251755,11.494023843897107,1.61383306096383,-27.784647733127258,-4.210387472987666,-1.4603426461502402,5.7182453989376505,-5.1000000000000005,-5.842696300247668,-4.057319528942543,5.331507205639214,-13.69303651313511,-4.148046945890888,-2.0214849557474754,3.3700183363513045,-9.733435361231415,-4.9943012927632395,-10.07471497974008,8.914387159577387,-9.551925631143542,-4.516413165739959,-17.3774793322592,8.739313239721918,-9.559722121127184,-3.659680830021702,-12.777264426853609,6.382042033236738,-9.584836319685284,-0.1561514938278954,-5.100531463792688,4.85008009152686,0,-2.975986385330765,-12.033443333172535,2.4625782360035036,-4.944387043606298,-2.0004046779263245,0,5.564001877518884,0,-3.092264886252411,-5.106570356621787,3.4651097997518896,-9.653068609099464,0.7080175737196119,0,0.9590154151673312,0,-16.410819345516515,39.52167381609742,16.85912567365571,-10.902915098071881,2.0832284115042805,41.21708538770845,47.60513358905984,-5.371940466966202,-86.36299751363725,41.21542916024487,0,-5.829438468345524,-2.9113223940467905,25.44561456534126,0,0,-6.11612992008757,33.21585153279062,15.03358247500219,0,-1.0608465162725957,26.0105514953609,0,0,-1.4802621609879079,20.282435626836325,0,0,-1.4713936534072642,0,0,0,-4.051871917739618,-4.8626642098809905,41.94993930831168,-5.499094673928013,-1.1599167028880737,-5.106694716664557,31.11843070350543,-51.05748158549111,-1.2214570136265632,-5.1000000000000005,19.819349966546195,0,-0.850476821769775,-5.100752248399366,0,0,-6.106863348344142,-6.537931714101871,32.51748957459304,0,-1.5197125126817315,-5.101729478347093,14.940653968267721,0,-10.21782837967261,-3.736337486765431,4.661767674011729,0,-1.5211506615321764,-5.117227828125,0,0,0.7801143528226886,36.083445554106035,0,-5.110663822963208,-2.9354387725409143,-6.598076494231766,8.291612032435914,-5.101243077821012,-9.321611031017733,-0.6807922753213865,-0.385682061361858,-5.220673310408426,-1.0421994469128888,-0.19604475840318566,1.0327301738076091,0,-4.008359375509413,4.8402458750219015,1.8073825542231043,0,-1.1164798310984303,-0.42581464428239385,1.7345623758431414,0,-10.213625,-0.8569519216753745,2.082338295025549,-53.908904733552255,-6.1000000000000005,-0.1,1.6817013828647935,0,-1.1046125,-5.106887070369141,4.860545072840273,0,-1.1679509660194907,-5.106809364050363,1.0201666835830838,0,-0.9076885662490795,-5.106869066997373,1.9148057020398337,0,0,0,0,0,-1.6015595641633007,-3.7152213767820785,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,32.405728676991814,2.0378819970140705,-5.060497356245071,-10.213625,36.85871174924699,0,0,-6.105935422560904,5.311119395907052,0,0,-6.106988053181642,-0.10701077343843496,-0.03799575623254012,-5.390719149319009,-5.081671180874629,11.204651511342375,0,-5.122155945519758,9.206757188919832,0,0,0,-6.7630083684513425,3.3108285206178185,0,-5.1019532440898825,-0.10604550967294868,0.7248132122227696,0,0,-0.25456244728808336,-6.20623631403714,38.66244291885346,-5.088262797174559,-10.213625,-5.100870401829827,11.46441831530404,0,0,0,0,0,-6.106166539018342,-5.1000000000000005,6.124198129899666,0,-6.089353860103833,-4.851751313977308,10.70771111554629,0,-2.0426100775194143,0,0,0,0,0,0,0,0,0,0,0,-10.213625,9.53739670628727,0,-5.117227828125,-1.1684479403815808,-0.14826921956256298,2.1634689281401474,0,-10.213625,1.8177232832252086,0,0,-0.2643477751584619,-0.1,1.2089905685108915,0,-10.213625,-0.1,2.646685590623664,0,-1.178153192089736,-0.1,1.101089290748893,0,0,0,0,0,-0.6608395296280785,-0.566819091581641,0,0,-56.77136347777027,-4.742462490952906,1.0900294825116998,0,-1.2446041266494259,-5.1000000000000005,0,0,-0.044219560019758575,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.486008797014625,-10.215296759896642,-6.858929592702599,-5.107108031465031,19.161696862800742,36.245074547959874,-6.641368543336681,-24.02203181165387,10.442190481303369,41.901385729234434,-4.0623286695009,-11.908208836797362,11.37420082385147,37.5856788132706,-7.704855600485811,-20.50583767921246,3.4743303319640866,42.936375922206,-33.71482467915589,-16.134272524900666,9.348875588595753,27.696108407086854,-0.49176640940422306,-7.126861489515482,-50.285653847039704,41.56417997985421,-1.4152759618281185,-8.697897228814632,-0.9530951492241307,41.19162333764414,-2.326075837065746,-6.425059445031777,2.1735435157795218,34.776672098152666,0,-1.9866495899301968,-61.76127384323192,-19.619444897718495,-6.981834611141681,-24.352611906298996,-16.986655138402877,-32.240419155216436,-6.8044127713012275,-22.0497721592675,-16.850384159310245,-13.793537650478891,-26.37612176872493,-17.636381925914066,-61.061238589158286,-23.823909631402046,-33.983527622542624,-25.532516151425746,-17.987695505884727,-16.557464711691658,-13.626515391835106,-17.565771244482416,-10.617702071412623,-14.19029177089508,-12.302510761452757,-51.769641504055066,-8.232327779614296,-9.544150925855021,-10.612981722701463,-9.841411722602171,-3.19759467845032,-38.73090122131087,-25.50210237648865,-18.494866647025137,9.80012761093561,36.164344255073196,-11.216493552663668,-5.1000000000000005,-16.59933899032844,-7.173374723056833,-32.51522408055324,-51.14197881486932,-10.7864582827204,31.73460978466632,-39.98090658772445,-27.018633000095836,-47.99655375453415,-8.770655436801473,-17.48853478244586,-15.318680128295512,-1.778475823545135,8.392785543715734,-22.42977576780968,-23.903100815108388,-19.302788994969745,-12.110853311478486,-14.550478597533541,-22.405081258744445,-14.012096765385499,-9.146262372126605,-19.48512810948944,-17.869911513430853,-12.141241597759802,-9.986096595300294,-14.106226789605138,-13.854544648056539,-12.074074962852135,-22.344500337598134,-23.960126738822478,-51.955745719553825,-21.81908186134955,-27.120920006428435,-26.30839993931028,-26.4783427398953,2.44008127072255,-9.710836717783167,-11.062697680779543,-10.077266811463812,-2.3223891455124033,-13.896603025760676,-11.17636329325695,-18.125880430015744,-20.556822998755713,-21.34521609641181,-20.397360889824856,-51.22989869060579,-11.23605908235004,-13.833463526937043,-41.125186329243185,-14.385104052174775,-9.694578222597075,-9.09634042925614,-11.450454218538724,-10.142006604601164,-0.743088927283997,-5.111277233252272,-4.1000000000000005,-5.048541720820539,0.5200810543799115,30.974628392830674,-9.039876179418416,-23.141905716670646,-0.6822935448648964,36.3666014272421,-6.642201332754739,-8.763487922953143,-0.6064799433578876,6.587810968868132,-33.1739806663378,-34.38423995702816,-6.610539033675567,3.0633394644203626,-8.69648965009052,-5.130496762767757,4.636615315415999,16.37375261831604,-7.765914039192067,-12.754627838617727,-6.100069492463637,31.542765405913308,-4.1013627770288625,-9.334584752081085,9.723138109269525,1.402987689651295,-7.937773193449143,-41.1106659858701,-3.879845968382461,-3.9237395828132935,-7.627808850855371,-13.364826320830524,-6.796334147197432,-19.289734473202795,-22.589899011589583,-33.816520889468954,-11.406117006984147,-15.352050453129158,-14.436612064401452,-52.48981353161995,-17.417863600532293,-25.17180774561076,-18.664032557550975,-17.54126748330673,-11.323537224284122,-13.499719614415557,-45.760043898883005,-14.668395168374218,-11.967450900504645,-13.047465505336104,-10.213782589943648,-54.77710922995834,-71.29855557505616,-51.00415229038639,-38.367220953942144,-32.17518466192086,-0.7404697616426985,-4.348978471709196,-3.958399881762005,-5.456170017600419,-5.650498278332,-5.094116124100943,0,0,1.0050908869878414,33.77523861951446,-4.62114659578836,0,-17.02515810845713,-11.848055743735465,-24.16710104736042,-26.550158660155947,-5.912287145590194,4.277373373901596,-16.673001240152328,-9.682418071732455,-10.445426293711208,-9.821130840439066,-41.38336884515437,-13.370930429957237,-3.4703721053819727,22.059107552050857,-8.737299763611993,-9.541566732878804,-5.572263514441466,-5.4136883067110535,-7.33112064859079,-9.570792782357348,-4.479327785498814,-4.254304769970934,-7.600819966519174,-5.116430419535056,-1.9090852707547257,-0.1,-4.481208453988592,-5.054565391248428,-16.21089999559242,-19.319760646447566,-19.22724692778716,-17.040392023291044,-5.149114628899706,-9.696772091734461,-8.328614238114348,-9.707298587963201,-7.812645891165819,-9.710406355131482,-10.832623711914952,-51.066468255410015,-0.6637501876523685,-5.1000000000000005,-4.106988057008415,0,-5.464992418215334,-13.327979746044953,-8.175837143052167,-13.823957612392533,0,0,0,0,-0.5040095988699899,-5.1000000000000005,-4.1012438358816325,0,-4.79290211781584,-5.158538965858198,-8.704298775248912,-5.100398629297456,-0.15557792407944346,34.72867272798785,-1.2938692709606021,0,-10.213625,25.686726580941873,0,0,-10.213625,11.25763492752825,0,0,-10.213625,26.599302549002218,0,0,-9.865131490087812,10.673584493410544,0,0,6.643610286123895,0,0,0,-1.1109970073456776,5.590637994072587,0,0,0.19250158988655705,0,0,0,-11.209007316537335,-9.956100161492055,-14.06757327058591,-9.705271371097805,-1.2212680779235954,-5.102258662862777,-1.3666163428858642,-5.206991950546194,-10.213625,-5.070860155569708,-0.6985598089398511,-5.151672564111067,-1.1114997921875,-5.1000000000000005,-0.7568093482049364,0,-2.5925954567352227,-3.3531266361914187,-3.980163300084804,-5.107282295708945,-1.6995738871594757,0,0,0,-1.2742964917321766,-5.1000000000000005,0,0,0,0,0,0,-10.213625,8.526636193774872,-3.6109407556031394,-5.2253122404915935,-2.05874961789212,-1.1614610139458086,-4.1000000000000005,-5.1000000000000005,-1.475042431486818,-0.036663664858850906,-4.261476152730074,-5.108986259766887,-6.1000000000000005,0,0,0,-10.213625,0.7778851371389388,-4.1000000000000005,-5.158755881696152,-102.15031605485697,-1.2078321317631935,-4.1125500714801495,-5.0865443290183805,-0.8446901806121645,0,0,0,-6.1000000000000005,0,0,0,-10.213625,-5.1000000000000005,-8.166805622076478,-5.1000000000000005,-1.104876292182224,-4.675911013534703,0,0,-10.213625,-5.1000000000000005,-4.284292070099272,0,-1.110804318257213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1108651171309292,12.79808932757599,-1.5181758494369877,-5.126816549700446,-5.1636722761060785,11.563078961309255,0,0,0.7145445658992156,5.4082484282214685,0,0,-1.1107344167164865,0,0,0,-5.528554635081283,5.982121612692589,0,0,-102.0404806921013,0.9774521220629655,0,0,-1.1066760256256332,0.7334787510983132,-4.1000000000000005,-5.1000000000000005,0,0,0,0,-5.8437681660235254,-5.1000000000000005,-3.3525596190275024,0,-3.084972907619314,-5.101249478488211,-4.111602828125,-5.101249342927734,0,0,0,0,0,0,0,0,0,0,0,0,-0.8947215978423726,0,0,0,0,0,0,0,0,0,0,0,-1.1161520468750001,2.6289448795302093,0,0,-10.213625,-3.6620900292906855,-4.297046763503039,-5.106704559741311,-1.1067517779494844,0.13187701197209029,-4.1000000000000005,-5.117229383088083,-0.9544458927316022,0,0,0,-10.213625,-0.1,-3.6526379528953026,0,0,0,0,0,-0.3914293916897508,-0.12094812934089949,-4.1000000000000005,-5.1000000000000005,0,0,0,0,-1.8420456836815688,-4.86447296503368,0,0,0,0,0,0,-1.110605246065115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36.4177038129395,41.03544801043205,48.7686796101122,37.53651492392501,25.204512762485464,30.974564413282714,52.132656572428466,38.640771290029406,24.329380538401182,42.40708097386814,36.843616915457034,38.26644206601588,30.256248357472515,38.58384576387342,54.56112768334674,38.48639476210188,18.062301301326368,32.30051252427138,28.64396413488277,40.52684883346929,27.285112488220182,28.41413985654943,30.71509994975525,40.73174457672596,31.304392695369355,31.554264565769362,39.183753196703414,40.048081861431406,24.973306931960913,31.641148935960732,37.348350868554775,34.61827047210899,31.44794752568536,-11.012242567491276,45.63812035035298,34.08063722450603,34.89230876403133,-10.287327610313376,54.37167594069324,39.53324724299706,31.324343372369448,-9.463305144139781,36.47497339554498,39.86390624850183,29.225313797677515,-12.229568053483668,38.83082267436122,34.404344790858055,34.23493646735536,-15.321637998550244,45.81438256689717,36.060382999179915,22.05634640045818,-10.34052040265962,47.03650879610589,39.058940344369496,39.77050402034632,-14.640141222593577,52.22623369658843,33.185534382168974,28.378105277240405,-10.726908802466848,23.534093758369774,32.22286805211907,26.381222833488398,38.372094712498644,47.70605465426938,37.54434365022003,13.514895310937657,30.852488771276732,43.98579260290893,34.38463149410601,22.477419874289986,36.47400643961259,50.805595414166746,37.70067761417354,20.487648665167576,33.866653500704224,54.34695292355935,37.52335080206298,20.310098304464965,27.071342388361785,32.73892642486039,38.93993098285421,34.93403239964846,33.45959471230417,54.29907724616133,40.783786220963314,30.674222224193503,31.33040038003546,44.09729221429865,36.03772701281261,9.448369202148276,21.182426935674904,51.06172387355542,22.882606144151566,33.57025549624661,-12.453454940658713,43.01145239698417,35.68450354257135,34.848420228091136,-18.668221490365745,54.267308939332075,32.321073725802385,28.37011706726481,-17.58023611246147,39.85720705999736,29.64479261391867,27.158523137878824,-9.578342021997612,53.99802060817505,23.89781466098117,21.043326509742236,-19.08452395056195,51.18596695352454,33.55350711131311,18.419307448994182,-19.657489671757375,49.02325868412228,33.925405267030904,17.05617648415752,-19.23322587526809,57.6658770360072,30.18004116637329,28.40265137842072,-15.670545521079086,47.74063317001952,10.6624626908171,34.40366558961607,38.500615456135186,36.45663533988165,34.43609809488516,24.37095859208138,32.566705739219906,43.099237784973816,24.512269470070684,11.37325837266193,23.585288811669603,26.314865500039673,24.12521560690268,30.240006965810792,24.97769736971449,26.015956800905595,36.1521888356587,28.06102852522378,32.681004124782504,50.976221739014065,38.63510406927399,18.190735511128054,35.4867715229212,33.24585734898262,34.886515558336086,29.740198173209272,26.66236319069705,55.187676045601734,28.81321348265535,18.415792751502906,24.29488390344125,51.24249174038928,26.225628488795003,33.43665585641496,-13.897223845779447,37.30294707722315,33.229569878160234,29.707964656928457,-14.449193836247575,49.751642690228785,32.457897235626085,20.75627621075593,-20.90157062070786,50.491610652052046,27.60934003602373,35.22408110937454,-22.545123248205147,48.62823636621028,29.417205454017452,34.15893816476375,-17.802734352789468,53.478895621860566,29.96834350328775,25.272373638938454,-13.919111673200138,42.018291077696134,27.7082074191902,27.500542866056993,-18.694555900576663,37.6242057580241,27.532866718108487,6.505661459853391,-32.12333936371304,51.89528031214922,13.685043566269314,2.747425775689302,27.786969711209714,55.898558122519624,25.610450479821218,27.115705021752696,26.26186461874619,24.33239316139703,32.609637780143274,29.344194989730408,24.606307097593348,46.07055559192161,31.528131143784915,23.563166501728613,14.925574483408303,46.16927049756343,27.199636295107688,-19.571759548363808,25.231992706285432,57.19222080617425,26.012216896544142,13.31530472516666,13.168768958265392,38.102845937847384,16.770410519046713,24.020192361210146,21.769038559468598,48.05700438143772,24.456769433957202,7.970082490490993,34.42735339476366,56.54988849523617,12.698737190923795,32.10198604316563,-15.382534547899613,26.70748359956798,36.56652818836289,28.169579169970607,-22.44649753598983,56.008031830718004,16.939956672792565,25.233955383741808,-41.536577738905905,53.00304892648808,30.40347475549126,33.3849265352784,-8.388661897257773,51.52036551683315,12.496102643351316,13.932142653214264,-27.380251214319728,49.38229951099991,20.074866041465288,3.8646368399136577,-5.1000000000000005,49.024720092985184,6.145200582396801,10.247395336580418,-51.061970321055924,49.7634085725015,9.576874503906685,-23.62506372469182,-8.70392417064593,51.57980016615164,6.26397040826306,7.832947681129108,41.689123594834655,30.786750674338986,37.62639382943907,-11.941352534882386,41.036809306906555,30.205740331099484,23.71878057522704,3.3512050715247543,33.61879504190877,53.790285422929536,28.228842153508403,-3.511767832069911,43.596770190508806,9.359821616002492,9.689488418245608,-2.0124270690181465,39.73223016952523,19.010242055303898,19.03928837391682,-2.0293405004244054,41.93350754043841,0,9.557151828237792,-2.587478180648103,42.9713308856999,18.432980649216542,0,-6.021924867703825,45.231097428107475,0,3.9170400363328803,-9.53820430332151,-6.317307347399095,52.73283398247642,30.28705921743091,0.49217707437313396,-5.101245375176369,46.89258783400643,10.738900402199109,1.3777227116859438,-6.04075720988114,54.75491348753013,9.911261838070155,-2.0131263912644317,-5.472767473761851,48.65965804502202,0,-15.64991297211456,-11.771522653544356,55.4029107263079,8.09944430231419,-6.1059755333480545,-2.4473741283569534,48.68669202112777,3.8382724999550515,-6.7421551005295655,-0.4577963924144548,52.24989867577097,10.85839341405372,-6.456404030927245,-5.106975,25.750845683838406,0,-32.85301081384905,17.671429075725086,16.867333465642837,38.893891252113974,1.2416568046952141,-1.2736677225757953,51.40493056065846,12.73877824935407,4.662738482495515,1.7302452822122745,55.854774260196585,7.291827796867964,-6.11160434770218,-1.6005128754069418,49.663333505565724,0,-1.5620840992338594,5.451199154253924,49.54812684530135,7.150808445461278,-1.236791751131825,-0.4017255075773072,27.253787064881635,0,-4.479186260481191,-0.5647740354755761,47.28635156390399,0,1.7271899028644213,-10.305368673827932,1.6398588204786908,28.266523759164702,-1.1115067996121828,-7.051799728291386,51.47194117081431,6.8477243043819325,-8.441246313572623,-9.706119253949396,49.17876088746269,4.076822458098748,-6.105447602791241,-5.101273060589396,53.13050493584785,0,-10.213625,-10.05634440829709,51.78622490064409,0,-102.20559057283702,-4.958016015353899,48.7841892989835,0,-1.158127030300882,-5.105747463010594,44.52568287331818,0,-4.316882213586089,-7.2986973584748895,56.56292378796865,0,-1.1112394980001994,-5.107802388305443,10.14120456318803,0,-30.834597482525854,33.242750364422655,39.4239182468276,39.02632434685577,-4.895365264206269,12.960270787510595,43.180837232790054,9.22184641303819,3.880625953187808,19.20475456595927,7.130402942328428,14.247667983984154,-2.9338400635410977,30.639778317533654,0,2.5414192499614536,-1.2893890449454624,32.82425467958633,16.323374579937422,9.11240841417009,-1.1,28.215422502763683,11.360977570980054,0,-5.20158621526239,33.80827814268069,0,0,-1.1012375,19.336421508520143,0,0,-12.603910688947561,-5.1012038165243165,47.06134416511092,7.437330029939444,-0.4727481306767818,-5.1000000000000005,41.15109884193978,0,-10.213625,-6.561306801945559,53.08926486560613,3.8504423352093506,-6.107852120912798,-4.969160597008288,0,27.171645399444674,-1.1087650029687501,-7.1620299361949815,45.222022161664626,0,-1.1115063270346548,-5.101250438948729,41.84998462760709,3.9174063962445653,-4.35760508611887,-5.1000000000000005,36.07224276214768,0,5.272786452567383,0,0,0,-61.08185512145051,11.095345515074175,51.398315357164876,10.923614595719481,-1.1060330224386046,-1.9339595610734008,46.02437229591246,0,-0.994673673654255,-0.43978989394702483,49.72616904982198,3.825151404214937,-5.169557267362553,-0.954476425672173,40.86944849260432,0,-9.308191380773781,18.85781901124401,5.413114552996612,4.09401017942894,-2.1148910093599254,-0.20336939582397157,44.243972746362914,0,0.16655965423749208,-0.02490855897159161,22.018115338714207,6.633853377569391,-0.5425547403904885,-0.43762044640802444,18.95464258352517,0,-0.43032462799358717,-4.981301780201321,45.99045908989001,0,-1.1347717511078785,-5.163406906258192,31.70208047550409,0,-10.213625,-51.0468407441235,25.858949248286496,0,-7.29085906061799,-5.363186113033369,10.432877226958349,0,-0.41782379679019344,-1.688406390985174,56.19145131271579,0,-1.8515151219525856,0,0,0,-10.213625,-2.6636251526337573,0,0,-1.1200606720843866,-10.214885068256095,55.99843224243033,0,29.3721121393419,40.77092552725565,-1.8610374005413781,29.144660799696144,31.262001283134364,42.778193070555965,1.58650796400911,28.94191097430676,23.678393059836402,41.94983749641716,1.9270420630556873,29.64129045011067,12.62409589094612,42.695163293350596,4.200173501619442,29.638128136035586,14.40476568323094,37.92813886124479,-1.3944116808042752,27.281946962487783,23.413783644235068,45.060769605427815,-3.633164234302867,20.598061363619273,20.226981713361564,21.124370790075428,-6.22919344738255,36.23025561593209,13.980956871217542,43.32196503222559,-2.4790565521664965,30.71313057370118,8.369415499860926,-10.467191537884792,-8.552454309201126,28.12679088798811,18.04927395785909,-7.385931940949194,-0.404646028459356,32.04064097863896,-0.7029414494910418,-5.244256926638566,-1.1808392221472868,33.451402001919845,9.626939141966698,-10.296451944557733,6.303368836740293,33.809666396526296,4.636856623687375,-17.974997210830114,-0.6156075899124485,33.15059264178115,5.940311772046872,-25.02975192877323,0.166675686542755,27.215639383957217,7.078271315247628,-15.718317013392353,-5.420291644298559,35.233844561968695,-1.0233126536142454,-6.40784020561079,-24.46771621461626,28.623245947957276,21.386492772804907,41.34797716389992,6.7234326003765235,23.270700351627006,8.892368719915464,9.504360531055783,1.9354381825594942,33.222107138943215,9.759128788147116,12.98282826619747,3.425355795697408,36.256948704293976,1.6598921776712778,8.7390544561709,-2.357092646535796,34.19424645938025,15.040479226794286,16.96282223630721,-12.407132613483832,34.97485529318124,5.750126216017632,5.419800346316444,-2.7789168484657107,31.24109025566441,7.990864055645703,8.371996159437145,-8.40874062360208,28.370068255932782,8.881824353137219,13.43641562827637,-9.07887602470581,36.14877415233546,10.838347637557774,-16.689906516492446,0.03715018663123959,38.901802466371834,11.565921901701767,-30.38826576738666,0.15834542192242546,26.567340667517428,8.781158125411936,-21.421335629347574,0.359546252668705,38.306970158183596,5.766491088890677,-10.40467469183375,-4.2484593208140256,36.452838018093054,15.181078001965178,-34.30033566989944,-3.734911248001939,28.338288418170624,3.495221456904305,-8.593376859073116,-2.911086896991476,37.74681941810136,2.1171880548322246,-5.114675036134792,-7.624189952815137,35.65118916443581,-2.301095979159624,-13.396342381881542,-3.8466212435685088,34.62926285581882,23.4081219834421,29.9558529497754,5.529511305249021,27.388282421052438,-5.624248984022766,20.492502631720782,1.2426301430039581,19.823597123972363,17.922407799755838,28.470295548992144,-3.855989913367431,28.842790677971998,7.55277353532415,8.091160875762432,-7.804521679760494,37.45743349004038,6.60128349562727,11.222148132395402,1.0048339590991515,31.815407001707587,12.910958682708419,16.740489364481846,-1.6787402857981921,27.217497328146763,15.592293229917503,12.354920364670226,4.725293844324723,31.817806351556023,1.7154304936802482,4.1967639029306625,-11.953561861160015,20.869393068633975,4.4114926256747236,-16.25069259396253,1.1919053425423438,35.27302174681376,26.373552514491948,-12.178599806607883,2.3394396896609457,33.12016634278681,9.759918552766681,-35.302208109922944,-4.6982525599958675,31.899619458830784,6.178344576743781,-9.632879314125312,-3.700792222645953,36.82153015825968,-28.279784708137857,-26.844869071213136,-0.7872849647915515,26.993385476884367,7.783850331363011,-5.101254088786156,-4.008434236238428,37.92270753454962,-4.641578725897643,-8.116840981573185,-2.5453513553647085,34.97711793989983,0.9579766346921526,-5.075039827167958,-3.344747058633678,36.489854387998605,18.260080854459638,25.221728332852194,2.1899860681025984,37.55031274207689,12.376107539521271,8.082468956993111,-5.679592576486773,34.42952607443172,6.821149909396394,7.695793896873544,-5.50414384738291,36.72219356933949,-3.272066115115497,-0.12569941094430478,-2.1842794780074812,33.95934900374132,20.797295058544776,14.252063483742305,-1.928860808405521,27.292790448131257,5.124204768933668,1.5909996200719287,-1.161071560844571,39.05370092321178,4.370772533879676,5.700079416903453,-6.618026192344446,32.9807830875594,8.28832563404789,-0.14122995218343776,-40.95538009461417,37.263305782991985,10.55124378413775,-20.412830564517343,-19.91570034057833,34.33861957055182,-6.0220375,-11.293104340433917,-3.455602865061683,12.061141028214022,9.2455694034033,-8.905015240182147,-5.585240874790014,34.188343664689626,3.5835931682821007,0,0,37.653563968534314,2.9881265168285593,-5.101362788622491,-6.485523093087108,37.20248502726338,-0.05343758007107466,-5.106756342972631,-2.8759097372019307,33.25635392386238,-0.13887874918356574,-5.1000000000000005,-6.4929818970364295,35.412417983204406,-1.0344148354517675,-10.649462603037996,-5.424062877161141,35.56159008684278,-6.2344520410688835,44.134186075085964,-1.6312860991947167,8.058318997126827,1.4639954596069102,43.339371363460366,0.07986470357529873,5.264744025021319,-6.607055827148596,-0.1,-3.4885648726426153,32.61875635819618,0,37.1862138413399,0,0,1.8956600793927312,37.75649024348475,0.9068659870379601,12.85367267640149,1.7833215293988367,8.72531864549999,0,29.52972846511632,-4.068392882898125,38.71639711658231,-3.7411118106621526,0,-6.235052362278148,21.998458392198863,0,0,-11.190694521316708,-4.421972472998405,-2.5363138323003076,33.26886637516619,-9.520889440695456,-5.1000000000000005,-0.4359693155161667,34.55846456665642,-1.1,-8.027482546941823,0.284454247691518,27.86592511805473,-10.2193625,-7.333575724681053,-26.638002614089306,19.97601529206045,-10.9308491412422,-5.1000000000000005,-0.391130597308199,30.94916321999259,-1.1211047698797985,-5.117240881306641,-3.7491354294597166,20.159697371535206,-5.082617132906208,-4.100136186621863,-1.458173937922167,14.926577016388082,-1.2120944068641013,-5.1057375,-0.07480945409835797,7.467838142561822,-7.014038128731015,41.056015177112904,-34.70904011270294,4.8626698939321145,-1.105023470910133,-2.000779031945627,-6.676126667869466,35.08429975784747,-2.4022156436043463,-0.6825190290342921,-1.00935652027944,34.65850984477954,-1.1109279803965866,-0.9438002183322706,-3.1950892848618144,30.340309255271702,-2.721158318878887,-0.15601692903991798,-3.9661966336644263,37.06625036876405,-1.1219494396772238,-0.1,-3.848781742981224,13.07865996620689,-0.05879653064666113,-0.1,-3.0096420538787783,33.45963210457726,-1.1114539262784031,-0.5668674753656425,-4.1000000000000005,2.4975996687024855,-7.58089550452441,-5.035646462141898,-0.6428961915351477,35.58770331245397,-1.1,-5.1000000000000005,-1.7703916435323308,18.955948235184966,-10.213625,-5.1000000000000005,-1.5387497500175604,23.17098976363908,-10.213625,-5.101255671052734,-2.807157117441393,0,-0.48376023224133946,-5.1000000000000005,-2.80512489351171,15.404213582689312,-1.2170738480452763,-5.10716510457098,-0.7837976375972971,4.01906909470231,-9.337451535246997,0,0,7.4688195548032175,0,0,0,0,26.423323604690438,35.219790157790015,-4.106863636699141,11.89939234016846,-5.827166124042312,38.812683644625494,0,0,-10.213625,-0.6644447102058262,-0.12050597485035786,28.138030875566592,-6.306871154744346,-0.20543419649779665,-0.9959082478087281,23.206827190934067,-101.2989826326482,6.8606025667581205,0,0,-97.56371570282647,14.303829969422983,0.44324905042722595,3.9423602688613153,-10.213625,-0.06920448137766072,-3.005851395610941,23.745879990864918,-1.0289172638027704,-0.1,2.206016485013469,0,16.67773668604724,-4.949467943485302,-2.9024576601162977,27.29186895886733,-3.3367179261199684,-43.45792253829086,-0.4677232097300985,37.43160651815131,28.74533600539104,-5.100832806032507,-0.1850918840358169,20.399257633660255,0,0,0,0,-0.9710759864574771,-5.1000000000000005,-2.5834348534243428,20.185442660954855,0,0,0,0,-1.9038047485008782,-5.101475584628378,-3.7414218232397034,3.4018444136867445,2.568228804471644,0,0,0,-0.904376076151536,-0.11707219269945764,-13.277894802498947,33.50406184970534,-1.0559119565914366,-1.439921778810115,-0.59344611403668,18.429096180712943,-1.1046138921875002,-0.03747918920027071,-2.8942934196905212,11.476758138320106,-0.9254887892671105,-0.1,-4.1069801890625,13.54921053060723,-1.1,2.7185806798337664,-1.5009217006678168,22.49781916820097,-1.510208578342229,-0.15316209834026445,-4.106864605203513,18.34957304967954,-10.213625,-0.9445483305508198,0.9625603731811929,0,-0.7923988437696258,0,0,0,-10.213625,-4.963955514211378,-3.412306780329658,7.7380290290924485,-1.1044193426614215,-5.6108098300367315,0,0,0,0,0,0,-0.6153297346058252,0,-2.5820703900905517,0,-5.155470420726714,-5.043883350217732,0,3.774679864172062,2.566249433733021,0,0,0,0,0,0,0,-1.0373658482013637,-10.214912286358107,-3.6392290014674593,-0.10688869233642127,35.08007358126725,35.0117089940537,32.86286554212196,25.96851850430802,19.906820936462495,33.89491798425414,39.45764398198821,34.404768042866415,20.386790651309113,41.065568026430014,20.952427884975567,28.245149488823067,27.482995380724738,26.07046917093217,43.2907458862056,31.2259243520774,26.070125117240124,25.121903032713778,46.7553949802113,27.088389889210536,21.93166206348557,24.534060474276583,23.9673535982539,20.90082026734884,21.17057377398585,27.481104343799878,42.14593639768142,26.125131785121884,20.5891892593461,25.624565361818515,34.1049969399107,29.66765751875886,36.49770295290234,-10.344617329996455,45.51556965943088,22.491510784340385,31.817780787040085,-8.580194322812245,44.76706228494523,29.439361690538146,-11.208424277370604,-12.139474111712442,43.35449883347127,24.416865940742653,21.19104249753939,-8.567014931656361,43.219989081759955,23.336800360791745,36.09513950564958,-21.689688020440475,45.57053193251733,28.402508721162743,36.350280075062045,-15.981623373165139,46.677597102006736,27.107139393606857,31.443412082906942,-13.919767816334911,26.597551846708495,26.474397854569222,3.0123960759172608,-10.093038435560555,37.931018184102456,9.518407714839963,23.57238257657476,36.65376315984401,25.36275385228831,36.74673532725733,8.318120825562207,12.734253074888727,43.51171606280625,26.870935822957453,20.937231668339596,21.109813007635083,19.85055967227188,34.39513241854379,23.549902464563097,12.765733004116765,34.97506754652831,18.926672734476547,23.5225656157002,19.47073790941951,18.608925613611927,19.18110824564381,15.251606688406923,8.839614580692984,37.13356998641435,19.376380926538783,14.031107449226237,7.143711529479894,32.576283934510634,20.06666234211729,11.118523043885457,3.036902912420219,38.664322841824855,7.4659965582277135,21.08744091728306,-14.497445723046921,35.77841532813582,20.93054558689336,10.573795767162725,-26.776325041650196,24.885723579970087,14.054725459813561,16.231151243529244,-39.30776254335854,31.22603653435762,16.523444768765902,10.766546000010887,-14.743707935316902,27.215427806680516,1.718574783773922,21.831711515114375,-32.84779206066763,36.93245152075903,25.63748879781146,6.192060187572688,-21.475992248688886,33.52399454454644,10.53119875063613,25.92574982119766,-15.193260404126516,34.76478197506064,23.116145706568943,9.269779768669185,-9.712772087154685,37.63117631052444,0,22.93444035037156,27.44758252719927,41.53044657365363,27.947820541686013,21.393995973631082,24.6919154825824,20.948256706012707,40.57729618939406,19.50468575337463,12.748593201272971,19.526061163994576,28.64280888496094,20.764800386088353,10.26964065925224,22.631684253604238,32.68780127355797,18.2202731255223,23.95609153797224,39.3924169309678,20.737288642128547,-1.387310833724599,12.04450021574954,23.812046107984536,13.143263217383515,-6.816868093854807,14.102389404756071,11.673032131053612,23.27417019934273,-31.839562823665787,12.82315810100038,11.206583838295057,26.26806741166417,-5.040136245338156,-19.129379580641277,40.45513951571594,28.726229584867397,14.814321380665188,-28.112545665414856,41.98900916115635,23.791479819247726,9.812986034568278,-30.487027703620935,25.952811346159244,17.23783421544078,7.865934804792525,-45.25956556837011,38.45269178686575,4.29158724229259,16.180359480477716,-35.069382546871715,29.669681336247855,13.94919641473935,8.694519147212212,-22.505166391994223,21.86843626949254,39.625239929135404,9.772430772307711,-45.960806856869034,8.118742172681051,24.893836723224886,2.5873586625209946,-5.039838176164167,42.5230758438261,0,-9.688831014524498,17.147960253712196,39.59921474701384,17.06964433015936,21.48125721374287,11.791236707907716,40.039869193069535,16.15223226435192,15.244938327318836,12.191796434185044,40.939365402799424,12.760413728336733,2.184284317344386,3.9477014261148664,40.762715917547574,2.5780850548616767,18.772380659393917,16.110699743078346,38.84405739804844,12.904622600894228,-1.6712595900915899,0.5726420577497567,37.42129750819122,6.709616799291146,0.7395568791845708,0,39.41808617064802,15.235896692383946,-6.1000000000000005,-0.12893426450065038,40.20379643200734,0,-11.475090404768906,-32.02360944765529,6.287085701310188,22.871991345457747,2.8000703870628585,-18.544468837690562,35.857672367909885,7.105009716573241,0.02674677690693983,-21.256108480325896,35.89691291817026,8.368733043037551,-0.15925923617754503,-5.079069287826924,37.41658660706692,8.559160173562017,10.49128935219597,-6.55850064275282,37.202926078511894,10.597045674474861,1.3349974921647831,-9.711467363886221,31.761673133578558,0,8.126836341580677,-9.498225954442988,19.234779753933356,2.174857530677357,2.2031800991502224,-5.15757938355559,41.39962857519741,-0.105914546875,-6.505614924735703,40.29763444318047,22.717697706157143,17.463459466593545,-8.464954829735515,-0.028879662134577624,38.83246384970941,14.244111397216443,-10.213625,32.29058029155145,46.39978496040612,6.869366741613129,-1.111501584579335,42.515421656878196,0,0,-6.073496722281932,32.50070111674157,2.4160483389730274,11.460493997706449,-1.7202448014622824,38.671645218834485,4.789285192723465,0,-0.9145064148290111,26.594778208893324,0,0,2.208795961941753,22.190247197556147,0,0,-7.4800329921089865,-5.101199997747445,44.76642888044842,3.9436895490081563,-1.1053238336516304,-6.095113633541634,43.88459103848206,8.845039273521504,-1.061571538830799,-5.0961265211210955,44.988650262563965,0,-0.984432783817163,-1.433719176803448,29.61689316636808,7.0159350772945785,-1.3353393391180972,-5.1000000000000005,49.68257766412101,7.608529292335119,-1.712052270441587,-4.927449067566071,16.334010210052554,0,-10.213625,-5.1000000000000005,27.529813748852213,0,-1.6126624964954421,-5.029200898616007,5.6295274494318415,0,-9.192332809137373,34.77244555537956,9.94926876053233,3.9298517498178143,-1.5715285194554243,-0.6615157228294156,11.229517807332183,3.822307204687176,-1.1368097133386472,1.992584998865568,36.724211659211875,21.020166245987298,-6.101483575755519,-0.18936161579821187,29.342132611748454,0,-5.1316663416049355,17.46680389174695,1.3572600812786413,0,-1.2365245142837331,-0.9755487608432069,26.535979097841665,0,-10.213625,-0.07357520844732697,24.15529057387555,0,1.804341618622857,-0.20351988311141747,42.489053328129984,0,-1.1227802133588245,-12.906140987991256,38.91523493690086,4.028933857135297,-1.1467848040103055,-9.758249378726317,33.99788360189357,0,-0.7261176446283046,-5.1000000000000005,21.437795402255095,0,-1.1057307915621286,-5.1000000000000005,4.264382577281798,0,-10.213625,0,0,17.8896639737389,-10.213625,-5.1000000000000005,7.811695911224965,0,-1.1637639468962646,-4.576503426140403,4.36817495449769,0,0,0,0,0,-13.98020186954285,37.2767473586403,7.269000061870513,10.895984871481337,-0.2891619369887799,33.67560177818449,0,0,-2.963163161614816,13.8491962520346,0,0,-10.213625,-0.1,12.943592533715325,0,0,0,35.66525604782146,0,-10.213625,16.95694932574436,0,0,2.3762933774714052,0,0,29.118593644216784,7.499671784178679,0,0,0,-7.110744291712203,-51.11602828099499,41.74227430644919,4.94477445409496,-0.0853891605651679,-5.1000000000000005,42.48074399188895,0,-10.213625,-5.06006829667448,24.655753451654807,0,-21.555204719549373,-5.1000000000000005,0,0,-6.114675294181668,-8.135206807362453,22.8790487473124,0,-6.11160653252065,-4.977079901126433,28.76360892667615,0,0,0,0,0,2.5088643310042933,0,0,0,-6.117228095087529,36.40444384622602,0,0,-10.213625,-0.1,28.859722158720103,0,-2.408001377048728,-0.5516154166107772,14.08215341771934,0,-1.1114797368685714,-0.4351020731505413,10.974633324561882,0,1.0950520693689745,11.549266857038166,0,0,-0.7345157885634992,-0.7482364896755898,15.423669985205542,0,-0.7978350751749761,-0.10680105916156955,17.996277061638445,0,-1.0945444750068434,-0.19427477970422646,0.7976876899846792,-0.10689432846758706,-0.4574702886971494,-5.0245200392301905,17.845581019316043,0,-4.622527692598621,-5.357408558376994,0,0,29.40686511009481,-5.1000000000000005,4.167774005450837,0,26.062515624201474,0,0,0,-10.213625,-49.56630215773374,3.2120450876270428,0,-10.213625,-5.105112090999197,0,0,2.640413263237077,0,0,0,-6.117354762070301,-10.220507024107329,14.22857788566321,0,-21.24679471572595,46.59527664459884,-7.09521053782798,24.365510933125552,21.170688366131056,41.93491538918981,-6.603404961366864,26.36469146906211,20.78173677092211,37.59541901342184,-6.471976687693873,22.593055103173192,32.26217378655207,42.98179974001557,-3.5009918648085088,16.070661309162666,24.24860442381971,41.10388688970858,-9.541282520847396,20.45019399015113,-14.96457045978764,50.01402156864542,-0.9047404857093548,19.917494182373602,20.417033656678374,21.39564667368184,-11.962800211254214,23.956293347007286,-43.516757850145204,38.72061945395274,-3.567702805026464,2.303625106099108,20.29088007422575,-9.711280433403987,-2.0823712362215585,34.62103687977878,5.663144241235587,-15.28154041793071,-14.621926292191056,34.91744205541198,5.079492425831455,-11.979240947089576,-8.954793599357156,32.70145076072335,5.79759175965783,-9.63094658673186,-3.170147990698314,22.921187615013178,8.99549662190231,-7.7781096593346755,-5.427366946274643,23.718188324144,0.05961987141746272,-5.1092189194750155,-2.4589635344503473,24.234076969640356,-0.2972365601974012,-6.497829269902354,-8.698354982703941,32.914768722808624,-0.330153520042629,-4.957648179146904,-4.101188418077378,34.45533930128711,16.926824231152654,36.48468135197895,-16.45673641349804,16.611169071946495,2.2501817398453956,6.845682523662772,-27.625228943541728,35.78242986741793,2.259087757636102,12.196564592688743,-17.917255666560024,37.360629610952515,4.021657629761714,1.3225663976628586,-6.981876038116304,37.40806820663602,8.717668875312878,7.16779834136508,-10.157258114111418,38.0672122592365,7.2767220402360415,2.0380814705344306,-12.8753766528441,38.39212384731234,2.129952604839428,1.8960108255467905,-10.704033410928446,36.79540523908014,2.66221212270659,1.6546414900575028,-3.9705325169840964,36.45001223369388,17.344389830360814,-15.477620866783647,-29.608952356697152,36.65232760563984,4.024571803934637,-9.69111979719586,-4.15067026191888,35.68602073432121,6.915333433573244,-23.14377176852349,-1.0518205395961442,34.869814767968485,-1.0234172652866589,-5.101256909341964,-4.106988057664455,33.730015044193806,1.6370453523311532,-7.055376485841894,-4.1000000000000005,34.8408110757032,-4.124704395749375,-20.853174713519604,-0.7552177945593336,29.25810660038094,-0.15914929018647028,-5.08588081460726,-8.43221247468642,30.652955339665763,-0.0866909496044471,-5.1000000000000005,-4.027446443910614,16.57399948861596,18.111230011138215,21.80278297430317,-14.8167628607814,13.142244882689592,5.636756904408033,19.428517756980728,-9.880590450839989,39.12826703847135,-7.634476191212125,13.389140314082217,-13.164673211367212,36.297496617389044,-0.9536613692464442,1.6243683190192688,-10.161875796708278,34.68988594564618,4.47711384375746,6.471955849551539,-14.234877596084292,36.52782571321054,18.921972917895307,8.954181528252466,-6.3841911568902665,35.61683565704077,-2.1131347050109124,5.868181692399583,-11.134103338156587,32.561517874401865,-2.164159423223407,-0.14237748333730185,-4.102002906301361,35.817836287375144,8.664609796070861,-41.53868865484803,-9.176734771217156,35.035917277273974,0.799046187932289,-18.045937584893732,-7.805345791359649,36.411503837578216,-0.5809888400286812,-13.238298236691206,-11.94461936922309,33.83372630064853,1.2425354319851847,0,-4.673625246273021,34.11918982735038,-0.696863355219512,-13.189327126767196,-9.939595784414538,34.006593351690626,6.928706933501704,-3.561954813085891,-0.8143150538692396,32.860209921255155,0,0,0,33.039155352811505,-0.8386815894399731,-5.1000000000000005,-4.1012375,23.239397607830643,8.426051680084546,10.362710926597458,-15.23924505172505,35.00375319049525,-0.4502631418845846,-0.237353401536597,-10.429345511219063,35.347124871713795,2.8128219032945276,-0.27310280175123824,-10.207412710195577,37.132789544541964,-0.7971749509668333,-0.05033351337615008,-4.1000000000000005,33.20596863752998,19.97958878243322,0.36147128673186096,-13.40045372049971,36.3857245459638,2.4104994977378795,0.5659313635029077,-4.102363065752493,37.7997829575629,2.0748755924002458,1.157905420413194,-7.791113750000001,33.68010307866596,-0.3209404146357467,-0.12799272776739917,-41.06401112975939,36.45758061712217,0.6656083012446894,-9.533696398902187,-4.391248384688777,29.311628385690554,-0.1934970277649926,-9.690442788484262,-7.802235626426711,32.62431965533412,-6.0220375,-5.1000000000000005,-4.1000000000000005,35.47168567283733,-0.6579063869552985,-9.702691297002609,-3.6559367515475643,3.644318048098475,-0.07723573987070563,-5.1000000000000005,-3.6533415281595922,34.590918243714775,-0.8327506373185752,-51.069828468749975,-3.398611340298497,20.03968582617653,-0.6928377500725814,-36.77796484377109,0,13.994241881274654,-4.410146441693156,-17.427693447083538,-4.827748828078749,18.63913332418673,-0.05141604672988681,26.20019669736579,-0.1643951561681888,9.856492899873153,-0.9028242304475299,39.15151769819073,-1.2451572485574038,0,0.30626331539514373,37.738174471220866,0,6.527849231745012,-5.889800740874062,-0.08366757773054193,-2.9192868131204435,35.92896334478041,-2.11782889290904,30.971515400091263,-2.2661054755031764,0,-6.785574716530531,17.65057862322079,-1.2715802018461133,0,-8.300533331943946,26.392927431035286,0,0,-7.768217284526573,3.610892967355817,0,0,-1.183840960964538,-5.928295787967905,-2.4341873371262412,31.556848633379726,-0.9697628476601938,-5.1016816519114725,-2.426692431782961,19.292005064123817,-2.329601190607883,-4.699045666194183,-0.17614950944233387,1.1463238681165204,-1.1163873617626112,-5.117227828125,-3.5372273826280693,7.561162719897466,-1.1115147974770108,-5.106869222368831,-3.164777986012511,39.07993826607212,-10.213625,-5.1000000000000005,-0.46721343996944287,6.53884207436549,0,0,0,0,-1.1123249458034532,-4.653381824514819,0,0,1.8130833704782796,31.550195920472845,-6.174001541961882,-0.10640621033376425,-1.1005229128538632,-0.5348844255930768,-3.9838111152345714,28.6413617007491,-1.230401367009259,-0.40420842365183374,-0.9876549029570114,3.671282411158035,-5.534148276801087,-0.1068638281218046,-2.7160204321507777,4.602540452866053,-2.415328555687987,9.261309557127356,0,0,-10.213625,-0.11128941220375324,-3.5370795565874573,8.776789157827631,-0.5735599930210925,-0.12062685921453718,0,0,-10.213625,-0.16346574096247896,-3.974471242891644,0,-1.0498475777593073,-4.96033992903525,-3.953739904324058,16.37023137618089,4.105814678044809,0,0,0,-1.8796892300985588,0,0,0,-10.213625,-5.055756238439866,0,0,-8.511028882332619,-1.7840088233004074,0,0,2.715079513364993,0,0,3.7352924734048942,-9.06401417354609,-5.128069021995847,0,0,0,0,0,0,-1.2124351129452084,32.6729699215888,0,0,2.71153977374575,0,0,0,-5.302862389837006,-4.8020923787370124,-4.106166413749808,34.285494832647494,-10.213625,-0.039593775674636005,-0.93479917619987,38.44863920240722,-0.8104812524853655,20.723455062091404,0,2.9172666878915865,-1.704364219346104,0.07112018837245111,0,0,-3.418186755490792,2.9023982194784304,0,0,-11.932165405112382,-0.07526312828673191,-4.107975511102591,0,-8.630382673405592,-4.586308373787311,-3.5755176178393064,19.964709189086367,-5.8976743967067495,-5.1000000000000005,-3.9124758864958977,1.121711034793611,-5.451805488436046,-2.5641036343515786,-4.106725019212919,7.400986288407033,0,0,0,0,5.260139567171983,0,0,0,-0.11286111763473594,-4.73525984128829,-3.776475386259369,3.492212037995152,-6.116739085073642,-5.1000000000000005,0,0,0,0,0,0,-0.3544558760156358,18.386351770732823,0,0,-6.07081551308697,-0.8238687212899652,-0.9632592093985765,12.950016267573773,-1.1107473120633842,-0.10930387820016008,-4.1000000000000005,35.27431938173826,-1.111271957679449,-0.1,-4.117229389918557,4.21234286241573,-0.8129664775149495,-0.11185973349035892,-3.644767545622272,9.383324313106192,0,0,0,0,0,0,0,0,0,0,0,0,-1.9766116380928986,-5.1000000000000005,-4.0714184746990245,0,-1.111152922029591,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.14591957271225073,0,0,0,0,0,0,0,31.74490717292845,36.44725152632701,54.70554984109273,-13.054377782991269,32.01537608658228,40.503676624855125,48.83753113997284,-13.755286172731092,33.38335150726936,39.24555773574752,50.4429849390079,-10.162949441420391,31.526595755974665,46.2656715670914,52.7761057445378,-12.591420719002524,31.579434720819677,33.35862606015223,40.87404948384684,-13.064777016222012,22.07223332074949,36.00315396100263,54.07315880829201,-13.183892365049381,22.057321215113838,23.68769344355187,39.41636573819447,-13.14636599563431,25.853712009842397,26.864088882918338,47.537512039573,-8.936004820280655,35.1804391089029,-10.891687826610317,56.515926008851245,-13.46846041263798,33.102566437211834,-7.669408865263013,57.43093190705605,-14.466820053244774,29.77318750296689,-8.002880353976558,41.37538598524256,-14.511213206129526,35.96941607857209,-5.908694844869873,52.61261447874801,-5.670463554842615,33.784980370478,-14.10469333441045,51.12783246502903,-20.494659708231655,21.85889073171912,-8.34489178255013,50.69143571692382,-9.932329283700339,14.266840208066421,-32.52857813843316,51.64963624079219,-13.652147264842503,2.6689292336008332,-12.623056076485385,43.575399677361006,0,33.44775418542301,37.487295415977925,55.34407959121372,-13.616355598378725,31.1787627609944,23.797833799693628,42.68360687232992,-14.790886223779331,37.561857275189055,28.086650445176787,51.037898565652426,-16.823475609613254,16.510366519832534,20.007730995647247,50.46478548256688,-15.869956404398327,-5.297316563196395,29.28889883949453,42.581632944954286,-14.001743290994831,14.44492630055683,33.27831959565824,42.34845906539498,-14.712464077332061,11.860362649382814,7.58984568932113,52.14618844675901,-11.568546431578964,19.11440355425309,15.813452320352342,50.64180021853022,-10.563940997432926,26.71797666575911,-12.527339334918738,51.3708256305304,-15.311515321904658,22.024237486361606,-14.326259159930487,51.01887543540636,-14.805356802747466,35.155018270468105,-20.810887343500376,55.36981084130678,-17.13751770083912,-0.18022423282382616,-18.248141061181784,47.696557645104576,-13.241879930583545,22.969833937256077,-33.204393759976384,50.25193602309065,-17.108261096904485,5.709985582480709,-15.427266287227237,52.53233914106537,-12.036894905150561,7.387781767353836,-12.690275268307257,54.480575610929236,-3.834642748153436,3.4003610774324677,-5.1000000000000005,49.98063634562463,0,32.624512191066465,34.87138145117964,55.964164123203496,-15.164328811937407,35.44939374854249,28.50173891819826,56.144646741044625,-13.268209380934387,38.24370042036618,23.827819670857476,50.78216803448106,-14.134941327896055,22.651524848211253,15.592045267930244,37.13598332648461,-18.068295936006024,36.5039398823525,24.010350233374695,52.6869496316864,-17.20025660997446,28.80249676731708,22.740547519895163,51.84836600141037,-12.273879621597718,11.308312269175586,19.918694901604788,48.246618580360916,-14.39595674682226,6.6003654914081284,30.265278808702032,2.4847596976655026,-2.9435563176179103,24.710368224400543,-14.984588447292078,42.15577759576388,-18.904008860974578,19.824995178675895,-14.513227260131941,52.8031926925023,-14.05730580651359,9.998127578905299,-21.36868610353892,54.177590169963366,-19.86093225030936,3.860856410274221,-38.85795259364267,56.63765978146745,-2.791406413567558,19.592338732016387,-21.99209684416363,57.425367035391346,-8.211166309344929,21.748336111115083,-13.186910040304614,55.82747294721912,-6.266008309356296,6.768799707829615,-5.6319370548178895,53.719832019385755,0,-0.06316889186686636,-8.635966634839619,52.000102506171196,0,28.082629240974352,20.641840931063967,45.23460954866083,-14.37201116369958,-6.382293631845103,8.513392972955305,43.40035165253753,-20.53796301858119,14.246890094585295,27.10418872889745,46.51049342613341,-14.469428121154415,-18.22793063058348,13.19919270784288,53.12279064895974,-4.484682151274247,9.166823709636066,20.897020083141125,51.04896515028839,-21.322258924303227,0.7153059847072669,7.878921145963698,41.63329840014671,-6.135556366373848,0.7021941424449225,6.757221380252798,38.35114329410218,-6.774878313442211,25.498192558181024,4.700384092001303,52.469899149151594,-5.100900359181969,25.368182860174116,-16.11952245649611,53.23027843122948,-12.891337034112869,29.277113140242847,-16.214927271844807,33.11125222027326,0,4.9623378955296875,-9.186248992692432,51.1230113973234,-8.649310330027602,-0.5231576147868625,-5.107353866702407,43.87964833397628,-5.100091333311947,13.75728699061348,-6.655472799618967,49.272836782080454,0,7.571760133402766,-9.655914841187329,40.197557250503316,-4.454975079574258,-0.013970511398947671,-8.630768593333435,52.10463166312916,0,-0.8225621525839405,-8.426063512739024,47.488677236753176,0,16.998698623467476,44.14529492555224,18.141201339051356,-6.001340857736579,-12.953435730965191,41.88132548531495,9.52843356546689,-0.9485391202027729,-6.462029550478906,43.04928354061221,9.933360937283007,0,-1.5321255760543562,38.60674777496762,0,-1.0920193027672114,-11.303351296788586,8.756932908945217,44.14068109058714,-3.5432328586121224,-0.3888579230907814,-0.10684229951320552,49.976451340613266,0,-7.651317081237513,36.38151904793533,1.4259611616352494,0,-1.1114396465240475,27.385350473206092,0,0,-6.826698714857889,-6.4742452776694055,48.41734617272628,-6.312940477841812,-1.3667591953113065,-5.596839393215072,52.43975714348009,-2.096221563255274,-2.103824185353363,-8.95434740368544,47.75776262053483,0,-10.213625,-5.101243223378907,51.842255429162456,-1.9738353432567783,-7.857153061327749,-2.094503163951734,52.83226194400699,0,-7.311198591504196,-9.696018441951177,49.08936098188289,-4.936193914260412,-1.8026855788973641,-4.3931585889262905,50.983024417826556,-1.062397802308223,-1.1115064252203959,-5.1000000000000005,16.272380721434928,0,-8.48227509520311,36.5856321247909,5.297927020025754,-6.714190988719055,-4.69090734261713,-4.07377909265386,51.69740444572487,-5.764073607904997,-10.879189107316256,-1.595772071274609,50.120403670479064,0,-0.9521762359334623,-0.1906816538166678,52.234617889358894,0,-0.9082648762672453,5.54131382954232,50.6133682735322,-4.132545565267844,-6.0203189487125,-0.5661239793650178,46.29895438098279,0,-0.09045647260700812,-0.7818552635218629,37.313840367426096,0,-1.9456167212597584,-0.1,17.627115447451878,0,-2.165524969290048,-5.1068702203125005,51.897913392426204,0,-1.7761645179370125,-5.246584692035242,49.651665272420246,0,-6.111587500000001,-48.23892518641174,57.30423450036796,0,-1.2620336606743763,-51.06862499934244,56.065985284344535,0,-1.7006870566121535,-4.624898181006104,14.116146957867233,0,-6.072498768801831,-5.105980638586473,0,0,-0.677030575967835,0,0,0,-6.100919418465466,-5.141635061745522,47.5785628572693,0,-10.565819957865571,13.100256651611463,45.71046349495476,-7.268010712047664,-12.258421526628268,36.975702162816695,5.753123350177715,-1.4553582258758446,-3.112340125860027,6.1434236376221785,34.679231138395885,-5.869140735925949,-6.1000000000000005,25.96472162852977,0,0,0.6038324489916453,25.174917223368293,12.908059419555954,-3.5659926695332267,-2.600185598442268,25.270813399246997,0,0,-10.213625,20.82991923488414,4.235684722783809,-1.4920407670770126,-7.757273483698942,26.582537903472325,0,0,-6.278262042866844,-5.903139191592635,52.2194833390695,0,-6.106975,-5.3809117869273795,56.28423174827793,0,-6.055988514983802,-4.753081988614195,34.56251637414167,0,-0.9357810641423004,-8.93312444091697,0,0,-9.888991947166978,-9.344534138624487,46.57274409978331,0,-0.47929101219821857,-4.209024444387961,33.23528818502545,0,-1.4758771974257592,-5.100831940864192,5.131182923857208,0,0,0,0,0,-3.0531800350341616,34.52890733607856,0,0,-1.7590198848297172,-0.32228079714421654,39.60952969690063,0,-0.4756273713122804,-1.1288788546108355,35.65738710562904,-3.4196851185188937,-6.106855036635306,-7.478589879327308,58.36434826547776,0,-1.1,23.489097912337414,0,0,-0.8279764087751428,-0.11123169042392614,38.08520194375612,0,-5.910600599562765,-0.2650304525411443,19.058694981730195,0,0,0,0,0,-1.1058814504731878,-8.195400654311142,34.04041457015486,0,-1.535541134864844,-5.102079798994463,13.688471421693773,0,-1.5060794918713432,-51.059281822798816,9.98865448265968,0,0,0,0,0,-21.466354843147634,-4.1470382925818985,5.749183436956905,0,0,0,0,0,0,0,0,0,-3.0492219719208693,-10.21487552696959,54.47808777736113,0,25.019417276716343,47.8106254057776,5.309183987645854,-18.465288761133298,19.933786127173327,44.19684068972698,-5.246404113724482,-16.66279913753515,26.18528601124867,36.50390332670652,-1.0099760329515717,-17.150865033875796,6.803193418872875,44.87859698955544,-3.7527309100627493,-5.528347102216474,20.303564262515675,44.10900842376033,-3.7977886081804275,-17.9320354633165,3.518626327037089,42.82611305931135,-1.22708564906711,-6.82220419081777,6.58645048655516,46.761517900226295,0.2609967383391962,-7.273040937529403,-2.9496678196397528,43.08975770213178,-4.132843394677064,-2.706429494634336,-24.078605111265347,-16.01136219908565,1.2505914425915756,-14.67532323488303,-8.255559275123751,-13.606948441206606,-1.2279202436927026,-19.596467215910952,-24.275802411247383,-23.179881940878698,-27.258369335939012,-14.488913843810181,-10.343950114243318,-38.35463776686791,3.4023856026992316,-10.868090042125592,-56.49654775435977,-27.047345191602435,-4.193096826430212,-20.952189559452744,-8.645311411249455,-10.96000542900416,-4.179182674777802,-11.849935875431544,-13.058871683707018,-22.27001685433827,-7.149777125189896,-17.59256315621452,-12.613021743010194,-13.133711860862153,-3.2092021708440237,-9.294486975862087,20.115779737818922,39.34908130719802,-0.3328753921871571,-13.390017794420674,-17.77455297490396,-10.529423440236581,3.0778390322537184,-42.85884880842586,-6.2234124644483,-5.87775085730277,-3.336449227584164,-13.012119831268807,-10.373576302993268,-10.764248398139708,3.73516331158813,-16.891361399127657,-1.8639595412124716,9.149066031765912,-6.837049630329396,-19.465538235613383,-10.234669005023854,-9.24171803612437,-1.1039356964004878,-18.864307508466315,-4.222150903612292,5.24379754175291,-9.942404959494601,-17.131958650447917,-14.94659024011671,-10.427801606539399,-32.23894977382036,-16.59296344430392,-14.965588843745582,-17.7874379692937,3.010325468300059,-29.710690462122862,-18.064164378738248,-27.06410680025958,1.561081626383199,-21.824335718274813,-6.880709825796487,-11.178641503466997,1.3642229270492203,-48.844675631283536,-5.376735629287454,-5.116909197526712,1.261154353547945,-4.833363253167775,-11.06885960110137,-16.643078442086285,-3.181119450004039,-21.236539873332557,-7.82832245131255,-9.691179151987145,0.46681056259483333,-9.704053888735622,-5.441772389713278,-7.1761066324164435,-4.545057436897342,-7.271301105424564,-0.7873416278689295,-9.620899247500134,-2.480210965032097,-4.011806340084441,12.067132761858764,31.754354456924744,-0.265830110382971,-15.211190197484605,24.339511620063078,16.374615547353226,-0.7382678859968741,-6.236820616167272,-10.336335690380139,0.16173610660336543,-1.212380294260377,-20.329137340683168,-6.188494225859627,3.2735570361477357,-3.9128276164245213,-48.57382841239139,9.23118727233844,23.470684743875104,-1.6888289563175372,-24.32214342632209,3.8945774216744606,23.595615416354914,0.2785162835242113,-11.380272118213197,3.653145552526041,6.709169148886524,-7.050382660247964,-38.181794123568245,-9.02843064873502,-0.7971882297402717,-7.781594708767488,-9.526635616553625,-14.246997475300072,-12.484719030973581,4.59185561835594,-11.693939076136852,-13.17901884665846,-19.16068770953943,3.584655974998861,-33.77642045695448,-11.284092134043345,-50.695063186228516,0.4780778173511711,-20.452864193947562,-7.578850815875767,-9.68808070025229,-8.930835049418373,-9.693292862783114,-4.0096024518127695,-6.849049988119713,-0.6166689641179373,-8.592763043456019,-7.406968335250351,-11.758856582642942,1.0257960891417768,-9.690632027643854,-8.694525072077965,-9.725872716004616,-3.549203202263242,-8.250960674106524,-1.2635066774356043,-5.1000000000000005,-1.3342768886950234,-4.0006206567603675,-0.6593189338612124,24.53865121041018,-2.429265075869205,-9.937176335830959,-3.2613059316858872,-11.91272953111122,-28.559097354488188,-13.488027778213274,-12.205938974464193,6.096169317631263,-15.056844093570518,-15.730647989309052,20.17817404335692,-10.684087883487578,-13.58903303727042,-11.5852819305564,10.894739504208866,9.766918071116425,-2.4438700433953637,-16.55676706777624,-6.1000000000000005,-6.030398284448461,-4.174272843408627,-10.214788777649577,-5.157375,15.21794756973504,-5.332940239522902,-5.9266502504689,-9.039385250631033,-8.74115769485164,-7.781820560130926,-10.274370351315651,-60.06788346713126,-12.79278780369582,-6.337631218762341,-12.874869867663602,-2.8850077321265593,-5.1000000000000005,-0.4524910947986984,-9.569093056657788,-1.3325719985715623,-5.101362857536749,0.4350013042742429,-5.962202087314049,-5.157375,-5.1000000000000005,-3.303988918523527,-43.665473493728456,-10.618798582907385,-13.558326881727425,-11.00467771474053,-10.667225915293177,-4.506080893287997,-9.70843121064821,-7.383806709793931,-8.409477816496956,-0.5556233985045002,-5.1000000000000005,-2.9276474454346926,0,-6.750941672289666,-10.218998962079773,-0.2999826622234947,-9.690000000000001,-16.628026886496873,40.84477156342501,-2.007517579266346,-1.7758001948122215,0,40.3971508689729,0,0,-15.782641856167341,42.81804855694152,0.3226322385817582,0,-6.1000000000000005,44.67438363774266,-2.720971345610069,-5.117239118729359,-10.213625,32.00944983962309,0,-1.15683275986149,-1.8143661396054043,26.4488268762597,0,0,-10.213625,13.436304887568166,0,-0.851238008593679,-6.104612500000001,4.698855450336607,0,0,-19.89651845516573,-39.49073421732857,2.236653626663803,-11.861110402896774,-10.213625,-5.1000000000000005,-0.36463761513102777,-2.642041529940057,-1.123809323421588,-5.10869126545323,1.1355130936840359,-4.799165534979948,-11.215867099762196,-9.696996551655271,-1.292292434053879,-4.737098616269038,-2.405370096680472,-4.635926561382199,-3.4150163480364677,-5.023764118805647,-1.3785705904015648,0,0.7395518138657563,0,-2.779600633103718,-9.15537955719376,-1.3447096412122386,-5.1068625,-0.9018143185129578,-5.1000000000000005,-1.145272932587343,-1.5334513226502176,-1.109150996724801,31.180653048782965,-1.117896276211187,-8.19417875952303,-6.101179339392326,-3.0886860719636244,-3.766361418930231,-5.112603847326435,0.06869665384398964,4.269868480971267,-4.1000000000000005,-5.106982659773794,-10.065754388521906,-0.8484523071473442,5.149194695709894,0,-1.111588899445627,7.016937963661115,0,0,-1.2362903299767152,-1.2971091072740706,-3.920398942096118,-2.2650457405987514,-1.4661400374046065,-0.5770772746603371,-0.6628275964100483,-1.627269563829632,-1.110128689052565,-0.4795665750733791,0.5717240371485452,-3.3879286050005093,-0.7444862828095391,-4.387906033417892,0.6557104602047945,0,-1.1051204028477557,-5.1000000000000005,0.35855111967659287,0,-1.3255282990684734,-3.854562817280103,-0.32074703081208683,-5.106987673458746,-6.1000000000000005,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0.12202373885258454,0,-0.9930322282642221,0,0,0,0,0,0,0,-1.1,37.646969549057005,0.46851029880184214,0,-10.213625,24.556915180316377,0,-4.748818068315458,-1.5994471456055335,9.013697719703847,0,-5.105116590356461,4.870823949634203,0,-1.3830320170211388,0,-7.938416697077763,20.815884894588677,0,0,-6.104612500000001,0,0,0,-9.860149110595422,3.0548195520510477,0,0,-0.9165344624806462,0,0,0,-6.1000000000000005,-5.1068754944817245,7.568870953200375,-5.1012426890625004,-1.2184752218934218,-5.1015061488203255,1.1854544336081985,-5.101645633429039,-10.213625,-4.80561434637628,2.049240452804929,0,0,0,0,0,-10.213625,-4.745049071094455,0.126036112164428,0,-1.6411091639316624,-5.101447349801652,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-1.0814306400991824,16.86593060434835,0,0,-0.9114444120920911,-7.068655672167779,0.09337808985263557,-5.1000000000000005,-5.947288839891783,-2.2264232787736224,-4.1000000000000005,-5.666126701544818,-6.1000000000000005,-3.167493569854842,-4.109510799661789,0,-0.22508953897456618,-0.0821900172585237,0,0,-1.1,0,0,0,0,0,0,0,-0.28332771515008803,0,0,0,-1.261584624785383,-4.0875285766359575,0.2182512010061103,0,-1.4799688981398518,0,0,0,-1.1052282142697936,-5.1000000000000005,-1.2425648132682192,-48.05472175478181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.1516987850767464,-10.214875527299961,-4.1000000000000005,-5.106983150277704,30.686501427589302,46.740346696885844,27.94909242256401,-20.178908429922103,30.39001388815589,31.55377432541684,34.8894799919624,-19.4392166819109,26.4669309058326,24.471222448996187,41.40070683923416,-19.100293974393274,18.45124017969401,38.7162013078438,46.63888773196426,-14.180708047007037,-21.414959278083323,20.80498092170363,31.33352637651388,-19.985946141873125,17.142621900223073,20.17279324251304,44.097067969939204,-12.945566069473719,4.766780463491847,19.588313392712625,37.84060117351458,-10.707403140229658,2.655148814984461,7.228132845184872,42.15163489117694,-6.534994060084949,15.159670693991018,-14.428856333610423,40.31440412204605,-15.952190971142162,24.54128684481401,-15.56532043185779,46.09849072773866,-12.817013080156617,28.211415036800865,-12.716498061869865,46.961601048905386,-20.785640335435758,3.4682110849807515,-12.337943339325514,46.754809415753755,-9.827661365873379,20.450244929600544,-16.59829055439195,43.32030522659846,-30.937340724752755,12.816468258241004,-10.185513104164189,48.50373178942987,-7.7735566618414795,9.994672066444203,-19.998510148459953,44.042223215454804,-3.4594386717474954,2.953210101218724,-5.1000000000000005,46.80357867429818,-5.4738935436875416,26.638149437852753,37.18730449417926,24.480369784846616,-24.3684275880548,13.628414448976013,12.305965190788953,37.63930007509193,-26.231619346855,10.665897441598322,11.73329157241422,31.61170249636703,-18.273012834265653,11.941037854994892,8.739153417003557,22.59528375156143,-5.963472605822798,14.426899857783472,14.038824258739751,33.67185198159581,-26.40650717090801,5.607520188878242,15.48091902637668,34.62421526851844,-39.383231035329615,5.84891626152877,22.08656460163457,32.81208792015675,-6.349720361587608,-8.902879007210714,-0.1,32.172621318590934,0,15.735375832805483,-14.750685915813076,41.460146533760394,-25.345665809103686,10.379666809532921,-17.728616168402105,40.70152207837403,-30.243847470425248,8.275028602510911,-12.0886110455278,28.587173347487752,-11.154070733456997,2.947081382544132,-48.537154920181024,38.687137903736065,0,5.536723430827338,-15.878266603244235,24.112617980669373,-15.69684334285838,0.2833997651895701,-49.71383453793575,32.52487109011643,-5.1000000000000005,0.5303959715554698,-12.716853461861344,36.40595162950679,-4.596803825696511,-0.21010316886630864,-5.1000000000000005,22.414729068461263,-9.177663149165289,23.1867573528197,21.221991172542815,41.012205282590294,-24.395718504544686,17.123637105906674,20.34487726206447,38.50623172025418,-12.778385885589381,23.13617803699688,17.95609737261003,16.523867781891994,-29.418278373000724,11.596061335120528,8.132302700421578,39.873449689940514,-21.391615502567195,21.088127810971944,16.850829633781974,33.95141589309198,-26.587113800907535,0.7265061183781216,4.235277905255948,34.562417776159954,-2.4307107995318904,9.992809787163925,4.166442896649458,36.14666297622937,-2.9923817138401496,-1.6017144709392552,4.983829413526447,21.96634068823837,-3.214784236690983,23.16084514299226,-21.444798308868396,41.14389145487959,-25.36326974650583,9.787750437433768,-6.522003056032589,40.210671416907445,-15.282264975156647,3.866190282424183,-11.05019694562899,34.34392313830622,-10.510470765849869,2.7662087126965025,-5.1000000000000005,31.526522954641482,0,-36.93300950231925,-44.62138192729914,20.671029412744854,-14.915515808837007,2.3566573842898024,0,35.3107042247112,-4.550150380177551,0.10300443493691352,-10.865225124170102,38.77868569097131,-12.670051888119515,3.887504139325549,-5.1000000000000005,13.880415707885778,-2.1153476208689024,12.32753584958019,31.847361367438968,20.906429457826903,-20.878897416571796,10.148224981936806,2.359356727516662,42.64059320841544,-11.364716036764698,-13.731053557918152,6.310982907323136,39.73698177038121,-16.161568147566616,11.285505428848476,-0.1,34.02928337991498,0,6.688163275389281,2.801729486349342,41.105047447425655,-23.177437618900672,9.479299147644252,3.533256944342265,37.79853788299348,-12.327505219271465,0.07240234105951027,0,35.644791787365925,-4.416453350478447,-31.460379101990004,0.10064781914292692,21.95164840487755,-3.6924900896588797,2.0077906579615834,-10.01008462063513,37.6615168087945,-8.27237187798114,3.218099065612441,-5.1000000000000005,39.88624122552297,0,-0.20314566611714624,-9.69608331156206,42.732579389985695,-9.690000000000001,-1.0915091145933866,-9.672374534274306,27.51287483818358,-2.361813078848626,5.85576214507002,-5.1000000000000005,35.145615405755564,-17.017743816916447,-0.6819401108145624,-5.101926546539999,41.6230390598752,0,-0.7086506130339729,-5.1000000000000005,22.970859927310553,0,-0.08453571693293967,-5.15747010268155,18.07130046611044,0,1.676238885380446,33.40809897393309,5.011357380519625,-11.635700543949195,-1.3510639451493391,17.71171828273377,45.215333139191294,0,-10.213625,47.2120974933912,0,0,-1.469954003419899,20.148426949536415,0,-9.794124416510167,-13.991445675658507,33.20766685913108,0,0,-3.0201208156060657,36.047649036453734,0,-4.394741024807011,-10.213625,14.97117554379166,0,0,-6.106975,-0.11260000000000002,4.687781635057857,0,-8.11066188448677,-6.084483067253572,42.15638412160742,-1.8843215259893222,-10.213625,-5.1000000000000005,46.012784828159404,0,-1.1221314943563303,-5.10152479525313,45.70504592460661,0,-1.1749052432096774,-4.403819063264066,5.0726275169028305,0,-1.335423297938061,-6.545704907946908,43.57435272168441,-4.678940799172278,-1.036829177275124,-3.2166026815864956,51.64368209776921,0,-10.213625,-4.074774845381051,0,0,-1.6254445716710748,0,0,0,-3.0600678071834175,34.42588582125963,8.076172074046571,-6.035295318577882,-10.213625,-0.5913039556627566,28.378895859818915,0,-11.463143854674788,-0.2432244381959936,36.598026466060794,0,-0.36887562977999544,-0.5725921596373468,9.996094600722017,0,-10.213625,-0.1,38.29923416727017,0,-0.6813139435858835,-1.0310803326281188,22.436916856284792,0,-0.3682917778855783,-0.14642300950134837,20.882872859161054,0,0,0,0,0,-10.213625,-4.540758708464636,31.161025303035473,-5.1069478342483166,-1.7952888943754601,-5.123854955357942,6.2180638425077674,0,-1.1250621996208936,-51.0686249999817,4.199138159516134,0,-10.213625,-5.1000000000000005,0,0,-10.213625,-5.1000000000000005,7.302257524228249,0,-1.4136975077834633,-5.1023767027412825,0,0,-1.4839053987282744,-4.520424727346345,0,0,0,0,0,0,-16.03505468849462,-0.10072781052843893,37.964216728337114,-0.9556208448167958,-10.213625,0.6421749978455666,41.98749701167942,0,-9.526664961524633,6.352620492764344,0,0,6.201491971814937,0,0,0,-3.3650442706886565,17.655296090541157,0,0,-0.5131363264765398,3.2486633395469644,0,0,-3.8868127674583626,0,12.888549074473541,0,0,0,0,0,-1.376446902669402,-5.1000000000000005,34.81201346847859,0,-1.4544506230142897,-48.439568043907315,37.218854171527504,0,-0.8070619266078363,-5.102031813182325,8.635388146495272,0,0,0,0,0,-1.669651892511724,-5.1000000000000005,0,0,-1.826073648131108,-5.117227828125,10.782087389780905,0,-1.035631408642675,0,4.2182806029273605,0,0,0,0,0,-7.329910747260046,36.85852295997751,0,0,-0.6114244134269285,-0.18003453006285453,41.53885046279432,0,-11.621071952896372,-0.7257129877500713,4.269086190546461,0,-8.810718469176274,-0.8913972152245849,1.7081151307835776,0,-1.9614580685825591,5.88493647961433,0,0,-61.06862499986887,-0.21775232405426437,6.438046351332941,0,-0.41870942563026275,0,0,0,-0.6524033277001104,-0.15906514349497614,0,0,-0.32926204309062146,-3.6696986083546363,0,0,-1.78795486538655,-5.1000000000000005,2.249963571580822,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0194333528266963,-5.1000000000000005,0,0,0,0,0,0,-1.162512765937971,-10.21493282686168,0.8931360286947806,0,16.835019963133462,43.256685792128835,-3.9928680395937737,-24.489060052203122,7.565578255667341,44.240605316808356,-3.200490218776542,-8.284894381736049,-4.744682284346204,42.67799400349435,-7.334411044688345,-6.023176785603841,4.171200550590156,42.96425473892691,-2.8636216993220285,-1.7044078003267373,5.643984609289381,36.29249865960141,-15.695430857575774,-3.20440070365147,-0.38881240408870554,41.95468234659497,-3.4105933458275692,-8.323018707505623,4.0578107915444495,42.5267179711538,-4.101109844057107,-2.003365089101876,-1.0287204295873076,28.780607384254495,0,0,-9.436494061480477,-17.72153185657668,-4.462683084402305,-12.920734595424307,-7.662078037087221,-21.75838508529153,-14.160661814066993,-14.570075269503292,-16.78051807035981,-13.005787830666632,-7.354019476836263,-44.93735637224818,-9.442411376668115,-9.24478541445762,-8.79853272527371,-7.887677857997644,-11.086327742696948,-17.688748256463647,-6.102640873313575,-13.539007881641805,-10.303675954518047,-13.39317737048695,-6.619721050526405,-9.18867251838423,-9.639276556461711,-9.033043455405092,-8.70594134602325,-23.01278959314122,-8.365288335580034,-9.749128253641587,-3.469087855432234,-37.346149670457905,1.485477079129159,35.538710049308676,-7.782084432822742,-6.493391909222848,-2.8735036518183366,-9.623335649542932,-16.18490497368111,-42.66284740657625,-7.639618628095011,13.598052749902868,-13.919065256015983,-17.011855630291663,-11.159283813232033,-11.281743310125396,-11.630138070350288,-11.933100149756743,14.060591864078077,15.215480028326548,-14.066599238648326,-9.034469808701525,-13.749118330392982,-9.479448730756445,-12.17057181758221,-25.448963417202048,-10.000168713902589,-9.132299593069508,-10.549914166209245,-13.034650253929671,-4.902575131268817,-5.631513217242788,-11.113527957547495,-5.207926595674056,-16.266494655125175,-26.39337859897847,-15.591732206512164,-46.39662705522643,-11.15632422913562,-49.808964208997956,-13.627700396825535,-42.47210317919587,-6.325903324706689,-9.223349378509084,-6.387505635267177,-9.58812928190508,-5.14597083831556,-5.1000000000000005,-4.994753764401653,-5.9857109863060245,-4.95063821527835,-7.068793740166804,-8.936099211552275,-8.869482129488235,-5.823905852759254,-9.696369104840146,-7.799164395481039,-10.17613129772582,-0.9577401791397966,-9.411450103640178,-4.84092923380164,-4.463069836557561,0,0,0,0,24.272138809179083,38.07235229545301,-4.231052265328846,-8.604802183994043,-3.013348046131747,32.99784022000854,-3.9122372914776093,-21.86393615528015,-1.3609557355458968,17.313932999666925,-6.713374372194627,-19.88369179203319,-3.6002393370032175,5.69379590247549,-6.074703867794545,-2.3435746031531837,3.1995738230951845,22.154519404996645,-7.506356121578564,-5.10155401454621,27.918601978270118,0.601163682993789,-3.7953166217262413,-8.161818027491162,19.053733628456992,-2.896205733286509,-7.623594933186738,-13.107499830631031,-0.23082942269568074,-0.0027720845214858625,-1.3322456455806326,-0.9372893777676382,-55.06398077096076,-18.93818747900696,-39.8375545003636,-50.289226933892735,-10.831173370439032,-12.776086278044914,-9.453324958484654,-13.624309044019903,-12.557745959375909,-40.444422919932705,-9.837676832713356,-12.450376973837436,-7.405847465761442,-9.643951309031987,-10.326594325361913,-9.322322340766211,-6.794452895676815,-14.998131536852341,-11.365938998874855,-13.737272704500807,-6.637442358579562,-5.1000000000000005,-5.916300057493643,-9.692052025086738,-0.4005877863028786,-4.909267318446923,-3.7785408616249287,-3.4175181609418743,0,0,0,0,0.4971245931153496,32.117264428111014,-4.118600146367037,-16.832960029266435,-12.807461350249465,-11.731674945084135,-10.168245809293156,-16.408591034010886,-7.995165606127624,-2.3897517567892264,-9.064628684351803,-8.893299269448576,-1.2886915510188373,-0.3566974375918713,-4.10687303061908,0,0.7452828609895543,2.238320711962261,-4.116508600707298,-3.549940334433005,-5.592324637807616,-4.819358186331327,-8.00180895788576,-9.631872712320796,-0.37496958784531986,0.32589679980460456,0,0,-1.762738126156772,-2.279951753779363,-3.998819035055788,-5.027553370326871,-12.60261395923751,-12.68161043532736,-9.762808326859883,-9.66846118291302,-8.905904852451322,-14.11083441616261,-14.934050500923078,-17.551415615364906,-0.7224016166513084,0,-4.112613196571161,0,-0.7015319229664956,-5.1000000000000005,-4.080428731893502,0,-0.8888506411563907,-9.696438634073267,-4.683195371668071,-33.60753955353023,-0.2276946240589359,-9.686367455635448,-40.71222834470722,0,-0.8563700640096018,-5.1000000000000005,-4.090663372972492,-3.3607539554258197,-1.2092416267857473,0,0,0,-10.213625,40.31133597787382,0,0,-10.656806262268532,39.31647580115785,-4.092951487643541,-5.101617820436086,-3.7910697803339986,15.82754249006924,0,0,-10.213625,0.9805922144081771,0,0,0.07967732486308221,29.334176217170832,0,0,6.053086313445137,0,0,0,-101.65523969760461,0.563788453196408,0,0,0,0,0,0,-3.526872330262893,-5.1000000000000005,-2.8685638012764527,-5.107543596446011,-15.963058042923693,-2.7242753825579333,-0.7609498200786255,0,-1.7033729814261702,0,0,0,0,0,0,0,0,0,0,0,-1.7705124735690125,-5.10193799375403,0,0,-1.5404557445223188,0,0,0,0,0,0,0,-10.213625,14.023081978620024,0,0,-1.8118195086142044,-1.910825368780802,-4.107098677743737,-5.1075052019621765,-6.104986306553421,2.489495153448968,-6.076625313030119,-45.582607653540165,0.22451151703025457,0,0,0,-1.8526497079278288,3.2881485898771405,0,0,-0.9283670841501274,0,0,0,-0.6476749939285876,0.10237742466105322,0,0,0,0,0,0,-102.20613831653853,-5.006156487510832,-1.8934381379340224,0,-1.6546305616255155,0,0,0,-0.8065589394621873,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.745421496479409,12.388201788173513,0,0,-10.213625,6.568649763259601,0,0,-6.101190110544522,4.023699819708885,0,0,1.980113513422619,0,0,0,-14.897083445337476,1.0851499051677078,0,0,0,0,0,0,2.536773240804162,0,0,0,0,0,0,0,-11.538224250084625,-5.10214118563194,-3.596158946521291,-5.106456289468248,-1.3109518219294927,-5.1000000000000005,0,0,-1.1161533373934474,-5.1000000000000005,-3.550030310776846,0,-1.4690611884691507,-5.1000000000000005,0,0,-10.213625,-4.65565334051994,-2.2295376833629446,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.63214871291974,5.870688799505597,-1.1174122480329207,-5.101818771372539,0,0,0,0,0,0,0,0,0,0,0,0,-1.9209071962681716,1.3281346791462711,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2091211937661415,-10.214985261342989,0,-5.10698879624298,22.293962977577213,42.25136304218463,56.33450860470692,34.28208147456338,19.647527004361976,38.99761121186765,55.85451832365722,33.170364634596275,23.116870845274665,28.959226149174924,47.93321004068392,26.92792819518336,0.809116443096316,32.67818792132533,49.03986677149939,28.582302124167388,31.236476168593633,33.27037723022222,53.8947131287397,31.374840091101667,20.740811781040165,21.550706240201208,53.064835086093794,26.885094042975343,23.257402712232583,20.86348253966774,51.46567324390331,23.694672272305898,18.198331431618,39.498557494859035,45.42387652827759,29.768095162956588,28.81545959332597,-11.256724273036594,56.825253486004705,35.12830275786319,36.834031243766226,-9.306907150694927,55.517609113084816,26.805612007315027,21.74991345816672,-15.415778197150843,54.98543408647769,27.254569626470783,22.46835291475469,-9.880909561631952,46.59536589270709,20.84240479018134,24.627353623231524,-13.710356508212602,50.92758454734902,23.911219837656084,27.066360827913662,-16.248159576649172,51.422886238773096,28.166412852892854,10.297132291644191,-18.086073118005235,32.47481690964739,10.157244982155511,-12.611833494005795,-10.718731457172646,47.232290684309056,8.752328293778195,18.80516171752474,31.480147407746447,48.253219332983534,28.20860360281952,9.931532430293597,29.51152798352491,51.43727888853307,29.78720835168334,14.760010649993207,36.74873519945786,42.97758761092579,36.22026851006651,5.906601557277906,26.901149003190056,52.60953916750454,21.837540666568042,-19.808163307071922,21.749629868439175,56.79369219192697,21.276610881911843,8.87044993428153,25.382243333864242,52.06091315550044,20.808737639327553,4.771257724094585,15.942596374806872,40.328486457651294,21.356870901201457,-16.227415420820698,5.776643264529452,41.487527098350554,8.184336911988307,21.76027539872006,-12.910011593672747,29.236338672737816,26.756373047942848,-19.152249317174437,-20.486379728112016,50.78223816755873,28.582088595785518,16.057372920050813,-13.459509548640836,51.52410600730616,20.235103516308055,32.0309667357931,-5.883050241728112,53.97491987583292,8.335547326052808,18.71248984040386,-21.5850379009057,52.37544395705467,22.301989692102996,2.522859784950419,-17.2404477688411,46.19406135685949,11.120977263300983,5.318819427566346,-5.101246122640533,46.949517985106525,6.6690344352017,-9.896801474313854,-5.1069893291650885,53.362142198373434,0,22.101657774208476,31.29959385115399,55.3677158507583,26.876836357089438,36.00009997356655,22.491351402612477,43.02243447183528,22.878774484765426,8.808807375805905,24.656316947671503,56.690823684493324,30.69055008691082,14.521407379491933,9.352021092579625,50.36325354504695,10.39532932120405,34.329457225319345,22.509519660441082,35.15944619071877,22.69459523573522,17.398964429476262,9.75264907797611,52.39057609340887,25.803636333755836,15.164022543829578,13.197919193698693,46.20971192997435,19.645940069774714,4.800062803324666,4.591192236119137,16.079179881591685,7.422891731063567,18.855177998027035,-14.918247550130664,52.146043980684425,27.594045539403957,11.767215856875872,-13.679580352417062,49.93572658241757,19.681950465638263,11.694719320659978,-27.48336242837765,44.63245963718691,31.50643427302525,-23.23643366477907,-30.21222011602372,51.74726065489858,2.262333599148439,9.597976885316815,-22.584636692343995,27.052246036615777,20.559912336463384,0.31839003768986807,-15.330669608735278,57.38367129569169,9.602337142555559,2.4032949928126857,-14.11171712604803,47.30254946385013,3.61013930170078,-2.7109524310652025,-10.46410080236947,57.465399936944436,3.371834773570608,8.409116497309833,23.65929695494425,52.744439697110145,16.92937605034632,2.954184609812626,8.12726754864669,7.3825303355653284,9.75750499159748,6.678030968419238,19.906733909679836,47.436932453800026,12.163743468101913,6.509146596721058,13.175567690436644,44.13855535662255,12.710637230586931,25.075757029193298,16.911614179462784,15.366002785009346,15.920286890523696,4.9010719571107835,6.6382465021572745,52.60866163737208,6.1974162389302645,-0.18130732195822752,9.883821684225286,48.00262359893988,8.147940572129539,1.9177307860816368,3.9510391288585716,47.731130694334624,3.384677386802883,7.28510296529566,-15.705080194010307,53.483310893112616,7.5503488782351305,4.15902670415532,-14.05839404406364,41.56521907589211,30.296577031224647,9.871214142058312,-19.60861988764809,46.19134511363618,7.664229399861828,-0.048201332785740285,-9.705381936975492,42.84187316322789,8.163983446839923,8.850302985381425,-6.9445783333786295,41.65004723430564,3.144530814262835,8.237324926076543,-47.59395154667163,44.06371539038708,2.839799716113629,-3.2978817968410485,-9.221253502652331,48.47354433704764,2.5024977644903954,0.8551294231060831,-14.950204600893008,40.90164420643467,0,11.721296356278705,31.490466195006825,49.751573208689244,-5.4825723164098825,28.689757852961275,41.17030650796334,14.590060530398352,-1.4204003091659136,-16.76662646290695,29.08503440104991,12.329461622430243,-2.609380674582072,-1.1,4.3628772068249635,53.524957671363595,0,1.842070497276118,14.95098767841139,46.40309635200387,-2.2429109246315755,-9.101117808794484,41.36195996518721,7.079962645507776,-1.6712517087158476,-10.213625,10.307644621382641,49.290741038976186,-0.628959567244809,-1.1,-0.1,34.72024865690792,0,-6.7938927577102195,-8.267590021086328,44.17305770859452,-0.6841376708013325,-1.1105666387458208,-4.859580280455663,52.836800821241816,0,-1.7955573027597904,-7.355596495493582,49.016639196946386,0,-0.8798495460219892,-5.1000000000000005,39.65302109431266,-2.3831153098107327,-1.074604905875517,-8.046319431838585,56.61796235522875,-0.211313523375912,-1.85202172798249,-2.121698597267941,52.9263527323877,0,-10.213625,-5.1000000000000005,42.24252894011085,-0.45519454416870125,-11.043487374741058,-5.1000000000000005,19.15791817926609,0,2.810535601095898,9.876711337341735,56.7456734572076,-2.5932938582944236,-7.04674080809811,-1.4669675930305524,56.749144762534215,-13.19832391105452,-1.8288078375313208,0.01866603604087863,56.52334187857298,-4.481582673177455,-0.5990204811381273,-0.43932344652685884,52.33261825505112,0,-7.889527010570124,22.679647568864528,0,-16.44228483679497,-0.700520767396341,-0.8478988746592694,50.93586844425333,0,-1.4815565801091466,-0.14210526165434179,49.83186662890125,0,-1.124829980548797,-0.11252022164573426,26.969884009337395,0,-1.0767237876944569,-12.23723789443735,41.497537452088054,0,-11.429702342926797,-5.1000000000000005,50.865426722030726,0,-1.1058313690828254,-5.167019903892491,34.6354413027148,0,-11.145450003560482,-10.11342549936641,22.98559476858166,0,-1.0654466654076227,-5.1000000000000005,33.75494880052312,0,-0.5682461924819745,-5.116354336469474,15.491232342662595,0,-1.1,-4.545925151481366,9.435438678770902,0,0,0,0,0,-0.26296553032731185,4.012276940823532,42.11093745767692,-2.367195582932239,-1.1539804031279244,38.04164011114779,0,-1.231251365874994,-1.1139912871727986,31.16161973090086,0,-0.8540668167624372,-3.573591928239745,23.339605872289077,0,-1.7084144112515922,1.4841669187465394,26.794542216284192,0,0,-5.449432737894681,-0.007050568223915699,22.638276101330614,0,-56.423276120892844,-0.02764686193215772,43.621105749006894,0,-1.1,-0.1,5.512642408669229,0,-6.2118248694295675,-9.27259661853314,50.00028305188441,0,-0.9829310270500475,-5.286631799470021,46.27922665909522,0,-0.9748152410743138,-51.00770580601818,33.55739900970334,0,-1.0283663474239588,-5.1000000000000005,7.715141243506226,0,-4.076741580593046,-4.934826802276887,27.405791349421257,0,-0.8765439716073596,-5.1000000000000005,6.27976298150142,0,-10.213625,-44.896035203135774,6.861263540536863,0,-1.0762279431894881,0,0,0,-7.0143471232272265,2.9455551133529263,45.20224139209461,-0.5698167263100429,-9.315350434692439,-1.555001602782177,43.992027840644255,0,-1.0599457149382006,-0.6699453888556797,52.4485514982982,0,-1.5943821506971718,-1.1135915311961315,55.17584914209438,0,-1.111082501816145,5.221583538051771,1.4522426241831152,-0.10644748849810247,-5.802043575803541,-0.5733487019801785,25.735700643535225,0,-10.213625,-0.1,14.956179693928505,0,-0.3249386335066344,-0.11030539413978745,0,0,-1.8112548404370332,-4.413221842485112,42.057748502230524,0,-1.1116253952947983,-4.022201935532886,5.537542434996703,0,-1.106744308942322,-8.610909170703664,26.844603314913627,0,0,0,0,0,-0.5774903724180235,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-9.819610347076154,-10.22666878479308,25.00621172196404,0,25.331452074614575,40.201457986632946,4.564833477551895,29.077896629205743,12.941217295601843,36.7398779251304,-5.094185443889346,20.68515258226765,17.728123663321472,44.59108633536798,-3.8580353594498265,23.363424095104584,1.32308666199041,44.30955649693229,-0.35458171888978995,20.37032956248214,-10.665049276335925,32.486720731773524,-0.5709331079909328,25.246350016008652,16.296879035220567,44.684517340729386,2.416729913938302,14.715438503931063,4.885266544963084,35.91025212615277,-9.948904365548398,18.37872858273813,3.6122242219599885,40.9431794557065,-0.9148709374539874,1.8431118390548231,-21.28562626719392,-12.643116157088752,-13.7348579625856,-8.323333905997577,-22.005858436917013,-16.525784365514,1.6751238193901292,-11.561292141761564,-23.906874797666497,-13.672500477807525,0.4670970227356983,-11.529057274269844,-46.7521825609414,-23.233293503858434,-24.675355579171303,-11.548697628533668,-28.087870402505636,-19.609057812138666,4.351469761598047,-11.295410462965817,-12.242293388018336,-36.90308814255026,-2.469839215555715,-11.06823052526179,-13.337222497219,-31.558281161661068,-0.12105268533242008,-10.808465861396957,-13.55894493049766,-13.004415921318985,-14.230508261481251,-13.52060465413977,1.6568450850485301,37.03720365372962,-11.919391929733285,-4.308463582858528,-25.096221965664704,-8.998440855601775,-9.98910092010699,-1.4469795645561516,-11.307050278849335,8.567984764620892,-4.84584963961527,-5.552107861965198,-37.92865066179406,-6.492430523840445,-5.0244340025973315,-8.582674887575777,-5.109851714704685,13.970075974165887,-31.776832221305654,-4.884922490680863,-23.682793302279784,-9.266052425347299,-7.544821775348939,-8.954635026686947,-41.36601179656368,8.512722670032577,-34.306952462900504,-5.450208860023446,-15.88536509823303,-9.23909150878644,-18.305906638267768,-5.090181135565406,-47.34107798922523,-15.809456880275185,-20.86027309175445,-10.457652205788465,0.3398640562607624,-52.42651636056563,-22.23461743949728,-12.603371002586513,-14.326093986879087,-21.54098071165342,4.970906896973992,-10.86646586173316,-12.416095262699617,-20.548445871742867,-26.79887882130529,-10.569030291893723,-21.507024408360827,-32.342266459717116,-17.494206526206185,-12.312402682931289,-13.52452779374597,-17.21223387147062,-11.871325172955755,-10.91096094801239,-13.739970370160949,-18.191476046588846,-21.190960485935456,-9.76011943176623,-7.817925679486187,-9.69118006125317,-6.281396560324518,-7.893764624475951,12.682876835944842,34.26677343698108,-3.7128629492386147,11.524557898619696,2.620341534529191,29.542991904902046,-3.7953539604496243,5.036547480903141,-40.041480247753555,7.016748943059662,-0.1428956337836178,0.38143269663730744,-40.88694670226177,-0.20504355099505064,-8.180743205384214,-1.7455305440549347,-22.7870891234046,28.417130375110986,-11.871478765197054,5.614615888538514,1.4259474850564762,1.7118756888284894,-3.0398277890404817,3.0412322528997358,3.1579277132701713,9.463532935000567,-30.13602980294937,3.1410437660386465,-4.618645085539377,-2.2532003979614594,-21.639772555638412,-3.5322160508770306,-14.195785000746843,-17.5963068156793,-9.211020402570414,-11.04774326203211,-12.96956611547206,-18.691819534612215,0.07317369633131678,-11.213276604992181,-11.187294435073948,-13.700019943193153,1.521562136595772,-9.726001615750626,-12.738727507954572,-23.453991085263976,-11.68128114280184,-9.348070753610049,-12.86362612899777,-18.422434787915314,-12.225221291186052,-11.032179547866276,-14.100393783086005,-11.382979777527062,-18.40138743550522,-10.758316316435316,-13.93594971861299,-13.759699426466533,-11.697695613013451,-10.993939021157388,-4.118900608901615,-9.694610587823114,-4.016494965164075,-4.016236032975541,-2.9492911654250444,29.406743060559695,-2.1113665576333984,-2.058660993344701,-10.195957749059202,-10.004597820248579,-12.057865905700769,-3.295156776958547,-17.06306759454508,-8.78538631104314,-36.579875924182794,-1.2872631434049928,-16.99975752761769,-10.55748742191811,-13.650266138556166,-9.555788726805565,10.34011445443969,-3.4658565093321716,-16.54846901325479,-2.1065930978137306,-6.38973509636943,-4.962510397331447,-19.772858781404057,-8.483418632926075,-14.172193184557223,3.9108667492153604,-9.437671349738025,-8.329640688116378,-7.535391098121907,-4.1461620560024315,-41.072583669391385,-8.078039301962283,-18.547060580103487,-19.725705020353438,-26.87994433918988,-11.873324902942347,-13.022907879233918,-15.720851340073146,-16.703963997451257,-10.691655914753555,-12.503962117831353,-24.68099076780443,-24.472949320237124,-12.51030631509033,-9.785994198499363,-9.700635658470759,-30.87992506599593,-8.96410924375737,-12.713453789333496,-20.685730453503226,-17.308790694958027,11.977424993516474,-6.043603169397054,-5.1000000000000005,-4.106988573454657,0,-1.33694304321398,-5.1000000000000005,-4.1000000000000005,-2.425219328803378,-13.297462856119498,-18.648483247224743,-15.874474724878809,-7.2690868012717615,1.5163271860087308,42.26112564354697,-3.231441076563435,-0.8841039142339333,-1.1112872476809892,40.34811815575428,-4.582240359985801,-0.10690146754069166,-1.1137596289648697,48.65504361531423,0,-2.174768114894646,-1.0426836876651948,26.9141975160374,0,0,-1.110527046875,32.52111936250495,0,0,-1.4952008267934132,27.774481659827117,0,-0.705445851367894,-1.1,21.823012476290298,0,0,-10.213625,9.241205217868721,0,0,-8.70739643902538,-4.730024562456315,1.8218404437888522,-2.0423060914824203,-1.105680548093373,-4.418570408739533,0.7647052996828798,-0.7814841665819194,-7.007109271320527,-5.113154577275931,-2.0726107945234826,-2.768450415020764,-1.1076477301796102,-5.1000000000000005,-1.1329257756605706,-0.8198487065804859,-1.8550970333963372,-51.068697122858595,-0.4096964329278845,-1.8701011135809447,-1.0650766751473035,-5.106984725183514,-1.5043980682678926,-1.0137117631945343,-0.22982160023701984,-4.897067037101166,0,0,-0.7021662809353648,0,0,0,-1.054375280558278,34.06233586951265,0.17651416433500913,0,-7.268587163654,-4.760144970203153,-3.8437179857803,-5.590289235889397,-8.892360135565074,6.042124170880611,-4.705740446159761,-2.1298471975550752,-10.989217328837492,-13.504370091587248,-1.773791166327799,-3.0161314010493143,-5.892979118525396,7.5409633750013185,-3.415641970298202,-0.671377634517099,-0.8171071515567079,-1.3945131826221282,0.38807623201450014,-0.9114258119412639,2.3730127659198503,-1.1552216212517854,-3.69453806493372,-9.147687082463294,-1.0987725443892709,-0.8055757635498966,0.8597206765821543,0,-11.93721160588329,-5.1000000000000005,-1.0859539901678599,-2.7002096018119777,-12.07621028904726,-5.1032554735297655,-2.1640695543478885,-12.4681696598726,-1.096874873349761,-5.176022063999896,1.4100051851912483,0,-1.0706456881214972,-5.1000000000000005,0,0,-5.691017880494837,-2.094718780613817,0.6799138296763054,0,0,-5.1000000000000005,0,0,0,0,0,0,-1.1477384782629259,0,0,0,-7.3634318306692315,31.36610057707405,3.5841362244144843,-0.5664584565649028,-1.0928504592584432,35.00361249626545,0,0,-4.454149933148326,14.381744544632879,-3.8806070421134615,-1.935938733447085,-1.0471463301004262,0.34215842914566147,0,0,1.3968397739491618,19.64444505377606,0,0,-10.213625,3.549784586577773,0,0,3.914799381670129,0,0,-0.1,-1.1,-0.6775696712903896,-4.106864033572058,-0.9405258045057701,-8.289481740161417,-5.101189463413414,-0.6755670958001405,-4.686280607873495,-2.0250950468423072,-5.107361909062353,-1.412027633443226,-1.8598203768129753,-5.901444601789191,-5.1000000000000005,-3.5888155401391946,-1.3346675079557788,-9.236471410971937,-5.1000000000000005,0,0,-4.4690663064932235,0,0,0,-10.213625,-5.1000000000000005,0.12771947065585607,0,0,0,0,0,0,0,0,0,-5.953985309055727,24.90545726049922,0,0,-1.4976567417632851,-0.9529661466926185,-4.1000000000000005,-1.3375726217920005,-0.980889374442781,-4.749054520985636,-4.035378421218855,-0.5570485246728463,-0.23335421931170847,-0.9681339733711938,0,0,-10.293030071109404,2.8233534243490235,-4.117227828125,-0.10652948376082583,-1.07629476417724,0,0,0,0,0,0,0,0,0,0,0,-5.537676398687616,-4.567865774141569,1.0323422283268573,0,-0.8277696642209347,0,0,0,0,0,0,0,0,0,0,0,-1.786349227049646,0,0,0,0,0,0,0,0,0,0,0,-1.1114318896117807,-10.214875360875814,-3.392415492585153,-0.2026283736959717,32.54652462636714,28.47828074881224,44.43430284209637,31.29360609668567,25.36606297525301,27.26071162156796,39.08270746103053,24.107271190767882,15.937083320186685,21.16732184458504,41.64154158518986,20.123160868282543,13.081891526693209,20.76151436237167,45.014870227255585,18.457724468912417,25.261699172249738,28.59875909163047,38.43529883931694,22.42777542365416,10.429304522000736,26.34495437560455,23.368715818753756,19.621495267990277,12.319226267926238,10.186735971254322,36.85260720653466,14.157100826339995,-3.221834053490455,10.155373551773431,4.522192936965891,5.101736419720452,17.75647266444159,-13.411235785542077,44.519233361775356,20.516377317962935,20.46368257774906,-9.25556106319591,44.09868562900756,20.488032064304416,14.457238031958218,-13.845960209036662,42.126011959308215,19.334739755967348,3.8665239288619886,-10.518063135279574,44.351985085059034,0,17.601368035900254,-15.33803888810656,35.58595395800667,21.06248748719958,9.329498902420822,-20.601064635875325,39.08585312526621,7.402067408507066,17.160360428559763,-14.474731137220887,21.98674883991776,4.438554327953721,7.747192004421768,-15.6002529355337,42.393309360708535,3.6308548595684718,9.305634950845056,38.27788495753247,6.035089089028329,10.519574228690885,2.8639581383103208,2.1735400491121366,6.693957888946029,2.3230140285810386,-1.44204611592885,3.768484257385397,-0.41766883497782414,0.8721153543065009,-21.328497886765472,-3.7363111258600012,3.1180393315790345,-7.515181775518845,-2.4170087212740423,15.821477960613665,1.8277531309499524,2.4490700985745857,12.154348477594349,0.5757738732755253,2.2441220345007338,7.196966783454807,-0.6021485854512587,0.004240403159161121,6.7717969444907276,0.4340264611130281,-2.6833938891569953,-2.775946644359482,0.23598877648851435,-3.4280326364492906,4.948054800450403,-20.268773840710473,9.093725782409132,-3.826461045419531,-7.118065042437394,-25.075226062868612,8.03717734418177,-3.7252385362115708,-39.312450397696686,-27.273288032493973,-4.031064477440044,-5.894680440784307,-4.8810397983045,-20.598661583571648,0.554187030299083,-2.928723082357479,0.2194408189889554,-22.258049274383595,-1.872264135808164,-4.9550871747297105,-3.200551096754282,-16.944283326691956,2.1027187895515813,-0.7553570811041999,0.7844669521422061,-20.770216682645415,2.4005077905897707,-4.518907500736876,-1.2343985261794364,-9.705479787153088,0.9561306670253924,-0.8705037291191695,17.332799148243776,21.59889545239089,32.59438448350606,11.859585265606787,-8.396036911514374,39.801090417570954,12.310939597857228,10.979795366514587,-18.402084415229815,5.27599274700889,5.751031506926978,0.7450915112904878,-8.60589719569211,-0.30066451051574156,5.475529094085272,1.4417680405123323,2.956477575690161,22.67052531112616,3.1047790258418875,5.774070916379628,-20.850840757425132,11.00498883476062,5.602818167685987,4.507229803060315,-8.545005097570021,2.6375348025340735,2.6169997766281394,0.7926233045498017,20.820846811656338,8.559749875288599,1.5594353471540043,3.7112070390260614,13.12546828916494,-18.14044715326101,40.98059440023978,6.811715616553858,13.099363866549332,-13.88684831670685,29.919989621101923,6.626641417381544,-0.5019687140859936,-41.91130595046533,7.410839941477503,-1.451975252985603,-5.04894382391417,-13.142239312432295,7.211207387750314,0,7.787282284148244,-13.867898132953712,7.72238517105615,7.927693837772392,-0.7257905532901395,-9.105819984409242,8.460630379866936,-1.08550860671732,-2.7247279978971672,-44.133223046031716,2.3587798204193815,-0.2977917451243195,-0.9753134226730045,-9.442230420361604,5.404243039373934,-1.0795139729600238,2.9765764349126704,31.352969907773936,9.92608979925899,5.061202069783923,-10.910849506781739,-0.9725118011921127,6.0633231688173925,4.588169815759891,-0.93568197437872,1.2259016077513762,2.9918456217554112,-0.408252767323046,14.939700791524418,6.421227370707885,-0.30518979761685916,6.605463308346983,5.405073209575164,2.611811896522548,1.0985195165291142,5.572462930827131,-0.21750111678467476,-0.13329413626353265,5.140941350795961,0.34247764246051277,-29.080710393533618,-1.6128002711690212,0.8990710109758925,-1.7170850340117778,-4.178485231937071,-2.9092605427165754,-1.1959005080086877,-2.87674575177065,-32.9707306691265,-26.21595085056773,-0.7977620289623621,-3.1715630676355184,-43.33205391828426,-49.89059386576055,0.3918739090319807,-7.471115988143676,-3.813051033400094,-50.378726131871574,6.338414531089544,-3.8659414271672077,-2.6683881697693472,-9.465407611662954,1.5166806004593936,-0.08113384638271964,18.846456451383112,-9.316759320215148,-1.220494059166204,-0.8036289781038368,0.740511161405889,0,6.512282384327374,-0.1575261997989833,3.991154971292662,-9.14307164786392,6.810433085222491,-3.1387452116510954,-14.229153093673437,-14.416549062670914,-6.59159855328908,-5.962356622713722,21.883299843092857,37.83845516175897,7.645111983327126,-13.845300275996342,-1.1011034249005787,40.20234488124726,0,0,-6.101211110864497,43.087034096108134,4.5693076250338835,0,-1.1116044993142167,25.151909704272587,0,-1.1257314127235758,-1.6509323225509978,27.8403805756157,5.622317232223581,-0.923258415929176,-5.177147451618866,18.74274278131166,0,0,-12.658695538413003,29.443244092824283,0,0,-6.11160056331573,-0.1,11.892125958207366,0,1.68346770423316,-50.34478597584215,43.65710202973137,0,0.838372392494997,0,42.63690433709491,0,-0.7971272940966263,-5.1020500907811615,39.40176816169023,-0.6813555595461973,-1.0894507146418886,-5.117174781766848,45.0703040554454,0,-10.213625,-4.86767066239171,30.2538210432934,0,-1.9379333238898953,-5.106869942332089,8.915521438529488,0,-1.2035101144392162,-5.045042261926419,21.162622211517018,0,0,0,0,0,-1.1411116822942347,34.43275069823852,-0.5843112853368853,-0.1065187468951589,-0.8599918434233415,-0.3194784559132069,5.195863483359813,0,-5.087181354962826,8.267935427578099,-1.1893434139160524,-9.752347831690278,-5.141013170916117,-0.5413651618420343,2.8092636462325817,-1.3907375636423527,-5.588988145260418,17.94113564608242,0,0,1.6776450146282271,-0.5694904750858046,-0.31948084183600123,-0.9142169689603415,-10.213625,-0.1587147959944648,1.7325876519620977,0,-0.7947151692961152,-0.1227968059212164,1.2178485437267228,0,-2.1811104302629545,-5.1000000000000005,2.1699729692763405,0,-1.476424840996728,-5.106982945564043,-0.1875735004298001,-0.625568108096678,-10.213625,-5.1012426890625004,0.41104590332715607,0,-6.1000000000000005,0,0,0,-5.684587815791784,-4.043810476066198,-0.06961630916688216,-0.6599026731415149,-6.100142789824037,-5.462218936077036,0,0,-10.213625,-5.1000000000000005,0.6020200418367823,0,0,0,0,0,2.4572201219353147,32.272657485157325,7.1300275640743855,0.5856531063693627,-98.54754749859843,22.2467150769728,0,0,-14.05259379789333,11.388856208375953,0,0,-0.9172008083494796,-0.14909215560701483,2.056369789941074,0,-14.128746918348394,16.305554845305306,0.6193342480517314,0,-0.02992618659888191,12.870596166302176,0,0,-7.992987557298099,2.2218068969742286,0,0,10.482731643754407,0,0,0,-1.1112290793810506,-8.036695397156278,26.82642718780604,-0.5711068047285393,-1.0307559248000986,-3.9466238551079784,0,0,-0.13353568766882162,0,0,0,-0.32333350340451017,-5.112550842708483,0,0,-1.9382367186642662,-5.1000073375106005,3.6685991586304167,-0.17034923489888973,-0.8671826603108901,-5.101870389586665,0,-0.16775329463197314,-4.68758915469901,0,0,0,0,0,0,0,-9.451574395455392,15.97654368452473,0,0,-0.6396507974899746,-1.0084499744817828,11.811016809681995,0,-0.31289329118154585,-0.9076211788736277,2.916656827616773,0,-1.1,-0.16816631309526886,1.1379294561181055,0,4.091676368970053,0,0,0,-10.213625,-0.1,1.7890608499134903,0,0.9514134706021888,0,0,0,0,0,0,0,-9.235473314755248,-5.051394469796978,-1.9909967351215845,0,-0.749200015788017,-5.1000000000000005,1.1704921316286185,0,-1.101312734063417,-5.1000000000000005,1.0197560698663821,0,-0.3412968635242094,0,0,0,-16.05949603462899,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-1.1115722595034114,-10.214875518791942,0.5765470704640838,0,15.23098894920896,38.60588386785873,-11.140329350267157,21.524334544449154,10.253559745027177,35.5488747462544,-11.741998112505984,9.820184862940685,21.086937617473282,42.85263618595313,-8.65098252806031,15.139944369472392,0.981783700233499,42.42153589069353,-4.1000000000000005,4.772540368707442,12.13813752779251,33.313413308574695,-8.088306174246355,14.681822481986742,10.355536168677197,40.96201708257433,-23.444955466045236,11.112490306765892,-3.382323731261269,30.99450213954765,-5.54801509986541,2.1351902780182885,0.21000227543762384,30.76049873153125,0,2.2305820282664017,-12.522845305394382,-15.64015168943185,-14.209825202894672,-11.814050703381621,-12.55311211984331,-20.937848689104097,-16.138259670694403,-9.869224722720764,-17.11137994038258,-34.93282494563445,-11.735281392094056,-10.626694640456293,-11.801793669804542,-18.89624570053284,-12.30902993685922,-10.653727260456046,-19.020193028862682,-13.158788777601957,-22.16057537642467,-12.659702691185231,-25.01177658940575,-22.33605332702419,-17.273109958881044,-10.788120147416075,-18.25978104743997,-13.62138162453305,-16.743142064266546,-11.097045238918218,-3.7396445440390926,-5.1000000000000005,-6.5053168266604064,-3.7116593792345443,8.639645919284956,36.29886635738027,-26.740302445747414,2.9714377992199528,-19.23566869440016,-6.535586969101657,-44.108089623639415,-7.962686630520992,-36.4221625499504,-8.879726035384456,-37.82484583398166,-5.407874791980064,-20.666734319896396,-4.8463073927397495,-23.91733701201994,-6.497976306499973,-33.99713957045019,17.544056759957165,-11.460326909481854,-2.4086529520987354,-19.447826020461708,-7.124141094747339,-30.824034725808026,-10.46153012355137,-4.447889493774693,-3.573751546589996,-14.438633920757814,-3.6255589421465255,-7.187164065302425,-6.382720993617646,-42.34644093469529,-7.7451650659820075,-26.276733593909533,-21.42027459877942,-24.745929421339703,-12.664740350897814,-56.36961400810741,-20.345218187853952,-20.157192996990318,-12.886855180618525,-16.523103737277527,-14.771887398119448,-17.49974497631277,-11.730227762765773,-9.992632960169002,-13.847931360175513,-11.25941599604112,-10.193114384492729,-4.846909815261993,-9.614452842174288,-8.065064247692126,-8.359239260385399,-11.819737942906226,-13.925915494201575,-11.733741310484843,-9.732114823669251,0.2984968407153732,0,0,0,-4.269609112266504,-5.116302511478596,0,0,0.20921083575441202,16.650899347878884,-6.7593772076316325,6.196124447564385,-5.741003436010638,40.10326792427659,-8.320093427111447,0.906629454998909,-2.994759522056417,5.785930612498575,-28.496741018445263,-1.0692619159219534,-1.2828791990087218,-0.9025923030958896,-21.384189889438048,9.34023279323645,-4.973688042954219,14.229513365188446,-37.34981637988595,5.090923882034124,-1.3576422783727637,21.176102160896185,0,-0.20191712743044943,-3.3771204997400104,9.648427759436506,0,0,-6.186914993813504,0.2887790969973678,-7.939004939413559,6.664064862961838,-11.896685978249055,-18.33920680457622,-15.224968562946342,-6.371873035542769,-3.8311487029551268,-8.34984525926911,-6.541050815139753,-7.605117033817186,-51.34929350284457,-17.448229924370573,-41.01250067799777,-11.96338174576924,-8.003405574326745,-9.702413309691053,-7.769329789517306,-5.153747834002009,-7.063938768003595,-9.622881649690951,-40.44914559362434,-7.439862285531923,6.616199506194053,-13.58433542090642,-10.968964768147124,13.222132117064232,-3.225383693469265,-9.695388136296764,-7.791249803909382,-3.146605795310437,-0.7858008811850177,-5.1000000000000005,-4.101466669161733,-8.104251046008219,3.778252271369267,36.70079703670437,-14.780202572772708,-0.1,-16.34691925031615,-9.561063425195908,-41.16207169790691,-0.5560673947137706,-6.894545379954784,-0.8656994778981844,-41.05669059380188,-4.957794400906047,-11.493694508962712,-3.873388104931612,-7.790000000000001,-5.518479027934757,8.216656802776367,2.7380425592266406,-16.751231846878042,-1.5362875330675343,-7.775192949785706,-5.531810986028696,-14.49500158172232,-6.976443724996447,-3.8578438601766294,3.506459824761728,0,0,-0.6080022795850035,-0.2930388074014137,-4.1000000000000005,-0.296864204451537,-8.77353257674487,-12.30074357089083,-7.861406166383202,-4.1663357820095275,-3.9971739940252613,-9.690277904569228,-4.1000000000000005,-4.638812561664864,-1.4318913733036784,-51.00562523357824,-4.101244646524261,-1.1003010429044542,0.15324510719178974,0,0,0,-4.698675635262972,-8.10867610817009,-11.374550524429084,-4.504068869614595,0,0,0,0,0,0,0,0,-5.704629031439387,-5.158489131120399,-8.480131386452229,-3.4321689315255,-13.032213893032267,38.23565434449906,-6.845903714932184,-0.20014093345870757,-0.08700878329930593,21.00146552089615,0,-1.3703973429799818,-1.0969795759038043,34.59078179525817,0,0,-1.1066316121833362,14.04821496207042,0,0,-0.9442161114214956,16.76652088387992,0,0,4.940083528284756,0,0,0,-8.733941051958716,7.09110830957864,0,0,-6.101259660238722,0,0,0,-7.114954379499184,-25.01060331819395,-7.05505249150494,-9.347023268981076,-1.728215753484748,-5.1000000000000005,-8.50163900796684,-1.6323094670038223,-10.213625,-5.030510840007976,-4.673250684129816,-3.549109808893331,-6.111585559910352,-5.1000000000000005,0,0,-9.739054648559565,-5.1000000000000005,-4.080987696988024,-4.344624712200448,-0.8698316749951268,-5.1000000000000005,-0.22587258474394717,-1.209512319836134,-5.365737067934596,0,0,0,-0.7461106993854147,0,0,0,1.0935866504815637,35.62752855651756,-8.47201823615365,-1.4267189566256855,-6.0762926547434795,-1.0228890484610225,-4.203416945504579,-3.082543042426613,-10.213625,3.107387503627482,0,0,-1.1,-0.20474617467028697,-4.240711483402906,0,-4.287120315353311,3.8265576993298227,0,0,-6.1000000000000005,-0.6398804349831725,-4.106983292778085,0,-10.213625,0.8913568845756686,0,0,0,0,0,0,-1.1189696793231874,-4.809826351913756,-4.1000000000000005,-1.539053518199729,-10.213625,-5.117227828125,-2.2894548104538717,-6.8567810779678995,-10.213625,-4.925109177569686,0,0,-0.3433766454691582,-5.1000000000000005,0,0,-1.1110096318718183,-5.1000000000000005,-4.1423608851443054,-0.11136353197039622,0,0,0,0,0,-5.1000000000000005,0,0,0,0,0,0,-6.105257975251646,18.6014597784222,0,0,-8.282800896314448,11.59001055238633,0,0,-7.663174156895867,5.637629628849627,0,-0.11543086733653195,-0.32406767419455673,1.0736488255152703,-4.106732991225084,-0.2032524726289089,0.5325168900474622,0,-4.186995723190715,0,-0.8467665836033875,0,0,0,1.677910599991188,0,0,0,0,0,0,0,-33.297706640785314,-5.1000000000000005,-4.1013505789353575,-1.6724698742642392,-1.2426572885574287,0,0,0,-5.475928651658575,0,0,0,0,0,0,0,-0.8102509995444653,-4.9177937156466065,-3.9483144356492907,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.030745695944333,25.55871856420263,-4.559065930328715,-0.11155294960533951,-1.1113390421792928,-1.0219209998280607,-4.294073014506483,-0.22085161298399014,-0.16054861990784702,0,0,0,-0.6281857776180624,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,0,0,0,-0.4475239218952283,-0.1576804899454853,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32.61101699501035,38.228419273819185,16.65941479977401,-19.803972304984615,9.203358224407365,39.398696040017036,49.19530572278683,-19.703726170281225,23.523565444041314,44.03689105522046,40.716009157413275,-16.913434011969834,16.585061809423312,39.72233013549348,51.564137506348246,-10.784620225351103,26.12398586481152,37.41965644117575,24.286279900206438,-18.923898078687767,14.362802363676348,25.33699785198165,37.450506289842004,-10.310826989354618,11.464472006314994,20.835777924993657,46.65848023821347,-13.233842216996853,2.409523602046707,-0.1,45.88806148654093,0,30.286163779592886,-12.080767871589993,52.063438946812546,-22.22605802702515,20.56642977865436,-8.506731123744586,50.168072116106224,-16.884137863162458,22.95853091910108,-8.90073682960443,53.191301859504065,-12.662697794362668,31.91917645987098,-1.6470047872497746,48.61316159288134,-4.022764987353467,25.913749027425357,-14.525953320809187,55.58072156628705,-8.390114920311731,-0.3494195980067878,-9.364888057708379,51.802422801928955,-4.716966932905863,8.088337555201893,-8.540081021917073,44.997092459703175,-4.290928813060342,2.8348463761823783,-5.101030503793581,46.24561709734602,-6.62475972769731,29.847893540371608,35.24933742187599,50.86864634508185,-21.421273297545117,19.19905896830389,30.103205132826226,51.49318716124649,-18.599173671415336,8.571886366206101,14.780032440924568,51.34633672891837,-12.58657411094175,32.21791815437847,13.942801833249595,54.072713917309336,-3.8181351233537253,14.536226368027233,18.323346577772348,51.6341954575773,-14.15051389367507,0.8156697703261808,29.480325165658552,55.344097675118114,-5.503589788172395,1.4994228623110972,9.733160024031786,46.84404959270165,-17.53081865379743,-10.788599736172669,-0.1283227533414493,51.69942916323667,0,23.400611151034095,-13.906362262430317,52.43268619109821,-12.171363349039742,5.978393312044889,-9.696804553150315,44.83224694132377,-7.911275279023007,4.783987672134005,-5.1000000000000005,46.52157932926318,-5.1000000000000005,-1.0460398489140716,-5.128791699251291,53.35919272003815,0,3.131367514193969,-46.35489875060786,35.67529230431341,-9.574818734739427,33.38396332167583,-5.1000000000000005,52.9904954212596,0,-0.0456697749664845,-9.487177757774301,52.02552613488079,-5.120049284980343,-1.261019063273022,-5.117354128562919,42.475989081944824,0,28.61355716334512,26.877538855690947,40.324199321952804,-23.456721276301355,10.752924275258133,39.39325603587568,25.42775916947818,-30.450494108845604,-23.24625647632851,16.87397944823281,48.785875256468834,-26.716513093707004,4.575486327963096,9.68726101729152,51.132521863519656,-2.2975996446551448,11.901166313284314,15.290250250800542,50.83858509595448,-30.512751695268882,10.343448588352446,12.152995869338627,50.333159776517995,-11.312907086675219,0.07378974793933457,-0.1,46.04193418835699,-7.219293225547853,-30.237206722382012,30.042695576541526,0,-3.0004540850490713,11.851439026795678,-10.778597172413475,46.27200161252507,-26.376000619287222,6.977340459273734,-16.938977990580625,47.09754999537021,-4.5019417784345155,5.318234120331004,-9.55450888594849,54.30821331744528,-42.182651716239874,8.044619748218302,-17.039885578266116,19.049908139928284,-15.394899322730605,3.1909586166272286,-7.612842640982747,36.21401227913726,0,5.379010289821214,-11.96284696947872,44.15595967071798,-4.813487598122904,-0.4497814329998659,-5.1000000000000005,53.11308790945527,0,-3.2414191507772494,-51.04246735507993,34.68904261288507,0,-2.5119126486365255,29.001841116046855,6.14116749213342,-11.487571161710084,-0.8740871186805057,6.128320159026713,42.64400435779395,-7.898020518705907,-13.836493809312985,1.7009283558722532,52.60017317196625,-11.121445877146423,2.7499533282659705,2.897323313729594,6.548452018845468,-25.892093406357443,6.188480691208026,7.582683680250158,33.59385397172214,-14.49519853936016,-2.364040095160673,5.804837258007936,24.060145705962405,-5.100642142039409,-6.106996229200108,-0.1,45.52145698324096,-1.7256364893928293,-6.067714440338868,-0.05073467969136748,57.72953472221834,0,3.8793829784883007,-15.84793841379745,54.225969654513065,-9.53199447118794,-1.4879293439258854,-8.92153502481035,46.97320885487426,-16.00565310845858,-1.1352652699002324,-9.690000000000001,31.445801599447854,0,0.5214168952994985,-5.1029311069312975,50.00991625309419,-5.0756367262426885,3.324786089244073,-5.1000000000000005,57.261103626655725,0,4.634425168436461,0,34.90262766809516,-4.812360236836523,-0.4431311875150075,-5.106010920039296,38.153103104726085,0,-0.10946595317670837,-9.117493062074182,15.179396079182535,0,-11.009790745104581,12.350731260854676,54.60563534475059,-10.643915531136393,-1.695796773709365,42.11772874905974,0,0,-2.7200984116747096,44.563669759247084,0,0,-6.1000000000000005,18.93678572662929,0,0,-2.0447300298857116,37.13743714303374,0,-14.420251251145256,-10.213625,22.48084226609188,0,0,1.5148254512388721,40.92788300359771,0,0,-1.1115018532779393,-0.1,4.887831599660969,0,-1.1068635655513654,-5.1000000000000005,48.16657106017388,0,-2.8261473115951725,-3.0249869694149454,34.27921075661561,0,-6.105786435476355,-5.101244021762565,40.308832530235435,-14.407352467826476,-10.213625,-5.1126092991721706,23.62345439628058,0,-1.661138853413008,-3.9624332365090638,35.911382285597725,0,-1.111159651095109,-3.799994594545275,18.82416378056512,0,-0.7208294593940393,0,0,0,-12.668828832355366,-5.1000000000000005,11.856729507674848,0,-1.102352492315202,-0.1,50.17076922888262,0,-0.11427914216858284,-0.46567432172695683,36.332956723278976,0,-0.942885986584826,-0.18811116751306628,52.34439142069255,0,-1.6025422192774046,-0.7345572453472182,26.444950998181668,0,-0.4815640948562643,-0.30322409767026354,23.682937645179145,0,-0.2586665639989784,-0.5056801705273082,14.23917676885111,0,0.8522662511273384,0,0,0,0,0,0,0,-1.1060947652227842,-5.101179109763687,33.07238038360805,0,-102.20720606826282,-9.690000000000001,55.963058058427215,0,-1.4349561320472908,-1.6944301802535315,10.248397039484267,0,-1.1102577295887188,-5.067022259675202,0,0,-0.43914965785431587,-4.071074570081647,5.70331931081371,0,-1.105463473673281,-5.101250216426501,5.553095448274152,0,0,0,0,0,-1.105091079720735,0,0,0,-6.10125352385413,35.83308257873548,5.41033910948847,0,2.1074295261043967,23.975973412081853,5.896498774291237,0,-10.213625,25.003174758386322,0,0,-4.032284316478593,1.3746666572122057,0,0,-10.213625,24.04420086473709,0,0,-10.213625,1.309129779992615,13.191868690645014,0,-0.034206858854927094,10.719978282202545,0,0,-6.1000000000000005,7.377526115005523,0,0,-1.0273674868203453,-1.372959140811775,46.227050603552186,-5.107958820931846,-1.4151672397525084,-2.341416974147847,5.393984597891759,0,-10.213625,-5.1000000000000005,13.771729910414221,0,-1.1056277677044517,-4.686759839407446,0,-51.07958820929336,-10.213625,0,15.765815494306185,0,0,0,0,0,-0.050988489063652234,0,0,0,0,0,0,0,-6.182218157802563,15.034916405541034,0,0,-1.110985662283022,-0.19564540337555744,18.479864302297905,0,-0.9332108266326671,-0.13496721027915903,9.67299143655561,0,-0.18218421326942985,-0.21910172349890314,0,0,2.7369931469899855,0,0,0,-6.103122463302298,0,0,0,-1.1478030419049667,0,0,0,0,0,0,0,-1.1108240099908193,-5.1000000000000005,5.437489249000454,0,-6.100287100028279,-5.1057516779530125,0,0,-1.5200642505799116,-5.1056730148351575,5.787148279554955,0,0,0,0,0,-1.2365838837734173,0,0,0,-0.3330066539710588,-5.1203804485914155,6.913211329795726,0,0,0,0,0,-1.2288300513936459,-10.21500743380782,2.725226280146865,0,32.364065857968654,36.85319302441521,-3.346967175990902,-23.59490280649123,1.5718318237253945,45.20579695823331,-1.999180218715422,-22.623197762110664,12.060111120497508,43.13376567576333,-0.3922564960801249,-18.05369737848745,4.456429073610591,44.37859285422977,-2.4144534256270678,-6.695525725712492,10.50193749150135,46.05731015411234,-6.3233260016511235,-41.12198797029231,-3.715910613442045,40.52821728550974,-0.7829960385085436,-6.283071343593842,1.258479383323408,40.60134246386866,0,-4.80023292827625,-0.7260303103332195,36.111530834109594,-4.1000000000000005,-5.1013640152387945,-18.606853583527926,-32.47783636947836,-1.9090142075925005,-27.955269929352625,-8.75999523267809,-9.84601571935413,-2.585858115769195,-17.731329600901066,-17.446981789478116,-10.799123740827206,-1.261394532658516,-10.616411858348801,-8.78490404952683,-8.193946319452714,-4.109123231336303,-9.963341148959106,-7.989326630061787,-10.802178067727608,-0.6664114127500337,-10.568288328655296,-5.92831704033092,-7.349853580262792,-1.6801668750309244,-9.839906236200376,-14.754596660650979,-14.223701791785643,-35.43489789808225,-58.71983193842141,-2.880303175609405,-4.89607999318183,-5.001356259933782,-5.14151116253262,4.059058071204636,38.57733803054647,-19.010062978005276,-50.77974827847505,-11.067965656726855,-8.155699294742337,-2.974212200873374,-21.00053116864194,-54.422985245385256,-3.7437805100311157,-11.587568322538308,-23.57412355102804,-9.691428927955977,-9.011680498736661,-10.209522904308704,-17.978428938131938,-4.102395176585682,21.377098500406934,-3.4243050077363213,-9.702440703961074,-22.083536024425534,-4.528808777262995,-12.515584961337685,-52.44992766928804,0.04939109631140816,-8.128734082822866,-10.340697346318589,-9.337917405856924,-3.5962081077221937,-4.4660696615059665,-5.798823016268703,-13.021818889793002,-5.157375,-8.948424773532953,1.5922131796875827,-5.1000000000000005,-27.010743682517457,-24.27126929639713,4.787858297478704,-23.825418452209334,-4.9779705427778795,-5.535813276479065,-3.5036551893257455,-5.1126054001175065,-10.357325509688513,-14.05033094777211,-11.889005945256407,-13.805558048136422,-6.017476735181379,-7.827292866966103,-3.0336285067520583,-13.837514166412987,-50.9794290021693,-5.1000000000000005,0.7520514552950245,0,0.04855852163193272,0,0,0,-0.9574570433998372,-5.126612943730818,0.25053719111320805,0,10.023989720904922,32.412100919297394,3.0660637715452266,-16.444283790915588,-1.9157215865747368,32.98796362284692,0.2764227957002078,-7.261075041653056,-1.8583525684333266,9.432697852701592,-6.510647677126762,-43.262696178977485,-15.529831293655615,1.2349088047124637,-36.37260609346667,-9.160593332765409,-2.400885454131724,15.709414729464129,-2.267322549520498,-26.415193589886616,0.8883455441108881,10.067767553363181,0.5506579843232381,-5.101243105766668,-49.16538353634731,12.710780118837679,-3.040378678558215,-8.340175595088809,-1.1049718827588735,-0.3341759811250407,-5.12549628034783,-5.110102116615691,-25.025166426029063,-24.833572771665917,-3.842307837919334,-33.42574420395055,-8.533496561976648,-15.291710169815252,0.9420855346657016,-13.82286733794005,-16.974493494001255,-22.883978612804807,-15.083691387319305,-17.66668250518829,-6.743698682483182,-5.1000000000000005,-0.687139466417004,-9.881563851833963,-1.6131213345900628,-8.237899446890472,-0.5409203774950095,-5.107089826344392,-5.163113829378758,-5.101181670006504,1.2086072775342025,0,-9.288633122561155,-9.690485777922088,-7.494946077897496,-9.843058209039535,-3.552175839498217,-4.96520145801324,-4.291581382189367,-5.106837361311406,-0.07333754067292197,32.327115585096074,-3.2034991204661156,-5.1000000000000005,-14.232936179124366,-9.780803412312359,-33.67371798659025,-17.186731736272638,-13.297141330491604,5.522122168358078,-41.47272643135044,-9.6900065508409,-6.179975809548995,-3.6320030972299295,-7.135477833707835,-5.101183767536762,1.2363039996149983,5.767168677137078,-7.677235844401556,-51.086741275761284,-5.703119964125975,-6.754231442055575,-6.77866022290147,-13.750114717495979,-3.1346794088748964,-1.9882216985725658,-4.117235689536348,-51.09619413606469,0,0,0,0,-7.23114179068417,-8.547084098471574,-8.515896359536285,-10.126857851580732,-2.986060086596616,-5.1000000000000005,-0.18785560600846046,-5.107669945487021,-0.3358670432546349,-5.102300687480995,-6.684020110449383,-5.1000000000000005,-4.7766907387846755,-13.8221785806803,-5.740257358432487,-5.5376559700006105,-5.546215060515997,-9.691124853362215,-3.1720107919228466,-5.50836059936877,-8.851797940355894,-9.691256224902732,-8.619498633237784,-5.5062942871663,0,0,0,0,-10.742291442522736,-15.26044945455084,-30.159452310524852,-17.691104005156383,-5.38487736378014,38.498770279401086,-0.41531374318017156,-14.551028826597342,-5.739615951241418,23.67836614166791,0,0,-0.2521022320514188,15.22071291639418,0,0,0.18815302818956559,5.028101141476605,0,0,-0.7532911677995744,43.81670273425313,0,0,2.671302363435829,0,0,0,-10.213625,17.041281017002564,0,0,0.3726444286007975,0,0,0,-16.507668220021163,-10.788860913800063,-21.976608446509044,-9.874400732556165,-6.106266432933153,-4.455286923063184,-1.5351872069334065,-5.22960463507393,-1.4932457421956187,-5.101272222305905,-0.6537612891352105,0,-1.347232156772355,-5.1000000000000005,-0.43678990852855937,-5.236309845408826,-6.12078974586252,-4.37722776573593,-0.48010688010404823,-5.488125293729102,0,0,0,0,-10.213625,-5.088125908719512,0,0,-1.1057820167578714,-5.101244840307534,-0.5405681962550851,0,-0.08745545312298618,29.551443970354295,0,0,-1.0582712406235633,-1.292669673937368,-3.6803722341681793,-5.371380137467156,-10.213625,-2.187081263171806,-3.4206755653358645,-9.74384048156718,-10.213625,-0.1,0,0,-1.0945205601607468,0.22546676366750373,0,0,-0.37313672155537186,-0.6053756741594265,0,0,0,0,0,0,-1.1108963044752413,0,0,-5.522352857773317,-1.1111173109371384,-4.987853072454123,3.402019218222586,0,-1.1065607420186392,0,0,0,0,0,0,0,0,0,0,0,-102.20720606749873,-5.1000000000000005,0.48362894516256105,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1068625,15.197415267990108,0,0,-10.213625,-0.1,0.5050114330646999,0,-10.213625,-0.01486051062424153,1.0725788518125614,0,-1.0461743936944785,0.4786848851650886,0,0,-8.047590884684261,3.451895501004633,0,0,-4.0797254608742755,0,0,0,-6.105862198665539,2.8557308246965025,0,0,-8.997521898099432,-0.1,-4.106874014051153,0,-1.1,-2.4774690231417114,0,0,-1.1053664932473561,-5.1000000000000005,-3.284119021574165,0,-10.213625,-5.113187863016083,0,0,0,0,0,0,0,0,0,0,-1.1058632466303058,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-0.010906850531421243,3.7095841506124154,0,0,-1.1,-0.18251283481161376,0,0,-5.957600453552557,-0.5638040370041683,-4.1008826711094555,-5.106980593954002,0,0,0,0,-1.1115005269696838,1.168105446714339,-4.026869973310247,0,0,0,0,0,0,0,0,0,-0.9764025210526835,-0.3558226994872205,0,0,-6.1050287658638265,-5.1000000000000005,0,0,0,0,0,0,-1.1057353623781438,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,33.248320030440425,41.678743417731035,23.326764700899236,-27.17364873889312,-1.7402729011620353,39.60077216543085,40.888155312199444,-13.394088610098693,12.466217837228768,44.18143779994607,18.04186034265558,-4.521521045473342,-4.9007789356074545,8.430039742765075,45.260809208635315,-10.367212741192205,17.39422693234759,16.892184329285225,23.421015052689977,-16.637366069919345,-1.623400691275081,3.8454748671707524,46.72908423630629,-4.529537371636402,3.507228384764634,39.084326194291485,11.424349979864314,0,-3.592713620711057,6.453658242149649,27.054747432587014,-4.038383199066446,21.190567506080896,-12.172791086564985,42.87053718588162,-17.770901718919802,8.974969571112965,-12.02540993617893,25.821797017457797,-9.79011126683329,8.640950116989472,-10.549665908244613,45.42733560854421,-10.805008889379367,-0.011134068336945871,-11.422692980264582,41.91253123271926,0,3.100011800300967,-11.499286254846654,35.73278151758227,-17.56414780041891,5.254576895501278,-9.409073941055453,46.77994808134858,0,-0.4826215593997999,-5.067624217143143,33.68291037681226,0,0.396499142776629,0,33.09512269104131,0,13.969969517878804,36.44563027420729,4.991458196284208,-9.299214515085348,-8.134395969226853,-4.046364118524334,4.874921499172066,-25.843412413904638,-5.392033701662699,2.7952412439648415,0.6330862883148729,-51.75634914864975,-1.8936732591131333,-3.3124167317112567,3.4219077319659106,-13.772197969105202,28.89157856398661,-0.3948259563797455,0.34840686433238316,-17.324514366594347,-2.1764702071651922,-1.3880908144222226,5.015680975503246,-13.58131432014356,-35.72320696651811,-1.617401184850818,1.5088501982691875,-20.51005182054766,-1.0825514534811305,-0.1407015970752908,6.825357997101373,-5.007644745928503,11.064714521898615,-11.675510668397457,-0.44637594247863444,-28.557762063063887,-4.354099642847915,-20.938804332656204,4.45129904998413,-5.1000000000000005,-6.422538882686874,-11.19067399391086,-0.9267374468029337,-9.601398357501495,-7.298328842488374,-17.423036493791304,-1.0112597168655593,-9.694875380822708,-7.122664581962459,-7.938257096690973,0.10534155672031753,-47.52427588093935,-2.5994231911885635,-9.715562045897103,3.422429408088104,-9.691994799349258,-5.7651494062713935,-5.100733155667804,0.2839017222143596,-5.1001498679743165,-2.8150883536354723,-5.1000000000000005,2.401994702046766,0,0.6101048945833827,35.96752697128995,7.553654951045513,-15.617154058050675,8.36092633868774,2.989399905880378,26.768566321628953,-9.107850268286565,3.7477297519055357,5.622324385478218,2.378561841842796,-24.081378211273446,-0.5655546983429063,-0.9273338628570239,7.090448430244101,-49.02344041715384,18.397688449386703,8.38448064210018,3.2377368703151115,-19.959331945131286,-1.9183549237151851,12.457590827380114,4.919666550514485,-4.845736333262492,-1.8700647282809175,10.604949556513654,0.5596975505271996,-5.120701551112996,22.360094075613244,6.520620555201407,0.5972670585074653,-7.666807955440475,3.1769916616691205,0,39.157343159584975,-13.822166686069323,-0.6754028250507061,0,37.908994368084244,-4.996654442246087,12.513404430684744,-17.577367408346802,2.1195052985717497,-5.1000000000000005,-3.1626373422526726,-16.614975766210918,2.639896239351831,-5.0091754470196665,-1.99625062353318,-5.1000000000000005,8.536767212054992,0,-3.3219079692459745,-4.748940633544931,1.9320242222384028,-8.575602574168201,-0.9349563845348264,-9.625618895634961,5.7993782916969785,0,-3.9395495391600783,-9.699731434406658,-0.278506265715848,-47.58332214834753,-42.35527808264908,35.20873332880837,0,-8.87805423809385,-8.610856112621217,-2.4744764447499317,6.152922492686185,-9.52380615302372,10.416016942569867,-1.2708161675223721,0.7933890062779407,-16.6376938277652,-2.5734769485496605,-0.4720168799247022,6.979494464746392,-5.0074922520804135,-0.8977672623155453,9.83622730861706,-0.10037072051920334,0,-2.227931146737784,8.448622973240589,0.7092258937383777,-16.14347970377822,-1.4591386150914563,-2.509449329336534,2.0545575407034025,-13.826368664146685,2.8828620070203477,0,0,-5.039788629556622,-6.336412314993506,-45.623276928381436,0.8950965766771658,-17.55266162497736,-3.918687483833765,-9.690288530187413,5.025625595230844,-13.823999847556095,-0.1671669599435503,-37.72014391058646,2.06250897173295,-50.719920453412854,-6.03378484590311,-5.1000000000000005,0.8397713964007352,0,1.4546079829233811,-21.23244932090439,-3.364305290021991,-50.69538305307995,-0.17465360453830564,-5.101260153205748,3.5388369764474694,0,-0.6530249762018083,-5.1000000000000005,3.1047361316733046,0,-9.00476308548688,-13.677229135233343,-9.114879040569189,-13.8233506368665,1.600983407730645,43.408076828712964,8.949083511941875,-5.106981618556968,-1.3922103636444219,40.40870125836014,0,0,-10.715852663537412,24.996604862088624,0,-5.636883011479983,-2.360349392851497,4.267581409391663,0,0,-1.5012064944264567,18.712171728442776,0,0,-2.073355553118881,46.48943323641001,0,0,-0.45498233796534027,7.877730433519626,0,0,4.0969087159430675,0,0,0,-14.535423666682489,-4.321364935379546,26.267181629255326,0,-1.163265010287944,-1.7518586254370334,0,0,-1.560796656425891,-5.106869236487228,4.697184739793569,0,-1.1110108669861174,-4.6835376396487725,0,0,-10.213625,-8.473014368689565,12.54583278467831,0,-1.1215846382481036,-51.017706583444685,11.365688098173475,0,0,0,0,0,0,0,0,0,-1.4807356816225168,31.518412434032413,0,0,-0.4461831837152989,-0.12761280690706303,-0.6115717313944122,-5.157326758306616,-0.8882753565038333,5.531227691441673,-0.29113362284944894,-5.10155886404754,-0.5466661992979673,-0.1,0,0,-1.1,5.485338561698519,0,-5.101044352609569,-9.955628196008718,-0.1738254856767085,0,0,-0.8711521354801314,-0.7170487282660443,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-1.3683559922363486,-5.106868246449441,0,0,0,0,0.39070335602610184,0,0,0,0,0,0,0,-1.4650236810544053,-4.808430482706054,0.8158214085287506,0,-1.1049804788821347,0,0,0,0,0,0,0,0,0,0,0,-10.213625,35.33291447738033,0,0,-99.95041145572043,2.5097035139291046,0,0,2.435209557745409,0,0,0,0,0,0,0,-1.1994891276587072,5.081949390554502,0,0,4.004106823006691,0,0,0,4.055839354689676,0.662178949142711,0,0,0,0,0,0,-10.213625,-1.4397897806712507,16.564450443607615,0,-1.1115697454886442,-4.9423706031943295,0,0,-10.213625,-4.877198577512912,0.3320133430238541,0,-1.6736890096398018,-5.117377152227992,-0.2500087695387551,0,-1.776196053815927,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,5.851084154910081,0,0,-0.4028560283147211,-0.16344219120148995,0,0,-6.1000000000000005,2.757975234872109,0.9617272642283986,0,0,0,0,0,0,0,0,0,-0.9475782299244907,0,0,0,0.173490844612917,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.606424259324783,44.03034877126205,-4.674915213008057,-21.034799209786396,-0.9586498536376165,39.70375141799497,0,-2.6004342398599163,-1.0298834816560727,43.98444148321517,-7.791361780829339,-49.88178697991218,-0.43903825508883493,35.46929709699395,-4.101250229600704,-5.019531905214188,-1.3067910928802036,28.399005605242053,-6.858356176722063,-6.21244965583185,-0.0785651418186145,22.214214445377948,0,0,-0.7934832448216564,43.68308932906912,0,0,-0.46707169765821305,4.314054294782678,-4.1000000000000005,-9.489261442993215,-53.819465741522826,-16.10868720498248,-9.43351245713112,-17.656008362208816,-10.03866838967771,-15.06746782976246,-7.110708278492624,-9.980806921971755,-7.974053859501747,-8.369242945660513,-6.672824956449209,-9.960208728869137,-0.6482722187323325,-5.1069886345311915,-1.034799817820203,-5.344878488617503,-7.883567060219277,-9.529466679258796,-20.252977129290013,-9.693358295436063,-4.38401930989008,-5.1000000000000005,-41.04448838535953,-5.1000000000000005,-3.2912079041980764,-5.1000000000000005,-7.7734284825059214,-5.1846165983939025,-0.8639703490107616,-5.100633997469512,-1.209152870428402,0,-0.8693957592084605,35.816450235723785,-4.605462330283505,-4.870809143998711,-49.69347571237188,-11.252874310273668,-24.510615923949683,-20.920072585788155,-8.458920313534378,-7.2769335343998565,-7.898885128390835,-20.979309789558037,-7.802139938235194,-2.793397028047076,-8.022823178067213,-51.44488124744608,-2.920771742610286,1.6282155624974837,-4.1000000000000005,-5.106766177443282,-9.604065877407482,-5.7863866384305425,-42.066084167323204,-9.706801575862944,-6.532026513208228,-6.006344803268005,-8.13005752118191,-5.126396640509592,-0.943138643878863,-0.1,0,0,-56.88656119550414,-21.00424334568713,-21.934646081511456,-21.252667760269205,-11.261904818841831,-14.347782456406918,-14.692475323701252,-21.297419757123862,-0.9313803461142224,-3.9466359235150756,0,0,-4.289017268096858,-5.1000000000000005,-7.913632518331142,-5.210330439401847,-0.4627330855718548,-2.813373354139256,-4.109804242045495,0,-9.348605529762752,-9.690000000000001,-14.418857311929429,-10.032850422392597,0,0,0,0,0,0,0,0,-0.048426793183151184,37.97097252834928,-3.711476856288176,0,-1.4871354411906275,20.726665500040628,-6.598173690681342,0,-1.5334874265969614,3.409844430674695,-11.184802774221728,-49.3998485577043,-1.1730370045485663,0.8728672372646097,-3.9478058989836486,-13.166783326016192,0.3915196571556461,16.652756821578873,-4.220076759534581,-5.1000000000000005,14.192036641413859,1.8384020669191263,-4.137658189275829,-9.310519046237186,0,0.07312147511442804,-4.101312960061201,0,0,0,0,0,-14.431449891039787,-13.486338194730333,-41.12498218314603,-20.57656388167878,-10.027909196297632,-9.147248834596395,-9.582028332726594,-9.214353787922823,-10.39618316618229,-12.855578876887803,-11.445518329511371,-13.830829882963608,-0.10971868101838328,-5.101153445869222,-4.1000000000000005,-5.2288425782879315,-7.163046072332841,-8.187928410525389,-6.1032661397749415,-9.49097406548469,-1.0505577141640192,-5.1000000000000005,-3.7213080387040125,0,-0.6503933327229714,-4.973821399100797,0,0,0,0,0,0,-3.548569297562856,16.051139618338926,0,0,-4.513750145614757,-3.6255650135301494,-11.345618892418502,-5.1000000000000005,-0.4930086777163307,4.6937293883919775,-4.1000000000000005,-5.100314460205923,-1.567223031024816,-1.3394015632459955,-7.791243526429877,-5.1000000000000005,-5.157375,1.7667800433217886,0,0,0,0,0,0,0,0,0,0,-0.6997164181116938,-1.5416838839850744,-4.1000000000000005,-5.090260268956261,-7.754694412379882,-8.40820577552263,-42.11834642394214,-9.690675747734895,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5282972130667595,-5.1000000000000005,-4.102149161756861,0,0,0,0,0,-10.213625,20.946775371728865,0,0,-7.846487758352501,6.058949955003329,0,0,-9.649691643901575,2.9221492800229654,0,0,0,0,0,0,-1.1108415708797457,0,0,0,3.246541472876242,0,0,0,-1.111379760800399,1.5315507408440043,0,0,-10.213625,0.0598641785579521,0,0,-10.213625,-4.768085387943446,-0.9430455099105309,-5.118237998860528,-0.6387666810573763,-4.016827553608477,-0.8579338765622837,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1108982930668971,-5.166923461690537,0,0,0,0,0,0,-9.127771581902348,-0.1,-4.149531918062604,-5.117229353645989,-0.8912656138691096,-13.479537864569608,-4.222394339209973,0,-1.1106567741253595,2.3322030651843324,0,0,-6.1000000000000005,0,0,0,-5.9200170538487376,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.719828682707067,-3.9740739658184454,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1,-0.1,-3.7600777150653144,-5.1000000000000005,-10.213625,6.741075443078495,0,0,-1.8153450489295935,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0459194261994822,0,0,0,-1.1112933680488424,0,0,0,0,0,0,0,-1.3454835540095755,6.503133918500416,0,0,-1.0560150393917784,0,0,0,-1.424018085953809,0,0,0,0,0,0,0,-10.213625,-0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32.90672121939586,45.76421971885515,52.98958866862525,46.26393318585667,28.627857879572346,45.246566826744186,49.73789412313284,43.40850285148597,30.930903249829097,35.82154952088266,49.071311000327114,46.434332606385766,11.513907376080011,43.17308649148998,44.54335017043613,46.168631848914224,34.290219157573496,41.30390439030619,45.61607100349079,46.07463474245166,26.752569639087156,40.26751423130841,55.14576524931677,44.628188213216525,28.983180949470707,36.75081548863039,50.22368102496365,38.11543294604252,27.006485540548777,33.68680324927607,38.47373508953892,46.32592506868298,29.48644111718802,-8.22052711629881,53.150629923110934,41.63672390835945,34.511211610375916,-11.741186556392329,56.61608324397945,42.281503073156244,26.31973889338659,-4.940031680101487,53.63624539479172,40.76370241222682,32.57369436196941,-7.14072812908258,56.17507449490248,38.04204386102976,34.19281461078583,-8.073577337560671,51.372066961929676,39.64790554034048,31.01158543093166,-4.512323060864666,55.69719716420717,41.60903326913961,28.24622398182176,-10.29657076572391,47.76489055145555,45.71405533585089,30.91272700330764,-8.280259147146712,50.95268330710603,45.13063459348661,38.4363926686875,39.33720466143426,54.12877854364188,46.07962953597999,21.826685883066375,36.743082080791275,56.95051574638474,35.668979033531244,36.05720712303389,38.86963786106787,51.86452135837207,45.189930804098225,31.880741142761416,33.46331497743927,52.57509600455043,44.47002873918651,26.669314872562733,34.61711206602825,49.10207801831157,47.997424925455746,14.405472599890494,34.61149503720026,47.338648213828826,40.61443231977315,24.143543249965678,30.337895135375053,36.872860826736996,45.57970965663454,17.916177027470162,34.33221757511896,48.82168695608672,36.44979013743755,29.0706515328603,-11.746616121294272,54.54204590595128,38.52850813931892,27.072695237533058,-12.757064233033814,45.6152986991588,42.304711709961374,32.951031993059345,-11.849068489719109,54.93450598633948,42.780755239909745,29.187685049345284,-12.423483992368709,54.09879975914241,44.00464784892986,24.31172633476559,-13.438384737367109,50.2129347810707,40.44720227176966,28.18295204266399,-15.275485871747307,50.91271103731593,38.201724560594116,26.667855975437725,-14.944311160605958,49.09083040771016,42.33123435274613,5.4005897463505415,-13.979183546519348,58.36254399435483,42.395369601275334,36.778701769839955,34.67153685654868,53.621452902109084,38.0060519833598,30.806560288695675,38.0557831726427,53.02756354642964,43.17734332171308,-4.056716374775591,32.52801659100052,40.82616255297654,44.59009240874151,28.506402975635456,35.44290710173087,54.92760940249596,40.96688074066062,34.88975608541109,37.04088191630255,38.13764104712466,45.26777912131229,18.670564496788554,38.66776706337986,29.767253642405276,40.407090125192966,21.07068921642841,35.103284072650546,52.82723000191205,40.74420610210009,21.231860263732845,35.656702778013816,53.49527528837085,25.956607415738358,25.548543892046112,-11.353706133783305,49.76306926592735,36.79393772230625,21.954098546170243,-10.895247576919676,53.54091267251849,46.105077953857005,25.1176868918378,-16.390110017756317,48.33316884099491,40.91165115955683,22.67559846676074,-14.111742013935048,37.04683628001007,43.41644802651535,8.187925904131019,-14.351261346674292,54.115390039155024,38.32139065719969,32.023473407793176,-14.791736479514016,53.65546974219886,32.079632399067265,30.055163707410756,-13.451469232944557,57.492186376448,33.275203004602176,18.092230244512994,-15.202896757720428,48.566883450653435,33.10744040971752,28.37691398447294,36.783198080175524,49.853011481567364,38.99439489219155,18.432609908088768,30.10883307059112,51.85749154565962,35.62044626133761,25.565486333872446,35.82480972556645,52.305377670540686,38.64985219446484,12.401956169484432,27.956864472435207,50.312986223902435,32.45239100672538,18.596676145225775,31.88234499958176,54.18269945360029,40.85849001086468,30.766612701642465,28.66199404517767,54.954422171601244,34.71951304736944,20.925570091803266,29.048612932098358,49.69360841130833,38.94351900398515,13.15062261713325,25.74116724364652,24.812879765358627,47.245081195207135,29.632665898154006,-16.36591863530338,52.3858429775249,36.38199519516674,26.787735596100852,-17.4200479305069,42.5482809989111,27.769002140703364,20.045145219876467,-16.315879764771058,53.49441687710518,33.141160434632894,13.56585129993341,-14.711130115096523,43.3920623879073,30.899592434998343,19.441878498163437,-18.806659815831736,52.51520656516612,26.01540085443715,30.091585532317822,-16.735144884587424,51.926411786015386,29.06448339864031,15.364628100085705,-12.305900949257532,52.59456013001381,44.9198476894249,9.398454939925983,-28.1323107517636,48.041380268024085,17.858672536946955,-0.8563276993156199,43.545347806087705,52.99258884213707,45.61302500064928,-12.464112147616166,43.916370986585996,51.76390878174436,43.997954331371446,27.664561371640506,41.27928690761958,53.14998678874539,41.00084917748446,2.1569774885534003,42.89383235487143,55.36967850257738,41.95247979347171,4.128558351999177,44.44453069470485,26.042705313135762,44.65355375291382,-65.52967532065419,41.46620944784273,22.833771766303023,15.994637957361952,-2.019856028417932,42.93020043635377,17.252485657975427,21.086839705214906,3.1170274968872627,19.484894947631126,53.04783088394217,44.342958302264265,-4.56717525324501,-8.530031718206716,50.9834368203287,43.909409425760195,-4.877046751478626,-3.495887600604419,48.691146130971276,19.840278302507347,-4.281852491413667,-6.3425540433439025,50.795268670997906,32.62879502471264,-9.85202079332176,-2.811838792743138,53.29732805039435,44.61654559906743,-10.142119268891388,-8.228695335846709,51.37159624816453,11.674610777340716,-46.11999306104088,-12.6234454181896,53.606909619463565,12.301964829098965,4.256469973506269,-6.039923382764385,51.60868954785598,16.57826184784701,-10.818235322238767,-2.6273690460911094,51.17483951450491,4.617191553215857,-10.15375681335157,36.97304274141198,46.197087817864436,40.63730560278123,-4.641661009418229,-2.539115816297982,49.240229167082575,29.006754009737435,30.73893869450285,5.9493556883812015,47.71593070513728,23.301957213660554,-5.86978847233523,0.8241386218341986,11.154617838307889,35.91949220816382,-6.260657206634904,8.817130130775688,41.069053599253216,42.894207636729995,-5.886580562611742,-4.821529514066138,50.97125895551754,14.07682832842451,-1.1738129851827503,1.3082489250990865,51.552208995756416,4.9097263350652085,-0.06619992643787675,-1.2114512259078358,54.31130251856655,8.823721553518027,2.2273764127135616,-12.33010140541831,42.87449372901014,42.39695419323693,1.4853496626317015,-52.852839061705495,51.86203008519823,22.374264895805922,3.5200922179477843,-6.280609490361048,50.67572229275259,7.943360152360599,-2.128831063237446,-14.489453917022018,50.31297290524071,0,-12.070746105298158,-9.011430365186378,53.00931500217404,43.38755805709758,-1.58179589200835,-10.213567896964689,54.41010104465019,0,1.9277474371525376,-5.107041433538802,52.797572779204415,8.217961059590987,-1.1069014691635235,-5.101249745029095,30.398248875836646,0,11.50311146042691,36.2226995697804,52.9526187705318,37.02684566683078,-4.3237221971242015,33.29300901360785,53.48299536074893,19.378805758439665,1.6792284852498098,31.673246199433738,49.052125300114675,35.68533853041546,-10.370706979293711,6.818440318748959,38.77575712197119,42.1245221342405,2.8953246023489565,33.9157913441452,40.55357346033917,42.24403455312042,2.7035620888790897,9.160142791819986,49.96752410517682,42.872269090567926,-52.121058986777854,11.867075911153803,9.420268017235117,42.95019503908089,-1.1,35.41547637120892,0,3.564027797039394,-8.295577103240909,-13.82447715349834,52.8627411183811,13.132609860589374,31.132869586072662,-17.625064152440316,52.2656976845208,4.38279392455836,-2.9298610591918104,-23.8905650263536,49.44726266630288,0,-1.1078436341377966,-5.1000000000000005,29.035388261366382,44.850530935832886,0.11156612357604612,-7.383955474331504,49.31849140146617,34.550769488055074,-5.5884939038424815,-5.1038822495994385,52.19294596348059,4.763864010362422,-1.11153167766182,-6.00641960408465,47.38065368268071,0,-10.213625,-3.778055352988795,41.58062565799016,0,-7.049865526575257,16.332834698570238,35.68157710633395,44.87405028959976,1.6964408084543503,-5.592683963841942,58.07778029488152,15.413421221685011,-0.019048006704784015,2.4100181871718362,45.759762916262915,6.669076096111633,-2.865318613113163,-13.40863010861797,56.166304214619856,0,-6.111855680082252,27.48102575232163,12.156596065924164,3.902479164307407,-5.921243280125669,-0.10954729228557719,51.205764684577076,0,-7.058992105770354,-0.1,53.74487302667389,3.4174239120207774,-1.1344762763238223,-0.1,49.59994408251914,4.168166517729655,-8.635629034886723,-12.028107613025126,55.69008594430933,14.159112604837839,-1.105414553789486,-5.1012505359375,50.89760522172159,0,3.711345859528776,-12.878911634059996,51.13539190961268,0,1.0648222323748913,-5.167471067702317,33.62397404625614,0,1.7589890968851551,-5.056922756110101,42.733352971535496,4.362833657873405,-2.116939391448498,-5.316259268703935,18.146446472242275,0,-0.7180915942316458,-5.117341236959675,32.397272158667015,7.984600735570794,-1.1477628363668082,-10.214916233190912,55.754341870581435,-0.06100380429374773,32.37063286830413,47.26522963422087,-1.1086262894885228,43.4605300990926,17.22278509349164,44.535227417008855,-3.298359440298206,47.6652117244637,23.35633122601435,47.4847285289072,-1.7522240896941799,46.18909386941305,18.236059349881852,33.97406043064996,-17.553602847469513,47.95690687558058,21.03360026868725,33.492814389579955,1.151478918636561,45.53761228732284,17.800053093767904,36.73494747843907,-1.6533333445058636,47.3816660452018,32.23770859479019,35.27345384527762,-3.7547295665486122,38.764008415970714,22.564274140814017,36.42250460072419,-7.015111052114644,41.59930633711457,17.89577856823346,-0.8283110902466599,-2.482166930590215,46.59264187657051,14.61929506986655,-6.503573201483424,-1.3815523379506742,49.90245910303423,23.14061533765993,-5.031528845482685,-1.6066361230965218,45.971727249407856,-1.6410565462667868,-5.184598020479134,-0.7770031628276397,44.97412241245095,22.573537780326,-9.899278859757437,1.1019264240365232,48.587632020812165,12.722132662296723,-8.624140387408698,-2.125939253620265,41.22485206379745,8.942692399926317,-8.899616127978444,-1.6081176043633831,33.31064474124202,2.5000440054960533,-9.171384782839489,-6.115480874540271,44.65502685512415,13.91274131177795,31.773455470567963,6.151576309054832,45.79699459141823,20.153203598285444,24.750798078290263,1.7743538297622974,45.785252679769194,8.642471198946067,27.26252683705299,3.487490662780301,35.071122193400264,14.269830009066185,30.85643789799774,-5.859334170511308,44.148003598274094,28.587763171509135,27.205455398151337,3.8181761429385235,38.76268727144168,14.336962107895689,32.82449460331645,-3.076272052276577,43.63812606081007,16.075585528592942,31.68730175292643,0.6905840235775428,47.051511661805236,-11.642842382627693,20.924102980460965,-0.8252368052063042,44.329489197577445,14.392733485133519,-13.960544920386178,-0.5386448812335312,45.97393283917661,19.497063094437216,-20.282287149196115,-0.2329427100296673,45.12638945592773,19.278546156144227,-18.27014140096144,2.3895363907022698,41.86117212490824,9.403183705315044,-19.00724630736141,-1.884260343138576,45.79432777491639,17.751394186174053,-23.58947065716422,2.2487990255920907,45.87998659698889,9.96401484622723,-17.896032535217653,-5.943914417558876,44.998073214392264,6.662996635251215,-15.63419051705296,-5.289846684108961,45.25332072010591,-3.3618871619048836,-9.76543290095133,-5.481830344486186,46.285991704446886,27.597046206978728,33.47418857660026,-5.458415444870665,44.37476904958945,16.879962630443927,30.748067571033634,-6.726297392745174,44.63570989930588,24.80387401685038,26.751569705128375,1.0902371663682422,46.18816361069903,7.811052406607326,22.682140853364963,1.8255756929009068,46.69449239838396,21.931353744213684,26.001703765503937,0.1464489913703082,44.76493832525479,20.204629531921768,26.551046940100672,-10.205768618355028,44.12547629757405,20.573604885025212,25.859931934979308,-23.09086772586557,45.78970912863322,24.58745429162464,24.665221077328493,-6.733757573628913,45.40882805611045,9.701211562395516,-16.72114460979168,-9.21071191308594,44.26671883464499,22.019096001090453,-14.509462858585241,-3.2142708850303032,43.88392182343976,22.451096977556997,-21.973708241970215,3.7210139118661436,45.04495416052465,8.817329318742335,-26.017727954642385,-4.243593708568833,41.29341592327169,5.527822937929619,-21.606344056851658,-6.045892274430531,47.80418255961876,11.177065341211062,-17.425136704302524,-2.629430666986638,44.61879754524933,11.103557767961213,-13.224037692178145,-3.8767539156080764,45.88343055046744,3.763714485040832,-9.051541873610411,-3.6234432345340073,42.29608078065583,26.92709497434548,29.163036272244323,-0.6255092462316414,47.57439926766749,6.911728710306718,28.793227029825616,1.7859558878316708,46.75031441758768,10.954526351498195,30.362619295969864,1.5112165277889944,46.56941988529573,6.766864671469736,27.3530642538922,-7.257599057470373,46.51646264313628,1.619191463921306,30.28636958063978,4.612081251608526,45.68745754776855,-10.280890792277633,15.104016589390637,-23.268968760082302,45.70383507451796,3.3857321760058094,17.925022508912786,-12.13525962479952,46.71640477399874,-0.28301904119539767,5.642338733676251,-10.801131210900751,45.25576551433552,17.510754922640714,-17.83777042747032,-1.4450516704105034,37.787329358849554,11.906397581914476,-16.78087935984107,-3.3480828359130497,45.253978795805104,10.080378073694796,-14.196196475442516,-3.7134918947716984,45.25915787027939,2.2373836223383643,-9.703446394780476,-5.5130574272232415,45.201967266549595,3.02760483601189,-20.673622957096494,-10.62012222103665,43.52749702553438,10.001202231020297,-10.134796359687517,-6.146437875433383,34.45560286663924,-4.742459234458402,-16.49156716298315,-3.2093250207221673,43.33914912576374,-1.0336481210527344,-9.21372294148724,-11.156818658294604,44.853355855865445,-14.58778007147172,41.769135401875246,1.7776587972299345,44.15147912955585,0.20942885210705753,41.40555742941078,-2.6433600632359733,29.719440148590337,-0.21238727205084107,44.87868203482493,-2.2063839777428145,28.016960582946034,-11.715334375152281,44.084030307004944,0.9174464747512173,0,-18.108110005493202,44.96375495084655,-8.304817299892163,18.792569538761782,1.540956950842705,42.97778419816766,-1.7552215507288995,0,-8.071641535648133,36.523687579642235,-0.7133964937915913,4.294873903837792,-1.1,43.043307656011024,0.09381453318519317,0,-61.24347633737443,-5.172553086821667,-1.9599329974968782,43.5955585427602,-7.190479629179842,-5.0223751214631225,-1.703440694433796,44.27967889779633,-6.307736484989825,-5.101365446606748,-2.989987229638272,39.44916177911301,-10.13675449891296,-5.252788686540384,-1.3767477189402713,42.404428420247385,-1.1056758575405135,-5.557980076119745,-4.0363695162304,41.94066960482582,-4.949238706674362,-44.013425627713,-0.39243550495981694,42.66176447888203,-10.213625,-13.893356117699689,-2.8998316295049897,45.44673201243019,0.2838265213011182,-6.293806340102209,-4.10687022187796,46.58074520680755,-22.40784133442525,37.36618859575732,-9.867738502265258,19.317233871778498,-1.1248822104802367,-1.187629151987808,-2.8722276737247974,45.76605031174475,-13.1819330131993,8.772749426410794,-0.9406578861190995,42.822246284208234,-1.1116344553770448,-1.4933077556041825,-4.100314490123834,43.165810013136756,1.230061047930577,-0.1057528175237992,-0.4070467728585039,43.53496250712066,-10.249203305887699,-0.1,-3.3945477526056482,42.900732767054905,-1.0733846734764956,-0.27645283735139237,-4.100963502266514,46.09193198237925,-0.9056906194263261,-1.9739724141719368,-7.386813366639423,33.21842658629584,-7.1094210159524724,-6.69933800304515,-4.101219492067194,45.81699644927099,-1.1104670451347336,-9.784120252118843,-0.9299768028513917,45.184738422629245,-1.1053149680081389,-5.111602828125001,-4.1000000000000005,36.535574165431186,-2.391772882842218,-10.215289724094035,-2.14537947088943,16.78140365416964,-12.337765318759116,-4.909435786114902,-2.6663038474289054,45.05214123852365,-1.111226603015532,-51.01043485147602,0.24126543656140378,32.7588991664055,-7.448685390630429,-5.1000000000000005,-3.041212171539982,28.479706769848104,-12.07056985101412,-5.223484427777671,-0.0659662043159173,4.726163100831282,-21.7274253697581,29.882727737239975,4.269778161353482,24.64181173984267,-7.607110144201037,36.90494282119552,0.2507140984832482,44.787162689382185,-7.739082271911826,3.7518750488871193,4.7506885648102815,45.15416175103951,-1.1,-0.10697679954981708,0.2579389799620947,43.37493203741502,-0.5115860526840144,5.721508272365755,0.5036898741164357,45.09953581328519,-0.32664189420812006,21.75571452252118,0,0,-10.213625,-0.10135073527114849,-8.890255260945532,41.29742188485292,-6.111210616813731,-0.14819553015499815,-1.6439768044534095,29.935237822253875,0.9386105996590344,-5.1000000000000005,-2.944744038821824,42.004120857987495,-6.121840328125,-5.8061364275973375,-4.4962998775157335,44.15430833864647,-0.6947185203597074,-4.901318384286308,0.8040007014727348,43.378370882239324,-1.110367349990996,-5.0302238539506385,0,14.439917901152317,-9.112577353941768,-4.86722747386402,-31.57237754050122,39.964766477605835,-1.1,-5.105756903110611,-2.720943835638814,7.125241274676547,-10.213625,-4.383762647078252,0.8869338095759588,0,-1.1058043069077634,-5.034545509124337,0,0,0.18469920781693627,29.778288065925075,-3.2672388813661755,4.766022000183087,-0.26035921128054795,-1.6694966720547637,-2.967298030020686,45.23287012444571,-0.5316804203502898,-12.922334141856293,-3.418296345098878,47.585723685160225,-0.8657761181378618,-0.17666503742470252,-0.6216417482714587,33.01285630291697,-0.6355805801979714,20.584734508870127,-4.1000000000000005,-0.20874529067547035,-6.1000000000000005,-6.2014356428874375,-2.9922203693523857,44.359167799057445,-0.08281187943424531,-0.1,-0.7587083142640296,32.88619036109164,-10.213625,-0.1,-0.03570185850294934,4.437786438083253,-11.081327934336848,-5.105989062391712,-2.8876737484155903,43.08100516128304,-1.1,-5.474761477587869,-0.287739623486597,12.308999731190962,-0.8885933033150497,-5.1012375,-36.61050401767447,42.74136843456246,-101.80295091172108,-5.5600910979877085,0.46739772381483463,0,-10.213625,-9.729992778576484,-3.926290341070032,20.531644122950805,-1.10509478743538,-5.1016494767106995,-1.065837965876681,0,-10.213625,-5.127889954939597,-2.7666511211037204,11.88917732165458,-1.1444243418705078,-19.336375575053744,-4.106863948412058,5.44037540229456,33.19293731179064,39.67500527422885,47.04515742723314,40.051116092943076,29.538700845992157,31.68734692689788,40.47300641502066,39.716157818061525,17.30480822061021,42.04381205191863,46.62908456430587,44.598222140510366,25.807893496746953,33.47177851048224,31.58372807929415,44.632864074577526,28.517173953430717,32.487376576213464,31.28073012923166,41.43451644019552,30.278076658367905,32.4019656291931,46.08217907488987,34.1142437832303,31.919890873944844,28.887988834398342,25.46869544328121,42.68845902544179,10.460335236284763,30.22881246549617,45.98925481079106,34.09304577290261,27.920251687723905,-10.11318552326407,44.22254005528537,36.910530743285435,32.87360414146969,-10.933398100760643,47.90218060945121,43.504604699495424,24.7091787372624,-7.970147997039894,45.90165612233649,34.9201172589441,28.24473153226981,-7.412106925328002,46.59054574167697,34.237023604200836,27.25728209457741,-11.905001018015074,48.80605053273595,40.06822128071057,30.16062727223336,-11.187561552095964,45.56346913558076,30.742090779936436,28.55920155718571,-8.791002816320471,45.85521979707361,33.92097811500821,25.41938038867028,-14.467815867424251,47.0891382800724,24.332735564716774,24.500318871134407,32.18431838554344,45.11871047954073,28.024881416529404,22.542796110033024,25.381018563093264,19.47506431386522,25.49769790566169,12.711507107330117,28.80887724768207,44.882741911128306,34.05387713137583,17.081255494902457,19.022795476369442,45.1737969101185,27.21819932807479,26.80577220753934,25.81655026811406,44.72619842282818,29.697769267545212,14.807244108394368,18.495315922759374,19.735142165188062,26.81699869858963,15.410554547185594,24.49898421691076,44.70779389543888,25.33201670230512,9.50600120879148,18.703013263602408,45.681524886595085,31.47667240445268,26.7568859206274,-14.993608647527388,38.80750605161847,24.700420304022956,11.800291610668303,-21.958176632605635,18.852948262870015,26.455158200786517,28.751764053470808,-20.72007537834385,43.49264688731108,30.323191713791328,20.338315036433634,-27.653531509224834,34.82436523560147,19.039283939865474,18.31699806039387,-21.89842547222663,46.617721550975084,25.202422825652533,15.707482878809833,-14.665134854053907,44.15915437694079,20.82394707430313,21.348238317592152,-14.500121597866624,40.380237784100615,17.03845005642313,2.7285667918790892,-13.67006727353712,30.161660200408527,0,24.97973655116111,34.39447288678484,49.14804666722359,36.10572990295955,25.99685483165337,28.72745806165067,46.61446797515236,24.91549262570925,22.354078510501253,31.58768260304202,44.824645625898725,30.87670982929267,20.295219670779687,25.939915692655923,21.903936148088277,25.697513180048706,35.02307169848376,27.452725192739837,35.80458183431689,28.484327229773857,27.517307750825815,27.897472157993494,46.596155019246986,29.000042378562387,32.7783509416333,25.635856759709107,47.58393778096109,42.768216052133546,22.039120980875204,17.013433253254913,47.27423344262674,41.20759403542014,37.289795960993196,-15.319470837398637,46.35477365522695,24.63190054363687,25.072200348402667,-14.015085601152604,38.44072397320964,28.868191085932885,20.208498861431742,-22.962817178638694,29.545251440530343,36.75179095321863,21.8223065376251,-24.909550233318793,16.71722850693036,37.78549025531945,30.544875572923353,-24.94509897971028,45.07158927228857,32.18980275238645,26.716019865957893,-17.967555135832985,24.93483929553453,25.25122912122427,25.252547298900154,-15.466592772394963,44.38276041140347,15.8441354315766,9.429718471264952,-12.960390169267365,40.55523823619675,12.635731058954171,27.455118125153128,26.05862740353743,42.860703456762145,29.59033873305445,16.044469422541628,25.25252924628393,41.59216752781421,34.31215460092009,21.57498700772343,25.447168280991917,47.3881028436957,24.196733966239904,8.715820010806532,15.900855395492908,48.20370623980569,19.75034739880211,30.174802854400866,27.671417472889047,46.819901056337926,29.694818093710047,21.31654729306094,21.738537066979763,45.59057524903676,22.726484640231448,12.38621352522482,20.05658747594904,46.04498605513,21.71821207448227,7.726946964896651,2.688149504502796,46.900754860127215,3.892005567738437,18.35438432279199,-14.69286178766871,43.651114101030345,21.78895798601682,15.547308719362116,-20.305861165165844,46.92065492081319,27.093044342641228,18.12060601856418,-39.775352702914894,45.93287882879228,22.888146066025875,-5.109337407569095,-28.311500075193802,47.55693283371578,6.435862516964455,16.912090920961887,-23.266828078677698,35.34411118619931,19.195201901644992,0.1931965491551617,-22.512381790010036,44.52434890557823,4.669468345680107,2.9958199683693083,-14.843781305185942,32.349899389891185,10.247073301625027,4.03742187361976,-12.9408070541148,46.051448059280816,23.54772746449631,28.84920176122533,37.505356952606796,35.44871189894472,44.066075239808264,2.6892428384481266,28.848133469694584,49.64058980340766,24.834592192524877,-3.079841262399394,45.971957329602176,25.757737436519502,23.76245341461367,4.274992594472677,44.81821852097841,14.677858646007092,12.561443113352912,-2.3108993832712788,15.501100829977016,43.31064295717071,29.544177945105243,-14.15479697470302,42.665817867938486,12.939979043987012,11.696158409501098,-0.7056544978026253,32.90016612487587,4.847285539141296,14.215419924516514,-0.6054968926500921,35.778280971105744,0,0,-15.677150839062627,-14.115184280627917,46.679396439838335,14.064169171721698,-0.22016296021287785,-4.921072783567225,45.92315235437965,13.4714427186562,-6.586402936777904,-5.649353650406523,47.04709181441298,0,-7.591258831904292,-5.112757491910204,45.14598950248884,4.564821323555965,-4.979168267265393,-28.26604350382835,6.510625394758156,43.03188184444194,0,-2.70043665100554,3.8011063745164764,42.621519138951044,2.825199038887048,-6.9290989524175455,44.193344084719975,3.8820544235010277,-6.1000000000000005,-5.1000000000000005,28.698143386383688,0,-13.914038709796557,33.549936923916185,45.336992578834135,36.516621257659274,-6.247898587755847,-0.9573476007612163,42.97155303693131,10.155575677955088,-0.05576483598884874,3.1399480824386266,43.41415913152725,3.798911674702694,1.8334232828416874,-0.1,39.769766080340595,4.699031141441376,-0.3302023878219269,26.34206501977442,33.135029599335006,20.163000346767422,-0.7312789494314077,-0.18936481654300574,39.083544516615326,4.476196959034551,-3.010307247650312,-0.1068872921875,43.92203260586853,0,-2.122927277387343,-1.533888216099586,37.46871827462385,0,-1.0904368979026908,-5.1012442078125,15.549889456366262,42.41071702646634,-1.105995873890914,-5.106989452977413,46.86254506422244,0,-10.304485853797155,-4.208118590696005,43.938948480686705,0,-1.3803871935049783,-5.148539249147121,40.78369955340282,0,-2.512730306774679,-5.1000000000000005,40.24374831021162,0,-1.5579767562564673,-10.183299760237308,40.10604400608929,0,-10.213625,-5.101047240829248,43.49614115238244,0,0,0,9.165450499523947,0,-8.00898179671347,21.89348294099095,19.727182513067707,41.74496997579049,-5.385235513959943,34.67574818726185,2.0970011395775283,41.19927004005845,5.029631663506894,27.498401610686983,0,42.069095871033866,-6.1000000000000005,20.759548650334672,1.2245008447060952,3.636679484228934,-0.26657549828750926,12.33895085705988,3.684614933813071,44.85447116214441,-3.8498409209152538,30.468908305850384,0,0,-9.486746850901598,0,0,43.319078482239874,-1.1,23.592392941541956,0,0,-19.564137310741703,-8.310352376880003,43.43976307977411,8.182024482279049,-1.0190702930633762,-51.01101986108657,0,43.630131115394796,-1.1894460791848038,-4.577062395086925,43.31722336181516,3.3276871796096246,-0.6545584240805375,-3.132888898254421,26.81800885448893,0,-4.284380424815734,-5.101012432879218,23.9663967355562,1.6877073858941707,-18.873815933206053,-1.8312790754466726,40.17319995389683,0,0,0,18.812895974124757,0,-1.1060805366082882,-5.1000000000000005,39.368200616630475,0,-5.727189492314742,35.91317696085083,0,8.991755574402369,-1.111539546875,-1.6481207339008725,46.52032206378483,-0.1064999329829419,0,3.9191028592685964,43.89736436380644,7.2910838192984215,-10.213625,-1.1153954687498262,48.579945574195285,0,-4.573797506166778,2.9301417355064574,42.313959763459735,4.748359630009856,-5.410710435550659,-0.8919530821687528,43.73508292431071,0,-4.742193699379579,9.240263616885937,0,4.421241084024643,-6.101432024972598,-1.2061740029011947,14.706476631412583,0,-10.213625,-4.453821861899384,40.52453667938049,0,-6.107019195006484,-5.1000000000000005,35.25657312268595,0,-9.039023628889256,-5.1000000000000005,28.47665371171619,0,4.762745693313853,0,0,0,-6.1000000000000005,-5.13862000394574,13.65158274385794,0,-10.213625,-5.1000000000000005,20.987217182207978,0,2.5864214591058,0,0,0,-6.101284247148087,-10.220488944778042,13.088211425271114,0,26.67689138272627,28.88364121852221,-6.860953451218467,43.1034700707924,10.58409108162764,26.16178239585764,-3.216349108171527,44.89247766136377,26.168596781605103,23.090390386500466,-8.604932665851319,42.81058374627146,15.803980974749829,25.389615601496768,-3.8760086060885186,43.42723337403087,21.746806595036833,26.63632388485361,-25.14832727213267,44.61133292165437,20.71031389645829,20.662908867069564,-9.029822313212346,43.49991231408772,9.487424930272224,24.477255388855397,-10.356033384901547,39.59639153823644,7.951024592006056,22.307600131079898,-12.695557900178999,46.64599339887111,13.807182678651486,-3.618833701403446,-5.84186769977941,39.752643952510745,20.963572617327124,-8.6333484348949,-2.279101588856784,43.3604769200644,16.323505745413506,-7.586100619640924,-7.221798820041014,45.64491798403021,13.075035859690978,-5.515137051335073,-38.65112867094007,39.218800263292714,12.168727067730542,-21.631749191227755,-6.095498982147324,43.59886301159658,-2.09021041571438,-13.188114482163268,-7.729439730189037,42.2361500867383,8.736924827986025,-1.6988180523163772,-8.512744389754625,43.20310406282919,-0.3598612146849107,-17.128334282195503,-9.546403140030083,44.491246652877706,20.538929364720875,32.57707417613648,-8.25990495369993,40.59692273907723,6.603656475206801,24.729839501099008,-7.222001841028032,33.05748623757373,14.052244413288962,21.175173493999377,-18.282693277965592,35.21211382738486,6.249344432534281,22.732369097240458,-15.48885494408827,36.5391719344401,17.38287415878541,17.848742947714367,-16.81956184229093,31.575527369971695,-4.02041759630597,20.555332340093447,-4.163381724824819,40.524246188781795,-18.485748361778654,3.517924144306667,-20.531840318666774,41.56422413639433,-4.142209108952075,5.2232523001538524,-7.803480741067137,33.71100220650786,15.36241131792755,-15.94069882090647,-4.414726190093269,42.34491621914455,3.4783418684541374,-20.64986459490326,-7.2745795533348145,43.60188146064936,6.8051667817400485,-13.62947143440185,-6.900580589325774,45.0910757983986,1.868641596945247,-10.722177436330242,-10.522692319507719,43.418104795142625,5.265858214583076,-17.3809293130166,-6.366604473747523,42.73833581314049,4.137941183369239,-9.69675584874872,-3.8449081368531592,44.680956995622424,-0.3318364405034485,-9.702056312225388,-10.176169224018615,28.23384977844644,-1.634608225669345,-9.714268769796952,-7.070246475405821,44.897103746855166,28.803462047078668,29.343834059275657,-7.572553334371984,24.763876500571115,23.09479840462578,25.714642853011878,-13.375042190260585,37.64144970926472,13.519274601513592,22.077896418825627,-6.256677669178247,39.69415163004276,0.25973768093538663,17.213050807069266,-10.178972214112672,41.72192183631315,16.2561836436196,19.266748711983563,-14.274331107282434,44.36045047398734,21.820439272221567,19.534718635118434,-12.682074276122986,28.12286854617622,12.574379451558055,13.692699979634293,-22.234675370101204,28.64585797227339,17.9339823080136,2.06289977461657,-4.374434208702081,37.29986010868735,17.76112278917099,-16.597817032618245,-14.170603701109314,44.7626414730413,20.76279995695925,-15.982434556584106,-10.258021568958041,44.68593849720134,4.39815439479502,-19.821372831124016,-9.85576973562249,44.197570025830466,-0.23968664619662017,-13.270240458121883,-3.971677173373405,46.10973020906984,6.940126450091561,-14.878038288025182,-5.385017184253501,44.281978149065374,30.947656330423875,-5.5172910953477015,-3.5757861192949094,44.44975694253702,26.960982381339434,-5.1000000000000005,-4.1000000000000005,43.79101317038023,-1.029071851273967,-13.365396300014867,-7.216003175439116,38.74761386009668,17.375999079174537,25.031227020705877,-19.134062270988416,43.333627265886435,11.750681581178668,16.500744683324886,-7.862619408105209,40.231820575240114,9.183551381755223,12.195791127845755,-15.941245977477879,44.42512077528018,2.4029782771982076,5.23492127676964,-19.80584664738324,45.05933212849055,13.890901278403154,14.788109950500253,-12.409052048265705,42.72483192892422,4.4640068458542626,4.8118474755061476,-6.2476401391281335,42.48722957097012,6.937879500679502,6.388411321604361,-7.507014507193889,43.474847859832984,2.289558543022459,-0.1545060888662451,-4.117227828125,40.97261484085332,2.1720378767244126,-23.2853008000101,-6.885741776073469,45.40422081215196,-2.9875691266725406,-22.052597758668973,-4.608937484813744,44.89924760301167,5.757167314012207,-9.70630570711329,-3.8866105424624986,45.41993464865929,-0.30416227017166,-13.840997303752758,-3.9149823335034015,39.831185456313065,1.6890701075894803,-5.101230151439566,-4.1069814546875,39.73644206678325,2.316657277518189,0,-9.691929765913187,42.5637199093408,-1.3165839809706403,-9.60486968977171,-11.117512659708101,41.75723688478434,-0.9265178188608709,-5.158531416087474,-6.364844016390439,36.779689389474086,-38.070057230175365,42.98731463550834,-5.4566352334332064,29.77328584363669,-5.323572872640314,4.5208114099815235,-2.4124614541208493,43.5132478021401,-11.060140978793518,43.26729950311504,-3.6355293397165873,38.66461673723466,-1.1105275383617923,43.64549129992779,0,4.602865300532752,-8.507938288542139,32.518990944856746,-1.9740306001664363,26.899479679424136,-5.973426241551669,35.23903943121591,0,0,-3.9535089095651563,35.42360199978288,-4.1118301806429844,-0.06902904229914084,-1.1108229601699982,22.535380258687017,0,0,-13.550840436257683,-5.10126019934395,-3.952247016369277,33.112137643390064,-1.110414546875,-5.101255152228177,-3.0545095971542384,43.47571356802417,-1.1107185993004005,-8.739166171533233,-3.875468936650784,39.981354596019024,-10.213745346875001,-4.616731072636205,-0.30894052225051144,19.72205270077335,-6.129305524683663,-5.0658479913508625,-16.429403098019687,42.17578841183808,-33.81601586916044,-3.544010542248589,-2.6404153096292875,33.52352756771499,-0.035606826936725566,-3.901599011850431,-0.20281606939618158,4.002536028018491,-6.105166471202846,0,0,0,0.6387535339166004,35.452791595234785,-3.9510071255995323,3.9724007295145523,-1.1,-0.1355018351795467,-3.7498350402069875,40.569630302152085,0,29.306031223866146,0,42.403392972785014,-1.390972030362841,-0.3789296674007267,-3.7939444237656583,44.180492846356174,-2.1118104242419173,-0.1,-4.10124382963911,41.650427423732886,-10.213625,-0.5655617321259022,-4.1000000000000005,28.945816255626116,-1.1057041692502674,-0.7255289071167579,-41.12608137624849,11.570753759410131,-1.100477715565369,-1.1800587542419938,-4.1011572529534694,20.956706615226008,0.4183619267176597,-5.1012428844671085,-3.9470198441703626,42.99616464843783,-9.28292096235387,-5.106875458697822,-1.2003689119917889,22.531711018029682,-1.1055831293347251,-5.101049903230815,-2.704862896548791,44.78057247125139,0,0,0,0,-1.1008528799567099,-5.1012426890625004,-4.106870349527205,22.73848302110044,-1.1056924663651115,-5.1012568640625,0,0,0,0,-4.147202035753351,0,0,0,0,0,-89.49542075712603,3.584919111420647,-4.394434142606845,43.50391847683555,2.3134221110052344,38.11513437682467,0,3.7659903769979834,-6.846737933883804,-0.1,-4.104845502250313,43.38840721630591,-5.8168818722784525,-0.1519163387045008,-0.17023766886644795,11.645201345252659,-10.213625,17.116177296828713,-0.47667995606579083,0,-4.412513198664879,-0.08362915920367398,-4.469185250958526,12.272483682639086,-60.65753721422853,-0.05790999426347787,-4.115456615634047,30.203492657701588,-7.317367866086204,0.822747074800618,0,0,-0.20080474752331218,-7.095166632829391,-3.5234039592963295,38.399665564545835,-1.147151844317527,-5.1000000000000005,-1.9439145516040743,22.85833019561333,-1.111723437793407,-5.10805765864827,-1.1116318091189847,22.012375015066723,1.8561486643901781,0,0,0,-1.1057662073822676,-7.434816202676286,-4.1000000000000005,24.89078050770306,-1.0918585470935962,-5.1000000000000005,0,0,-4.3489595238137,-5.1062303657872405,-3.766737922539139,0,1.9324090609025852,0,0,0,-0.335079270475656,3.236844195796037,-4.101239028827816,40.906378064668935,-1.030372238034203,-0.27141370621262706,-2.4312782498578267,28.842114681880673,-1.1047454070242135,-0.05932686041103509,-4.114670435997803,22.42463663991896,-1.1002504615265185,-0.1057375,-4.1000000000000005,20.14749196890681,-0.2119086441344612,8.656243138485834,0,0,-0.5338512644011234,-0.8123720197889774,-2.765094466123581,11.257502197180743,-1.7919296528300308,0,0,0,-10.213625,-0.1,-4.117229240754934,0,-6.105733872887032,-5.11155812214915,-4.111627627781716,14.440213460028193,-1.4832822020827119,-5.111624813764262,-2.8735233702107132,11.247243622292435,-3.4372312898922095,0,0,0,-1.1055508165739536,-4.931340002244238,0,0,3.09907106931344,0,-2.587177800337689,0,0,0,0,0,0,0,0,0,-1.1115726125592962,-10.21487551918913,-4.1000000000000005,9.172716311183617,31.578458778906008,47.41287660745426,55.162340187352775,-7.208578602149001,33.23378617416061,43.24165028919262,51.64484358984257,-7.127126684620141,35.154250832330746,45.70114788918788,52.88104143052731,-4.717438130809078,35.32449305393535,47.53869832265454,55.71393391373548,-6.867655866888737,34.129020085875126,40.26941831764146,48.86160251395205,-6.00359656470152,29.87777625776334,41.298100174081355,46.126988751058775,-6.574351004004228,32.30093502512502,41.95184028404393,51.540151308320695,-7.659059169421569,27.903785089823362,35.322979500345866,52.00971400617932,-4.837539288170482,33.52144624093893,-7.926397191554759,56.752065692908424,-8.384379019658951,29.314653127222133,-5.8788968812802525,54.444761965259644,-6.274171962644561,32.87247124821713,-2.1778549158143887,57.262513963704706,-6.701344863301286,34.345917259173945,-5.06101089168343,54.076426066105206,-7.178071427191189,33.72623924763779,-16.238823878097335,45.921876477100895,-5.59177926051194,32.19575588532801,-9.767186386899294,51.47535150657723,-6.263204160691207,38.50736043585128,-16.08579315045184,51.52159945212683,-7.048374958384823,3.4751586882964416,-9.754953833294197,44.58005027479107,-3.5544768650340797,36.116772513344706,38.42292827027762,49.71850677601398,-10.707645407371823,31.21525654804662,38.24149456487678,55.47120574871808,-11.034729810765835,4.407698354869252,37.18482937238423,54.45645365067904,-10.928578991481862,15.982559956114285,38.10754410208976,53.938642335471286,-11.422669128846206,34.206810897390035,38.00310953766366,50.34580892932109,-10.231017075999514,25.499829156546728,31.0012143505676,49.17632184893694,-12.841945051175982,20.83224976800309,30.912302124405144,51.184767225182064,-3.941336724984538,15.752154398378787,33.553978973769865,49.55767780033096,-13.016219005054168,29.952147413222452,-13.245237888324187,52.99008864225607,-12.84437434404806,28.977247380129455,-12.655436873702751,47.95227718084017,-9.226775472305345,30.93922923830321,-15.552373162910953,52.52069938786744,-10.797471618061122,22.506579482939404,-17.847687022482283,53.64348180393481,-9.485015852380643,19.846261386282052,-20.540936415028114,50.72624815799115,-11.917431553377748,21.086172294219082,-15.852046471615978,48.19960677168825,-5.303561736054079,21.141185328028946,-9.759376261961556,52.59040489614566,-11.209288337491994,2.3169971997578758,-8.462952988881277,49.98765063368625,-3.82497671481124,35.00686031897995,40.6354258895661,47.21609433793065,-15.279814570899571,31.09304961616249,37.434925221167255,51.81392801934972,-13.761811414373021,24.873458601142616,30.457882735178888,56.16198446977389,-13.920060336919734,26.70113755644306,35.615007138238845,53.48131651629848,-9.290841921716575,29.29116477526598,27.616816272629947,52.766748429731024,-14.480727959993292,29.85299937190822,35.425087076259345,58.566499433912526,-13.199164872891291,32.72985102466136,34.21288927597253,45.97766161333512,-10.781942894250802,31.382970221761937,37.8375128890999,31.462805674611822,-7.41952236504101,31.57276047590046,-13.75415054602417,42.327896563651024,-13.063251690839742,25.114107245818904,-11.071267830144912,49.108844005822164,-14.569841495943066,30.948782408026382,-15.693498821220166,34.897552842056704,-13.32164063625769,26.259454933853952,-15.067519640864516,57.44312023176533,-10.672305961563763,30.5649645913421,-17.79751767869793,58.900419338064296,-13.437881690607558,26.946974526938302,-16.67221089681643,52.139336653697406,-8.374070665110127,16.21525638695789,-11.857521784214068,53.95013668844075,-13.350816414817647,5.405913841526598,-6.801960180434799,50.82467391980284,-4.102977419613226,27.40614988211301,27.65218684667797,46.58073330357009,-10.897649778366418,25.06776013406638,29.928750218051892,45.92036491684862,-12.861339849008834,17.462523449754862,31.654179168779503,55.53777503537096,-13.649407168451816,14.369103881432281,27.61941945861594,50.89845970131982,-8.13486965277496,21.784995094575045,26.075210655759637,52.00436860162532,-13.063816217909956,26.276189059650815,19.296772462626475,53.39495169794525,-15.409254875157162,21.707080900365288,27.51301569302063,53.113721181550545,-11.373491137252454,7.262557190232588,13.19890806435113,50.400276987571914,-15.455129580595168,18.93239613168972,-16.29630484320768,54.01744124359911,-20.810669092079205,18.067737019932142,-14.912382393900698,53.73409722676161,-33.31216058916336,18.121192214186927,-13.356646419114783,50.092302664092955,-13.327350614678236,1.224949899980501,-22.983611396134677,50.987828066023155,-3.305107753309603,20.8804593693093,-13.921437690060968,54.36233495923888,-15.648275434443763,2.8567817737591428,-13.85911347579577,49.052496435710076,-1.8036275582733752,8.961542895907758,-16.215810164997013,43.243295934568756,-6.114656332206315,4.2432611844490555,-9.393177049976664,51.7203434327785,-7.820464151346033,-12.789273800145768,42.531737955784656,53.908284066962366,-4.850836875267852,-9.143765505789883,44.036414728672476,33.533166910407,-5.052171425573395,-22.278359994086557,44.962707781989785,18.284019069033143,-2.291413299048452,-0.055865400093625395,42.596705048531824,9.49571416945674,-0.6997428375102878,14.647551645649367,26.232305860952472,51.652339763240875,-2.619694217744584,-10.593704057652776,45.577063349628474,10.666394457891178,-0.2575145331905327,-4.407274249258031,41.66840735717271,1.6087247243868121,-5.2394424331019644,-1.0974542728377796,39.95751547886429,0,-0.5236637938583059,-54.223818868710595,-11.216786182696248,47.41435970348442,-5.241497327301077,-7.842487604730198,-5.135991881265638,50.96451454836107,-1.1301280007032126,-10.050773670954944,-5.425817614913627,54.90546806972571,-1.7818584098046586,-1.398217749737338,-4.998609096284211,52.929955389928224,-0.9940284034482059,-1.1057083714673976,-7.947856527919496,49.96759664030927,-1.3852778308732363,-2.2018697871430777,-4.5891475137442574,50.46936656160926,0,-1.1056917901627308,-5.1000000000000005,53.379036201496376,0,-2.2164083465468933,-3.185029561060248,44.12523271775771,-1.3311488073201858,17.14517454026334,35.092440033688284,0,-0.5363617464713315,-2.1083218961300547,-0.47127106118464285,55.04934368121921,-1.529629700647631,-9.368902797593854,2.9139494786702786,53.50041895611456,-1.7904185376295945,-5.319180074102578,-1.0164558013351594,55.57181469689866,-0.6336838785563115,-11.33221882154527,4.704107340849395,50.71705526698179,-0.48823888699599394,-4.619851653322474,-1.1658925818963144,53.0338709842878,0,-6.523099031989895,-0.12025139218750001,51.01783651886303,-0.5124262393395853,-1.105448201714025,-0.20218333780449296,57.866110350771585,0,-8.331398289857816,-42.850250807424686,52.095992163427596,-7.2925386795665545,-1.1507999570847758,-10.00917768846862,48.36595236638833,-7.704743490753463,-6.654984648202418,-8.271143393446835,52.06677901010621,-0.3336819075941733,-1.1058887445196692,-5.208170426387595,44.350158503486945,0,-6.101236667466843,-4.573709993333056,49.94213472238796,0,-6.126453570697071,-5.106987915212695,44.36377447993821,0,-1.110803729496934,-5.1000000000000005,29.945577754976675,-3.7617635587816824,-1.1058901937021968,-5.101256869846276,17.204621965606265,0,3.614253237953092,38.46953896740454,52.020921750715374,-7.107930401305143,-0.9279479506760744,39.413842534652865,11.611843079100097,-0.9988241642296238,-1.2133981642090728,34.181796189416886,8.810138920122558,-3.321084268064526,-8.19308860202556,31.870295134106236,0,0,-8.364039018081789,36.749694628281155,21.261078509516253,-1.412219144698972,1.9442996605693623,-0.11185837586525789,46.90442739698035,-2.509613288242692,-7.193851415012148,34.081301961360396,5.4956249608398915,0,-0.06600838864293168,21.97349613355196,0,0,-2.0667175095994375,-5.921312448801108,51.93494362543196,-4.433010081065794,-1.532195073559812,-6.359650088691107,52.82927759849396,-0.40540461995522326,-1.4011910017060405,-4.081612498462337,50.08724650700273,-0.3668581739659601,-18.39137466067877,-3.7613292329598225,11.94447828072007,0,-11.49606688484581,-5.1000000000000005,53.35956834592924,-6.135164342411391,-10.213625,-5.1000000000000005,38.12478727825872,0,-9.305915256061141,-6.478851479758246,20.955315745651514,0,-10.213625,-5.106869654336496,0,0,-1.0963037343998685,33.4667128394613,0,-4.878957686952968,-6.253737664677553,-1.2506429255305411,50.3421789176666,0,-0.9543408921477772,-0.6976765320931149,51.971809178718836,-1.4321585622719029,-1.1107026356071656,-3.936236617876985,44.01505698499674,0,-1.1059638236147424,-0.1,52.99920587314542,0,-1.0986099779203473,-0.47519689325714687,54.01877878163282,0,-11.071565429362591,-0.3997319691721597,52.90014867157831,0,-5.30901881359677,-0.6071877054020518,54.09602182901033,0,-6.621803823590765,-5.101302924182857,43.74628184497899,0,-10.213625,-5.129731289633395,32.742967369869994,-9.247814227915608,-10.213625,-4.983759484299112,33.987724360805274,0,-6.968400967788917,-5.107557542582472,10.335501326839964,-4.398313449280011,-2.091040752711772,-4.844621155202017,19.517539455637806,0,-1.1106928973737293,-5.244828711002048,0,0,-10.213625,-4.643546117206686,0,0,-1.1940895994784662,-10.214968350799413,12.809409426676552,0,26.534000255940278,46.79155241691565,-0.021724868669363517,-4.466341373731822,17.23370654851463,27.219925438832448,-8.194631750203289,-5.238839864180598,19.578075708783302,43.36194302301345,-1.5374491593990283,-4.515910918194094,18.780352451527264,41.850167874590795,-0.983743276781424,-5.029545826101914,30.04951534937745,35.714510137021335,-5.519826787425361,-10.084940006419812,23.618785716131917,47.09824837150913,-1.4405778941185887,-6.560242183885994,20.907738185486473,35.48882808199089,-1.8484640526282239,-5.3513854098587625,2.521166485007452,40.19437513342826,-4.753965368115253,-3.6900524662727356,-9.523384982943863,-11.519093584800478,-6.9160110683606275,-4.918150361471446,-13.354757629493246,-6.4719848904261985,-7.871074556330844,-5.30507646895177,-16.69756328666153,-4.506635628257399,-8.05821441427355,-12.638164996301084,-11.868658502149998,-40.37795717591567,-1.0686325520905706,-12.074675581981948,-51.73264783025053,-14.928908636155887,-10.17302375393312,-4.756684748467741,-15.704344366628806,-14.75902908062588,-28.484319330208134,-4.428978465889366,-16.585870655305182,-14.797869021654693,-3.59050893431677,-15.609433039819656,-16.27384739133169,-15.600846564947679,-13.70790273200084,-4.9666024853218405,21.290851118264715,30.98895200213682,2.0105221482502778,-4.384578870414816,-1.5099819416057738,-5.30740897934267,2.5195051378292233,-7.4691284464175185,-5.437811856713345,0.07559443705645541,3.639150034495544,-6.085179752375582,2.118736505660625,-9.138640655262043,-22.52800105211091,-12.440724412558522,2.2880507129291905,18.367280956657314,0.9409445326700863,-6.0938068632284645,-13.34713854417385,-4.318919824342185,-11.849411916524575,-10.358542093784733,-28.796958540270865,-9.634276684353935,-11.856688984870482,-4.938447283859012,-14.1782335040061,-10.722820560140313,-9.249763136057025,-13.422888066219137,-21.47694969930749,-12.888931419817794,-18.92200392931772,-33.530357753018244,-17.119454641198825,-29.831649280378294,3.682537982049693,-5.582544644962599,-20.314429378118813,-23.694281697520903,7.146494548791658,-16.46840854617228,-9.420936805324505,-9.752394433188513,-28.144347339835413,-5.018387337866418,-12.701658759130996,-16.176727121470446,-12.657541446893141,-4.273608730861467,-14.021662705347909,-17.490441944246808,-8.337258190380567,-23.950205382110916,-14.794571824802645,-49.952780052332265,-1.1352478438922433,-24.37301348259354,-10.342645742727854,-13.887717922197055,-5.011916550949267,-10.881598370465143,15.46518180008239,41.158063768962116,-5.844885553422773,-10.147818233268005,9.452024079429986,24.93885089585485,-3.309198386015876,-8.79627507191538,24.664085794954214,9.070127809807405,-2.487522212621187,-6.845865243281324,-0.12119953582607756,4.4865563396365244,-6.435843777361642,-19.0869910947005,-18.900056502839863,13.159331776482915,-1.3563413166318827,-12.001720736078969,16.554438040487742,0.5637357448399629,-0.43738632868568894,-7.65453327520891,-8.944518218529065,6.389257012439719,-2.5596416672392293,-6.71778147859651,-11.391104508272338,-0.19740722852627796,-19.103076593657562,-13.391998477596285,-17.46171400460312,-16.468494986792848,-18.748516313692452,-5.8015686701362705,-19.048864919037236,-23.517856405752777,-22.081575777872278,-6.5038250108170335,-10.970248580215824,-43.404856938661844,-0.00790107186332245,-11.788401019605717,-3.640247772135358,-4.630068609628215,1.356159949547907,-3.925945152810648,-7.978666746691162,-10.50634905715427,1.6638584401271461,-6.090253129176076,-5.623271710942164,-6.245784669322214,2.1974044137184294,-6.970332686647458,-8.473251656873627,-9.69063647405047,-0.84747565005362,-9.011283088937054,-5.3658378658271735,-5.101295411760599,8.443150929732317,-6.681323289802609,12.138823761885092,27.528721310391077,1.079943291846244,-5.926522584375781,-46.34856846459858,-8.347987930436227,-11.060831013356914,-7.241662425140407,-21.333269022631463,-5.518566303548119,-9.397001248736544,-5.56968570236411,-49.92812408749592,-11.924466681451564,-10.204259771614225,-4.460801779070475,-34.81041761998016,12.923781304675838,-3.6155401934068605,-6.058778676965159,-49.55986445587621,-10.400215350909175,3.8778647383178897,-11.398938837384692,-8.36296379745145,-7.815931629277838,-14.580105061644359,-5.297414267619463,-16.03165492922277,-12.323905132325315,-5.6823539502934395,-13.8239691803489,-18.162159782423476,-16.08175059432702,0.9783493385421844,-15.053382655945956,-15.219146486942877,-18.247802864922,-26.32016682513802,-8.984418787960234,-9.359684093365264,-9.158208966944624,-1.6751345724979223,-9.065792141039148,-9.515370478804204,-9.782218313864412,4.80585959783783,-40.37176548123561,-23.6563373808791,-36.36583626578894,-34.1444634541953,-9.634123748905322,-4.541020077546481,-5.121551547597012,-2.618061994396304,-5.314149514862832,-7.690090473071742,-40.40938058483728,-5.238750351895707,-5.48901380839915,-22.574002504011865,-32.472831674484965,-32.188630217794554,-49.97599698171463,1.787408046778151,44.14150506950075,-0.28997327192690137,-2.0554848824059246,0.6154991731173995,43.82547331358882,0.47207864523277754,-6.493327781482377,-1.9021536332029634,45.36617596738872,-32.99040294651353,-5.138215470339847,-1.1107113585206767,40.3480132441853,0,-0.5337532970228693,-102.15032872773304,43.629045630464574,-1.6154033202703522,-2.3038521437443684,-7.847445413339746,38.082215180175766,0,-0.5713004539103048,-6.117219214138779,42.15688513766894,0,0,-6.101236906653969,22.14260139496501,0,0,-28.747307132734015,-6.07352880253459,-0.6071427031036414,-9.59959747809908,-9.291065362009817,-8.871845842612325,-1.4305831709616528,-9.552992632239913,-22.3319713446083,-5.101617565226423,-0.4845764938050724,-35.12789013542409,-1.1055329124269133,-4.057816579385382,-1.1692810105843097,-1.9669717333881955,-21.400001470462772,-5.96710398649731,-3.7258468850902062,-5.774209305985859,-10.213625,-5.735275137293176,-5.735463691299668,-5.106972586927377,-11.206156654897047,-4.208439662748257,-3.890629941068631,-5.512526362050646,-1.1106898232166413,-5.106869238655641,-1.2197339697386784,-1.401505185363502,-1.1113343964028322,35.31555814598824,-3.3444550107364166,-5.1000000000000005,-13.763195524869264,-5.571718360181639,1.6764275250720937,-6.693969718580929,-10.772343518483622,11.145799364683619,-4.101164617522454,-4.696706490167247,-1.1112446308563835,-1.5135256174958458,1.034552945251164,-2.724041663053157,-11.211945359627366,23.070348221370242,0,0,-11.12621433595022,-0.619595382550886,3.0769383132950043,0,-0.6210155384343045,21.46112269356012,-1.8018645934056539,-1.0232910932053543,-1.1105074739095,-1.1790750885157726,-0.6646279152742466,-4.278884262702441,-11.250499828602253,-5.1012426890625004,4.33056553468474,-3.633922128333477,-6.1000000000000005,-5.449217445125858,1.1672476614517755,-0.467636547917784,-6.1000000000000005,-5.1012426890625004,-2.0801059378259192,-6.8688346687663255,-6.136096621018213,-5.1000000000000005,-0.22943140975520537,-2.5513557458845355,-1.1056473020229665,-50.09057230535042,-0.08920365542573011,0,-0.6000257747181541,-5.1000000000000005,-4.197973730231892,-1.2245056685465778,-1.1104336293578727,-5.002567415743513,-0.3358155706712026,0,-6.101347723195534,-5.1000000000000005,0.4306837369005805,0,-7.480262413743857,24.59860923125684,0.39863343181052624,-4.683832262050966,-0.5054018650241247,36.91165982746895,-3.5939314228816848,-4.595212718439329,-16.914464183008317,13.563642300596035,-5.584248512098721,-5.107001179264224,-6.1000000000000005,1.52613191968891,-12.334913279844956,-5.479876672794774,-0.32196616776890274,15.057381440286202,0.7533150424402486,-2.732068618646768,-0.27865612536907775,23.7993717724608,0,0,-1.1057920835045973,6.415257064741619,-41.07077200653283,-3.6030063623674766,-1.97223641557447,0,0,0,-24.361691919233472,-11.202376325799186,0.4771418912772619,-8.185538326181668,-17.242652016582035,-5.1000000000000005,-4.286053522303681,-6.983763883520426,-11.234312528222473,-9.597217316187027,-4.033488325042688,-8.863953325894574,-1.3534742962687831,0,0,0,-10.213625,-48.94946517687099,-3.3341366545324944,-6.25091691244477,0,0,0,0,-0.7125756650538795,-5.117247209431641,-3.9325487227932756,-5.10693303482785,0.2234292376307277,0,0,0,-1.1209382793156586,28.241173935158194,0,0,-6.544146551825305,-4.167748607277535,6.5434113196604695,-5.106869802954029,-60.412601627377526,-2.1274132155849474,-4.1000000000000005,-9.02245339772748,-11.211448798659623,-9.520448334319621,-4.74447748628835,-5.112710451661503,-6.101018842972631,5.665986551473709,-4.1000000000000005,-3.3372148584564414,-6.1000000000000005,-1.0842339087322517,1.3395264310451425,0,2.5880555483008756,0,0,0,-10.213625,-0.1114979452651582,-3.0500499878627156,0,-1.1275750389997372,-45.01293101040635,0.9089043084528228,-5.1000000000000005,-2.609052139764575,-5.1000000000000005,-1.1670928336669264,-4.755838203481035,-0.6408008426704523,-5.101700669358389,0.48894978869336403,-5.106994737539889,-6.105278900953609,0,0,0,-1.1172067353277033,-5.101249723256773,0.6298769824920598,0,0,0,0,0,-10.213625,-5.101382189406533,-3.2572399597519537,0,-61.3609662101821,-107.38903923651144,-5.924468544238597,-5.107014610043077,30.936885820093742,30.8551576681451,47.65408832014923,-10.523550305403889,25.880405508568494,33.2730758190226,36.18021399118442,-9.401443551433008,35.23652745451327,43.1942252387449,47.37150702673248,-17.92546479063455,25.949211980560477,29.372464506444853,48.14410843292018,-11.959364329650791,-14.182415725226127,36.39759159490263,47.34060662799265,-14.4089900720224,23.419500794294876,30.705076720090197,48.74071053012439,-8.647885546931992,22.15934365499979,20.196656884410526,46.85112107784033,-11.285314216911797,22.774982973838213,27.669834395946886,46.23656991679767,-5.109922542648147,31.882096249625626,-6.523485860103275,44.95537369736587,-14.457685083207371,35.32460064609246,-6.509955632580817,44.86751308062532,-11.24489376727831,22.787238045353355,-9.138603327917625,43.84293012239368,-14.365599342433226,31.16460306354471,-8.151560921378387,44.721213091726966,-9.93063446915952,6.480517208652088,-7.706645036839291,46.413049570641654,-12.276625319762884,16.58693943208638,-8.093252896056654,48.52656958217889,-23.811732039401193,31.771939340327208,-11.197755574002517,45.380515519381916,-15.942168398230665,1.0463581422305623,-7.826197178880806,46.27385872660944,-3.0419612324946463,26.41964518042669,25.552453299190237,49.23971604046257,-19.289972385213517,14.573978229765778,14.705625633661464,19.32886973701799,-11.405989586743262,19.7762437022427,19.751322582563056,19.541201972362817,-17.69450527540364,-22.488398198106747,15.456942025092335,37.10513010880105,-17.975037623874417,21.34974304752754,28.574811018038584,34.17361780266641,-9.198582453559384,18.85900785238276,19.176921790861435,45.940183350942384,-13.633409618041181,12.185975297390888,16.687214996263954,38.37858208717414,-21.731487760217853,0.6612795881824547,9.305751844439046,44.2761632544305,-8.603021733774698,26.998703710002193,-16.59209586914961,38.16887954268025,-16.83317864624236,12.897667798092055,-20.152502612225632,46.2501986783744,-21.23788184033637,29.579140311709104,-21.286084496239866,43.26369291850159,-20.17864349128533,1.2295571055507413,-12.46729398615599,35.973582169986926,-5.81043568606735,27.750254928810854,-32.57449647669956,35.95777576281713,-14.89793803978504,32.1175534225117,-7.935488595683831,44.22385511685213,0,7.1811221748459,-3.9377822884871807,44.40374695479696,-5.205863720597154,-0.9191276789979151,-5.1000000000000005,43.77187060269412,-2.607196028062905,33.760481490432724,34.29637860168975,24.005927554757154,-12.101970076809828,26.903317466747055,26.08918205991695,49.79195664535129,-11.452300605968166,31.746659641603582,23.20135832075962,43.597195732280774,-14.925298312305765,10.76517871580175,18.10853845437237,31.161362283409133,-9.926498412227739,36.50849237348885,27.28692238224025,37.66540605503437,-10.604438867452554,12.050038014765533,8.92435410708767,37.957579717841455,-6.644880671036506,9.556321212766631,9.146288314152399,45.94858833314901,-4.144818911559765,2.877238831277131,15.653276065338174,40.60569368621946,-8.269991623029423,15.137731828189704,-17.68271170297102,45.73932322017325,-10.410269958056473,22.909134573251077,-30.81338571021629,46.301345287774566,-14.302886633780455,20.553319252131068,-23.790100375507357,44.245542891219344,-3.798417640772475,-2.260200035065523,-46.420252123784095,44.04001423597803,-9.744594101649097,9.996003004329507,-10.773393059119785,27.222114856847142,-20.61144972323455,5.446168498942116,-8.553374293511293,48.104168910890735,-0.9523255681271849,7.246540112887721,-17.931805635135586,46.676524818371824,-15.881263810893266,-1.1068625,-9.042207373506221,46.549570318961706,0,16.516119567433023,26.35641494078441,43.211160165222914,-22.592990306784916,9.530470981733114,15.997554187884157,43.33575266386677,-18.8850144757288,16.142105480954307,20.230404573735882,43.995296013626,-15.229784834220734,-26.745665271284906,7.499381657463886,45.35691650079643,-10.429700628286284,20.05967094975524,28.636774279187147,42.930208658134845,-25.169453667833118,7.855475818606462,4.840298921126626,42.26250494017506,-21.822398513316433,2.6373779712802197,8.632580106635494,47.43598090779305,-16.627647925785574,3.9825854176478153,2.8469058440139654,43.71668926624253,-6.58496411926694,11.576641622270987,-16.598711688684304,49.019644850481704,-35.80450345239268,10.515229963446739,-22.866706486471706,39.327429596146345,-15.692260453702627,4.828142102578431,-42.875180338330374,45.06364370534097,-4.7119426024916224,2.4414557244747357,-9.557469857357066,45.820771701253356,0,8.63172030104802,-10.197303979668916,46.666776122953536,0,5.509507009037927,-8.762398868973271,40.930786812414,-10.86502446306188,-0.3701476810880744,-5.1000000000000005,25.475274462684943,0,2.3577422817549496,-5.162768906556112,46.10807062561664,-27.85963727112592,4.659670409379881,41.203999969818234,20.528809094733827,-6.1344952943505735,4.514917074731891,42.93558122739677,16.197208433213127,-0.8311931151217181,-6.334005714279797,45.96924841286984,11.80889657708882,-3.5208358959566817,1.2982813292017958,42.808845167734994,0,-0.3751993000656114,-6.105865305885836,4.501513399753635,43.241465915778356,-2.6717204690183656,-2.637134834786682,7.949474327460045,46.20841853840481,0,-1.1160690571225986,38.577739745478674,0,0,-0.7390733848747368,18.946434225343573,0,0,-11.023625320697374,-6.746326018266716,46.53535392434089,-3.7439435821308087,-1.2241407006477514,-4.200381629645536,48.23900744427296,0,-1.110958596715289,-5.105745353698585,48.13302643890509,0,-0.8275873954317492,-5.10790059286122,25.719058397840403,0,-10.453171520101558,-51.11602828124997,42.65030718471817,-3.9113325744132847,-1.3083445127835835,-5.106878464479397,48.238014750139314,0,-1.7495810070818607,-3.357173824167915,46.38759643905852,0,-6.1000000000000005,-5.101244116631783,42.68257100443266,0,1.8193143210764011,35.75258461728361,11.211037221439366,-27.223747337707604,-2.0587772870760848,-0.6634210158817421,44.50508580506035,-2.1854537848783773,-14.708112266243766,-0.12020420577458757,47.967281224603674,0,-13.441052584924995,-0.4393313514902024,29.936401542558446,0,-0.8415462288058196,-0.1200875197915699,40.92653755825999,0,-10.213625,-0.5269093737977792,43.20226974591746,0,-0.29300018633888136,-0.02647677822603349,44.48393731928445,0,-5.9736359082137644,-0.10723817671312186,16.522490031589406,0,-6.1000000000000005,-32.38917333207542,42.2328616091776,-0.43010398707734654,-1.1057974825778742,-5.107011563162485,29.742079512191975,0,-0.4631204940668363,-5.178508969151003,48.99085143944919,0,-1.1050768537466462,-5.106188442915556,7.500631851320514,0,-1.10551365773653,-5.1000000000000005,21.356598359604988,0,-3.0092592882431,-5.1000000000000005,47.61901041316095,0,-0.873351194025982,0,0,0,-0.38801890468473776,-5.108378767155981,3.4714143942468194,0,-10.759566988540032,34.994243116889216,11.311195426796356,-3.009497275890017,-10.213625,35.31065723397885,0,0,-1.1012700578344112,26.472883349454822,0,0,-0.16374304354228197,31.380859152652764,0,0,-2.256528331951495,27.800776493858486,4.95428635481373,0,-6.030607358544467,27.880195974500307,4.941373280838742,0,-1.109786760209653,19.851211485765184,0,0,6.308804396069488,0,0,0,-0.9272356823438561,-4.1463947743670095,45.37150000629136,-3.5032984318707094,-0.9800434499499648,-5.1000000000000005,29.1647170861237,-5.101257593512541,-10.213625,-5.101310279843575,48.51242933678661,-0.5307106957107329,-6.11469451355999,-4.585942716318483,0,0,-6.101362524351232,-5.1116036469118455,21.351161521430537,0,-1.0400003226818406,-3.637759371965953,11.431978008062291,0,-10.213625,-5.099026500562472,3.8452167655571587,0,-1.11059156087236,-5.1000000000000005,5.571834274235084,0,-10.213625,32.76970040113706,0,0,-1.1,-1.2182362931096082,33.92687447298757,0,-0.42337926475734966,-0.5024566646781246,31.20000839348132,-2.940004565207261,-10.213625,-1.1620448136785482,46.344131319055734,0,-5.867794637762518,-0.12683384046994006,44.32844202887439,0,-0.8558452559044284,-0.1979163131051149,17.465187887613347,-0.6323262395138137,-9.711410664280884,1.1470455893591436,0,0,-10.160562163307173,0,0,0,-10.213625,-4.112407030330659,23.82850240603576,0,-0.2509060265057947,-5.1000000000000005,14.637400468173565,0,-1.2809157699141243,0,4.835379345809404,0,-1.4837348845830491,0,0,0,-1.1739683515686439,-4.728069606210994,4.294406266589309,0,-0.6315600261862847,-5.107363945589195,2.150620780501155,0,0,0,0,0,-1.1059762483317108,-5.1000000000000005,10.868598114314114,0,22.087518303506116,43.128125742499435,-5.708107728707386,-11.645732130928652,17.47783926696958,30.921310349102818,-6.143770223655067,-8.292015630760012,6.979811817330613,42.802644914985756,-5.389548328548788,-10.21195291382051,11.020747965666462,41.14104651926796,-3.2620268971008786,-6.631634149449416,14.11050438819895,46.032054649152,-7.492065938368095,-9.82493524139798,6.492258596812428,42.107026514988256,-6.6944172515400355,-8.526883375725252,12.738931287120012,7.632724721756821,-11.419053699105834,-20.42404436436084,3.8322903534707313,37.86981263323282,-7.827726244956298,-7.2634425502827575,-24.867886345173392,-10.456669307457014,-10.106201163719206,-33.966363140830445,-19.267533788408496,-6.61867065778347,-13.962983154151534,-10.551297056805621,-14.307710355741442,-35.6056712757672,-2.812885177920634,-14.315427933655172,-12.881188232943481,-13.65268124200553,-32.35312900290604,-9.839475565494054,-13.6669402882418,-45.371915494115875,-8.489127663942796,-13.646134976021806,-22.61863827494127,-20.184301133997657,-29.97523240484073,-19.05265424546724,-11.395348954137084,-13.664655339283046,-6.021222010383005,-21.74835731507664,-12.854689235614813,-8.774122616904195,-6.0320206095763735,-7.994677585605936,14.604631641955578,34.914702782444785,-4.636488488511435,-9.688459356008245,-25.285666885310008,-11.623612303820968,-16.93151643300765,-11.423111168368118,-58.26755304656976,-3.499618460629459,-25.717622438079946,-10.115859541627339,-15.576057064505186,-13.289063168537758,-16.11753371667175,-9.428693618256627,-36.84879018275653,16.748988843360138,-7.968722638482402,-8.652623179704463,-19.800750509562754,-9.335246521033161,-13.770925902727088,-9.24527899486716,-50.62945982426332,-4.217336799632763,-25.664726393068527,-22.905869362494663,-14.965007061123968,-11.318967065602383,-18.836565542440944,-9.858176752743086,-25.75711130789866,-18.76943229710713,-9.11079147440139,-44.04328804899823,-13.861902461467192,-13.749833843815026,-39.9031651428885,-10.295606910726699,-16.42215280910837,-18.161624223908127,-12.465656495404312,-17.60699742310654,-11.262323158997306,-13.941141860972408,-10.691201475726341,-16.047000385286925,-14.389943198613668,-14.460494584145493,-14.301641480986827,-13.858031473503324,-7.727693929785749,-5.101248463115582,-2.958891845487181,-3.7816000054344068,-9.0942359415712,-10.939333773331532,-8.739104679506067,-9.715822183680416,-0.6719812116708785,-5.0457747079330675,-2.379118548254131,-0.9488660950489916,25.30414704217308,33.486391734544576,-6.164555336239532,-8.235878019712443,14.798157258857541,36.75414957550595,-4.936481460171285,-10.864466743881962,-31.401474032320554,12.215085348154853,-8.554957430071523,-41.22859260761161,-6.579498013952641,5.651653868285678,-7.6751514755746015,-13.599755002812497,5.128513813223888,17.61394546353311,-5.3023040486806625,-12.13077379127774,-1.772204849965688,11.15160809434651,-4.48511716864231,-5.776913648184502,-32.44725904668917,12.22518703712913,-13.702552599520999,-13.56461263432449,-1.1353825335278107,4.799954347241154,-7.554107337941388,-1.5948069316991544,-20.333125738473974,-17.59151142565751,-3.5015983930061436,-21.63513821839997,-16.88439856340199,-22.592759933638526,-24.233987788083645,-8.844481811597756,-16.27842563422323,-17.97157543528301,-13.676420312290526,-15.888572856523435,-5.944502940483488,-9.520867232504045,-7.844763073860621,-7.6785118051786885,-10.924764728086112,-16.54802981244066,-12.927618941409712,-30.139606237986932,-8.177078047075957,-16.051401828614058,-3.9366209603995164,-5.797008946154114,-4.875828934362989,-5.1000000000000005,-7.794114932135843,-5.034509236273523,-4.154420272742002,-5.1000000000000005,-3.9551226115913423,-4.367036012881816,9.0140206588765,33.94286896598161,-1.0768844465895986,-2.036710959983586,-17.06458513026554,-11.057188473392447,-14.563833820253826,-14.483200947740178,-10.045502312474149,23.854612581304625,-35.103127921098945,-15.481182395408617,-58.25804059461772,-10.425321244388511,-13.115766218289766,-13.86989488117175,1.0544291061447684,21.88045023096256,-29.00233295922292,-8.80414602287245,-8.849535866975565,-9.495524011014622,-11.552320258698995,-11.077391467179305,-59.44930122441832,-4.0556138055545645,-12.995416811105468,-8.87834250689429,-9.085156367813212,-4.636371919889999,-6.255078608263228,-47.899510101673776,-60.64710503501283,-22.401139051513518,-37.18435217561082,-17.321214526401526,-10.305224999310871,-14.102954416510917,-11.58610958657936,-12.022190908360171,-8.930006047731181,-12.695395202059618,-41.01107206257254,-13.17136601107667,-9.315738339982929,-9.691375169809323,-11.667301644627509,-9.042322607742662,-1.341256839848045,-5.106868415222158,-40.51935310411428,-4.399039528702928,-11.536060457338712,-13.917218951569708,-10.102893968012946,-12.720393428286549,-8.978813450677615,-5.1000000000000005,-4.106697360371682,-3.774466502985426,-11.367370015220532,-15.300972978250517,-16.555806836722667,-50.31595348320579,1.848937575790111,37.84233599860771,-3.946157719824184,-5.415844385954579,-6.101374107025441,41.39474541928736,-1.9582455006417534,-6.176239235065075,-1.1113512291308048,39.78152571753003,-1.236691875599551,-1.9375197094149426,-0.026438250285296408,18.189001141515654,0,0,2.8688897320729136,29.201329069074024,-0.9353023513675691,0,-9.820104972655788,11.033605853706913,0,0,-0.6214598075351485,17.350211062531123,-3.05334986573304,0,0,0,0,-1.183515051708217,-8.02831124551227,-6.36073010457925,-6.173143732951664,-6.391167966172847,-6.117177292010169,-5.1000000000000005,-2.946850628073216,-6.299247709800182,-10.213625,-3.930159125463062,-3.6481844468590783,-2.427053314568676,-1.1058339617796007,-5.10698318310936,0,0,-102.19428155802828,-3.9640804029337753,-2.476809965688889,-1.1678493772646605,-0.009536693202524482,0,0,0,-11.207362042627626,-5.1000000000000005,-4.151054901091505,-2.806368621936072,-1.1059920556232228,0,0,0,-0.8965435723166382,29.362406374088952,-2.9710074243852045,-5.772617311670849,-4.744054936409189,-0.8189367556406681,-1.43463480613974,-3.0787688711493035,-0.9223801784547426,27.928940436784742,-3.984170844082862,-3.543828013087648,-9.201874901591951,-2.00292520285821,-0.26729303052206177,0,-1.1049829037042214,21.146521870595173,-0.1959110185508479,-3.3051789980408675,-11.165256240999875,-2.762857481066784,-4.367652085857415,-4.092135756068358,-0.7980122655989623,0.262394833051085,0,0,-1.105053270458473,-1.8385092768629603,-3.874166774474235,-5.117314236172941,-11.262266531326114,-50.154897397189,-4.272767545095114,-7.864385545058625,-10.74895254046754,-5.101515636176369,-1.873234965385301,-5.106981617620105,-4.93830666812751,-9.497936519229423,-40.88253874673942,-7.046872516039713,0,0,0,0,-10.213625,-5.106869094973499,-0.2059694284246085,0,-0.7213943690156142,0,0,0,-10.213625,-4.999795223898613,0,0,0,0,0,0,-1.125109855564092,36.68461445930122,0,-46.38005471556243,-10.213625,24.70908968205566,0,0,-0.24303692123244947,1.7546302784978633,-2.370152984854259,-5.101526384871394,-0.1332159771697979,-0.11193992390036495,-0.6760738954839675,0,-0.7859235105030463,11.57900701437201,-4.1000000000000005,-5.106975177787385,2.775063125258974,0,0,0,-1.3301753797060087,1.7209148451214862,0,0,2.2925811647832206,0,0,0,-10.213625,-8.675959681399991,-5.336415932602077,-5.100579581085465,-0.38200208662609714,0,0,0,-10.213625,-3.7145902162343747,0,0,0.28816189211433246,0,0,0,2.531253136156537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.106789557030855,16.07014263379599,-3.4012881194561304,-5.1000000000000005,-10.213625,-1.0264128051419843,-1.4744094861755876,0,-6.014379949583193,-0.0473277586754718,-0.176305956257837,0,-0.5821693698625695,0,0,0,3.5493988132515097,0,-1.9372481206480232,0,-1.078801183709654,-0.10668983574952431,-0.6287951892005901,0,0,0,0,0,-0.6006646532399453,-0.4298978500066392,0,0,-10.213625,-4.189520423047891,-1.089806264944383,0,-1.486886327942749,0,0,0,-1.1110668456673811,0,0,0,0,0,0,0,-6.10141498645482,0,0,0,0,0,0,0,0,0,0,0,-1.1170808526307339,-10.21488171595921,-4.106863913805454,0,21.325850790844626,46.66289834680845,53.93011181276578,39.295119970069265,7.9590552848655145,44.772855411717266,52.521888944516995,39.149680666090795,8.678871496590073,43.88031072163969,53.206890684121724,39.32333157800328,16.583357016307367,42.99024909293586,56.02732774881579,36.95376379030168,32.80014938120041,37.15779819236063,50.59991631289599,38.20601799331297,27.701931491718163,42.86428751010953,52.049334516552996,38.76140099308038,19.14681284130625,39.79741252275543,50.56217317487392,35.86954838622014,16.889060581290053,30.851597524459947,56.349959430972575,40.354848074957914,32.70903154430365,-5.393874147008081,54.74857399764947,34.15742572493818,30.4976198354828,-6.430754060026228,53.12714957863435,38.615616640529886,32.176004562739,-3.2005647526286407,49.602501166536854,39.55044635828504,-27.16793313687123,-6.836943638522638,50.64113510622662,38.22636842250274,7.167554625550681,-7.61076035777479,52.90584098955363,38.63330159967127,-13.55061247247536,-10.571619025636688,57.20525437558703,26.735334301560965,23.378467351460543,-10.464648861562967,56.01901695444385,38.79476349476282,18.333511775742302,-8.813008253871073,50.625419359599775,25.569812645417784,18.824681112879112,38.3703408248437,55.83698014072976,39.126483258228404,8.173712631223868,36.973242050809596,53.360197752035255,34.78261459547252,11.974192681340591,39.07092887799284,53.25047516936655,39.52590999798042,12.643542410801318,37.3506799478664,53.51832977938224,37.155040306173646,26.532211050378105,40.15177341091329,53.910757941529766,36.27170337049338,1.6269171535269074,35.39071105107585,53.31035046062713,37.32372658835087,13.432387426215419,39.032699122242626,54.89948279148656,39.75288876269041,10.76078251377131,27.408173287706074,52.614510321439106,40.64151704673595,13.62484113573141,-13.331893332466779,57.90436228784164,33.57398745509415,20.267026350575893,-12.714113179380446,53.48652892513204,30.301990808863664,19.31206158087115,-16.612679040783487,46.908716930306525,37.29906997886898,5.708831107054002,-13.412900673117417,47.36462091422154,37.47389243790221,15.498662180379991,-18.648733825553506,54.33960891663939,38.93113264602652,10.503898129372983,-16.472666993020255,55.539920379210756,33.35856447076737,1.1301921108263606,-19.0032080748534,53.8291551109243,17.742637297908644,4.320761310799785,-42.140634322811174,53.10699512720734,13.378894774044493,28.58564137982566,41.20460551081032,46.51866708742516,20.452767385200083,15.05042582924036,32.37887566467128,51.513025632915436,31.84712592319213,1.552103022316032,21.729865381956632,23.661312895272047,26.504157364667957,17.42444870843874,29.000813732782078,22.133660361753513,26.988078202051756,34.43975363311947,22.295664358806533,49.896277069995975,32.586037160967905,-1.2644562445198764,32.95839260606379,52.857660477366196,30.58478422967839,21.054358699852003,38.85066806370065,53.152204759145434,34.566037352959064,21.505636246644627,21.224321367423727,53.402431595277626,22.394471712603888,23.26647809209512,-12.18886746282751,52.56870487492854,33.62360109389947,22.329278125769736,-13.215628757668046,54.51568173813548,27.8740025582486,27.55319911525671,-14.695176262615316,50.71926415135216,32.2575064301314,23.05746188641602,-15.138251443360305,40.66362752848245,32.24804370482256,21.272009732117326,-15.996058388520693,55.08176216173018,35.665900832950086,27.90444101195093,-13.287331902478707,53.60193143024735,26.972335774363355,16.139617392677803,-15.282255604431935,53.976932715066546,22.425281987388324,10.5997498366849,-9.53341697983749,52.84734924750094,16.30245804459647,5.233227059417759,33.55374331827114,48.973192925576846,34.37789797018654,19.547909967618047,22.381302583753996,34.88265078681568,31.206123849116153,11.882484992464454,32.43561744182111,50.77230717844843,35.7326506672911,15.209164640493329,36.77767121189954,50.89041354257346,24.109016330301305,33.80601170824849,26.35477392256947,49.22856489008153,29.184225652054195,19.014936710491604,29.556293604155783,51.94694195397131,33.80326127141819,-0.9981013791176019,30.037743058940407,32.95920110841101,31.275189740020274,-2.408289168340894,15.41888152123993,55.97396892833097,16.35571322339502,14.581833003544723,-15.937989773453975,51.76889550896876,30.76403110635288,10.77911443672289,-18.591843405594382,53.54927510348239,24.051256099887354,10.083877101183555,-16.39400205887937,50.91507034628745,33.1898556240564,1.8839490461164408,-10.22551484368657,44.28306390834768,12.103250385539113,10.082257219360386,-19.942092338601093,50.54864019701842,27.38973872315603,-0.8631764524788808,-13.44310060111356,50.707239164172016,0,23.495656354286726,-11.755772493314124,52.983190496793114,9.655843508162842,11.392249958279237,-9.876845991192681,50.6279562329368,8.18932233078698,-38.622664513902265,39.42489552112464,53.35923599964891,15.29743871192428,-9.11996413529041,42.727287634385675,33.569922804961294,9.989145381002691,-3.1884977355528386,46.893918213800696,27.667777672750766,11.397307909708113,-6.984153710858288,43.60000858895989,5.2443909349294175,3.9434601472240614,-32.72246272786783,43.68227073970029,20.64988880264158,15.1270701920519,-6.111594110995661,14.963230845943615,50.336191840933246,3.01584086870903,4.5790145194540095,43.97756111690783,9.553447764479909,1.006427707012001,-6.101243572003182,40.68769716468199,8.284036967284292,0,-5.193501434937728,-2.9150739422780325,53.1346875280927,4.798159717336765,6.696188114886149,-6.36957556136828,55.45882762125259,10.434245196770807,-4.609391972575584,-8.102198404856502,52.09230435043569,3.181884763921572,-6.614042558349853,-8.157775460474387,53.20542775780811,1.9732197733983423,-2.892245418373441,-9.215499046646753,52.02415890947178,-0.5491983179704149,-4.983983288524309,-6.413267551176713,50.11194318719033,-0.9865306686425361,-1.1048887626021313,-6.8579785457554685,51.650470351881765,3.4437454932922833,-0.9689318600965497,-37.64919957719804,47.955621818275674,-0.10689655938533865,-33.16310781263245,25.774654787464282,52.93169046570403,-1.0936923499178484,-8.230333939029055,-2.8046044991574854,53.45986663466107,20.30471910522302,-4.326162706242169,-0.2030415420610756,53.90569206252037,-0.023413280407298065,-10.613782984706079,-1.014181375101216,54.077226980744705,-0.3530146090436181,-2.051955313051466,5.959706245408399,50.68270304792735,5.424453088348216,-5.9342617784013445,-1.9444734764712315,55.799762475644876,-0.3458612728829068,-1.1,-1.134749108345285,54.670939428125,0,-1.415007740446335,-0.5607679803637778,47.596807643139556,0,-11.263077116067805,-8.082168051726125,52.641795306603946,0.12157778727887669,-0.9454628034691982,-51.390927640584756,51.38024219843731,3.0888493749347243,-1.1,-9.285380025591408,53.6525232209522,0,-6.1000000000000005,-5.1068625,37.28094800339097,0,-2.927184574671238,-5.1177991530377565,54.64134772187689,0,-7.506887247874696,-5.1000000000000005,52.855417453226735,0.13335032257932428,-1.0619123753696136,-38.036997533198665,39.48348193163568,0,-2.1007880389940894,-5.64974865074362,16.69685639168626,0,-67.47433241568189,39.969905540831974,30.830124951775492,21.60420687618028,-2.1167593195095966,39.4022818588174,6.831664670486812,-0.0004732895501296075,-4.335043798244271,13.743209375643056,36.4552565993683,3.3680306313200212,1.6971972957777934,34.99220393351391,5.650998819781472,5.037151226711228,-1.1011118569862848,40.71025359020815,4.223426192077698,8.449356955182473,-2.7713526258123835,3.4274721033555053,50.171552167263364,0.25647124673287663,-0.062056733571753675,34.9693341468744,5.782739867340815,0,-10.213625,21.658548987484117,0,0,-13.562814707343062,-9.36153920219012,49.03975689585646,0,-1.1,-5.1000000000000005,52.159084758135016,26.388761144390966,-2.430428896453027,-7.518336921669366,55.34297692389553,-1.1258059595990182,-0.9363280054663126,-6.933792237947012,41.24793945148949,0,-0.9432144920532232,-5.02409133848347,44.40053838042651,-0.3261359680312808,-4.4770418260359754,-5.1000000000000005,42.004610457673486,0,-1.1107760956461192,-5.1000000000000005,38.287383836805716,0,-6.1000000000000005,-5.101441030241154,19.17545045929298,0,-4.11157729492862,29.81405990401026,50.63563986635029,0,-8.828801856732955,-2.1626267798248895,53.30993576100687,-0.2742014345008799,-5.251989276511202,-0.12441313225716494,50.523879803482814,1.2815645497345605,-1.1006871116605368,-0.20566037444872942,42.91891075492159,0.5020175694423434,0.17613795810127408,13.926474038008365,0,0,-10.213625,-0.1695478998140065,48.04352219164379,1.1965849936251658,-1.1115875000000002,-0.07632145124938769,47.95823936913314,3.305564790219691,-1.1058144345885859,-1.152457203754089,20.07970468529873,0,-6.1000000000000005,-7.745666539305265,51.65247766982291,0,-1.1049121978428458,-5.101317782026902,41.884686732847626,-0.9842990649029583,-5.8705718279049925,-5.031486565181002,20.000703394930497,0,-10.213625,-5.101249985466614,14.451970465749175,0,-0.8989653341122712,-5.100305657911718,22.138174763510655,-0.111540684628001,-0.35697285729981376,-5.473719534011784,56.118402545100906,0,-10.945856062693585,0,0,0,-1.1162231210527345,-10.214880751011185,27.81751409546214,0,24.429668617551656,46.530773744357525,-0.4537577498552251,30.894072629234664,21.92597875911686,45.96672737573117,-2.833290217713407,33.410361894179715,17.25038642728758,45.983189326285675,-1.9754733573337295,32.48651748580419,17.076944646411114,46.40278402480874,-4.057008276465462,31.201702409856853,-22.831236041168534,41.29555726075908,-5.723810651093862,26.266583333604427,18.04050551537685,45.84659066183435,-3.017464816331287,30.48110432747677,6.334087597891071,44.337415773188916,-7.172856405705465,22.192683786445834,16.138113922055755,38.84794648133263,-10.04865614889136,14.17151477233719,-9.698230441505,-9.635769663704716,-9.311003365191645,12.854042668299565,-54.031334270866765,-5.239104903619378,-3.214949554942326,16.1148292366845,-5.465105817711321,-6.064487332719857,-2.2170488251867613,-4.402257650433537,-7.332331833104087,-22.019454522135394,-6.241944281499889,21.23264851667848,-2.9837854332515654,-17.272655435416695,-9.22628956266513,7.165113777792315,-9.976998118867328,-11.929060803525362,-5.950798566092386,7.54047070174461,-30.23771183059899,-14.551097153540082,-25.847802447131834,9.236230484091385,-4.263421345892868,-18.22701749109379,-15.71810265707468,5.254588932564617,17.622348961211586,35.75615701372982,3.1292484325156353,17.691491244343805,-4.382824262293299,-1.209818948534042,7.716506088575739,1.0141065661755944,-37.63742449631077,-0.864778708317242,3.800665752572857,-1.0306003155301786,-3.4128804774055026,-3.5516353129498595,0.9613673296472403,-4.224238805636223,4.766011042589781,1.8236204005888812,-5.617470878548616,-4.175151105885051,-3.568109619509782,-3.066123421140853,-6.950334624559533,7.86895452263974,-2.846194115202757,-2.0877053953868017,-12.74633191318519,-4.175150943959823,-10.91611167799966,-3.943792267543872,-13.041501552863966,11.416952339109118,-4.392239543572917,-13.225894054138932,-3.7225192355393055,-1.6404696141490822,-5.404054230949042,-36.845750434215816,2.561826515315679,-0.6957652977265556,-9.649156253150151,-22.477297140450574,0.8077741670654975,-7.4553658371215885,-10.820424947057298,-25.93939188372362,-25.972448575142337,8.414001226220169,-7.424141188085587,-24.35975196369837,1.721039965868147,-5.814058704692743,-5.711652113114992,-13.146152636338565,-8.20920049465081,12.833698230268515,-8.362000008168952,-20.652988421470067,-27.058628446086686,3.1557142313409354,-11.442047364528742,-21.084219656201675,-5.515130124470149,-6.706011818819629,11.013001622643797,32.62986204104213,-7.619824385158221,17.36942222707397,9.703027286557486,10.110439988062772,-1.765574358592467,11.496871431590453,2.8227963296271064,2.4027914050109125,1.7953671766138721,3.0516366005781945,-54.245231570395305,5.625064640572361,-2.300439662093962,1.0841799938109808,19.74119731947639,10.424402929290377,3.0694948463591176,9.850092357989135,-5.572871880645028,8.9667305477002,-19.023471650403735,13.403324291310568,4.916433472807645,29.029429945169596,-4.088022282638373,3.065130102052316,-4.043104785781033,0.6632103892976664,-16.76880079400469,-1.1046095782599135,-8.428287381417707,-16.42649458571377,-7.490194995767198,-5.924069504838954,-10.823068652194575,-18.098049344309764,-9.944651101725606,-5.719991087980754,-7.565482813138692,-28.861482341525257,2.8123689037447543,-7.449976873250028,-13.878074321193349,-9.702613864805208,-8.777490412627156,7.356033538596898,-9.649098371099738,-19.816824691880093,-8.012637370380142,5.602080121920161,-10.794954092664891,-8.450180386381883,-5.086944213400701,-4.5354926709368,-6.219451746796285,-41.46791673194694,-9.263547446989564,7.610682247308892,-10.494218017849233,-9.648088644440334,-30.041764467596828,-6.3322157732662925,10.310844343036226,29.305714859017726,2.8297879858404227,17.41079314624933,-3.394807638225431,-2.8040067138796463,1.933210664564065,2.0771059776154046,-7.254453748435245,-4.999769602177378,-38.8439210198069,2.6010142686379596,5.521096997105614,-7.8018169132864905,-24.80902350984106,8.139724665283547,14.202840947973634,8.258393598071288,-8.062342821342156,1.8918963507495303,-17.056422117154682,-1.0294679744749335,-9.548870004897193,-5.91481378936015,-3.8752692415032968,1.6142667212280786,-41.02683101583345,-0.6995564211775925,-14.88589493240591,-6.474467413842156,-17.712704418271386,17.94578302379082,-10.877963836173542,-19.111666891790072,-18.41190492469126,11.273591400842516,-7.685850684245681,-50.73233819572857,-1.7901564881004015,-8.333032637774231,-5.964685181865022,-16.355071697974473,-2.9705982439942926,-5.154681324734507,-13.277044893781916,-9.811123618171825,-4.797851039826071,-6.057121524398104,-6.466731465408707,-20.86353713209375,-13.44597164034354,1.4021214441295913,-7.372184630221432,-50.75843155931239,-13.895419254256275,9.761173794081268,-1.7608352894763684,-5.1068625,-9.612085411935102,9.76117379409845,-11.435140294849928,-18.27921186305702,-10.512439678378755,-3.2705546523346714,-21.06453789039998,42.670643367642064,-2.337944493235997,9.138151630852985,2.094175982906625,44.83994123976735,-0.6068860773821548,0,-13.039335847986017,44.27970377233271,-3.7996802098231326,2.1914485996687167,-1.0418753210303002,42.91717758525167,0,3.138870939216784,-9.955497188052076,40.33425660720331,-4.157883851637749,3.030480882492013,-1.1055066454715514,41.49309851370273,-0.45326377980426147,0.316281774597579,-1.1053193998216402,42.926149178439665,-4.1000000000000005,-0.6463739824735247,-10.213625,16.498184575805404,0,0,-11.252218594009232,-8.259332938127155,-25.839801598171245,5.966573628301077,-9.922559009444782,-6.739423163702062,-9.030853429660931,9.50988664907181,-7.638723047057891,-4.87204381608793,-6.283353135834982,-9.155277170043252,-6.662390194771045,-5.101253111762587,-1.2310055407535234,13.937801200591739,-6.101256506143777,-4.604078179725661,-4.100112500000001,15.270886881143655,-1.1056396743330772,-4.340246173673192,-0.11020705986793189,1.1240275281891796,-1.1,-5.1000000000000005,-4.1068703468750005,16.582665552217083,-1.1051806322756719,-3.605588205492669,-0.1768158264903356,0,-1.8044598355999382,36.89117708837638,-3.0860451107284943,2.9116932023558455,-53.729959542790965,-4.124860459657874,-10.432633426668437,5.090363234293802,-16.257277600400126,9.79059279263227,-4.1068638921875005,-2.5096653885400797,-1.1107489672248338,-1.4349091955603626,-3.685795654131869,0.9803572225006356,-1.1006169893321691,18.504561079505535,-4.1000000000000005,-0.15864124685970105,-10.88163858930962,-2.735054711785551,-4.103028929463678,-2.9420118595803424,-1.1,18.266613692017316,-4.106864543116846,-1.149230604109338,-0.376106836914993,-0.10688914562763832,-2.3297500222401477,1.937940837835431,-18.426045075449963,-5.120265370067441,-3.9582326034154667,8.96278766086277,-2.0775600922864887,-5.451183919364675,-1.7984073512650085,7.7127888979688075,-1.1319115217314433,-5.1009557932424725,-2.7027941951689987,-1.1216419956372947,-0.9229455148901953,-10.214873932456292,0.4290012484556641,0,-1.1256689321208662,-23.52217138077794,-0.7234148687864633,1.4841538477517968,-1.10530015078998,-5.1000000000000005,-4.101069895123634,4.85949106142174,-1.0067864197107859,-5.104739454611057,-3.3967121176241095,3.236789630703801,-0.04872444131182512,-5.10698694132792,-2.6686378743424544,0,2.7008705252716316,31.450487556042116,-5.810095959103225,1.9772775261608286,-10.730680050006914,35.197087056459765,-2.146447609170808,-0.8585229173616317,1.1863638562928758,7.540736584957407,-2.55289799623417,-0.08333838861304232,-9.615085307639099,1.5053059268792068,-4.1000000000000005,-1.061958618799163,-4.576457124644813,15.967954031226247,0,0,-0.050390370435165366,12.334323832367305,0,0,-60.27420707189827,0.6648842556931868,-4.1000000000000005,8.978826326845375,-4.178714339812812,-0.08849741082944454,-41.06873089751407,1.3251067797535259,-8.363625889855062,-6.152631861849073,-6.022007466631341,11.204536336343034,-12.105891880153438,-5.1000000000000005,-3.164120498551871,0.8881073742868764,-9.179560389945978,-5.1000000000000005,-4.1000000000000005,-0.41847420282087805,-6.437048781504044,-5.1000000000000005,-0.29257466858207326,-0.7942805662477858,-19.15049014200424,-5.1000000000000005,6.126727831122641,0,-59.969923018094825,-5.1000000000000005,-4.111965981407042,3.172684359151721,-0.6472958112927756,-5.1000000000000005,-2.926859151831799,0,0,0,0,0,-6.097372476533757,31.623052924449713,0,0,-5.580069286467629,-1.1499665765329892,-4.106382228771236,-0.362285400635724,-6.100119026239489,-1.2757448489095533,-0.7304079064605894,1.7677133212757257,-1.1074086666945837,-1.3437743094971002,-1.3169877907959813,1.6138928486106534,-9.886705891401416,13.696554995533962,0,0,-6.1000000000000005,-0.5372961805648856,-4.1000000000000005,5.149589314218738,2.3506989731564483,0,0,0,-6.1000000000000005,0,0,0,-1.1107005070801785,-5.111716910556258,-4.108181444588303,6.5829846192397765,-1.1088471302239642,-5.1000000000000005,-4.106611672793477,6.107377090035718,1.973724452542535,-5.0886383941334365,-3.7526319998957227,-1.0014475862293837,-1.1,0,0,0,-3.9206023844247433,0,0,0,-0.9689320264093356,-5.1000000000000005,0,0,-0.8172608581911132,-5.138299078125001,-4.101419787868259,0,-7.117551165809427,-10.214875110312304,-7.341625279008985,-3.859683607470611,-12.914491775567537,32.85478001684809,44.86616984785003,28.4123739569655,38.43748875566149,32.86715895671764,45.78363577468941,24.400230556928648,29.392866664194493,45.066268822159884,30.18984662019942,28.18552530460485,27.798799332948334,40.23405877773161,30.189855520509276,23.792977469586095,31.577795149309605,19.161891677313754,38.164162402457514,22.930152716327676,6.735536298592711,19.315335165549975,44.19976857024699,27.497573510129097,3.5677730626995374,36.57562931708195,28.375723499464137,18.873667158135557,12.399844906479608,16.9962442302392,30.679543034289107,13.410029094974835,24.285236768549034,-14.345810555153223,48.88533780706896,22.720519993111857,24.73489487713677,-9.906291215838618,45.032003505827795,18.086172210709385,0.3969600882830049,-7.857493278641561,12.688126887697035,9.16982891097149,8.905584287086697,-8.231843105159474,43.282014182373906,17.498738312606584,-24.586751058845074,-24.96020281056749,39.341488644457,13.175443561352754,13.949453763572027,-5.236304101046747,40.76329272694714,17.290745227831557,11.647528715766445,-28.455798880182744,32.68964648989595,7.844784671222062,1.5787116859832537,-13.824058622106781,5.811956230927674,11.984125772977823,15.615365921647214,23.95922270771006,10.204441473226856,13.96715603712465,-36.72202856571785,4.159272165563436,4.539819059794599,2.2828792380730216,-34.826461300278595,3.909757397660031,3.5259017441036145,26.559450751216538,-2.5638149309400395,1.3219517296660457,5.042599712813184,2.0565114409366068,-1.3604369576394144,6.6511784299344106,-4.023061512384567,4.892317686958591,3.83644623853755,1.2457409082393265,1.6829907161161761,2.266625187195759,1.3646107512620318,2.8540984736864945,6.0267206582715644,3.038953929533516,-5.413360978896027,1.0732525429215678,2.0583338082793308,-0.2801346232973944,-43.04915846118142,-20.113442026110658,7.913407911430798,0.3616639161133679,3.7515676959785766,-39.92158271860365,5.944641183332102,2.1960195501439457,-2.761724100231243,-36.74150255392895,-0.08525821947284747,12.27656333096671,-1.6122533870414526,-50.98320722074102,-0.77361577608325,11.408018325050584,0.715839055715785,-23.55268693682806,2.4337009427562277,8.243566962239179,-4.319144226131879,-43.142482264663855,3.5261030312151584,-1.276369178588748,-0.34229140207112296,-9.295743228311306,5.432594762503165,1.3321212907391085,3.642809395791853,-5.101256946992963,4.546939444490063,1.5438774604017462,19.621960426564996,22.702577005767893,31.417430705254176,21.939499905633774,8.022564053138051,25.026484840443654,18.218426707205783,15.879727444726397,21.97896825239067,12.39741085490994,7.721018946657186,10.386103707478785,0.6158372966348118,1.1004439213843793,5.740384362864996,16.982118145658983,-11.62585235887219,8.55617417338634,8.53448033799153,13.150436450404062,16.04600156848155,20.27824049982426,13.79467187016743,18.005620155517406,-21.262940911983357,12.833720669623556,4.938936417168284,3.8723748578801325,17.376971101961956,6.848637286185548,-1.9537556317801095,12.848757812513501,16.37930001158027,-20.747768131153414,38.90695914348987,15.444529987296383,13.523709327862775,-30.35954162345276,40.07196385427367,12.103902696722672,-0.10363333555902177,-16.55203816309644,7.544900504116268,4.424655236177621,3.837233505834464,-31.583365567387453,6.762305867553535,3.852198479098974,-14.370281796972026,-29.441641613770724,11.126678896684098,1.4940980084933437,4.994122250120947,-27.832048246672855,7.043145779410678,2.5705166957518824,3.4733900202445356,-31.70961313751634,2.0808352712770324,11.922764012117842,1.2824103823656072,-22.39784658756281,1.7503950827734358,5.769668153989131,-26.532358420478126,34.79037625682257,7.053673070848887,10.032348396389716,-21.67196960883226,-0.7139060082418983,7.461500436969504,-0.5598139362576038,-0.37059537361274564,2.0574684111607278,5.75550074851493,-0.3336626469416566,-5.1118231187640815,0.6009781750440218,5.557652361954463,2.421877861838224,-2.9647961339001263,9.7160935398137,2.2100197597991365,11.489966011147159,24.60479062469853,3.2695889837778442,9.789410641795417,10.06011480180853,13.654876001992651,4.876711031986408,3.4833298192299926,17.587400278604314,-1.7077255118133876,0.4358400448025888,6.691101858774151,2.1547849364842864,-8.365709326549023,-32.44174698222255,4.469086401309835,-1.2895948106818662,-0.20049234648500613,-16.595753790646597,8.35360624362121,-2.2319982282964235,0.7350108118984938,-23.120060362627346,6.790760465065521,1.2671225903400036,-2.5266198477222095,-17.318232992878745,4.774441604926115,-3.497592671119287,-2.4564894986163703,-22.432973841851165,3.2734966786872475,-1.6770260060979807,-1.889923307138,-9.70115513441742,5.571518523522912,4.488467503857256,3.320608693354917,-5.120272075640275,5.167306926747694,3.2877555568438894,-4.89133475282445,-37.25184017101429,-3.2079799356688614,-1.3587834187186327,-8.294069629482525,41.04080608766531,22.725469022738977,13.048001466144836,0.8321980321627855,4.334022690975337,40.24956757181687,-0.9436269921810496,-6.178651065367743,36.05559143544075,17.420116280018057,2.195343014019909,-6.1000000000000005,38.860738362242024,8.853436344598187,2.9791673378365826,0.1449054326773127,31.417662704426192,13.293702939392155,7.535747880309334,-0.6495792518225398,39.556138089635226,0,0,3.6305151656639936,28.757999361988304,0.5715529128516712,3.293416991356423,-0.007792484962135405,37.62016132831348,0,-0.7109753385941714,0.7578331697291458,-5.1000000000000005,38.34117964202004,0,-1.2495026379713563,-5.101207008777539,42.72309731482041,2.896392825235687,-5.151433526937338,-0.5115625127552974,45.97691957779271,3.1379310320913074,-10.213625,-5.151947208429508,48.53784504893462,0,-1.4193793262082852,-2.2828329406338983,0,15.57493983095847,-0.527547436205936,-5.1000000000000005,44.355821571884434,0,-6.100662566664342,-4.8211509671493324,41.96911030619304,0,-0.24530848177065645,-4.661791992023871,15.676199955849249,0,-1.1105275812391247,34.4428807098398,-1.3041563504723976,-7.706014892377031,-1.9377377682862726,-2.026137779708626,6.817171992675078,0,-1.1012375,-0.41767207982637655,7.4356010684279035,-1.059323366762729,-7.0972891738231185,-0.20426145846625623,5.79968850045455,0,-0.30963273707108024,4.812259163558414,0.15150741649203203,0.5488096074400335,-1.092515888710139,-0.5662651570060437,4.0783720197326,0,-1.1113147764101352,-1.3659610964569833,5.076182020951163,0,-10.213625,-0.5685682623335925,3.3108505883676402,0,0.23277552959143955,-5.111602828125001,-1.6085793845308534,11.260271835679319,-0.3541813281049823,-5.296466340050451,4.753593910776133,-0.5960116777267886,-1.0530289231897503,-5.1068754553002345,6.541932837716705,0,-1.105607800562354,-5.402121602112193,1.7076937411784863,0,-6.101067961552443,-4.37226571426243,4.693976113664157,0,-1.1170479574877847,-5.1000000000000005,-0.07930286611999332,2.666263371527801,0,0,0,0,0,0,0,0,-2.8640823652826986,3.2021593074156627,32.39360469924348,5.603639562605374,-0.8370295574088629,33.70492141584491,3.266838536676046,0,-4.797725998325081,8.644139381092,0.8500487063367391,-0.15754184960588363,-2.4689441993655805,4.403522394651754,0,-0.10486963589930505,-1.3439652020669168,16.049337168962886,2.096437291693463,3.2628338001732935,-0.40987908296731024,13.517621095883884,0.9421716163158149,0,-4.262961063762207,5.959265258696299,0,-2.4445063430336695,-1.1,1.8457926521585484,0,0,-1.1,-5.1000000000000005,27.29813641182232,0,-0.9627873374977052,-9.705868403036902,22.729318981218825,0,-0.10017242854619735,-5.060112494582227,4.967764151161638,0,-1.7608490226714921,-5.027866705771114,0,0,-1.06653324820488,-8.965176567969044,7.965703884771032,0,-0.2368883062417675,-5.1012441168810625,1.6728124263801794,0,-1.1061460929376536,-5.100232295499682,0.13763699500041127,0,-0.12737518171480638,0,0,0,-0.30403105532838676,31.94386777111401,1.1224236861612376,0,-2.016024945925696,-3.3654719129981467,6.305937796298315,0,-0.3936656454411496,-1.1270442846614297,3.341538160186243,-7.856095423012066,-1.070790014770583,-0.10688871981069965,8.435099453124323,0,-23.03444650727674,-0.1064494799528078,3.8635972018456872,0,2.973412619053002,0,0,0,-10.213625,-4.72329180664282,1.71398977854577,0,-0.2264212744897801,-10.103438141873255,1.2462094814964084,0,-10.213625,-4.395819210049986,6.546714470177308,-0.4913559853110343,-1.1058528094385733,0,3.4023580930248483,0,-1.0639843434587084,-5.101249257460116,2.705234688585569,-0.3766270841543455,0,0,0,0,-9.444568250048306,-4.969512463441809,0,0,0,0,0,0,-0.9361686441515507,0,0,0,-1.1170067133136798,-10.214881632552478,-0.41543422273151037,0.1462295941217292,-13.606529948125058,47.564279502451015,-9.987627339935496,21.734074583054856,21.48711966280525,40.51613988264534,-7.777643228858519,15.421105803027034,15.834040301394936,38.31038578097897,-5.471883687230873,23.574827276137146,3.019674342169093,42.79424394376798,-12.800644893293335,15.956746934589335,14.220623947293847,21.874471949297963,-16.392973748988194,16.061582085358243,7.889118536238037,36.17996823720228,-14.524857320684553,13.350060171261838,9.04457165506817,26.081779755272194,-15.662397105254042,8.874497873790181,0.8579288775442161,36.49743622278568,-3.9359740309282643,24.972214121948134,-25.714222059414297,-12.705040310986455,-8.004283348549437,4.278310303503227,-45.62404630244599,-9.200690088353744,-9.059950834048227,-6.80586288765802,-12.110870684456312,-14.007925732481988,-18.891248864482492,6.94404594566021,-6.597656130475611,-15.368441074348953,-9.3792206632418,8.100647805859962,-10.749895774165722,-16.000821477123818,-13.579480087866788,12.178928349787135,-12.86560928860273,-13.510098294279357,-9.800849545117716,-0.5486718670215383,-13.098236791605618,-17.42048724137783,-12.450504157920717,-4.926847156585216,-2.480386767244536,-9.592920602295944,-8.648162378238426,7.813967506112773,11.746673462733323,35.22285287232939,-41.353135753917144,10.721946146567058,-33.311609773755706,-6.488257193338331,-42.929730352577664,-0.6383116725004858,-23.041453146217364,31.813711480421148,-38.32401241911016,-7.796969210864816,-9.064974786290692,-7.848843780003552,-42.58103996631929,-0.676881710953658,-3.5837771822227276,4.972192875664586,-41.87121431892017,0.9642976051130312,-10.858436252304871,-8.996772011502731,-34.50059770401669,26.763054903620954,-2.6029558228720036,-6.265634685719954,-28.35662035623522,-4.871923384877102,-18.537133930736864,-6.20540242467825,-23.67927529291226,6.617460030030079,-24.88343864145407,-20.102825631463617,-31.9774311190793,-3.7005880578278627,-7.865273692011516,-23.36830961582898,-29.08517833353695,-0.511403336685924,-8.511527806139654,-15.772795931410894,-16.808775187472488,-5.1946198989723955,-12.665787750853221,-13.9034638572437,-13.969250648875407,1.4475525921051628,-14.073231251946542,-16.643012966438594,-11.43002062444474,11.043597730158769,-56.23605802885018,-24.76620177170639,-19.5782415094837,-2.115918904047653,-1.7850963220036893,-8.529727713912937,-4.1000000000000005,8.400463516933687,-0.9146132076198348,-5.101092613230526,-4.106752041108328,0,3.1972542733089893,40.754191720119096,-26.181211766414716,10.745133564950056,10.720945560649454,37.721908689629785,-17.760154628359924,6.801517349107375,-44.296333873649374,10.985233088252514,-41.04733331955393,-4.367797457368864,15.114011999001372,-2.9413376259014443,-39.63937322962169,0.31116670274796554,2.78979231326609,1.4768587874290784,-33.52014028345869,9.26050311178922,0.2515668988611006,18.954688777635226,-25.252623936586755,1.9141844351024804,-0.16526196423017403,10.536696861350727,-22.772366758737572,-1.4252206473008755,-3.1516317624363435,0.8643985254688509,-7.793495528728618,13.980477681633252,-10.14189390652715,-11.871597973026653,-27.84326418654613,-7.0865636044300215,-14.500927305338134,-14.977519617261649,-31.604095628911693,-0.5170346411888933,-13.636362496262365,-50.657117936657926,-16.95344299254489,14.225441086925429,-9.250791242917275,-9.694490930437397,-13.753636752953362,-4.519240755193116,-8.706049318954024,-9.053985230720304,-16.586949277178917,-5.317130433113246,-7.30863403609362,-20.159628264976046,-10.972013324527662,6.715392117039393,-6.24456636184546,-9.696701826605342,-41.01725846372347,-1.3682942266751896,0.8461641234555936,-4.897988021911995,0,0,0.845592251262067,31.669317541652465,-40.06285001265525,3.0563051461420048,-4.795310843228361,-7.303426644324626,-42.617913674257956,-7.727889167972872,-36.009330237992195,-6.994923347700871,-39.0648300997514,1.8917737014353313,-45.31017538468369,-6.41826841091797,-21.546791904788595,-7.679469648997243,-8.558466678636005,9.38845531366607,-14.105727602505894,-3.337755735332009,-15.289663003239104,1.2353905785199857,-41.06270075147386,11.080510492510825,-0.5146538151358927,1.8564051390369944,-7.791248548854122,5.272160844818114,-4.46336122597381,-0.16659758564749258,-4.1000000000000005,7.462522492114596,-13.467318935443942,-42.080955915188724,-21.584495133074395,-7.949396812866464,-12.932592411100343,-12.937789146862055,-16.829400310898734,4.802006240296819,-6.6656843907237295,-9.190456970680662,-7.790000000000001,-7.760799756889463,-9.297417147066216,-9.7374848514086,-10.844559570320193,3.4434635766169137,-8.03803953510787,-23.124153492201263,-11.112243093954003,-6.4331940469284286,-4.10420192194865,-5.100315786815166,-7.791249442031604,-5.498668915917964,-0.6127453667174205,-3.2165462572875683,-4.107303174177807,0,-7.279843659719535,-14.292519487205421,-8.020377958825256,-3.0354417626376353,1.7921858264563788,44.22239139802999,-6.02427581283864,-0.518870884038411,-1.1046125,38.45912494909877,-3.6521901328818336,-0.7325698870603448,-0.2760497836889833,42.654658821922695,0,0,-0.5836216928447364,31.873125597725927,-1.7371735595738729,-0.00033760471502035654,1.8756130412326504,25.89701151329537,0,0,-0.26644402244266774,19.897954410163543,0,0,-6.858350937270689,15.258839862401576,-4.1000000000000005,-0.7440169299069801,-1.1172206799164173,11.275663346121277,-4.1000000000000005,0,-8.468632751195768,-9.597662173434585,-4.1000000000000005,12.4941697640095,-1.1052564507801619,-1.583029534930524,-0.2604663243906522,9.994078033243996,-9.676334960702556,-8.781864901147216,-5.801818360882834,-9.50097200245061,-0.02716510615814869,-5.1000000000000005,-3.454712026495244,3.1082047567582105,-1.0578760395752154,-51.00160707722641,-4.101250438953607,2.8837305252086445,-10.213625,-4.644391462819898,-0.04744268916276582,0,-8.214030600909133,-4.517591413381022,0,0,0.42367455956967376,0,0,0,-0.1826448593296629,32.63521095213763,0,0,-11.19331185807476,-9.516727334475206,-4.1000000000000005,6.018730203640159,-9.881128938093113,-0.1250676880056088,-4.1000000000000005,26.719045260339353,-1.0654366894121032,-1.3652481823530893,-3.899259523266931,0,-0.3966151371949261,22.549643839809978,0,-0.1264112739380994,-5.895861853065704,-1.284169199453915,-42.813353908878724,-2.1598480584884943,-9.735706639700988,-0.9016249938036041,-4.192255555156662,0,-0.10025914359755961,0,0,0,-15.720152983490735,-5.10125670904851,-4.1000000000000005,1.0039787313544641,-10.213625,-5.1000000000000005,-41.08629035865523,2.0465865934363405,-5.489950632488794,-5.199553960984973,0,0,-0.44461304531689266,-5.1000000000000005,-4.104326362528849,6.016609078421982,1.538791318348513,0,0,0,0,0,0,0,-1.1078560342896326,0,0,0,0,0,0,0,-21.24793677507845,35.58154530776831,-2.9492041564039724,2.5214835696117865,-7.136046296837444,-0.1,-3.7102632388143792,3.86685071539158,-1.048301682066882,-0.1,-4.46854690838636,13.374061936032124,-6.100996676582692,-0.1,-4.106870348136419,7.703142797247385,-0.33227249192996955,-0.1,-4.1000000000000005,9.435375120171274,2.41687961921798,0,0,0,5.7657679687188015,0,0,0,-0.623948159025756,0.21112325930295806,0,0,-5.9035430399921225,-5.1000000000000005,-7.860241625971467,2.2677696981095097,-0.5904906726537856,-4.81228014045565,-3.989674583809389,6.139227211721925,-5.827808328565549,-5.106863894444153,-4.108473182852652,-0.11628565577782957,-6.1000000000000005,-5.1000000000000005,-3.865981946279623,0,-10.214508436248801,-4.56956612817694,-3.984896314923425,-0.9484605423732783,-6.10043150104882,0,0,0,-5.8757598665301,-5.101799224770509,0,0,0.27886688677079824,0,0,0,-6.1000000000000005,20.40131909751778,0,0,-6.11202989988606,-0.1954900520670702,-4.042042317407261,11.230405225592287,-10.086001729979163,-0.12999804679040583,-4.571226195746844,0,-0.44671969552795154,0,0,0,-1.048257545787035,4.764364341257542,0,0,-5.90897286117354,-1.3422251970685624,-4.19343494322209,3.2903615788263454,-6.1000000000000005,0.669821818764087,0,0,-0.9625421949879538,0,0,0,-1.1049615913811246,-4.057563482820924,0,0,-1.4961175011841525,0,0,0,-0.287455950075144,-5.1000000000000005,0,0,0.7851485231661919,0,0,0,-0.5641125703393057,-4.875871300605258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35.354320282123325,42.90687833081646,55.75328485759655,-12.133790989696672,37.06603574401441,39.959791235188106,45.64791495832776,-12.597523824121428,27.724714497195606,39.87413326768779,51.90553989583924,-13.279079800782744,21.46697917169457,40.043254942257306,56.33429638955722,-13.081226114078687,32.05616876417909,41.549251015357434,48.79845141258899,-12.95757198954446,27.09619296158139,39.86217095473616,52.43932483697977,-12.6797907576444,29.24608875871062,38.07731941761123,55.44022812866582,-14.715926256993177,10.494934237110744,22.949783994178013,56.18469151386318,-7.998233341669847,27.182341444160368,-6.6013875615741515,55.84990159499929,-12.019074134647267,30.153631139485,-5.252673966928232,52.34791587073033,-12.004962018220336,38.324531512404874,-11.623376632883206,49.35656797006798,-12.228514764529493,26.31667890564568,-4.746050241863316,52.003548873341,-12.534284971001352,25.975962319787666,-18.35277088791998,56.461306718516745,-14.360438020940633,32.28082920678609,-10.288741491320701,53.557696661628086,-9.203596068787311,30.987907435805162,-17.615701661322944,53.711465786099915,-14.589629548636545,7.392673636868661,-34.687064726832176,51.854636391698996,-20.0742104004163,15.736758997541594,38.24108175980428,58.002435065415725,-12.569497610636715,19.546410556580412,23.82589815080781,55.409920752712424,-12.116185820881565,18.594910621329266,37.476791446789655,54.720457699904195,-12.26177725684512,20.597060898041107,21.490639022118902,54.793537136882534,-10.166652186581524,20.66037070638577,28.286956808036635,54.635687268938796,-11.870055272286486,3.502764361199377,34.29691043428023,54.79942137738177,-11.68843277253979,2.298590336557507,36.499584773244244,51.0789620370132,-10.20750736173175,9.499815892434,6.945515740724083,52.029204711913124,-7.2837160700195005,14.449037190246088,-12.280985304979074,51.65992326467869,-16.40326675748907,30.80930986966717,-11.052444911458394,55.57331910228915,-10.12328390119918,37.39945986992792,-10.69359236459964,54.472293224775946,-15.40316626176834,1.712551737119172,-12.907342145871825,52.08040786493828,-13.527015127719729,13.857055938660938,-12.212502450098413,52.47212292386418,-13.694270312730632,7.373011086114713,-5.1000000000000005,54.53609462853954,-1.4329417341212398,5.364543223758106,-10.501477253071812,54.110284123217134,-2.8543104886345967,-0.7093535464859628,-51.26463591077297,53.303116818273864,0,30.05878170770648,31.684337674992904,52.706817239133024,-12.50645244459097,31.382988936939537,39.43326926564016,54.32662541356252,-15.673839935794303,19.18970500933571,31.994996251927528,45.46618938378258,-15.32932587143064,9.769697850240597,13.216768016692098,49.67016706511194,-9.761372527121116,33.779235385857774,34.37398744801891,52.13247969554388,-14.149184078518656,23.22943681878042,31.70079200906256,55.54614644285004,-8.051438579065588,6.687748378591769,17.293972153487143,54.23752331534355,-13.649718054034814,-1.3350228371307091,38.37183485438907,9.931499656162792,-9.544473567324038,28.04994047663991,-9.045685729875167,49.2786695885812,-15.021844163209124,35.46265732256085,-10.723715265340429,52.96439358162624,-14.894692564396133,12.896406907092665,-14.480472421045661,47.149439720535916,-14.907329312590262,2.8484083545344756,-9.769853738434005,40.802952053831504,-14.07682876907585,33.495390258097714,-13.565337661881978,53.35756266330503,-16.726037303997515,5.7122911319869925,-14.297651706465604,49.73442979230772,-11.394674860590877,5.629324602086246,-9.449721559623113,53.683070320911284,-7.059367022114074,-0.45680634653402746,-9.690381288799713,49.508016374652094,0,20.830241782439227,34.18646473202418,56.414013177221165,-18.534233357331065,8.73276634441633,25.701617898667912,51.07252157701823,-16.76013140374912,11.644249796737968,33.009514746032,51.12174069206277,-14.182853479073415,0.3656048533136542,3.844861250706701,50.4092290344165,-18.614894048172737,30.26993332545641,27.55444068190063,49.03641170686013,-20.23212471555212,2.165605085709561,12.995899514173697,50.52839665688807,-6.001157155398114,-3.365625162809274,3.2064718285975697,53.36229219439943,-4.961099211443393,-0.5184461485500951,-0.12745074928489905,50.17611790847718,-1.6693447568951023,30.768866623257917,-12.035070766394561,53.45220668447183,-9.098519286588743,-0.32227818706521005,-39.396671330127184,53.87052321208045,0,7.5763788628234,-11.409611853115214,52.66375430033551,-2.1697944346467977,3.182930274615946,-5.120828165988202,50.536482100858294,0,0.5710369992163968,-11.476538506648925,50.39075538728195,-10.298540543706526,1.7587967459852594,-5.1000000000000005,52.56560796638348,-4.895986630645284,-1.0220078375040578,-5.1000000000000005,47.65734248563566,-1.4173944262365206,-1.0290048060242107,-39.91809005890228,55.75853276063793,-5.111602828125001,-11.207707221637277,45.30656864485594,22.357396802373934,-10.80330793171217,-1.1055191425513222,45.07862539889332,14.43080143944364,-10.206591890660231,-3.9873578464236292,44.51614135960111,19.019498095434166,0,-14.839327343986609,4.700842606873542,50.19986609787784,0,4.7599799643177985,45.5807958257144,4.166842669079536,-10.508679958277718,-1.0843368869267052,44.07103699569343,0,-1.9489128738004553,-3.052585924965438,41.51331886790946,0,0,-2.771419811067295,42.23778696742246,0,-5.450371511944899,-19.13975849759491,-5.1000000000000005,54.27532143805632,-3.622983817444159,-11.308400538687238,-4.439760536478239,54.82830840766107,-1.9581228157160249,-0.9502470953923133,-4.951785076451703,52.63510473161935,0,-1.1053625495027746,-4.262630196799411,41.66857505608934,0,-1.1144622458608626,-9.630998316891793,47.37323815357952,-5.241720280010732,-10.213625,-2.2386322335840685,38.02879837739895,0,-10.213625,-4.25124734755157,10.36881493469232,0,-1.1058154757032919,-0.8625657806317684,5.501473353955097,0,-1.1108952675343702,10.786665572131598,52.412124089147355,-4.154032541571616,-0.8671111168371542,-2.0957765342339165,54.09852033369616,-2.152840779596862,-1.1047568627983375,0.8982560318547625,50.88469994254874,-9.808075925183164,-1.1281565321417677,-1.2851290141924487,26.689092672826277,0,-0.25085856435992226,-0.12192343238265235,51.627171979907445,-2.0083303360710345,-0.5572498365941931,-0.20248036782084872,35.01981578486016,0,-9.530305180204452,-0.11063166091674109,14.345620218074828,0,-1.1,-1.015377787555047,2.100869761812529,0,-1.11387712229856,-11.054126165364215,47.093944629118184,-5.109921162575458,-1.11171414227317,-5.551972663849515,44.08119509540053,0,-1.1104671074199612,-5.1012375,26.60192982186068,0,-6.101301974498676,-10.220488964721312,23.44999043690383,0,-1.1109652983643226,-5.101051213739009,13.741617207630204,0,-1.1000615714177406,0,0,0,-10.213625,-3.8872828362690743,0,0,0,0,0,0,-3.379773940677131,36.297411405828875,9.375602950963692,-17.213178441449543,1.7704041146077252,38.06680510786505,0,0,-1.1104598716309595,33.799747401469396,4.920051927710733,0,-5.060639806378012,36.11444297447725,5.729489531810852,0,-0.6154805047810323,39.837192575167165,4.305724440427391,-1.8872719741698014,-10.213625,39.28345556378226,0,0,-10.213625,37.442364318582165,0,0,6.053496327394457,0,0,0,-6.101295767877215,-4.393313637158265,46.59090925703237,0,0,0,32.717397798453774,0,-1.1113947010084286,-4.871720251270215,27.003184718793655,0,-20.034997568429567,-4.68478222429234,15.343937039189047,0,-1.1134641314485754,-5.1000000000000005,25.980155837102245,0,-11.246721370374981,-4.684447619561761,14.976938220149862,0,-0.43484577217823683,-51.013657456116775,18.786415651946434,0,0,0,0,0,-1.1,3.222657155786642,45.04928279838164,0,-5.327372409194149,-2.099146459093593,50.304135408027875,0,-1.7413710605141064,-0.1,38.988082514791145,0,-1.1056487346464114,-7.792801149627197,17.623325519754765,0,-11.611290583778075,9.071292368476644,0,0,-10.213625,-5.033036510843396,47.79573837128454,0,-0.23675743740400745,-0.9490443651690234,13.949129025120133,0,-0.17544985063165708,-0.5002943753620052,8.675025727240731,0,-7.632699849431229,-1.693389078068006,18.44694382922402,0,-1.055286071017772,-5.1000000000000005,10.360749363315087,0,-1.1048781498067997,-5.1197222204891215,8.934007406904069,0,-1.105023506425274,-5.102085774771801,0,0,-1.111639168884049,-5.1000000000000005,9.764252123028939,0,0,-5.377384612740403,0,0,0,0,0,0,-1.1115723422723212,-10.214875518885057,28.81971684276491,0,26.00997050030314,45.80409588827382,-0.001542761295833292,-17.898035772970665,21.038292048793036,47.155204678952266,-0.47281761843340336,-17.010616727023603,15.14655193900916,46.48473374759544,-3.638674187422773,-18.850780202127336,18.178545653168793,41.44675347913725,-0.8223649884445761,-4.880951321057235,16.64093789105646,44.12184064563294,4.078376945644525,-18.874282063070623,5.967917652404612,32.49029683945919,-3.0759799094582645,-7.617360775796334,3.7112681008759827,42.976194499552385,-5.6400450605471,-8.50196143526383,-0.28519999358453846,39.7527181948429,-3.781290435633258,-3.8901355924383907,-23.801322207971086,-20.137165270235972,-1.5695131841443473,-27.861210379804355,-16.62475412698968,-4.886314199562537,-8.909948159996228,-26.720782882983944,-12.218320284797501,-21.531389012950463,-4.324887098469063,-25.025371845618825,-10.984141909916305,-11.139321091160246,-2.7987912616412975,-19.43129153295772,-22.626376292316877,-17.63795093062638,-36.254931957528854,-24.408154870041475,-9.77073767571449,-9.957588964190686,0.1440055259015497,-14.793025988600457,-19.70827076721046,-44.57006179357128,-10.25922526885226,-20.070844163979196,-12.145853447862681,-51.14600446045941,-13.231296094063929,-14.049202729103175,8.686412641488097,29.07987559889538,-1.9216030845300138,-28.580033340058165,-15.57068071399664,-1.652788610954411,2.686984973644685,-36.84753923641484,-23.396639375133482,11.899903815646704,-10.598139883129482,-43.70393061836445,-8.977246124538011,-11.320891013439931,-1.3608977438823011,-16.873399881072565,-3.6171437221435427,16.116163268396544,-8.455522606998045,-37.56055329184905,-17.288970235354395,-11.265857859477869,0.42550676631400564,-23.26760830313313,-8.257473612498654,-4.387918741910605,-7.596677809430307,-47.14947882770058,-13.208387315525908,-7.070119050021066,-13.649886596148507,-20.912483254391724,-15.360467057060607,-14.585336146897564,3.4905011065458638,-47.414735722325936,-58.60389304775845,-24.325229298623192,4.45757222185825,-18.399665725350218,-10.598579791207028,-22.89293434680386,4.387399319340752,-50.21871909621473,-6.1000000000000005,-9.757718191421718,0.37103101031076713,-7.911892186803108,-18.69389621365605,-18.09075759055473,-41.022285679769524,-17.540958320275386,-5.293721489289803,-5.211398677058355,-9.550836005321242,-9.32801454761012,-7.942112469692065,-12.403914788717383,-2.8631939372410273,-32.44013526097318,-7.820499427448583,-9.696162777003106,-9.214071436175992,-9.743029668892577,8.140645231907758,36.07766109456315,-9.641143415505747,-27.599685830987617,6.100614018456774,38.603278128108556,-1.7158901327476495,-14.672737967168153,0.09046814428305117,10.618566318579003,-8.614963557568373,-25.94419959685766,-3.325253158701753,2.161038689323291,-6.2154719483217695,-15.443121104163316,5.406530037928794,31.027335497377102,-0.9782564290458279,-24.565780109627536,3.224236589701496,20.100623990037025,-5.676718584228094,-13.761919200260227,1.2271094556373963,13.68029127615742,-4.649007168784843,-12.59288150473187,-6.055384844538408,-0.3290737730858172,-8.388792547814882,-4.224519246929856,-27.17915110382029,-28.23888048959723,4.8653124816137705,-46.38337199631865,-20.20966054600209,-19.740497080615093,-8.711966021525884,-28.21517267469077,-10.431734791033515,-14.595356773327959,5.740712969451526,-13.334318813681785,-11.306807435647077,-20.912439353536513,-7.616787273012868,-11.874557081254636,-6.345502110498688,-6.642770274454592,-2.2376938091508105,-6.989529117083073,-9.982961324149677,-9.640303390722925,-7.249263112311019,-9.443725148539528,-8.452614410926582,-9.701596145902382,-3.458619417441896,-12.161555438027284,-0.6773459619818278,-5.1000000000000005,-4.074005524791829,-1.841174124248819,9.23086161610728,25.23486526190307,2.306177258345974,-22.08433940846738,-14.395032418443648,-9.133424140453437,-11.432341119543587,-26.25918891346121,-9.738873343242224,-10.248763598232133,2.348053901369409,-15.049341930054032,-11.650268625317386,-9.868390298011011,-12.743461340756786,-12.727981146860348,-4.481849811590767,17.70393437029184,-3.542285958883093,-17.340764904672042,-9.58358153104292,-9.782553248837477,-11.863872801509071,-9.691243743073581,-2.2069558254166366,-0.6920375421469479,-6.240744885270463,-8.92940966350577,-16.214752511310245,-5.816794675198857,-6.112263475419244,-32.28385301217759,-14.059357001362374,-16.902726116450975,-8.594302426562146,-17.714681522683858,-12.589302056712892,-23.985309525822103,-14.220997241534103,-16.978563715278895,-8.530413009897293,-8.073874940921156,-10.204970167428238,-8.658891761814518,-0.16198639411091512,-5.112601089502231,-4.1000000000000005,0,-6.963480286966052,-5.101153999607053,-4.1000000000000005,-4.821938484368559,-9.126268933977524,-9.69191330022102,-7.494302297523814,-9.71302776402117,-0.7042180768444052,-5.101095112360713,0,0,-11.115084536086425,-15.22388706583942,-17.28330757643212,-20.98973693446457,1.4756593352577225,45.54438796420889,-2.958020174286153,-8.005590561861133,-19.30805508794188,43.72768593567053,-4.186038549095412,-9.613801230533928,-6.100319585581783,44.48465012097315,-1.223798891054714,0,-10.210968807384171,27.614894668968496,0,0,-1.1057973787733486,36.20423358737617,-4.04591466579725,-2.956819069623152,-0.20005361000330035,22.643989329066603,0,0,-1.1048571284195094,15.57138988744643,-4.1000000000000005,-5.131489819884887,-1.1,-0.1,0,0,-10.213625,-12.794207569588824,-1.425443993826704,-9.708876454017526,-1.487238110395753,-51.15836178859546,1.4303413689896618,-6.699377464424559,-9.62476902300216,-8.448490009203345,-4.421743773775975,-9.697508044442092,-1.1050924088923353,-3.465210719234329,-0.44783799340453645,-1.9645489503109208,-10.213625,-5.101250439014112,-1.0011910156886206,-4.308123358150827,-10.213625,-5.101250133607048,-0.18743515659544344,-2.8986102106677873,-3.293795981829589,-5.1000000000000005,-2.166257368184071,-4.032182786126447,-1.1119228429578862,0,0,0,-0.9930265763089248,30.895998703266507,-1.3128394745874188,-9.621785992970127,-2.457247037191309,-2.8474787148631595,4.655962073863691,-5.165295077438343,-0.4882159780934206,8.018993920385673,-3.3954642218171927,-5.160616169270572,-1.1,-0.8982973124981476,5.258544180957596,0,-0.7495939933081502,13.572762906578458,-5.51999306927666,-5.1000000000000005,-1.1104623489637349,-0.9155827935678915,0,0,-5.979391465747453,0,0,0,-1.0200106917753569,-0.4912604920279116,-9.427654900017055,-1.8416579606219146,-11.328601387137892,-4.184963804467604,-0.6890766740467121,-5.113890974795491,-102.2070232933722,-5.0839362200283515,0.7409006780824292,0,-1.1046125,0,0,0,0,0,0,0,-1.3239809811124053,0,0,-5.075578432482835,-2.11906524244894,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,29.774638046989477,-3.5041278681561105,0,-99.41749513224168,17.796630634531716,0,0,-1.0120717122054097,23.803716714056865,-2.463235418900391,-5.1000000000000005,-1.0557192206525199,0.9866493403446377,0,0,-6.1000000000000005,14.282415707917085,0,0,-1.1101354986454972,1.926164972658131,0,0,-6.162277873718515,4.984862858744443,-3.347355480111311,-5.032911867903621,-6.1000000000000005,0,0,0,-6.1000000000000005,-5.1000000000000005,-0.4043898711782351,-5.136656028403899,-1.1059146567334543,-5.101244073065038,-0.6729049773938307,-5.105916819461394,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.262076196389552,-4.984825762946383,0,0,-1.1053055574340833,0,0,0,-0.3664781799142309,20.04213824954071,0,0,-1.1161520468750001,-0.19270943512169483,1.2421801317719385,-5.081448111284136,-0.4189114458709894,27.05743205235943,-3.692300368496486,-5.106875466608613,-1.1065520193749119,-0.7807105343044219,-2.861112279472409,0,-0.8781722801191413,6.263937203421785,0,0,0,0,0,-5.106980685679215,0,0,0,0,-1.1002352089709688,-0.11137112280021065,-4.1000000000000005,-5.1000000000000005,-1.1002034278936703,-5.1305028281250005,-1.509139793900722,-4.9554170031381295,-2.10129196089874,0,0,0,-1.1106145137057817,-5.1000000000000005,0.0055095238691727395,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-1.0073665307909052,0,0,0,-20.35494729891278,27.884648458421825,17.89837625461847,-23.34293152494018,17.189936024404005,44.11364031261194,25.110772083002495,-24.63138574538894,11.97618745303917,32.04900676310382,46.64872968061409,-22.261465142855826,8.619885824306042,41.32555519479722,24.093579224106612,-28.260386711392865,20.20509942852249,34.61364326402403,25.06786728222083,-22.362010654527893,18.428751601745045,15.771050396439202,37.00860314924068,-15.849152002949285,8.256103454777863,28.711289379416606,15.389160289215845,-27.25478200430664,-1.0287067697362227,8.23937469053411,13.290437166921008,-11.755260508357392,25.93252799504209,-15.637310138822574,44.99421899040371,-24.347194797699423,20.649023230710796,-7.938983250225466,44.18845896467151,-14.481223549965467,11.829137448513947,-10.955490389402836,45.555649900515164,-22.040206218246674,2.2800139093890994,-48.917317124943615,40.64084375834837,-3.6573148862689076,9.988042989990557,-18.808724426581584,37.47231278127751,-26.61369423846831,1.6828071677459864,-43.04362428053767,45.07571225295625,0,1.2996496805485993,-43.45405150586745,45.6178625601462,-5.35219214027865,-0.45066745535323505,-5.1000000000000005,45.9220945178805,-4.8839004267536685,23.363196720296383,38.078427063169045,0.3711055872308948,-25.372148242978113,3.614400404168049,3.252368489004799,9.67598876673902,-28.428662143176034,-3.1234168426447297,-0.325357872707572,6.263343180444909,-33.63003769635454,-1.6034346790235934,1.7943981381026801,7.218303095168473,-18.11289102046475,2.0885733547366945,1.8840072880132335,3.3328705959374956,-27.407667551139248,0.6142674739244669,-3.6911090045885864,1.1364739439173868,-21.705241003305908,10.927151713203346,2.6572371610414067,3.2295814542582857,-8.077642192662342,1.2461157510030916,-0.12760857601021927,6.02357397749767,0,-5.584255329310407,-20.71878011529632,9.07559759033911,-42.09537552904718,-4.697533744240159,-13.907880102363947,8.079667957886777,-17.328765970673373,-3.382895116403617,-15.965989342945093,7.744953638609289,-13.76204885212716,3.0911493495873494,-5.1000000000000005,8.013693776163649,-5.0573490212977426,3.7361662053716596,-40.90875575438114,8.141925623229373,-32.73954440072467,-2.6113834189202856,-17.438272690093093,5.035323138507682,-13.787739989022382,-1.1515610743122928,-5.1000000000000005,4.969679829017791,-5.036813248566335,-1.655793965611033,-5.08338629330154,2.5521098663846744,0,6.3871174473805645,38.49208399795361,14.199271404698058,-21.104094068119206,14.037171827983563,22.02851644843787,32.872428830605365,-27.304003936661843,-33.18888379929011,1.232609441115784,4.386907944809881,-32.53783561050073,-36.14717361477557,-0.8574674126542258,6.237303432450791,-25.68620047211535,-3.187366494038317,1.6438992490801032,13.932199487649255,-29.44410332913117,1.5200796964183683,0.3858797896877332,19.145562619618616,-11.91102696152263,15.34818003226013,2.537855491448476,13.212078252372368,-34.69980880572024,-32.246429360297185,0.20958315998302093,1.4368999048636197,-8.51153643239554,3.694328690808041,-21.95869990736784,38.91504817981034,-41.7242267539921,4.737574251921505,-5.101250601413916,35.92371726677937,-21.305907043617427,-1.1506870573160126,-46.01211336632365,10.460561536122867,-45.5041443620151,-3.3592679326868686,-9.71017678592278,7.5672829158248955,-19.77792961351893,0.5495691354748271,-20.73577182517345,5.229679971184288,-25.243304869240106,-0.3742185153865585,-8.121304498119967,12.008872246745716,-8.274538330430957,7.883440477420751,-30.869112423289938,1.4514717216462578,-46.387274895031815,-2.886005579229576,-9.690000000000001,4.353177582610693,0,9.337370508044332,35.8632015959324,11.652812394129898,-45.87448587564643,2.025291751899676,-2.3370250570993,-5.5082123281071365,-47.2894496599454,-3.3206832566001925,-1.9991664863865506,8.900484046911258,-23.023719553503373,-6.145303342300081,-1.3683399691464,4.37731426117529,-8.886940769635553,-0.010462186147738084,19.47686581718457,1.3579521022957979,-15.83459455406109,12.024626125153933,-0.7191445344798498,-1.1391581192412452,-27.855250576641957,-5.073233655593592,-0.5382087387458983,7.5599673400524425,-14.349117299986903,-0.06980553834522019,-0.1580294933994822,6.877144636642784,0,-0.6956175565625959,-8.893803300258169,5.695372520570636,-50.08849045396261,-5.157375,-9.625320704428594,9.475952982404438,-51.01393745379604,6.996248438874295,-5.1000000000000005,8.097486413843086,-9.610770416194537,1.1714481882027088,-9.696304428136989,5.488393674969299,-5.218631779233886,-9.083571351743721,-12.818929491378125,10.131425314369132,-4.985900150736203,-3.4539249982338935,-9.530513319393458,1.3460973599228507,-5.104800613219473,-2.465098599121884,-5.1000000000000005,5.2142766703637005,0,-2.0131324515790823,-9.677188073068972,-0.7950439478333255,-9.800601549489249,-2.536023991425276,45.96989898260716,15.171553743426893,0,-10.213625,-0.1,42.660375297944995,0,-9.050297073695392,42.92121520050894,0,0,-10.213625,25.772918742311948,0,0,-6.112379898833575,29.723227545407994,4.760719548248682,-2.5990873237903056,-7.602786965815812,4.022195430503834,20.650842297703182,0,-4.884756632914355,15.003997925062542,0,0,0,0,0,0,-6.107002144664754,-5.963669670367823,44.75224256864629,0,-1.6367820147572794,-4.72291634615344,44.52607061891834,-5.1008559210274385,-1.1,-4.59248133362677,24.96176880742807,-4.80333100143149,-10.213625,-4.205907765891841,4.595735142366115,0,-0.8289442898224366,-2.537431099165856,13.104156723216043,0,-14.717087110212468,-1.5878505373996945,0,0,-1.8313744702422232,0,0,0,0.3368816994096003,0,0,0,-1.1146280994809776,33.26484215314169,0,-5.263809031159826,-1.1,-0.2014647192711753,6.00299403215071,0,-0.9229178043618543,-0.8388760676146229,2.1646221969898494,-5.1068092019305915,-10.213625,-0.5809026857430316,3.51220814532031,0,-0.7609777118059633,23.164492775833075,0,0,-1.1521837125755903,-0.5058002871570785,2.229327841812357,0,-0.753587880356483,-0.5668732409529361,2.1711258191758303,0,-1.4816503827952614,0,0,0,-15.297203856239957,-4.250202977930665,4.496792921529549,0,-2.106612229531363,-5.195515060004087,0.733894402073129,-5.0457090148883035,-6.106867388344015,0,0,0,0,0,0,0,-0.4533597652142949,-4.673546838628646,-0.6554923965999159,0,-1.49639114879475,-5.1000000000000005,0.36904160821587295,0,-1.221647965796859,0,0,0,0,0,0,0,-1.1011204593102129,35.01756313846627,0,-12.999996902873233,-1.499425038859424,11.68392313275873,0,0,-10.213625,6.1839571335529815,-0.8017915152414259,-3.467224221239842,-0.43302941932663397,-0.09135731648251937,3.0367660374814185,0,-1.3515514030175029,8.897006543811782,0,-4.985330349984526,-1.03542855480389,3.1441075850864864,0,-5.002674801148505,-6.1000000000000005,0.06442587055739807,-0.32340686239191624,-5.020062939135844,-1.1,2.362503793644137,0,0,-10.271875583282597,-2.74655099754556,5.672316470856729,-51.77829625119654,-6.111997556978462,-5.1000000000000005,14.563467111371105,0,-1.4850592846986872,-5.101271271017039,1.1571884869467328,-5.106352862659753,-0.0019480458028569459,-5.100114162537942,0,0,-10.213625,-4.091703122896815,1.4397765777934852,0,-10.213625,-4.774618327230673,0.33678640060620924,0,-1.8526674677286803,0,0,0,0,0,0,0,-1.5814504893128796,9.432885500531606,0,0,-6.111266170134437,-0.15046627967061818,3.8539967960418293,0,-8.956530937926722,2.86616730975249,0,0,0,0,0,0,-10.213625,0.5526887212648058,0,0,-0.9443912144159805,0,0,0,1.8446466074557395,0,0,0,0.27123820618463856,0,0,0,-1.7932041190984949,0,0,0,-10.213625,-5.347756373470055,0,0,-1.105682661402614,-5.101806878932581,1.538365695308161,0,0,0,0,0,-10.213625,-5.1000000000000005,-0.39118693370708385,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-1.1110192538761572,0,0,0,30.6123923500424,33.83132998025005,-8.788356260292545,-30.17181281145941,0.5957677046810685,35.27644408757756,-2.109544397434513,-14.352477813150493,1.668136583039542,45.81961039302691,-31.679940351303408,-10.745396065465233,-4.962748092844767,43.22523185864575,-5.602112094062835,-1.8611200202285838,2.346990600981866,25.530155238974423,-29.47432479340711,-18.354347582388762,1.6111220574774676,40.341948403044626,-6.184837915663715,-4.708597017324501,-1.033577046875,40.9402375641258,-7.710671012660498,-6.841559266929496,-0.8981908777669116,27.13876583656601,0,0,-45.647291401330385,-47.131710653974004,-6.010685898285961,-49.490668839895136,-10.90560117732628,-11.534403024706933,-4.522221015234431,-13.630569063142744,-10.096423870223633,-12.809605199381132,-7.029399311363721,-14.368385876381156,-12.247713308899371,-46.95561246958201,-2.150582358525203,-13.77275780272549,-9.911057795367594,-9.174285098082034,-7.79830036952799,-10.97275281685509,-4.6050522856675435,-13.265788671854477,-12.100309861839373,-17.274927145913857,-5.73689576870818,-8.240598470423638,-6.313364576861095,-44.76855080011742,-6.625933978770861,-9.692361574516003,-5.9944212331304385,-5.1020019856110705,-0.44590760179930133,38.15748232459059,-14.590960387067982,-9.477944846119218,-10.654212861191699,-10.988454054982062,-27.81338858644792,-27.784927316096432,-10.673013812380267,-1.909114303398232,-37.92604230869624,-18.05914723420692,-43.198978422818385,-10.727759124614765,-42.236342468939355,-22.396827585639603,-2.3320772184123446,14.070289645184218,-21.552722598246145,-5.101361694337296,-7.256165092028019,-6.597015208630167,-11.062421633300522,-13.457378374899887,-1.923621009043873,-3.6973699598933534,-14.18158370917577,-6.65677473812679,-6.241384699527961,-7.156320632629054,-11.0380055480612,-9.008856287555616,-19.584628497278,-19.305793227543194,-19.467332514386158,-50.62648780931786,-11.044923508033387,-24.160274177066604,-19.86633880337227,-20.785906162672063,-9.164283653400728,-12.919530636729469,-11.241129897143507,-9.297108874433917,-6.042425924865748,-5.21241852180643,-7.712365046827309,-6.599831502351482,3.3720403129810808,-13.828469614223945,-16.763183981828405,-20.722932053093558,-9.850391149309322,-13.902823377201479,-17.414500134833496,-53.337375472091075,-0.8440611466345566,-4.91980269220078,-7.791249983952672,-2.0224528569215035,-1.0286495167545988,-5.1000000000000005,-4.393692557031185,0,5.471997918887171,33.28765819581511,-6.387689244034196,-41.2121613328971,-0.6765846061912957,35.03880051854507,-6.579902170512008,-6.250863752343374,-49.235825598742785,6.629903264819234,-21.332649058435457,-6.322727293602262,-0.26988562391216586,2.859424589831079,-41.21574106069574,-4.9257542980247555,0.2784832144321058,24.417319700132147,-12.876455466905798,-4.652083593642871,-3.3504578141539083,7.9469229369600765,-7.791130611002023,-6.155215597672679,-3.1320089368811637,11.257838232159962,-19.322846376141737,-6.477860582999883,2.80301772754223,-1.3233430221598068,-4.1000000000000005,-5.105922433462849,-15.319926185681831,-19.490482470601126,-14.193505195862102,-20.141661456147983,-7.866078531387775,-14.3618860177303,-34.51224990563859,-38.95939942302156,-5.1584096796580265,-9.124308841551137,-7.793327404491414,-9.524788714589445,-6.047243520715635,-9.690000000000001,-8.005394282962586,-5.100182488250785,-9.819136631396075,-14.795999188303615,-13.313200410883988,-13.771382052035102,-5.876279583626533,-9.690000000000001,-7.444619129174881,-9.702030446540086,-2.7258010174476266,0,0,0,0,0,0,0,-2.401575577233998,26.077994863080352,-4.1000000000000005,-5.1000000000000005,-52.99561520902524,-11.802039652768075,-19.60240854694759,-28.54421337383377,-4.830829947544173,5.963758458203821,-4.1000000000000005,-9.383659934268877,-12.566250612491627,-4.900212159773408,-11.121855154458977,-5.10667236016792,-0.4337720747151692,5.905498422778772,-14.549249522354973,-44.79536462465253,-6.987791530003221,-3.868408208751229,-8.09594569615191,-8.778027707922526,-0.4744618814632584,-0.1,-4.101557813000805,-5.079385285699052,-1.0015627825695732,-0.1,-4.106980862414263,0,-7.869289860917621,-8.960315529277185,-11.18670884834911,-9.690000000000001,0,0,0,0,-1.0334074249287384,-5.1000000000000005,0,0,-0.30936972433749776,-5.1000000000000005,-3.7295134764985534,0,-0.5903839598957575,-5.106216557786768,-39.96844511229294,0,-0.7671195406580561,-5.100792427959935,0,0,0,0,0,0,-3.3568061734450985,-14.877552289192206,-14.100912664201996,-13.827862500000002,-6.1000000000000005,31.411394354390385,-4.2150316055625785,-6.40628768972227,-1.11116051603919,24.0053096757229,0,0,-0.5420210141840727,7.4194850861902015,-4.1000000000000005,0,-10.213625,-0.1,-3.188645811381954,0,-0.4092372055531842,14.004534500141046,0,0,-10.213625,8.249253658124577,0,0,1.7260829412801346,0,0,0,0,0,0,0,-6.995844295808524,-4.250244338449344,-1.7439885319240713,-5.095291818550603,-15.73101534588892,-6.979561138773079,-37.421017615518714,-5.117236983904084,0,0,0,0,-1.104780531953945,-4.246674101989437,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1112571464541592,11.740927946352906,0,0,-10.213625,-0.23450640672627082,-4.198106866844369,0,-6.104612500000001,-0.34803323235458206,-3.5807511067697058,-5.110812187569059,-0.4630316766458196,-0.1,0,0,-10.213625,6.028715302898213,0,0,-6.106127577869815,-0.12970601803253065,-4.378009879775178,0,-0.8099893641612482,0,0,0,0,0,0,0,-1.1226722363857355,-4.795650586494241,-4.090745306431558,0,0,0,0,0,0,0,0,0,-1.1046125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.629927200370105,14.843475706714905,0,0,-1.0451034622831756,5.622488402615836,0,0,-10.213625,-0.12913338858799556,0,0,-6.116039001005069,0,0,0,-10.213625,6.83520777012788,0,0,0,0,0,0,-10.213625,-0.012308947124086,-4.123271842721981,-5.1171929886108,-5.9184296721566865,0.10356571603709797,0,0,-10.213625,-4.318808341358837,-2.0267040718530476,0,-1.111300658139982,-5.1000000000000005,-3.3472929761827546,0,0,0,0,0,0,0,0,0,1.5055888947798026,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,0.2753579407809466,-4.1000000000000005,-5.1000000000000005,-6.1000000000000005,-0.6426444131634019,-4.039477787855803,0,0.6767015216786145,0,0,0,0,0,0,0,-0.4752013008221484,0,0,0,-1.107991903301803,0,0,0,-1.4817897648293261,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,-1.1106104892368724,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.111502701121054,0,0,0,23.74402114124011,42.682376171170205,52.51557218732463,36.14218353042595,25.403771162107322,32.41077927875108,52.900029383057046,32.5980175224156,23.144926160442516,39.29320063179563,56.26898146633732,33.749647207553465,15.157117742262226,42.66651890179514,47.138533665928755,34.00103145653263,33.79393069878995,32.188040080876036,47.969516563539045,38.39541390943276,-3.3061369748491742,41.528871008332,24.109517331545497,38.90241535580822,27.378231810513398,26.469796730695112,27.078024479677264,35.80328203602465,15.437814150097342,27.350331139280208,50.3792044867914,33.38980358354136,32.47526508448673,-13.495491989773011,45.683703910447214,33.2560706395537,28.807791009251318,-7.294705016618245,48.20010846131073,35.03332629578061,26.97217912828642,-10.622873260169323,54.462480712246084,34.90010198098942,32.92752939918946,-11.44224281912643,53.461103046203505,35.63807668747105,30.04628746998433,-15.926515784703335,55.69030882896816,31.173026207950567,18.11279908194085,-11.148976135625016,21.58590376703448,33.26258608147126,20.618002289138676,-12.198651257655541,43.47148530531272,37.78204831624291,21.87063482546749,-16.92202896194804,50.322736546264686,15.062590214370829,30.318903347964014,30.864898274008677,45.35230634864071,32.6658114054881,-26.054056347774218,27.057001895012352,53.86893255252113,35.35749156133072,27.160709581626246,35.5082595467091,48.51685550822702,36.64810248702358,0.4798151433230128,26.035730833607836,36.752856249734776,30.895913032772597,8.5243257896619,21.23924941261599,57.331437475588395,35.56547353675885,29.663844892986898,28.098483969494126,51.59439979943896,33.87396145119794,14.222613222474138,24.90462790203879,52.21652088975539,39.84186969957622,19.187600385573607,27.403188383062513,52.31420736560632,24.459039239173492,24.555294779232256,-13.228200848583127,44.37283809660716,27.379021236919712,23.588361502048205,-15.854499987339777,55.60561970972585,26.02451936992907,21.741473676826992,-19.691160283152378,51.999661471945686,28.79181356353295,15.969959948935701,-41.237346674287096,54.80120909523901,38.71584574922526,20.71491293386002,-18.154150815766943,50.89137097001377,24.305271438413023,15.535785277420077,-17.55697617700588,54.27893440417708,16.215559237745854,18.97380466264224,-20.78796129958389,50.38336385146269,19.7435099910221,-1.023523630587348,-8.032178610587225,54.30238636360192,0,29.034536295364113,36.18112794304206,55.32692072788855,26.988105426992995,33.754766477465765,27.43434425427778,48.9630972965852,21.59638089870846,31.193153608217145,20.125011874981393,57.72306210518951,32.819536881869446,12.307060317935216,30.124304730111945,45.260864007026115,31.672664789816636,-4.06962623445653,19.391467000110275,22.881749627906206,27.29273209177009,32.4464713426786,16.756975309363725,16.245605128526197,41.41500720410722,20.775359394392964,25.516531551201112,14.883146884650074,40.56853178694384,21.600326577496258,23.000347870040073,19.714607984293167,24.41986335199455,30.104821438088837,-12.990807382486269,34.08635776907002,24.74856037582554,15.651881648934703,-15.14491039781835,35.47086862039812,26.197051688705027,32.87404767201775,-20.600857938803756,47.560491386625664,32.84489386176134,-18.865814440249256,-18.3532140984069,45.714696482470515,17.33930173533952,2.830138364888795,-17.651689047345897,20.688812546318943,29.065347143432753,19.26343501363714,-23.824729644019158,50.273482305734696,17.370791841202834,18.28256576577186,-23.767186871604263,15.877389817381113,16.62025561712033,6.473324385330381,-16.908632103645687,19.945777450652898,6.775082340947197,-11.338918388086253,23.15565601440852,43.0139987562915,27.903842510745843,14.531698469691026,20.464010582977288,48.75076953273208,25.48146069794377,16.862294462639852,20.64297033282635,50.07410485408236,21.028638914869838,5.808641588669094,17.4729523434121,14.80884597902933,20.329796773872754,29.538174880974957,22.595767307396414,52.10001375220265,23.76915854161048,11.461309896482499,16.38170792268372,37.34161618302492,17.10750410447203,17.498314680022666,18.872214856416853,46.233385116258745,20.68331715780131,-23.35254656328828,8.609086951915042,55.01120368602444,17.095779359937744,14.134680826028356,-15.833554703372968,28.774391309597004,13.93761502271907,3.266773814835365,-34.58770838376109,26.738048170928316,11.611648581888565,5.599848393882736,-24.984875478384467,44.37094404523487,15.511117895940261,-0.07985122309128023,-11.083041706471882,55.99769667998133,3.0967840820124204,11.189075992297527,-19.97899142788844,47.27935723276866,14.095903055808785,5.332549803548134,-50.35821523111987,38.18222778750522,31.595980844886682,-0.9766907354099681,-17.52079961311362,42.29478692947822,4.174599466415502,-8.434676635028225,-25.984043483481525,29.46981424296605,6.090503223873015,-11.879845448612379,44.62090357721392,48.68680877030439,35.57382859001624,0.9473828197628757,30.075272687248642,50.08121943674502,30.997455891911827,-11.0041254709159,43.594639307315724,42.07708592085445,31.776778376533862,-6.831261883403345,-0.111539546875,51.73829845253671,6.681290507620336,11.770691584518834,27.11248179451745,45.145392107495006,29.11774782157565,-1.8933428928315754,37.89597657338609,5.604095916849668,10.953903114269824,-1.2860439215058586,13.96437731904739,13.708525097474796,5.673374734923813,-16.61531758190894,48.63776022813502,6.0238723448743245,3.387388144827246,-8.817247210073905,-9.345173991087222,43.22290515026409,28.34399858573476,4.7006831981048744,-6.740929628242886,52.96765708078127,4.023758493955187,-11.72788826027881,-31.883198070901983,53.211555738184515,9.854849958657125,1.3937759572126796,-1.3498958378865524,51.03363225545819,0,-0.4814959858880954,-9.424040549273894,44.07684901689575,31.656505857241342,1.6886559622329134,-5.147071473095111,43.90712782038756,0,1.7912051884907183,-5.636182215600351,31.36023810989941,35.37915386675229,-6.10700217309315,-4.788200421515546,38.4963080190611,5.4095491866867,5.937165314841094,21.54440230607639,57.34200643528106,19.411984862699796,-7.409065523241823,-1.060371877069086,44.34281788733658,3.6666338184640193,-1.2697835353961846,0.517911770223156,52.10501313573622,4.353887915098017,-2.2208985246161252,-2.6485278901627707,50.003970779009194,0,2.8481824644125324,6.18180346554867,47.20220690274583,35.81696637998249,-6.1000000000000005,-1.4308873613829487,38.14501199200248,3.162498687505933,-1.828976278075253,-1.0007058903931725,42.568203175655285,6.803533003896458,-7.9816032517361855,-0.1,42.057820472488615,0,-1.1012375,-42.04152257734471,53.126046444310184,10.245143711925522,-11.338866104378825,-9.68721473982866,43.26236816951048,0,-10.213625,0,4.989070924753003,29.03240786438105,-3.1128093259853493,-4.660717682559208,30.30598862284461,0,-1.1168127933269074,-5.1000000000000005,45.9984451137904,0,-0.43229166441128913,-5.1000000000000005,45.96207856776687,3.5886124751133366,-10.213625,-5.1000000000000005,53.75804442933008,0,0,0,0,0,1.211228624344571,36.82683434221739,26.977200870501303,15.228327134659677,1.1787195249247913,38.911717390750255,21.968057710069953,19.488720739090187,-6.133315694441801,11.772291936326367,19.983561544354245,25.74308005933918,0.37817005978234963,2.439579139028125,7.357636702596343,25.926516633038823,-0.5857749152564633,33.82891636066792,12.450013217223209,10.196738820760215,1.9500169464498556,31.98210110823158,0,3.792440039425788,-6.537306759886197,6.57877230885538,26.51065370613854,2.170532998786658,-5.94787266771913,28.55052903647321,12.547031446970214,0,0.050541823949860176,-8.950927822663834,39.97482379677013,10.611483167904296,1.5627945027938968,-8.03131555075929,43.15877898386234,0,-4.035665921524572,-5.1069953315711105,28.208272294160864,1.6107509340896735,1.1268813628916008,-5.1000000000000005,54.17235282003139,0,-1.1103960071602994,-6.219793227794424,30.108114468793747,3.171538131383794,1.1127022440500365,-2.8425505096618657,15.42972704243953,0,-10.213625,-48.27449622484331,21.06161179709423,0,-0.44712409762291466,-5.036063953209745,5.8074666591570665,0,-5.321494197396742,8.425331890715649,14.405502380611605,21.967209438313528,-3.8460998586627846,-0.1,12.842488451523856,0,0.5389601478002815,-0.14770666833992463,47.508779417908634,0,-7.587780908727978,-1.7713609505386854,36.25077597539671,0,2.2038995293159287,2.58170547696579,31.89700305801071,0,-11.618122938266426,-1.2013699352569318,0,24.781499700181723,1.08561993363125,-0.1,37.40622171824203,0,-0.4964129047254846,-0.1,13.220875875427947,0,-4.335114324926036,-13.424034791975856,28.488423065073395,1.9419945502689662,1.368556423178704,-5.1000000000000005,29.337720595874952,0,-5.416373337496809,-5.1000000000000005,43.51703045181162,0.9599239149420905,0.543860663030177,0,8.132971476203096,0,-8.417130023654352,-11.45232484203072,24.93767672950039,0,-11.787913862650942,-5.299300889207281,3.558670412615277,0,-0.5705286900865498,-5.102759973069967,19.285961916597685,0,-6.1173962419890024,-10.220627159081106,7.36742463233899,-0.10674516343822052,14.038722373198938,45.04328015083249,-2.9989175723221186,28.698880911969177,20.72264636041549,43.34696135387719,-5.462757039195127,25.659011494868004,14.340259496960826,42.62070376004165,-10.225765799901293,29.66136966223459,12.851062399382602,41.59653038587153,-0.0902176318025405,24.912985851715472,25.38893226143824,28.23071793248002,-3.8949205913076925,28.2921824010658,22.08023430438339,19.965766423181822,-3.603553043917497,20.11775589748911,17.376417497847825,47.52197629752649,-0.6591147346703148,23.20994482329937,15.756537924943329,42.510466551480576,-1.9982133661915091,23.895688465379354,-7.012225992851105,-11.746003269521758,-3.522297714594108,4.833666094671786,-6.61721804640591,-7.561476580974462,-2.9857263662817646,29.112035875787228,-36.95000165167519,-7.021330251762523,-0.8901592925153111,20.158220614954427,-0.6451061896850335,-11.92867647456971,-7.34789148117947,6.705198937589852,-10.065165028370163,-17.553538555103923,-0.6780988235345802,8.23830175218734,1.1523480574502503,-16.456645782944847,-1.9122971082487574,15.410166394144433,-18.110297437474756,-13.871095079106924,-6.4443630987550495,0.16173606762602483,0.5138965609051745,-17.28848745414009,-14.103486158864662,7.522660559633141,23.20217108178882,30.495036968129423,3.71317846772226,10.744884551496646,-22.640174931547833,2.718297431898329,-0.6331413485114998,6.02263685922369,-0.8038320641948031,4.043130996754708,3.578758808507767,8.634287925427923,18.011818176069415,12.78667879619724,-0.8312235242568762,4.101169373366644,8.567205119570707,15.239037829637047,-1.2396897133610711,4.32191060752479,-6.432337189419547,0.46046697452572816,5.9313273087160585,1.826744653919222,2.33852034243642,-2.0952924427986797,-2.6563822353375306,0.8781244919113735,-0.30171219620137046,0.2688380573362904,-13.771943583096597,8.74753092191014,-2.7969402282163216,-14.195924426147755,-6.244074578925728,5.030782195629634,-12.043732725881078,-36.641813961121514,4.145322587073412,0.1561061992499654,-5.419493564092665,-50.14709368114128,-3.954483600706788,5.760600447507947,0.2648325505188196,-20.12787485845633,-6.84065796484711,15.672656262108005,0.8933216220497915,-33.00836708576316,-13.900631675737795,21.12351855835408,1.614653645344264,-20.47945326855094,-2.676534704777115,6.00281146784454,0.8504230128248502,-28.47131039051408,-12.69195706653013,10.85589580468254,-1.5265973160712194,-9.44502344170435,-3.474027238061104,13.673674857833548,18.010222411205895,26.44239604366436,-3.4493200083879474,14.641860054206033,14.0698135085375,37.825247303201564,-0.9095503886729673,12.166661891256867,-26.917016481775423,4.843550540602317,3.230439147252731,4.284509862091329,6.628194847113732,15.052578387834856,-14.489611656050851,2.174518985907158,3.336266046335987,9.095799823403041,-3.260021217321057,14.155661167529399,-12.926809703141746,24.158045329918647,-13.945695055143943,0.3990621141667307,-0.07142185445700999,9.398855741650802,-4.275210674733243,0.49342314402701587,11.31685342512316,5.41580011469984,-10.750172997561078,14.852086155247886,-12.712665799527992,-23.09309825801457,-3.086964328017717,3.9609702256603945,-4.536249389463466,-17.318735775088964,-0.47823203649133306,28.998117110334093,5.23658387234706,-31.213624702818144,-6.820393697365845,3.3661527241712155,-2.8859775426151177,-19.26192913197791,-9.245737722916985,3.2843801432569006,24.70511261287647,-30.889486007192602,-3.346422835093664,-1.5950223964903467,3.9274317585045964,-11.564228393072296,-8.901448618917694,8.437086727469945,-3.2648925652991743,-18.359987069508996,-5.385571180907109,4.701411489207249,-1.8202227897087981,-13.563400453868315,-41.02403964559746,-0.05182817942991682,20.21320783079494,28.49177849309477,-0.6444174071865021,14.5460337660084,-15.979876774330133,-1.1587850458227107,-9.686706411674185,4.137611697002325,0.6124686721272865,3.230209028125175,-9.785521983972835,6.357706488500836,-8.065031427279964,1.349525837785415,-6.426738930184122,10.679384869883346,-1.8136809309314406,5.290932244724905,-4.197559298275854,9.256618612166738,0.49614185342039896,2.5283864753365206,-15.21786763705313,1.9046380488700976,-31.93363827828467,1.666907219617138,-14.726104364869766,14.12403672853751,-5.167900050761002,1.9039158190553724,-7.792305026598656,29.835359326027447,-1.941154033632892,-20.42986730181967,-4.45501433613548,16.289042391013385,-2.4640060013551475,-28.998683214327983,0.7708830415537421,6.036467329230387,1.232105120124111,-13.633286878228,-5.430301083648262,10.624325314811768,-3.3084009802803616,-5.1012375,-1.6558789967806011,27.488662638761284,-0.1930690181157937,-22.84668042094856,-6.864179700244162,4.616580394313613,1.5639034572556407,-9.711014180941643,-7.165691799012747,9.289769930118847,-4.278003875554148,-9.564660516697488,-6.680856921788517,11.533854439982399,-1.0527411076732816,-20.466576573945993,-7.4602857968079785,13.261716863419299,-13.216147552763864,42.486589348621514,-3.4500030205490813,7.980261825762808,-2.949598293331531,42.84556888783831,-4.82319240473412,3.162664987408179,-3.390704836160142,40.45870767272257,-1.737211715677606,6.899725578534959,-12.006745478362648,-0.1,-4.1068755531816405,18.433475195763368,-1.0765429906638269,44.27004744216422,-3.9531972263152872,0.4305276009956863,-10.213625,3.997087126705769,0.8717349526031115,21.222540996451823,1.736944490345011,35.873904734898936,-0.2768735520034888,0.32148929284273947,-10.005036438551759,23.476135251116087,0,0.4908249245385153,-63.571574939283536,-5.101159805889013,-2.787971205612223,22.742632647693334,-1.1115063870014947,-5.808396118452899,-1.6121044310534076,16.512941101084056,-10.784204787702684,-4.7123085567938094,-4.352419731529175,8.021129729448642,-1.111528180240329,-5.1000000000000005,-3.9087594161830754,7.600563876556319,-0.7976857605038212,-5.1000000000000005,-2.0136492708272162,17.333335565419034,-0.9991702687488098,-3.6113124795955955,-0.06743170740381714,22.164740522561523,-1.1116118362042677,-5.1000000000000005,-4.1000000000000005,10.762085273874115,-1.106446465585259,-5.107268371888063,-0.589349566113006,1.1891309402574213,-5.283708922066086,37.66462842687179,-7.056362440726817,2.9560270070285437,-11.125853529393883,-0.1,-2.5903190168814576,16.08470147011516,3.131245664640151,2.193952798158387,-2.3729850875005067,15.51134275119766,-0.8085695090557636,0,0,12.937679085295104,-10.213625,0.5942970882411724,0,17.78572349710918,-1.1,-4.0893485792843025,-4.1000000000000005,14.352343476072338,-6.1000000000000005,2.209579735096915,-0.8982544275989398,6.696111230949531,-1.1114775330932554,-0.1,-3.0403648899532474,0.9447858564773288,-1.1008764322490567,-8.275289018284631,-4.106870349558586,20.681846343553588,-1.1143681915145756,-5.1000000000000005,-0.3082091506785474,6.360518923612456,-5.228555373708704,-3.5010295286596875,-0.2634409866527243,0.4612156899872447,15.800304614075493,0,0,0,-1.111501283558866,-5.104613887509414,-4.1000000000000005,3.845010633775072,-10.213625,-5.042582267600316,-0.07582735429377979,4.1919538141646555,-1.0463214180496274,-5.1000000000000005,-4.106869221400683,2.730807692556196,-1.1116351861754035,-51.01292093514816,0,0,-5.957872999781273,29.522193098420313,0.9798545507219142,5.177408885491277,-0.9236166291770627,34.39000054245433,0,0,-9.061637996348088,14.568691355253073,-2.190861504718749,4.863974650906823,-5.107172963131921,-0.12938284299889063,-0.09252206069504752,18.01631796095399,-9.740044629917909,-0.23805592464765296,-1.881399697617871,23.694894447386112,-1.1,-0.2603194131758382,-4.121290240335857,17.515563542426516,0,0,0,10.115306120944545,-1.0278623721279971,-0.7948977395039881,6.765155466506959,0,-11.20206797016616,-5.1000000000000005,-4.739181090553801,18.504852577294844,-5.799855715964474,-5.055531910020747,-3.667577224171714,10.888479091606497,-1.031216068423581,-5.1000000000000005,-4.10218176596165,4.756269905111507,2.821203029910351,0,0,0,-0.5148989681384837,-5.1000000000000005,-3.795924556327905,20.778474046283463,-4.981073925285026,-3.7930588171123945,5.93082709415188,0,0,0,0,6.289298575922014,-10.213625,-5.1000000000000005,0,0,-73.92199375012692,27.421988796895413,0,0,0.6011386591303365,0,0,11.652171008836914,-0.987949120520333,-1.2002110922710916,-3.667989645731187,8.799707110076916,-1.0724938477438715,-0.20473360689147813,-4.1000000000000005,1.4157888084951742,-10.213625,-0.1,-41.12613053180935,9.136559935630562,3.874251091520285,0,0,0,-4.328837872695236,2.475193266297117,0,0,-6.013061036069637,-10.222010404906959,-3.6359893582510825,0,-10.213625,-4.369239418654041,-3.637052653466242,0.7015362030557678,-0.6631189566867438,-5.112433889072039,0.996368379413299,0,-1.1141745716135127,-5.1000000000000005,-2.4489395039068436,0,-6.116648475050222,-5.117054440282892,-2.4687742997527873,0,-10.213625,-5.1000000000000005,-1.2186420352938112,0.08848242406598146,1.4836122162373702,0,-1.8457114192831179,0,2.257627382567359,0,0,0,-1.1172862159673949,-10.214881946992964,-5.4934536817910855,-0.1728293697527945,22.827146485925898,34.29815422023085,47.2842535915706,30.82639947755562,31.237295781842363,31.378742184293394,45.57836151066808,25.745540976639315,12.381276283697357,46.2683749443395,28.807270201667162,26.867043573261288,17.026189450992575,21.232816511720035,23.58681631447158,34.08926173539057,3.118254333076461,29.877239322007327,24.52255285630822,32.07137330566526,-13.623589001091421,17.39647171650005,13.850661815710357,33.66000784930926,1.1536180493374228,19.332694236393767,47.53301516908907,16.990750862506445,16.751064055126594,17.34710101694775,13.028422001410583,26.671683345086308,34.82186359728642,-21.359748908806438,43.625297095672174,17.9817062500976,15.939344020278835,-9.155066760553945,45.73834706120454,13.814491526375706,32.56333315505476,-5.661695821449479,35.98410232982217,31.19624294293338,21.6429519857071,-28.9269550994494,45.19916993703801,13.55968252571996,21.65554126794204,-23.76500165488569,21.760174792209927,26.87414183764273,24.736724648273853,-5.698165386247362,45.567535985538925,23.29634092779972,13.984993997162775,-22.790686051598716,13.589184913133955,30.42170509491095,1.0271859540638402,-13.661283335795439,46.24465640832902,8.198461188297006,-26.31001258130187,37.060904672441985,6.573951551555851,19.522392268025634,-31.389768583848213,15.872862626916374,5.653320523455695,17.42242772704704,-1.186250367750945,11.09873693031464,4.502652245222111,15.005292734210615,3.651458399848828,3.9664641748671015,7.908283679355338,3.9271848769138287,11.187314568698987,14.002465449468637,2.5414527704419454,8.983729883431034,3.6987197441391975,8.04412149082627,1.2717249910588053,11.387887467928062,13.009811367536132,9.808323532062873,2.69376285783713,15.185829115975066,17.80060348423264,6.6952959824022225,5.06107016826724,6.242524293266723,9.20033605065484,-14.64781208722087,0.42150697070188525,14.201985943862363,3.3625096433533797,-37.113242872475595,3.074387044876702,7.9990972834942,-1.6302755235072417,-33.5024590698012,1.2896583724413968,17.073026921601322,1.846739799878843,-22.078762710563492,4.542971725112289,2.7073382694351023,-8.86743758155075,-35.30656495194744,1.0752617056243121,-1.681357846029244,7.873153667235781,-44.35404376966768,1.7384668038524147,3.48338059266569,0.7180721951841158,-34.505760268610146,4.780392276870328,1.4346054287236134,-7.520385098437651,-22.49649524507005,-0.016999406357106145,25.971452969339715,-10.170142611420339,25.91714456853708,16.67251395709155,19.901851146922404,30.532833840500626,26.885582859950535,17.161301161443255,18.91119256294011,22.726600524889577,13.53776429255578,6.920782742527253,11.417765218490294,5.692943581976591,6.060388722174252,5.5689605320192594,10.404987887555967,34.48603718931614,9.468239047294086,7.626391951721479,14.120425268831058,4.763148603192678,5.0968218538350145,11.586157840151953,6.642626786327763,0.35612676841432833,11.77775799199127,5.904046219362991,7.78631935817739,3.243772708208712,7.7127197647863115,7.266570547665203,13.776907583371457,14.616743333824271,-17.508563912512145,15.264563421892444,23.51986054476923,13.669666616394881,-16.635651210564703,38.71182643408824,10.392319611125208,-12.875456310714167,-38.32169510526705,9.126401343400463,5.8984648611177235,19.23178869389219,-32.83077350381115,11.706064759476247,8.320666058236506,4.663743295127841,-27.67246835024792,9.359459337733437,5.455036847339411,-4.64674616734938,-15.356790496459992,9.68175479889068,3.050518451436693,33.77630310066296,-42.383371461937784,0.5041106759759958,7.3532535883859715,23.509826158423145,-47.74326887557495,5.977856176077829,7.222277025161624,-13.95057114798059,36.015485871855795,7.605409647721013,15.182632311033823,32.872975176654926,10.64623160816971,0.22661952033653665,12.285791227821989,32.906628525646354,9.963486714154687,6.958773398421644,19.185803322393973,-9.972575008459621,1.7064306693966693,6.3845064512774625,2.0607253734396016,2.3337028232264,20.590753435481602,7.060513213748524,10.086701054318075,0.22570502375927326,-1.2841250692947437,6.68290962207444,0.672103323842052,-2.271233029263619,0.4930199175075295,3.1950034045192663,15.334394030922542,-0.1476120228984028,5.192443967536715,3.6879757246812606,7.1285121361284665,0.049596605524570236,-28.06347893764782,-0.9052222744852846,5.715355444646356,4.1533573180322465,-17.371313274400233,4.663733748563365,11.973238936231192,-24.501251811443748,-19.31183801302277,1.5281716381604822,15.598697573148979,2.827324347398146,-15.15262922936787,2.7081812043518694,5.753195930849231,-23.958447478471292,-25.932880281578996,1.9496305328766481,18.99105608127203,14.616266444084044,-9.720535004125026,3.6913207230196265,14.143450216709715,-4.1052457293102975,-22.570493765536742,0.5077736761071722,11.602318475654826,-37.80988365606665,-23.527980619456795,0.9185392866862865,-0.24412895890514727,14.43594042528277,39.25001200366844,14.562721797350452,15.488771899075747,-10.387235022260771,42.86319288770583,0,6.420332165340452,-1.4900958670954099,7.851401665294096,21.078333841263746,6.683810075446798,2.74198430470714,0,39.403770448397864,3.2135845109473724,19.15897440485637,27.266637982101,21.66725816099267,8.01604756182143,-4.515466017709486,11.288621618575101,27.5034592080489,0,2.0722785196478637,40.92639006239124,0,2.694279768430699,-5.366512374377445,26.37967730135893,0,2.9204533841468034,-3.700975385619063,-6.6793373677335275,48.77642959483218,5.394169182574178,-13.431264666783525,-32.91376316863402,44.93167451634924,0,-1.0043974436358032,-2.7333428567673317,39.627563707129546,0,0,-0.566501583908488,0,23.397283945741243,1.6557582972751759,-5.064161469197401,14.95228867336368,3.417802109182729,1.8997799927051071,-4.558192843504311,28.6635062511903,0,-1.175542771025438,-7.0309572467074375,26.892686401620953,0,-6.580604315046903,-5.115357981540399,6.050119204028002,0,-13.113218824554547,39.88818596472365,1.7867094347212116,1.9772422664354377,-11.533531478528856,-0.6294651772783861,0.19454425882214066,16.574400868722975,-6.7702977210501825,24.49521671882626,-0.9800271999503571,3.3527253290361703,-0.8345210191713985,-0.1084739579411313,6.53437285684096,0,-0.7542933404285942,4.62237712034525,-1.3768030641962017,22.38916539532045,-1.84424123555345,-1.0524382705230486,-0.29971012382856854,14.298248513420578,-4.90014506030767,1.0284323685695387,2.5580622888824753,0,5.999083468582667,-0.14901439763327928,0,0,2.23179308640501,-7.036675007666021,5.303990571807256,1.6132698550721591,-5.601981584827068,-5.1000000000000005,2.291441350805891,0,-1.1,-5.1070679015722735,3.2037822802225855,0,-1.2627344349277356,0,0,0,-2.683650202652607,-5.1000000000000005,-0.2505182532329163,3.584392416860288,-6.100464196842811,-5.47816313888837,0.4392683807082482,0,4.240896067280817,0,0,0,-5.3938572206223805,-4.978967720591523,0,0,-4.5557221366850325,38.3138080632624,0,3.628143255280713,-3.809516705673528,33.984974175431134,0,0,1.760985798472956,0.18236433593560053,6.042152833111974,2.5913643647719287,-9.134946978483246,0,9.193459701899604,0,0.7525921227578416,16.82196485514435,0.5434557489623965,18.805623087675688,-4.889707312481541,19.57479361368606,1.7035208908418504,0,1.127179739452903,0.9840154940756631,2.307364533914169,0,-3.1832135797901326,4.404826634005641,0.1670461845878781,0,-5.8624927795871065,-9.816242528067079,35.84806008120098,2.1993334102354263,-0.1087447185529321,-4.992841410510011,23.230254512582157,-0.11127523092150811,-0.24328058499705296,-5.101636231455281,4.455872001712396,0,14.169580249033501,0,0,0,-3.0690569872840183,-4.920937014579116,7.08769507169097,0.8483295790042732,-0.3913724467752707,-7.560885473338947,8.158618454508568,0,-100.63341190624632,0,3.278583056206957,0,-5.795834089529433,0,0,0,-5.911633691803812,33.02409475440559,0.05266794575186787,0.10386312408541137,-10.278755488020497,-0.5770930809400624,3.3027835631535805,0,-0.3463611783658016,0.20567156313931742,3.2900947163461702,-0.3949617649505605,-0.4957056950816481,-0.1,5.353059371953703,0,-3.902836483703016,11.820305914128436,1.5533522043080237,0,-7.852236383510762,-1.160969381553978,-0.25794802892935603,7.7413324576374976,-100.2387566161047,0,2.66809570635123,0,4.983218074925161,0,0,0,-0.7437654392158435,-5.014430569744775,6.8498791919566795,0.7266176663131372,-1.0200426351935887,-5.1000000000000005,1.4062232885691555,0.7944092152414888,0,0,0,2.745869352843486,2.5069288964537004,-5.117402708754909,0,0,-98.47799366928759,-5.1000000000000005,-0.049321710784056075,4.269897519475043,-0.3080177645359948,-5.1000000000000005,-0.00503922989244187,0.2940384891005787,0,0,0,0,-1.0886146363128808,-10.214849691465853,2.7424642976789415,0,20.53825103627466,44.004246407446004,-8.68647132955508,25.78806854479312,-11.802867197696303,44.87178802193768,-2.704233084313101,11.358753666406738,3.0588309456244622,35.696995971285155,-8.9258075332321,21.287972116828538,9.113951785358992,42.83462814529024,-12.914566358722167,18.71368166057645,2.933987987046447,49.20499732881755,-10.637848575798994,17.241637550870074,-26.97107353902283,22.14163302621617,-27.092946718809277,16.589356668659047,-9.671743502916067,34.99653627536594,-21.977631852097247,13.093385932039935,0.9384127419417365,38.5517651689792,-4.1000000000000005,3.106969413633568,-17.617480311035745,-15.121320092623256,-8.486914728579142,21.898071351410234,-4.366985039526173,-11.497141381027982,-3.479690472177964,4.250983266260822,1.973126551580158,-23.37123159211807,-5.435557127839732,7.031106273639179,-3.01600210628884,-27.381239341499725,-15.096331793000713,4.344109873849392,-24.597731519286235,-15.58439949855885,-7.403811331405329,9.534596085403585,-3.0138048583917296,-10.26230863475422,-9.730610632558436,8.407729409615003,23.510499396535643,-40.02281670051225,-5.053135135365725,2.863439995005767,1.3829840101197326,-5.106835518105388,-4.1000000000000005,18.32625761279692,-22.01098566792249,35.17452747176786,-42.8443384869325,10.358440423079891,7.346965171174099,4.2379499121801825,-42.14372286943793,4.521402488386672,2.72323392739296,4.622678695271745,-42.343051428575734,12.446352534483093,-0.9271317026300991,-0.8622148758992135,-34.24594447555927,3.5805799482252336,-10.213533396157416,2.723492696819755,-39.96601738854469,12.32432123146479,-3.014717621006663,-5.887736315070657,-32.315017822304114,5.886531510110091,-1.1968934153611022,-1.688274453145308,-21.50573820579255,9.357605781290601,-0.22755544889942458,-0.43604254691030336,-21.48669753975842,11.440682685330222,-12.933846921651035,-19.888532554012162,-32.32034664736843,0.48370112955808275,-0.2889120659234822,-48.51720490063548,-14.831813874147953,7.716427201971398,10.714631457883712,-19.08427366292248,-21.907388964717438,14.693621297113637,-0.7614797058362002,-5.1000000000000005,-7.857013357074221,20.431096568132304,7.449104330649147,-8.122710171853116,-7.795753854006109,12.853078185362762,-0.0835357960682721,-13.821851235573897,-13.949392027940213,8.79887356317422,1.4437733628279783,-5.100960680856321,-4.1000000000000005,9.87162289963335,0.1817732395431778,0,-4.101609957653196,12.05565674109997,21.922266040709243,22.495263141154865,-14.382805141129527,18.389636011301032,3.1186432883159685,36.72303235020422,-12.288947370519635,8.945249647823555,2.192042800142234,11.191461635408963,-40.67936013813486,22.86315909300846,-2.788115499293482,14.180781530361164,-42.73693440282046,13.119280527299082,-12.342165353079867,5.091349865386093,-43.63745375838577,32.35008753205533,9.653409451611177,11.163558304138585,-39.0928906371362,8.63730183797102,-2.251977490239093,6.636405685547628,-36.616824549487276,17.767588692235748,-19.190088563666993,1.4449309831348613,-14.229195096054086,23.043776212979726,-18.315822699238783,-12.826870156139396,-13.427727073279511,16.490834707419452,3.240962798322749,-16.104266477269892,-11.571009310434196,10.051138575911711,10.510872920747989,-13.654013392387895,-7.780170349662738,15.00482359815565,-2.0068951329045586,-9.32056310444334,-7.755653684397245,7.3606121518897005,-2.4033230489422928,-4.952978228969034,-11.499484992241308,25.229446736394586,-0.3860244607973131,-9.642222333137589,-7.452891802068999,8.303221279225294,-57.72942942232394,-5.051321231301131,-14.631570018532303,2.4708403943349664,-1.1455429435005535,-5.1000000000000005,-4.102002994686876,4.679343048369867,8.41760609908241,36.25309011565738,-29.592321481025078,4.711537739516207,0.9100334515476632,1.305228002213697,-30.911641676287566,0.5126301043067246,2.488015424671154,4.571878209770122,-17.016565063193315,7.912840975217278,-6.1000000000000005,-0.4955098095695831,-4.322230889596836,5.325287845814461,4.434276212937405,4.713827387171934,-11.341316525535982,15.29785092234107,-2.9674658978679775,0.2782574452044041,-7.798341644970115,0.85838220728266,0.34542202134447253,0.4963130360200422,-42.2473329556517,12.886871840531201,-0.03854020323975238,-0.1,-4.224733295568018,8.117689494335005,-4.396378120495577,-11.176925128017626,-11.145526590461307,12.335732454254213,-5.157525852457983,-9.62261985876175,-4.284937491135286,20.14082407939044,-0.572133392127469,-9.690000000000001,-8.082296782323287,11.788898074562821,0.40087242870622397,0,-4.1000000000000005,9.837931527791666,3.891674927031561,-10.848681152388302,-4.1000000000000005,2.126067885437219,-3.5936829018651437,-5.106982846875001,-4.082320882164514,2.94947673719033,-1.5490193399248033,0,0,4.107820481497038,0.9985206482920596,-9.769730117959003,-4.1000000000000005,10.431258300082067,-20.882025136839484,49.88646596242714,-3.9741784176775905,3.218379359385871,-1.1351940819000277,41.07722494513489,-1.1622261374460774,0,-0.25746438956975765,-0.1,-4.1012375,8.201458922222802,0,11.828791244387983,-0.26519395217593955,0,-4.654419425332907,29.556137033202027,-0.27677437179706815,0,-5.5641292307518135,27.994699126175647,0,-0.11446642621299406,-10.213625,23.855644312542594,0,0,3.068527484837809,0,0,0,-1.0078516028139892,-6.630031278501042,-1.4274006826059105,13.663880459231116,-10.527741756864653,-5.1064825806179455,-0.37309687842726263,23.55405675237049,-0.08405600487509135,-4.5671385869886425,-0.5988420240620854,7.577222989928384,-0.6913470059891298,-5.1000000000000005,-4.100289572087826,0.6949933190282472,-0.2714500573702603,-4.985277954715869,-0.012980571760772365,0,-10.213625,-3.5566370693586125,-0.2384172362139978,3.2960219162064237,0.014698003087888711,0,0,0,-1.879854012965857,0,0,0,-10.450663561711545,36.250722528489575,-4.1068702203125005,3.650745133959109,-1.1057784983024121,-0.1676288910469796,-4.117839202888525,13.846371466111352,-8.783869495080568,-0.1,-8.109925097158055,11.711446490209392,-6.1000000000000005,-0.1,-4.287132869741579,7.362853855718343,1.8034794936636878,-8.519771758981895,-4.1000000000000005,7.920462942289663,-10.213625,-0.7075230244759203,-4.185241669695308,0.5890895845189766,-6.120823975728854,-0.07745150013874523,-4.1000000000000005,0.07145198534584678,6.089593705594307,0,0,0,-1.0659089154053019,-5.1000000000000005,-4.179897875693942,1.8477513790408306,-1.1041517449761995,-5.1000000000000005,-43.50194199800424,2.106657899985589,-1.1220213105428891,-5.1000000000000005,-4.101250107497753,0.6369308026302661,-1.1053031386896721,-5.1000000000000005,0,0,-5.644436980672551,-4.335946090803361,-4.109769580983868,0,-5.9065630191995595,0,0,0,2.1256338848821748,0,0,0,0,0,0,0,-0.8413264465198314,34.49699907141806,0,0,-0.8524442155217151,19.425816453564433,-3.9843067812137116,0,-46.636204308793445,9.140340265644264,-4.168368900514238,2.8747297824634472,1.5833804151514095,0,-4.23539030009106,0,-8.217036034948478,15.624612083556737,0,-0.03244402930612655,-4.891682790884705,8.909628081184183,-4.113817483206317,0,-6.115065523987953,-0.1,-4.101239412974857,15.467584449494112,-5.932525023972442,-0.021193258323805433,-4.294230971898472,0,-1.1119042638537004,-5.1000000000000005,-4.1000000000000005,13.470122111969026,-4.777809245218734,-5.1151017382393205,-3.9237985840707625,0,-1.0120551525930017,-4.871396555720462,-4.303120098837415,2.944039645179494,-2.940671431315073,-5.1000000000000005,-4.3068722533401935,2.7309533155646135,-0.03979485273256636,-5.1000000000000005,0,0,2.242490530152089,0,0,0,-10.213625,-9.691878745980254,-4.1000000000000005,3.5541428861840867,-10.213625,-5.117227828125,-4.371949871312177,0,-5.1786082025217,23.249457611052836,0,0,-1.3914123823335072,-0.9477404242304583,-4.031423662231441,0.6914516677622856,-4.3933133136097515,3.9482150002523833,-4.1000000000000005,-0.19612600004530623,0.9125028848676092,0,0,0,-5.9915452191176355,-0.1382102195936659,-4.359723049722651,-0.04955212004644473,-1.014376139940538,0,0,0,2.099470639293474,0,0,0,0,0,0,0,-1.1057592096875914,-5.1000000000000005,-4.23076252286963,-0.601997087053971,4.4630835583883695,0,0,0,-0.8663004282348341,0,-4.117235689302396,0,1.7085104981370813,0,0,0,0,0,0,0,0,0,0,0,0.9442568838673349,0,0,0,-1.1048702084890991,-10.21486797898455,-4.101265027367272,0,33.40039003753869,33.93621313112526,55.05523482265297,-17.247063016153998,31.46990716141079,38.162704027645596,51.90762860689654,-13.146592109387466,30.511419485489952,46.94726997265876,39.030539340281486,-16.65164913012434,36.530528034655234,31.41531784820605,58.86564970793614,-20.841306555483566,25.166059556876338,35.96205270019496,50.976015073327446,-15.900109972147256,29.971515383169532,35.00065964237166,52.72754205164976,-17.096551634115094,28.038481466882438,28.909632035818827,21.235021243185212,-16.499824451357043,20.063250305396757,18.96838905861008,48.82253747190175,-12.770191228157811,35.954758409882835,-10.580767813692278,55.44032021504945,-15.989968143124502,29.77141088511934,-5.47525573283006,48.97811421400314,-14.994873522018343,28.527489306386062,-10.475587963581015,48.272190148163496,-13.022597636495028,25.466374849194132,-9.854384388674186,58.73652335802094,-11.550843890926005,30.47789467728998,-15.257640803386032,51.864250793857245,-14.600260678899138,26.33583273783469,-8.555985386270565,21.33669085399061,-13.062610467540168,20.481808317760905,-17.007370081529324,48.398776073384326,-14.360197785981578,6.046370806691565,-5.1000000000000005,51.43717057365256,-4.504504258854034,30.77651337305311,36.773560023866715,47.39172174348704,-13.048618853662123,20.071996153138176,21.202212560808096,20.98218579159057,-15.12733781216622,8.291034598517886,25.07090186010557,46.75577074269326,-13.976617171567984,10.951092759459964,27.19102358194521,34.794076810734545,-28.430965241601477,8.086797571195337,17.413212157243805,50.50767936352679,-14.718174715417398,7.804995833473955,23.417165959215104,49.00753589432573,-16.031717549272724,15.203825970280912,15.926850433018972,49.750968808139355,-13.912607553798008,4.4199554699815184,1.8663079751437635,50.47913836888931,-3.9928399342993384,21.94535816605228,-13.262099215633256,34.678825056612176,-15.451105961449489,13.634183569044193,-17.327932724838803,56.7383299928863,-10.29184206455505,30.662514641497083,-24.94304335108348,51.05879019217476,-12.12930553732225,5.707364335456977,-9.191415601798832,54.844364961440874,-1.488647440862944,25.928896125508093,-39.337997834787416,52.62166495995065,-17.31049794111966,9.021809637753158,-12.28520299325735,51.545137387454744,-7.8941187019948185,-0.04455005610934831,-14.505183981877039,39.25906688694536,-1.4713355504097985,-0.9589662120555098,-5.119915974898414,47.997045458192034,-6.056933014518394,32.73532451425882,41.195895834208756,26.68543293606476,-22.300914520059536,21.82565528369333,35.469301763128456,21.288309623130637,-25.563440736345278,14.730234787124875,25.424004374300758,17.221621825281318,-22.640003472988866,-18.124825592496453,28.206761473060276,17.26109893213259,-22.83226972030615,34.50226652891901,27.062386129486818,49.03049030976233,-21.971063484497808,21.580512207939414,11.520433997758207,48.87093096226223,-22.83916429122295,15.363583233410086,27.99679232116878,14.539159130592632,-26.205668305518184,9.607796421286748,20.702911370814896,8.671388737576141,-3.6167500441219835,33.453954238419435,-12.59450807428189,50.9755349957822,-25.47149774261714,29.33579778986641,-13.183823457035013,50.48970893926793,-35.79320487479535,11.321062634422569,-20.634591985837535,27.601018116959033,-23.92633000098848,2.4544745836494375,-41.69094433859795,48.679655833097726,-6.643892952066677,15.79793099864873,-21.212555708728704,54.116561229422985,-17.268700793704593,11.530809337633697,-16.04353939947213,48.18091501116829,-8.702758360607627,14.776924392268779,-13.532967869628477,33.969061090859846,-11.393983537694416,5.374400071484061,-9.696072284656754,50.44290014977682,0,20.417804979064087,23.617507221084583,16.986599307766078,-22.737359827746022,14.578200935191527,16.77689949306955,48.6342536359024,-26.426758422910385,5.898252428350271,6.854336102096872,47.43149123753382,-18.646636169042317,6.41437300840648,3.0514327604675535,47.865301375326005,-30.808945033019164,12.555551766291584,14.97698318038689,55.007291469724564,-24.770782478678935,4.4250387353442395,24.705969300814285,52.631950835793006,-11.987120203188178,11.555981455448345,24.52808601600091,53.304187845291565,-11.901921233434907,-6.028789699935093,7.451267878082527,41.572088479948555,-1.3218224295861434,25.366375448248625,-12.127681183783139,15.724333670008367,-27.136286540721194,13.614314854319144,-18.952053021814883,39.372805053735675,-8.673874290614565,2.398883637027714,-17.475501053049,46.05057272571918,-13.450714081940836,-1.974578916424262,-8.789751173431009,41.00168590817103,-4.54689222052058,10.840095109161497,-19.164102915329785,52.6673717509299,-12.02449994202981,3.6655313159586154,-51.06221811547802,51.78425852854541,-5.012734744220946,0.010526772296371362,-8.841998044938306,51.778083642198894,-4.4170256951142095,-4.5965850660009,-14.966335482807414,55.88052253945815,-12.296101814610092,-2.808020431652233,42.32339081084304,25.918185042797152,-11.56996005648704,2.3366625765097924,46.242902612247114,11.039888068832315,-2.1486663617761605,-8.117302473119068,42.09141276083908,4.867244348847146,-5.843129890296744,0,6.851989159186088,45.07981673506189,-1.3682950412199923,-0.42767975206005815,29.68770038918566,0,-3.6075177543473664,-83.48718621177612,40.42370821145836,0,-3.2731932862694766,-1.877044483837589,40.08531346503416,5.162423123358911,0,-10.107690341857719,41.1058925538181,0,0,-6.778034922046375,-7.273060577605135,51.072065324599095,-4.59731901298996,-1.1146796890625,-5.042425786543784,54.85517873396548,0,-1.1055537341221855,-5.318379813998385,50.55976138662706,0,-58.46605384011571,-4.860182007289934,30.01168617348566,0,-1.0728966911450424,-5.1003934014851,51.232642830911985,-1.7380512074819565,-14.218860329667779,-9.694868341535539,36.29943414000647,0,-1.3447385297380166,-4.176186867536039,39.164377927366736,0,-1.1116635304973532,-4.098014544567197,0,0,-10.936436201038536,-0.124814546875,58.38092476271631,-3.2289046653485793,-1.1195984786226845,-0.7898455791923651,53.17898510209749,-1.250169632768185,-6.1000000000000005,-0.14999336792580897,54.64397026685537,0,-1.1047730333828338,-0.5573723089886035,38.87652353313606,0,-1.069386928508101,2.75705889469097,55.792092376135486,0,-0.9745940891762279,-0.19429442169913214,50.528697802630376,0,-8.856372407571712,-0.7421966497989996,33.74876933471252,0,-0.9135480997883033,-0.789988034381415,7.819991578959762,0,-0.9467146664483805,-41.94253107337173,54.07254965129513,-5.107449258299972,-1.105078045239205,-5.1000000000000005,55.62878690410219,0,-6.1068921945384735,-5.101340114250668,35.63149112704241,0,-10.213625,-53.17893694881395,0,0,-10.213625,-4.814200418314715,17.63778117377158,0,-1.5221494981900736,-5.1019489797265365,5.772005179872415,0,-0.8455591280427918,0,0,0,0,0,0,0,-1.8204893673341114,36.421964243186245,16.0300332757746,-28.00820502505479,-16.720904280616704,31.254072607648506,0,0,0.22261975349075103,31.15203659916918,1.2645608689802295,0,-6.898042541374586,25.154360944231964,0,0,-2.351561133879614,29.414651365022312,3.584089496903821,0,-2.184899474243683,25.756226500206274,1.4956382270173014,0,-99.1117531041436,30.18048313905917,5.8161471387839185,0,-1.1115950830722279,32.365621110503184,0,0,-1.018879365884312,-6.460822398092688,46.54078722415944,-2.5106323829496895,-10.882810716929495,-5.1000000000000005,25.369044550152747,0,-1.1056563456251904,-2.9125563640318823,31.593711328283625,0,-0.5884292686557816,-5.1000000000000005,11.626877922815812,-3.5818423519022717,-10.213625,-51.116028281082684,15.911254027031404,-1.3017292882638452,-1.826848013916704,-5.1000000000000005,6.841281830384772,0,-1.662890575023663,-5.1000000000000005,5.98095995144682,0,-0.39364617505517874,-5.101759863580462,56.152061390745835,0,-7.574122395795191,3.1716560837648227,38.43745395257783,-2.7020083753142274,-1.119073878142994,-0.5682568872790134,51.02030260881285,0,-0.6426359183758044,-0.7251906093662115,41.68122526971567,0,-5.91394141902852,-0.3002210302765715,0,0,-9.186121947822512,13.157302706607007,0,0,-0.3532679331854697,-0.9219764667973371,8.734744051470637,0,-0.4942426624353089,-0.3115701649474821,7.915005996334065,0,-9.81613441444908,-0.7813300161873331,0,0,-1.8663154317230715,-4.949651141948472,21.161996890312967,0,-10.213625,-5.101279843812852,18.645734329939,0,-2.035054271086661,0,0,0,-1.1562222336923917,-5.1000000000000005,0,0,-0.8475678954763952,0,0,0,-18.383745253888172,-5.11360259911628,5.477300773058086,0,-1.1345781403286497,-46.61384609677805,0,0,-1.4881369215445792,-10.215299154036739,10.397866017436172,0,19.364193524833855,42.09688901477975,-1.0670324032678693,-20.62900571688804,19.901534385057488,44.63827125320369,-4.040140302872915,-21.50648428686688,20.441591912701053,44.61835605991123,-1.8670557590497414,-20.332676294155952,5.953384287409051,45.03063106808722,-2.610794478842807,-11.400379243561858,23.929055372548724,39.30079113036517,0.2800216568029328,-20.700098103278513,7.087424350983481,41.74297511295603,-0.2140559774099991,-18.973479291055952,7.950687345024488,43.87506466364341,-8.874950177833437,-20.294380712303706,0.6717940226984216,44.41384800992832,-2.4401797563033307,-7.028276988277093,-20.665052692933667,-36.42586313830679,-1.515032519540808,-32.64593824772957,-12.369474499747307,-21.9209862161858,-1.8285641073991512,-20.421125088862148,-16.519761540354395,-5.339169389321958,1.0692005744575124,-15.166940795944488,-14.557169825015565,-30.690530186607813,-3.021482436490002,-18.799498503188097,-20.586699659919187,-15.959736637654345,-24.067051570422215,-21.622048743271943,5.252919591621211,-12.033240037811444,-22.58794569353228,-15.155853577176337,-17.82251584370425,-17.666189673014767,-14.679230671347,-22.4219505619576,-8.076401234089978,-8.8556712152315,-0.11704946033932184,-9.433742594196186,11.166990685400982,37.93403180723631,0.7664491982984072,-35.857391216968104,-13.148125724173628,-5.734708755423302,-16.76603462021999,-35.81152460184619,-18.405550009600127,-2.3753615980222142,0.7511266445484068,-30.79240510216835,-15.86405309861936,-5.6569107508073815,-25.303395012555164,-43.927537795473036,-0.2419289912026925,20.69174441646777,-3.96976968321177,-15.952553827950737,-32.75208659709352,-5.21006631588031,-27.354238936341076,-22.2772186743779,-5.754617122467091,-1.5642125380399619,-5.838064385391579,-46.10331863583842,-16.07948758917825,-10.491586561120991,-10.217637079906275,-16.413085171293897,-23.7278459407466,-13.097195837711373,-32.67334359546117,-45.382914306362764,-9.231580058546077,-24.51432786881476,1.347427233537505,-50.673903293135375,-13.918123887777902,-27.761720056704686,-3.5213007760578727,-17.014854324739577,-3.374398778061507,-5.125180576701579,-1.8042851348594657,-9.325250183906583,-5.5521112160672175,-5.1000000000000005,-2.908791052892549,-9.271329577071443,-7.669880193579671,-9.69969493677981,-3.3767308376792764,-9.43439099168225,-11.791392816976051,-21.03666186308473,-8.947620949906142,-16.764793917801597,1.0973381369240705,-5.112072110499788,-2.476374783894694,-5.102659739338006,16.701692348734575,24.771365289523327,1.195174233812578,-20.516794243310553,8.826043424690376,30.100858400190816,1.0451058614376754,-15.914528998600908,-38.48118802304901,5.674992563530001,-9.448299455749622,-23.980398887530775,-8.037333408412017,1.6234789318142406,-12.006306782445941,-16.402965451077144,-1.6266823039438778,28.967555451028563,-4.476259533324546,-28.859970853015888,-3.9407754278467486,15.67256052334029,-11.61276281504834,-21.98197745791148,-2.534563317432295,2.3171210801532927,-7.38402771507608,-19.551374258817997,-5.743487321390208,-4.028881500350089,-36.92130883839211,-9.666973722086237,-31.590367940478373,-36.05505317025717,2.696005417688017,-48.75999808148404,-10.44416460683366,-11.18410616315483,-7.720436583399966,-13.62898136338844,-8.494921985149361,-10.520587299131563,-9.804615869291931,-15.88917288717321,-9.184315849035459,-9.605074797655927,-5.684609205382014,-9.318277951771059,-20.22466251893905,-22.622872068900463,-4.195668839356076,-18.953596406618267,-11.30664870473488,-13.630155108423176,-13.831758805628525,-11.92618397746837,-4.436447303703438,-4.6243077144199285,-4.7255527007502955,-8.757795711322444,-0.6778358530417367,0,-4.012210863391022,-5.102853840403541,5.15743692573172,32.91790271957906,-6.926180421218606,-9.512542548236494,-25.2942820170963,-13.007280911997977,-22.585687736227825,-48.85237938448354,-17.250501731486327,-2.639084296044722,-11.089391035672957,-29.98443479713016,-19.29760738109674,-13.27942299408393,-16.032287531074196,-20.231617422053265,13.518805935679149,24.850146649759896,-2.3449084032243075,-7.0647748040555385,-9.742117391657814,-8.136166805273316,-10.043632134155011,-10.458979342650258,-10.920855094213044,-3.160999292075292,-10.981306841535622,-16.91285538792181,0,0,0,0,-10.781042108612931,-12.602881388791763,-8.30057735207274,-17.286800258564654,-11.300714739381366,-24.7045207347331,-40.92265412937282,-23.338128207892364,-17.566273682852348,-16.51299439614906,-14.390794655587317,-49.1231969708075,-0.11287080138158814,0,0,0,-0.35652239724672913,-5.015540725437485,1.3472929517996213,0,-0.8232493619522252,-5.1000000000000005,-3.748608850304168,-5.103633239486886,-1.7339160000407676,-5.1000000000000005,-4.1000000000000005,-9.48151417614524,-15.108666680845003,-24.0221548335574,-17.26902334736363,-51.06862499971689,-15.740383326151015,41.53236707278728,0,-13.600097630863052,1.3229844945173117,40.30396995214089,-0.6905292763668293,0,-10.213625,43.18667810490508,-3.35726821985088,-9.127995819745745,-1.1051665276953544,26.722234646489206,0,0,-1.1218200429791487,35.29555203261838,-39.97024716371073,-6.518319020115939,-6.1000000000000005,27.134914149842686,0,0,-100.79333426031721,20.879897662279983,0,0,-1.1115875000000002,8.940793236209,0,0,-6.965442504874848,-5.1000000000000005,-2.5489340539925696,-7.706166452743263,-10.96648283272366,-4.974500619594316,-1.4237692107427784,-5.1000000000000005,-10.054889777738774,-5.1000000000000005,-0.0270843696494093,-5.112608212298991,-3.70234197736644,-9.693604770168022,-3.804373570908615,-5.018426269260145,-1.1115075447179787,-1.6421396005804008,-0.17447650944581242,0,-1.1110015084033331,-5.1000000000000005,-0.15087086917390666,0,-1.1111385303974628,0,0,0,-0.39107620824072653,0,0,0,-6.111515822430423,28.112115997770616,-38.58077832083923,-5.11792924210042,-11.211654351766912,-1.8986049237716411,0.90251245584768,-5.107249740820723,-6.375087289298883,-0.7418697352792836,1.28817192836416,0,-0.48718400779593246,-0.45512322298207625,-1.908894962815796,-4.821937080498127,-7.808647769621254,3.2283395214877664,0,0,-10.213625,-0.1830642289711314,-0.3171978308229811,0,-6.075093608006004,-0.5804078270267956,-2.6777037314647525,0,-1.0036710230317973,-0.5695474302463648,-2.7253598909858363,-4.726482008528529,-13.20790356379007,-7.0698592202641075,-3.3331735875472255,-9.71809656320109,-1.1053996932978116,-5.1012667820084445,-0.265319379388271,0,-0.9850489564303795,-5.102758041888461,0.42341783843861835,0,-1.1050061028375573,-5.09622503317274,-0.6749463440456289,0,-1.116030327972993,-4.699725212316642,0.5747822064282083,0,0,0,0,0,-10.213625,-5.102704518406002,0,0,-0.8107719926976851,-5.1000000000000005,0,0,-10.213625,39.22050245926572,0,0,-17.93156019526368,18.07732194388759,0,-4.997152314042438,-6.120947843427428,6.086694050630227,0,0,-1.118027263482522,1.6822212204343434,-3.5625777354167822,-4.975006565639256,-100.25439878928287,23.599836037612366,0,0,-6.095443652589582,0,0,-4.94233678028748,6.393893118291618,0,0,0,-102.1648412648085,-0.5065200489845826,-1.2692950568098569,-5.11631343740472,-6.121840328125,-5.1000000000000005,1.8685052513459266,0,0,0,0,0,-7.874325688149272,-4.854054265198457,0,0,-1.3525803499305564,0,0,0,-6.100126489889674,-5.1000000000000005,0.5639080574130588,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.38017641247461,31.619934731995166,0,0,-1.1145451971336087,-1.1757915810305137,-1.4547701843321765,-5.088779967690151,-0.43313045246078663,-0.5622823827579583,0,0,-6.104330548685564,-0.6962908829296627,1.3625355242361261,0,-1.0898226022241615,-0.11411263666360737,0.8606769298206338,0,-1.1959136115827238,-0.16983966754591184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1104127319736081,0,0,0,0,0,0,0,-0.8331888363113509,-4.954616615495166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33.992849026417446,34.84071101370443,49.18535615935035,-20.23073103990088,17.737752044801287,24.088666685216612,47.362139031672754,-22.832515471834984,30.509395390102252,16.798691969019444,45.567454206816656,-22.350717026003586,6.547841722733622,29.90250227453504,49.759509015265564,-24.424226450437295,33.57180988574647,22.235453162209726,45.924259058587594,-24.873079775413693,20.48775794600004,15.676087178787263,35.429156224148294,-18.44749950534635,13.044580275557909,27.465912051023192,12.03431589535612,-22.33206322946537,4.0303427575525195,32.82610207537621,3.9642897650705757,0,13.656047238055,-14.614512392799496,46.264823794428374,-23.673339670856326,19.614967426057788,-16.44173054338675,44.19305370149993,-15.804836962142947,17.62108109848901,-12.850207722976137,42.538575032604584,-18.08290347068012,10.299321512456245,-12.567538095824649,43.95591786053334,-12.250984590236914,16.236987608984734,-22.90556666228655,38.63289711771523,-21.102909175262653,9.173197233141348,-17.985335350629782,46.306583671446525,-21.589557424423734,8.949274513573682,-17.515440689936963,31.92558827956024,-24.45082264276007,2.6750609157591487,-13.833814839342793,43.905705300538585,0,24.7364698384071,37.531396718729525,4.972021093950416,-32.89401166272133,-10.380091838616295,5.666075767468238,-0.7607881806868093,-36.803814068701804,-31.463184161870764,6.876240973959982,7.80515781937636,-38.94639897898765,-5.22048018098535,2.4414437758753227,8.812308261113968,-42.05684027288454,-2.4206049735708772,0.9787943642364508,5.87600012432306,-32.582172809925765,-12.054921422517054,-1.5091418496841074,6.355750264065389,-36.83662330249879,-0.9349642475938706,-0.9077662405491873,4.656645356473254,-27.04843416143011,-4.040922194368735,-1.1615032700657526,1.6718008338314414,-11.196323745282266,-11.721618066651596,-16.79348634284739,6.497391722996401,-47.06314485985841,-3.55574146987974,-31.604243924155686,7.263621968498055,-34.15881914709734,1.6448244725522696,-12.201442118477416,6.539687077669224,-9.194433030775908,-5.3092747542223,-9.281552011799842,6.775487155994543,-9.208506618873736,-6.498422392281345,-14.821502257985578,3.4818242842079896,-20.12405766324769,-3.343804113482599,-47.539588226138605,1.6760145031020666,-4.521559800862972,-2.706340055841146,-13.734602659542126,4.161091536429057,-11.802326501183575,-0.09724459103569702,-5.101003107162756,5.987529761854175,0,20.315347790926246,20.873970746526773,28.332214007102635,-29.238112095111507,31.962847009981726,34.840655656895166,42.07979517223979,-32.15200613870938,-22.252455957730685,5.621265514371565,8.931826402121608,-30.580545613422544,34.145174478425666,3.6985718155579246,1.8988013134211186,-32.105495836623724,-11.308645181369108,28.93001387563182,7.578358282216643,-30.93495035778298,3.9970604880942098,2.4457926928840212,8.019863233398954,-9.526430825874355,4.328249481388263,2.1676409304007263,7.781473440231778,-20.17382884854602,1.7800541150161697,5.139326977851582,1.1380977228101194,-3.7678629651297832,14.853511213767774,-20.27705624658615,26.93215579891457,-27.630796108349763,-1.033578640647388,-9.854104684211386,37.00430282886226,-7.235769077765362,0.8013084520856025,-41.391549084440854,4.76233590476613,-21.23390383609838,-4.281713136525378,-19.430934616379226,8.711483434176307,-23.292257520563684,-15.223344719627578,-21.700634439150203,7.351357940799972,-20.411059718823537,-0.5678721634103281,-9.065103815052552,11.233813079765616,-12.537207346484506,1.9954655708959865,-13.776160807728726,9.763875504034747,-31.885296306492815,14.15455364789199,-9.46740336491169,4.117042684389473,-11.576611493094514,11.695231145619154,32.53973061281353,0.3003795794233729,-13.072354885382689,-20.247271142814107,-1.1072165887111205,5.528486690879115,-22.42296220555973,-0.025441301326410537,0.17694532429720336,3.409662017358742,-25.31478326940129,18.101286388979,3.677983366219415,-1.075950678503697,-16.077274977547194,-22.943334967745226,3.9607444013102713,1.4174240574771906,-25.47176401055371,22.62390365444754,6.604479479919366,1.727804499140153,-16.117578507376752,0.8122513436516798,1.6587696026550212,7.386023927166144,-17.802848904483515,-1.779683141317915,1.0808218264980767,-1.916768396683051,-7.686275423993948,-41.09819576715479,-37.92600916100057,4.328717978578508,-45.739716670696914,14.667968498960926,-23.836737091082078,-0.4402116126760227,-9.597829015326802,6.8396469511102715,-13.782263409057233,9.09918277921937,-8.834654665769241,-1.2172448781823304,-9.570669804774898,7.372867544173106,-5.0527972342146725,-1.455560080363086,-12.67377330825781,6.862744866846758,-9.570370372479594,-3.2783206955352986,-5.017104308615741,2.215192169451875,-9.617892809046555,-4.498348470756538,-5.1000000000000005,-0.9815488239670904,-5.100621565954841,2.4177412065146764,-9.742482185211667,2.204287078013804,0,-3.2776282303147397,10.472688123634859,40.49151784233022,-8.488449877511067,-8.009875439395445,42.288104894552106,0,0,-1.0958365395449325,-0.10605134734169673,19.059418318824303,-2.2238183947360572,-5.66606314769889,17.68732373518403,0,0,-1.1116009729316332,-0.1,35.07777892158364,0,-9.309310706484869,39.05183187669748,0,0,-2.9801341773911627,22.225430568539498,0,-1.6964131580404413,-0.7404401430143971,9.197142853155981,0,0,-1.0026061196697846,-5.1000000000000005,42.003343226947955,-2.341156491180961,-2.604525148951536,-3.002921634173113,44.76954258977568,-5.101039004581786,-10.213625,-5.1116343406296725,47.2561083552779,-5.112597064757137,-10.213625,-3.8916221439128567,8.513364561763488,0,-0.22125513330087224,-2.8372138607114716,25.790916348403826,0,-1.3180454584190224,-0.7213207913241,4.7745007586212,0,-7.8591805641168575,-5.101136071079399,14.173218309514745,0,-10.213625,-5.116926266611475,9.46103723800642,0,-1.1225265438209504,32.6461202834755,-0.2691965034066837,-4.699530828207231,-1.5582217387884039,-0.5780456436446477,0.8860001893508154,0,-1.1110856868773344,-0.16221384338398775,7.839957693888752,0,-1.0542113357012466,-0.2067222644556222,1.7135097393640533,0,-0.39685885366576246,5.577486786781522,0,-5.112041388741543,-10.213625,-0.36758468797837957,-0.0910450273628968,0,-9.15329870279144,3.1736582624007026,0,0,-0.7160660122000365,-0.06496856680733905,-0.25070500563248893,0,-10.213625,-4.757854545544219,3.211074539915334,0,-1.1104430806776158,-5.106887070369141,0.7852435132782015,0,-1.0075621589558679,-38.27428783887763,0.8532015707964666,0,-1.0793215929659759,-5.1000000000000005,0,0,-6.123103872740668,-4.789065634081665,0.8916677641293554,-5.014086828663373,-1.1231402367183696,-5.1000000000000005,0,0,-1.1056119640237292,-4.798501178998179,0,0,0,0,0,0,-4.965170424670005,30.46355616020048,0,0,5.275729753538865,34.479980466772695,0,-4.460036315752797,-0.15838540102992288,0.2558686762640948,6.64068653541541,-4.298775529457926,-1.014526769029318,1.9591046346878342,0,0,-6.2089225353717765,26.158280427272263,0,-5.065160152936275,-5.587541069891643,11.201128129070819,0,0,-6.001693237343046,5.2515147982024635,0,0,-6.1000000000000005,2.348215581253409,0,0,-1.1058816720550746,-4.895127585482005,20.040797064564476,0,-1.1966348443053298,-2.9479753179206587,23.75038156533475,0,0,0,0,0,0,0,0,0,-6.120190986955294,-5.101491877919021,1.565272253896055,0,-6.111603562501568,0,0,0,-10.213625,-4.152617547529125,0,0,0,0,0,0,-0.10648488860589325,-0.1,-3.279471096359448,0,-1.0670770682181716,-0.5405110072884726,1.7567779584121492,0,-55.80970265000508,1.8630075310719407,0,0,-6.1068625,-4.322380504272613,1.1949576801225799,0,4.9240962502052,0,0,0,-6.100774356632794,-0.5739841008188499,-0.02794820780208287,-5.049030293157677,-0.2534326587374739,0,1.1539170368955052,0,-1.3506988395995774,-0.10573920947821887,1.1620950080788506,0,-10.213625,-3.1715677807329685,0,0,-1.4119407589517055,0,0,0,-1.1107648209542207,-5.1000000000000005,2.460882040508963,0,0,0,0,0,-15.668674753074963,0,0,0,0,0,0,0,0,0,0,0,-1.2176508048517747,-10.21499485715546,0.10819279361143455,0,13.102628550853954,36.93256162305889,-5.1799960938346405,-29.530141606383598,9.585928290254545,45.46319267251369,-3.6767284093265977,-12.75048038686587,-0.5841207811973685,42.37915718973038,-2.0953994360133246,-9.7754302775555,-0.6177563824683506,42.91661161899139,0,0,-23.91504981264588,23.28734882136502,-18.838720531903206,-13.273308481556025,5.132396902557377,40.63951372129187,-7.332181814654676,0,5.414071568885262,36.811782881928636,-11.090888192980175,-6.6205344663934,-6.101110578879646,22.553162421863675,0,0,-22.188002889658186,-17.642441629433293,-30.441549829994944,-23.663744367025174,-10.200315918536171,-10.278802516590758,-7.647788390933569,-16.845992826611194,-13.410363109156304,-14.377134728012088,-12.803461238220002,-13.340771163894669,-1.7156054630351976,-7.873456126593048,-37.180336322649865,-12.930384786385767,-10.14408033145445,-11.37729533825984,-9.02479679384512,-9.428803419585048,-11.875115297923905,-10.530246942944935,-7.936543399087528,-9.604321443781629,-57.17299521138166,-20.579793215454426,-21.05861129685688,-22.866746713014912,-5.392608181815905,-8.710077426990622,-6.0585555484233975,-9.052290648287329,2.7940016019898266,37.67783688513893,-8.284817677231572,-11.278858204267738,-12.610684748758757,-9.820786699074848,-43.85766736302293,-25.65293098026937,-11.809529279019747,-4.551109163547319,-44.9764935700437,-20.31199090084347,-10.437704171009067,-4.635806973997222,-44.21512015489738,-14.714068192899061,-0.2905853913329737,7.7186793895047945,-4.107108334335617,-4.9281704750784066,-1.1080946621949193,-9.811374007511827,-42.08994974145011,-13.167625829559995,-6.83851883424273,-1.1022690478953714,-16.788768957082,-8.951057897636975,-6.796244834117572,-4.692261709532384,-7.848878333400286,-7.852871611881278,-58.82952046630294,-19.391517860734467,-22.388693285657933,-20.857674132733504,6.514698849267946,-51.378087239536804,-20.228153185121126,-17.43546279835731,-5.337184485119902,-7.759636488130298,-7.89717809474921,-48.556540706088015,-4.95099123495236,-5.121247622138861,-7.791113750000001,-9.18325964586106,-3.9824333853779588,-8.994084403682477,-14.308893478163005,-8.98614397866373,-4.618444372245697,-5.1000000000000005,-8.028863657609627,-49.76514723832768,-0.7867851948192873,-5.116258043169705,-4.0902554332933265,-4.372808473978533,0,0,0,0,21.013426359130886,37.1639271120855,-13.948094332502482,-19.8041690497569,0.7127784631141716,35.554962289492344,-0.7824656487591526,-4.6679949918415415,-4.669644909572351,11.467553707626836,-17.20970884291146,-28.674961307660283,-6.940667778938114,-6.024429837762655,-42.41864679861244,-15.854005950570107,0.8130888740836271,21.182360332729882,-34.99409111418079,-15.478219289445752,-2.6788721605924977,4.0212997381691125,-4.1970949918124045,-5.1000000000000005,21.477293540677167,6.946280246806648,-17.118442761792082,-50.43897691328696,-3.0519534278890066,1.0610901072388217,-4.127048317277784,-9.16582461553715,-20.257332581495945,-46.10536233002951,-17.70331788923712,-50.72305012545833,-10.162255791979613,-12.141846926846464,-9.336750178426648,-11.948661237978675,-10.583115741916696,-9.128915260780076,-11.182278631940047,-10.251312738657276,-4.654052404201377,-5.1000000000000005,-7.744591702211805,-6.819080486502869,-6.746034162078978,-7.231996719198882,-7.329482426750758,-8.266497720811849,-4.819277434685979,-4.887722768551032,-7.520988649621852,-6.781593975188169,-0.6098293001384064,-5.1029837324104115,0,0,-0.6638674532639256,-5.109371645040913,-4.305344367882161,0,-4.748223884498911,14.455686580666336,-4.101258840889239,-5.1000000000000005,-13.939051295590392,-8.960388641099597,-16.883213018013528,-17.516928735125354,12.307840734172299,-6.904249088823172,-14.327441162061293,-9.665309447071444,-4.912353971824481,-3.9538417495546523,-43.2223088959529,-5.063670446273967,-0.37280304396406305,12.629955875721622,-4.1000000000000005,-9.313856535671881,-0.29633051623366946,-1.0009749866007833,0,0,-0.38007834875952745,-0.07972289424855339,-4.1000000000000005,-4.896600223900218,-0.8141534500159768,-0.1,0,0,-5.1873863594393415,-46.10843811163356,-7.957666079371448,-9.660478647281074,-0.7182807168958774,-5.111743917726072,-4.343640084095953,0,-5.157375,-4.699796020726113,-4.109591910721804,-5.101564508653381,-0.019228763996099296,0,0,0,-9.57351094527732,-51.00283418734845,-11.340441551690995,-9.690882977228348,0,0,0,0,-5.855697215363875,-5.1000000000000005,0,0,-7.9793897887664045,-10.046568967313984,-11.12647574223384,-51.01456202187825,-5.222395006966955,32.954821800300806,0,0,-9.651924331295357,19.981114879666585,0,-5.080163999728344,-0.9573170518351054,6.990007814786223,-3.4555707532347464,-5.100692328720218,-5.304071314089196,4.440358061190746,0,0,-0.06533520105474011,11.77475124998544,0,-4.991748195910377,-1.050655673181336,6.475363957236508,0,-4.8960567351592275,9.77320919174594,0,0,0,0,0,0,0,-3.769760159560006,-3.7989208785677158,-3.4432612552217394,-5.106394606546539,-2.09966378027859,-7.996875516225761,-2.005612766351598,-5.102100337417625,-16.38031331893228,-4.750540959314674,-1.634372865216763,0,-1.4685291826366595,0,0,0,-1.8467380036127066,0,0,0,-0.7487385450102592,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-1.1104510756578592,34.79086081313685,0,0,-8.277358422465287,-1.7931234178459992,-4.2924925465686865,-4.856337909413515,-0.9101185729426963,-0.1,0,0,-1.1,0,0,0,-0.7574607685670256,0.17925532742547645,0,0,0.19881595201395613,0,0,0,-11.202075062279468,-4.099305603518567,-4.138073032271503,-5.030007760273232,-0.2574616694895974,-0.11102550076671586,-4.190382987898132,-4.823808430295569,-11.576028954823617,-5.1000000000000005,-4.396488970749019,-8.239761159986683,-1.2597673834366114,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-14.470238171977517,0,0,0,0,0,0,0,0,0,0,0,-0.9826808413964021,18.602981590779144,0,0,-1.5567292982999004,4.956133191213799,0,-4.966805867678889,-4.217048803599749,-0.18286067252184976,-3.932553261490014,-4.8962401747226725,0,0,0,0,-8.281347600445837,2.898122929838242,0,0,0,0,0,0,-1.5630775962052121,1.2799437329836776,0,0,0,0,0,0,-1.9650625813323295,-4.744346938162682,0,0,-0.19294759148220955,0,0,0,-10.213625,-5.106976417080947,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.558184593460062,0,0,0,0,0,0,0,-1.1280080453952646,1.4586523035434893,0,0,0,0,0,0,2.986690827400427,0,0,0,0,0,0,0,0,0,0,0,-1.5808256265784575,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16.046862777812873,39.02806451308703,51.20607126840755,33.06016191931178,33.867697450434974,34.76400773979262,51.947204436545235,33.40099166796757,23.45670991088451,46.67546426637272,31.46788226919227,27.75060391028258,20.09024542343468,29.74739845186784,56.74753524798114,27.743106978140222,11.579743332874934,29.99096859224655,24.196143344247858,31.514701443519833,23.115717904986518,24.28517553690095,22.685578422041925,25.28606403647538,15.423287765142142,28.381980865897713,43.68124436721416,25.338751494654797,24.246810586931268,28.485954971238783,42.89960288481006,27.926295738410047,27.52862707748074,-11.62467895788535,58.01940598841859,26.20854868367048,20.990447070962453,-11.84812696555378,55.24945966438915,32.23428338121818,15.993140457677331,-12.41752452989876,52.24602144090827,32.7761022477473,11.40270076801356,-11.001225941883026,39.086929749166785,38.320415044509495,12.473712178033173,-18.67345712061315,48.95746252261611,23.77218984035902,20.727084000822497,-12.534182312648646,44.84132470293804,35.68656591297814,12.397011871427972,-25.81516036354405,43.564123830330665,25.809144209428347,-3.2739865788955185,-10.603077299817066,48.016430583863944,6.370356943221108,19.613143259765323,35.20051013677439,49.186587194755546,20.837428228865623,7.449102944288841,27.77566438130768,50.89927191351201,22.78252005721287,14.588281250921995,24.48465315590979,53.775978004990314,16.532300638562727,0.2136923532329793,27.12518611625279,52.98310582359247,23.184562406716164,1.4474244607887954,27.477396168547916,46.79145240201115,23.6949827445072,17.962623873994012,24.525944026867656,56.57744004454424,27.927552366121283,5.269773399991131,13.403365779631821,51.38990201618767,38.773970078835866,7.804928990271951,18.751628809933848,53.783812848420396,14.729228624501447,-1.409111730110575,-14.345976510189955,49.845921427697334,25.841294097073188,15.005601578825699,-14.447155439629922,48.66601264836312,34.84418900149872,11.832725726701414,-11.122702070600793,52.16520122261953,28.27993363195001,0.18310045269172193,-10.63093696078143,52.64016617764932,10.366505931184914,0.2690753651066169,-31.93671387295187,51.309972505538575,9.855972105204085,0.26365323484314196,-15.75758638138845,51.234123876908356,8.203872402557025,-1.6020392540050579,-12.289846672975578,54.836904714826744,10.06448280755163,3.437268423387412,-9.638746538418651,43.61428466913042,0,18.67110774560345,28.57906110513249,44.893373736609945,31.37160638944215,21.25550118393177,25.912691815272243,22.09520674375439,17.564071782335333,-20.63970841565836,23.239112736436077,18.01556544551127,24.226187328253985,18.488568540845275,17.930945661488963,30.40598526203878,14.121131410440164,21.24356432762473,26.681047011700688,20.521223717113024,16.717472119913513,4.568607195266123,17.511904092963793,45.35579560163263,16.35201756942933,10.636273269068898,20.846326792933123,55.93016161106429,18.44837243779092,4.851194995393889,36.58587862636495,36.54962111750379,8.563424134220533,-16.812303847815762,-12.357268173734536,47.76893971346723,15.687884111251032,-18.063025770848448,-14.980827339133562,50.38792405432999,16.9453570997742,-0.2601953583488217,-27.24608589326679,54.62886327123123,22.67257572751067,0.24286956814323002,-12.576274940055482,50.924183217956596,8.086856499504755,17.557315441767525,-28.496820457866274,51.07211497618992,17.670884890413294,7.978226190777164,-11.530444533806316,50.88605608032984,9.849690505546974,7.332207469664793,-20.869043841266564,54.15755911479398,11.988094594233091,0.5597102384067458,-14.958461394204708,53.521055430591545,4.840803360028406,18.179926035399284,21.979927866313854,9.413027651410037,13.192983636133075,5.9066241304654845,15.38285605888992,35.4217041011812,11.803054465854412,6.991790010795395,11.56991710514182,50.15954144328907,15.70152593226118,26.824999501542408,9.039468538573317,43.06422533377681,12.84635691414062,9.74174772783285,10.245372726798236,40.27822065950866,8.458911924303672,-4.531264947506296,9.877085443054488,49.55133637765936,18.57892540890285,-22.26078487818839,14.095852978500867,45.67656220854177,10.391315413556113,-0.9585873099716342,7.005278608118461,45.96454809213636,1.502795250280973,4.375963291324524,-20.647252711707733,49.456957003539685,12.29749787694125,1.6868765646804569,-9.597703060012847,56.40764537857505,11.03916240271175,5.446870975344151,-4.793854233013189,47.076700342996276,4.2082831459774965,-5.8445496405389195,-5.091662610671884,45.847506633437526,0,0.38492800787499615,-15.299061511694577,49.49279735714237,8.217113282480598,3.3592960660466766,-5.111596546285367,49.537140545499945,-0.03505103495323536,-1.85181242796763,-5.120264331527565,44.970777137765225,3.130296665661286,-4.422477811665289,-9.769584339077513,39.79471013077458,2.1867075852279525,15.718113314160654,29.54912447886101,52.7080154770624,13.570796984186686,-0.5563360064959699,42.90094398979382,15.890897401394573,-2.0270129614247536,-6.168997090905977,4.137927384582986,52.16648052009512,-0.649089430699922,-1.1052662753792775,43.202413576675816,0,2.746051418246486,-12.31273090932627,-0.0293878920418333,49.915056775908646,1.234329813053952,-0.6718935465036004,41.4638867490249,8.232097690067837,3.8888518870992503,-1.111512773720954,36.79472309857624,1.2838274016514977,0,-1.1006808939198665,41.733750572726755,0,0,-6.938271848312253,-5.101272059988471,48.86449571135032,2.0451378551019648,-0.9938547772191344,-8.113396526662083,54.56692078230507,-0.7214798360051266,-1.027655717642343,-5.1012375,46.134435757519,0,-1.0497922969279585,-4.514449250754655,30.91138574452018,0,-17.567164534324622,-4.6762608494846445,44.38325306512354,5.076248313769299,-8.894981560366453,-5.1000000000000005,49.253850731552525,3.449134964527378,-1.2016873665671572,-6.969060751004244,37.17293601768245,0,-1.1063657243750304,-13.8224706077725,23.659895506028043,-0.5410652393608426,3.8107388562447815,3.781098105304255,46.759358443239535,3.167604144723094,-6.1000000000000005,-2.1897295154202174,52.352624229816,-0.966287804734294,-0.9893866718768086,-0.10630146159512228,53.459073847395736,2.378184828104849,-0.8727927017983863,-0.1,48.957416432419734,0,-6.104883265336024,-0.1,55.29138483752356,-10.058142192250145,-1.1172327785556413,-3.5133743065855123,52.647393963258246,0,-11.636990482257485,-0.1,50.3620165985194,0,-0.11965450380481002,-0.11759968025519173,11.750979818830306,0,-1.1124584815259917,-12.001289672182615,52.31689379714855,1.0504735231667448,-1.1058022765415771,-5.101243399569028,45.6808949026062,0,-6.1000000000000005,-5.177543450843594,28.661048102687626,0,-10.213625,-5.117248490558588,14.418089731791904,0,-1.1047490946069247,-5.1000000000000005,29.79599558928725,0,-10.213625,-5.1000000000000005,10.62597258826991,0,-6.036429639711769,-5.1000000000000005,17.690466778560314,0,-1.2739711273933927,0,0,0,25.724398678418137,10.497060275129751,52.7955778831741,3.704154734621393,-0.5004555022864461,39.75609681900739,0,0.14234170107783672,-2.364358563899737,0,4.537400949265229,5.104965672323259,-9.54628531494443,14.990156441113438,1.2166579201901737,0,-0.7534042266479098,21.58340957732621,1.4585478164865497,0,-7.075898176029756,25.201714800854347,0,0,-4.42028183628577,20.018587257501736,0,0,5.065565076680988,0,0,0,-11.619012701663456,-6.247070438071313,51.85007675718786,3.5892812290480047,-10.213625,-5.101147094297454,54.388413503050906,0,-1.1148336768329181,-9.690000000000001,35.37176483818418,0,0,0,0,0,-1.1188704000962288,-5.1000000000000005,27.49658718572889,0,-0.3029412056253222,-5.106346945652213,22.178916091608684,0,-1.4257598060262477,-5.1000000000000005,21.67448414432474,0,0,0,0,0,-1.0563515102312049,35.14018866529666,0,-0.10677381993975926,-0.6551118688019946,-0.11247337418814812,45.83745278542891,2.124483392258866,-7.918836310204715,-0.11863203927630701,54.06687701197153,0,1.4381842073145523,0,0,0,-4.774840659096137,7.77134823669401,0,0,-1.309305089631013,-0.9724721629300837,15.887555281175125,0,-10.213625,-0.2284602472090888,11.631803926700961,0,-1.1063451194500515,0,0,-0.004931003503179987,-0.7520635661513031,-5.13044720898746,21.401401717597544,0,-0.8707030490252021,-5.20660230120551,10.403493593224976,0,-10.213625,-5.03022002841037,5.249572664443734,0,0,0,0,0,-5.235708970997372,-4.9363785349769636,7.545949567840005,0,0.7488331342956585,0,0,0,0,0,0,0,-1.0602309427093228,-10.214817759810549,8.279118135407053,0,19.630305094743314,40.198557892502194,-1.8991060023148323,30.614729511958693,13.939753874822214,42.62072472972011,2.216885824827078,24.71433643449167,16.77404890246024,33.95188551062874,-10.338320485606259,16.850577071245105,31.176232122603963,44.09048412611993,-7.275241841547643,16.861795285800323,5.4680995189288755,43.73699598657297,-11.479184897972504,22.048746160388724,9.149333654137827,42.773821126151525,-9.019145956630354,14.819691350463215,6.626535017801356,39.97076866575583,-18.468774651166534,14.302655100511938,-2.691390813629092,32.20981719681015,-9.205284315500148,2.4500465924080017,-3.5335630543047154,-12.134587744844444,-8.341938734997257,29.478447985853958,-17.76953446799319,-12.5774105269928,-1.574824184299128,-10.721532611203227,-18.567056859452485,-20.445697113309173,-3.762563758833962,-10.39413155171733,-11.60826576288379,-13.359978158243187,-16.158410480700013,2.84318198177506,-4.357741188924664,-19.58062405110039,-20.952487612133815,-1.0583683002393243,-10.340412980622029,-17.059958827709696,-23.582506212266992,-8.214158411553736,-12.789855488976826,-11.330096870502562,-14.34638384467498,0.6409255972471963,-8.37880924935121,-41.43558677521928,-9.798834686139955,-0.8012774517110985,7.067899731127773,38.732072470228324,-14.982662437264137,-1.1100527876511426,-53.055585653795525,-2.882178728986156,-7.073564584239541,7.810950386453623,-51.08832516345846,6.5094776929783436,-31.76040020516818,-7.018881160592671,-27.407820231426946,-7.958550347832883,-22.863367197381184,-4.993045980677948,12.631854918041721,27.02079552220295,-25.863024105912203,-2.6857415049324325,-44.730882728830785,-7.177781778918347,-20.68210962273421,27.570794581571462,-7.340939801832639,-5.999370278464265,-18.01898889478355,4.902321197448952,-5.105630562086216,-5.008583528425645,-13.217447361649302,-6.59907363150514,-52.901130634700046,-13.717307509476074,-9.873045952203297,-0.9930840825320876,-10.834988552504276,-22.971085702769486,-19.94061773976718,-7.210830519672444,-16.01408327814928,-16.874183261416455,-13.72481636137438,1.7007474297625322,-10.628588136833063,-50.64996259166055,-3.6866597633771505,-7.842010609964795,-8.827325368744006,-17.92213724263787,-12.043270374039505,-2.9328626041822448,-5.922754055906742,-29.76565397600683,-8.114866876908312,2.4077150269279866,-10.81046777966804,-49.565293277083704,-41.05758315490195,-1.7432566972727432,-5.690627508160065,-9.690282526391695,-7.40172143345664,-5.230878795433513,-24.03878263310112,34.413762393782484,-12.282612716868625,14.676393256626591,17.162234092882812,33.242039573182396,-7.437220799652313,7.437803476233128,-5.766104184965118,5.4071425650347305,-11.650486629329041,-0.6019753251204635,-6.985870525233199,2.536005708125184,-16.86624355662788,2.897402592677127,25.833323641839584,5.2178503926956745,1.3731518476984192,2.679645916494081,6.142544019559512,18.142722814885236,-12.423259308418332,3.8232414008588114,-0.20052112762911278,4.463900978893105,-37.45284617222625,9.549570973541847,4.965190337035544,-2.3346364636489074,-14.271742756775474,3.848150324883513,-19.306730748211947,-19.79597628705308,-13.095997491038592,9.900159227355116,-11.581321050717834,-13.714911587229334,-9.300117401428306,-11.207465521315337,-10.311677108444341,-28.55092502996412,-15.11429224732542,-7.419927458346088,-20.050579797198235,-13.618444843391972,-16.793398669971474,0.6456055698722589,-14.293110820592341,-15.87020738942287,-6.572551037852399,-11.078868443868025,-4.396720429939256,-4.816474673021823,-3.1445984410972176,0.10540225456755636,-1.2954905060392754,-12.466607598722469,-4.1000000000000005,-3.127884405004329,-5.508605622232987,-4.958420745415637,-4.101495088126007,-5.186108521868082,-0.7405150417438842,26.341959525319616,-14.838272153676783,4.204003153157043,-18.632834783105338,-6.586135568080913,-15.647981691703762,30.46429838629374,-7.631538787464762,-4.726481978237926,-26.558141303449148,-3.5242028558679013,-5.190061680661018,-3.9654378172408067,-4.012773708235956,2.6498580305186663,-30.797991195022412,25.39865654089796,-21.89345469546744,2.16710013741446,-12.626622829634737,-7.3151115074164,-16.402078158877178,5.363640293447079,-28.49666436763917,-6.26992500081605,-7.790000000000001,0.8775112943735321,-10.612269386914782,-3.826165077518502,-4.1000000000000005,5.338725725930379,-8.44583915361551,-22.94873929958389,-11.10172286200611,-4.549965006058921,-8.13149043998149,-9.691248804923376,-14.70257526675874,1.098229212039135,-10.320979849367486,-13.832951906803292,-9.849266471829281,-6.485150260290073,-6.619903292009704,-5.1000000000000005,-4.066625483477503,1.6428693993495702,-1.74210567376957,-7.4519417777938965,-3.4506131881271913,7.236187146938009,-3.5744833862761336,-9.690000000000001,-13.280843564587244,-5.9687534014290184,-1.860565702369985,-4.468759686707844,-6.707216471481134,-2.0754158760502124,-11.322687025427822,-5.1578383793104265,-41.23365691889576,-2.1607639467507957,-12.676131780808143,41.831804025955535,-3.160643088269801,2.7652579606354406,-0.9197831768143419,45.521239783960404,0,0,-2.856257849129852,41.257620529884264,-1.875350683868911,3.1663774923398615,-6.1000000000000005,46.59828585099042,0,0,-1.1113519866706054,33.73410066050506,-3.27145084883081,2.44898377876088,-42.794447196963304,14.279890451955275,0,1.194940966038847,-6.111602828125001,13.204724835591904,-4.10687036155983,-1.6342454684815235,1.3052508891201555,0,0,0,-21.890417688324803,-8.900880975269702,-0.8687113581857968,-10.728575636753618,-11.253359353416977,-51.069947803764734,-3.6786047738924434,-1.9254424034261297,-7.445933427703197,-4.505678321389733,-5.498308142179874,-1.8089149559644602,-1.1110010582547722,-0.6335769918569945,-0.8104721095683666,-0.7624259407653653,-2.7935983100079715,-5.1000000000000005,-3.8640836312380706,13.483093967262985,-10.213625,-3.5428449201769383,-3.88969188633887,23.89126395207225,-2.0007575436016234,-6.740303029280312,-4.1000000000000005,-2.6564573408892738,1.0865060268257427,0,0,0,0.0735247448735803,37.54708023947735,0,3.0346531302101845,-8.052527661197646,-1.88751995367525,-3.6568470820062267,-1.647410146709046,-0.018724921075564005,14.406166787161244,0,0,-0.957224405743726,-12.69604337995796,-2.6970636102447316,-1.6042167904833962,-0.7415624591799088,7.278220161415025,-4.10124291950785,0.8643826086531581,-5.64337210250549,-0.11145840529863933,-3.1097262055685047,13.658388283125067,0.14758584106594141,-1.2746532763504606,-4.1000000000000005,-1.945790090473198,-1.111201357164153,-0.15162095373319134,-2.8049997379969116,2.7409148576092384,-11.543283085001065,-5.1068625,-4.106989013871323,-0.31853498789025525,-1.1115954139542124,-5.204241215322164,0.2318250211985216,0,-10.213625,-5.1000000000000005,-4.107449122239908,0.7534382446422427,-1.0994286177264716,0,0,0,-1.0634199936730808,-9.390113467327637,-2.272280362552869,0,-10.213625,-51.16670409320961,0,0,-1.1125397040916771,-51.01237499994179,-3.04147705998409,0,0,0,0,0,-1.1551564345780971,34.923346070161266,-0.8856992027223882,-0.5766064702272168,-10.486256103279064,20.068127125707374,0,0,-6.071095881497515,7.5141701632386875,-4.10687021500749,-0.6030289792272943,-1.0778155879755984,-0.19625079496992184,-1.5014565524298307,-0.15065185586863136,-2.0457912644040577,15.025913173719864,0,0,-9.315722886204032,0.26420487915854435,0,0,8.348719115159625,0,0,0,-0.029634592019436214,-0.0035958632910446544,0,0,-6.707712263806791,-9.693022704875023,-4.1000000000000005,-1.5223841927804376,-0.19166067139857168,-5.1000000000000005,-0.40451834483896865,0,-6.101178597498889,-4.048420487379756,-0.6998698945208717,-0.6621962620883289,-0.7322126326435751,0,0,0,-1.1143773815326325,-5.106768521204712,-4.002619980181263,2.963448073846101,0,0,0,0,0.3276523007003627,0,0,0,-1.4778720591258256,0,0,0,-1.0536199079560795,35.671721322422215,0,0,-0.12538267905156092,-0.27723400630967004,-3.319515260828611,-6.5170135528579785,-0.2552000251364426,-0.5602712908955864,-4.1000000000000005,-0.32063145743888244,-0.40759021913829063,0,0,0,2.711860476647836,0,0,0,-4.749921771767065,-0.6135101505190598,0,0,-0.3348281455553903,0,0,0,0,0,0,0,-0.9712117604675786,-5.100743093789377,-0.18705462513912963,-0.7944676845039,-0.6962331008980427,-5.1000000000000005,-4.106699929547077,0,-1.1048328340426905,0,0,-0.10675059313106908,0,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,-1.123537234967968,-5.1000000000000005,0,0,-1.0465348510039572,0,0,0,24.362283853638523,33.47893875990009,45.650949917546704,22.496038938351646,-21.048895605197558,15.32769826352081,22.66145267742488,15.31540831179065,24.548424182630725,32.30749661185271,47.00709340169831,28.75347101234924,9.572029364362615,19.576536107550588,49.41285095865383,20.98536416182203,-5.236581872270408,32.53258451559098,11.708780765590458,21.31843894130018,6.152657984607635,16.816334990010663,46.987842967922006,14.338281906311266,16.185220107009147,35.40321874360691,8.13610765997441,18.63519624152506,6.221023905378308,8.590721434823088,35.95965767880316,6.685647274102943,17.00317649774117,-13.95155618571803,45.3256045842165,31.603135251720794,-0.6201182222920267,-16.042857305640812,49.00856266782085,18.20044396789705,4.190792618290917,-11.033972748788482,41.54962761025585,14.348185602153777,9.618857601099036,-6.115307329227174,43.4020085144875,13.263754732781354,-16.95620851954499,-16.83784280633839,43.92053118221385,24.84226307594466,-2.225140392885958,-13.475111721900099,43.370554830050395,8.016068288360184,7.923615595660388,-11.123149389523121,37.563053175559105,27.115523339089563,0.5377265443246397,-5.1000000000000005,38.59995223974324,0,15.200841817077723,37.738160815905516,5.645545422321202,10.976549233548473,4.038477745895701,-0.9043099074099468,5.507187427995529,0.0878548685046853,-17.722438636193846,2.9439439011863593,4.153415953105165,3.795127516528476,-25.529112886438718,-3.1797726026268736,2.1499762289257185,-2.1583692924147337,-18.591812410345018,22.148849646440585,1.9228362196179534,5.144095164824083,-12.237729755075966,-0.5670365208948849,2.0285361463996394,-1.3643948506587553,-7.8103716518073405,1.5632542310370416,5.194510419557158,-1.1491830486640326,-3.8304006151179806,-0.7249500985710248,-11.958673236944522,-5.031895290738773,-26.28167156531497,-15.739978377746262,3.258688859585218,-2.518061629621728,10.03956143645738,-31.63081275272447,1.985389931257237,1.703858008857688,-4.3346327969228176,-24.86174695197291,4.139828355952761,0.1848333804910609,-4.655772484342214,-9.016837866073383,3.213046846511514,1.8690517443763688,1.1100480217864712,-13.849798803517565,4.141869759694665,1.151774139556112,-5.918855694065538,-9.00269322822399,-0.05335987474613513,-2.385408657203962,18.608052271259204,-47.820466529594796,1.2390660414894086,23.69920758796858,-6.38612460126408,-9.697400619831754,3.909865206504973,-0.06731713473523764,-2.3104350276239027,34.89327305240336,17.143269755524816,14.127957023346767,9.111678370573282,39.446019231420266,13.710195009437422,11.054891576023046,25.42611934995582,9.29913254605106,8.617177815156282,7.396073055553642,-13.514669968244881,-0.2599893123882615,2.7450354991581216,-0.10423036126706654,-4.859083377505288,14.571856464677953,5.873315176911726,5.789634668741088,-5.825663534435783,5.06905623502635,3.8061451196986695,27.98559186534044,-6.118604193812779,2.0831032771902507,5.270913774485789,1.0408089733196837,-6.548354236312104,-0.7577787219166203,2.5901178255438504,1.4688527965629934,-6.090278830198534,-30.210042702484344,38.21710937912189,6.062318299299538,1.8134896136443555,0,42.923004719331324,4.162781789940788,-35.29744646556756,-19.301183609696757,6.921914291254334,-0.12387570265622183,9.234759014124284,-26.54165470673156,1.9444564419339019,5.719108522722836,8.883308577562612,-25.67692169516487,8.93090605447641,8.789557740673533,5.064318098721997,-15.436817083102454,7.832025075237403,5.500040183912669,-0.2869015935876673,-18.85582851505293,4.570534237852831,-0.15589541675090682,-0.8976657223683744,-9.691020767796072,3.1227654783324397,1.7415278795712756,11.243984742165965,35.63630273996152,2.870918080603986,6.88855137560705,-3.8488163951773826,0.6682030832372043,6.193702112053422,2.0150284216726044,-6.126172725891651,6.543317850569638,0.7471520549793744,1.346085100527279,-25.95677915450761,1.5620320271456916,8.08015862920753,4.671774480488706,-4.315108272838966,8.237242370243527,1.7411421487747138,1.254085566448821,1.4986799148601913,0.706678058964695,0.7683159138926156,-0.8358560927224229,-34.891771398673654,0.6620258073525036,-0.4206011986485458,0.5943068478455282,-5.157375,-0.18530834979955468,5.079619208246487,2.9378154010841033,-3.03263200786772,-22.97151277518536,-0.6286087393927455,-2.6034790574610067,-9.892760942783767,-9.563486414610027,3.525316166974549,-0.5389627618860797,-3.2530884563518576,-9.694763247844433,9.435625317633148,-1.6929759579059238,-6.1000000000000005,-9.696724116784404,-3.9390718232202513,-3.7803571797763458,16.545009438830697,-20.718523103841264,0.3285251978558076,0,-0.0018460737543939843,-49.29551254143889,5.666050188862051,0,2.905276789287825,-9.696146604400282,7.015367028016752,0,6.497520557757722,-51.83289929480493,-0.1823670726658766,-0.7607912148205652,4.554855422176122,13.01010162469756,43.199931018602385,3.130930544729475,-1.0937547960839091,8.968988513926632,45.49231995024687,-0.2444420175566028,-0.061771078788474654,42.68335729562103,4.059679447663985,0,-60.519584400849595,30.239018147425288,0,0,-6.1000000000000005,33.11784120117985,0,2.270460256788078,-8.65709191501745,8.124395843540253,0,-1.0609906801429947,-10.213625,21.520938961899795,0,0,-0.8986948372966307,8.851226313489317,0,0,-1.1010552096024082,-6.563455725871359,41.683932041233135,0,-1.3225677592359115,-4.749168297452897,48.76054456032463,-1.1695158852413292,-5.162002559288328,-5.215688700210236,46.804453729226175,0,-0.8896333705239041,-5.1000000000000005,13.851167359771846,0,-1.135046073816287,-4.660913764723977,21.683165503096774,0.27753905648100696,-0.6128612261735493,0,6.84458930885739,-0.10667472407196055,-0.8008582454355937,-4.897970631095861,3.930051572397547,0,0.5566562706882874,0,0,0,-6.064779436790637,-0.1,3.1733136522955063,0,-0.8986744857943455,-1.8179981043816418,5.517654497439412,0,-10.213625,-0.890784056489002,4.100250549501425,0,-5.333067725369251,-0.3179959539625421,-0.2501829290607708,4.7219521344678554,-6.138173039373598,12.442489396509007,0,0,-1.1,-0.18557935454427632,2.744406626339292,0,-0.03583229157030434,-0.9836212986311097,-0.5444048536093313,-1.1563175448079177,-10.213625,-0.10635344305778274,-0.013347509550547622,-0.7566925353898993,-1.1105551695355416,-5.1000000000000005,1.4559981958391934,-1.0683531496432668,-4.403036431822639,-5.1000000000000005,5.407733842236696,0,-10.213625,-4.690080032531972,4.751584418051554,0,0,0,0,0,-10.213625,-5.1000000000000005,0.6121155190871403,0,0,0,0,0,-1.1057128504382474,-5.1000000000000005,0.7468681487806277,0,0,0,0,0,4.609704328842679,3.6251572890905024,39.85407985572028,0,-0.570931997373658,20.45268310877654,0,0,-2.843047152108065,-0.9999864232091923,4.914577109691299,0,-6.107112249706077,-0.1,2.50152666168152,0,-2.5244849902907567,25.692204204818292,0,0,-1.732824195468995,7.284572354479877,0,0,-6.939836076845149,5.886307661932791,0,0,-10.213625,-0.010603250870508275,1.1782372744169922,0,-0.703471642146644,-4.896095371569253,22.894199574664732,-0.30809587850966463,-1.0092599926016308,-9.69016665768235,19.126751159877344,0,-1.0832962564840476,-4.24949974583477,0.10552457320021916,0,0,0,0,0,-4.495141110852747,-4.867891511020091,3.7534637036302185,0,-10.213625,0,3.042494716304441,0,-1.0739236247588404,-5.1000000000000005,-0.368285246856376,0,0,0,0,0,-10.213625,-0.0916025015716968,4.956183772094735,-0.4200229361816435,-5.957179204747475,-0.5454306279803736,2.004547665451057,0,-0.8520460562767953,-0.26167412188391354,-0.6808025890203535,0,0,0,3.8813716749950613,0,-0.8209349770657909,7.427707763931223,0,0,-5.203170867373375,-0.1,0,-0.5055114916903826,-0.4151962428486899,-0.15008408085725078,0,0,0,0,0,0,-8.396928739912635,-5.115410064392467,3.106916993160815,0,-0.5602418225526858,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-5.913932908628342,0,0,0,-1.1,-5.1000000000000005,0,0,0,0,0,0,-0.9692746250893891,0,0,0,14.902791409068236,26.438505149290968,-10.463613707997512,19.005413045832974,16.21084048822113,43.406672905173096,-15.619382254274539,10.348153778702496,-0.8956515287121314,45.66774156354502,-35.29046940426853,12.977660491449978,5.013981379533023,43.46742758528683,-4.1000000000000005,3.955266907614363,-24.74273721891845,30.122042177079617,-16.276209287137853,10.913406618637685,-37.886625457060916,19.62143193367762,-4.084122796421859,1.60673340173639,7.110407859872007,36.73030058428749,-13.633914474038408,4.8384543382277485,-0.2844982693489998,36.32245503872279,0,19.996537580261823,-15.932783689893427,-15.052737945495531,-14.197380075532394,-0.4370513076710414,-10.531120675353401,-13.893181920963823,-23.528175832115267,3.610395325502062,-5.732335043942745,-12.057199554661544,-31.738595444958253,-9.090336161538008,-10.295597635549234,-10.430408718797555,-13.287017099118872,4.994389958189206,-50.636496237630254,-24.98608592178062,-10.415701422976941,-4.777702364093043,18.289289141905616,-14.235014080372563,-5.1537641197486606,28.24170210942304,-11.872752397295098,-9.461832444612723,-10.957017637686668,-9.635221452243217,-0.6590262134707765,-5.1000000000000005,-4.101243007649678,3.032726495826423,-0.9309231830675948,37.86774234809923,-19.75126559836183,5.171490748501925,-14.186888931167388,-8.56638660175521,-42.69017694540061,-7.586177726908949,-32.39920761563655,4.195816482785233,-29.798452837301408,-8.59111341088741,-9.574069119435464,-8.805756894871859,-21.51465774029977,-7.76764004939075,-1.3130269804182613,21.99298003140995,-11.113122202459667,-5.814359877409465,-20.31793130083178,-5.188537830771724,-13.708764941007589,-7.708148688647299,-3.2919826478040957,-4.467297773831766,-11.111,10.195388965644732,-1.7911889569808461,-6.57840264370862,-11.214316138541651,-6.541973805844243,-9.124276949057633,-33.56409120569454,-19.6867018804947,-1.7550500836230163,-10.438158047168484,-9.520828764102117,-7.791250000817492,-5.043094069731466,-3.411624999985788,-6.8292680831683255,-14.165891113663074,-7.321946974314674,-4.001794169195193,-5.1000000000000005,-11.14469135979938,-5.525494575605624,-9.02359205944591,-13.510715263936756,-14.22175619915268,29.543083616591293,-12.263485022886982,-50.88636433443727,-11.319948471605086,1.3465225064290485,-0.09529242356249396,-4.692824121943943,0,0,-0.6893222865802315,-5.100939356274082,-4.1013424469408,0,4.164428572551362,26.16149977763193,-24.67710326000292,5.937372863018698,-0.4333287831731867,37.72176436998222,-15.076784312294873,7.144314583937763,0.5152919752463578,1.2272015632791378,-26.14545937352704,5.743250838139627,6.541208392073648,-3.763677429992533,-22.78578050248979,-5.49127565772117,-0.17597395099266855,23.48095848659525,-27.902459804704442,3.7915765774337347,-2.866719354474415,7.496382045849593,-14.121771719831246,-2.3251831167353956,-3.662338000464884,-0.5480679563862563,-42.10033557397371,-3.017890732301505,20.99970439810597,0.3523728906883079,-4.101238928285002,0.8748728579171248,-18.33047809742316,-11.736083374201563,-15.539555422286178,1.9746080083451545,-6.679067446598515,-33.69091282937678,-6.081871726727737,-0.6728856005733574,-13.495283471263608,-12.560757906877495,-7.796309428815354,0.055212042549284135,-0.4553033874322787,-5.1000000000000005,-4.168751218863579,1.6254051877049784,-7.981671649942799,-6.128540409580137,-14.013724987669981,-3.9598012304239703,-0.9986573807259767,-9.500198433324252,-10.89248010854928,6.971087102693452,-6.1000000000000005,-9.690000000000001,-42.34112310757017,-0.6050254620125483,0,0,0,0,-6.6484723404762045,34.27531374778931,-4.1000000000000005,0.3301107790627429,-16.42016287258508,-5.9904071909223,-39.713884731458386,9.687209098650799,-51.94411159655961,1.1949885546248145,-11.246592992798053,-0.7891118182977483,-0.0018231010052373597,-0.1454751577129611,-7.798100880733866,7.993574240098672,1.4366206008657514,14.199657097350778,-7.744453320767499,-0.1,-2.3150661115516926,-1.7288666610382957,-11.126229053379422,3.4944524875105865,-0.3161350364992709,2.118972645690702,-4.1000000000000005,-0.2528955031342322,0.016317579814557615,0,0,0.6514027549752794,-3.02554161995052,-5.003792085605907,-7.796175207513184,5.1780240110869284,-5.591776736850364,-13.837175469914985,-7.7976217693056435,-0.13008351876035618,-7.4631169943240385,-5.1000000000000005,-4.1000000000000005,-0.27698825215591305,-5.218441482583774,-5.130001475986559,-7.892678010880742,12.049679709545483,-0.6437645829202012,-4.683120808292999,-4.1000000000000005,0.19383423975687109,-1.0441296188991467,-5.1000000000000005,-4.1000000000000005,-1.36809327849271,-3.94706169026684,-5.1000000000000005,-4.1000000000000005,0.5743906555008307,-5.056120613602136,-18.22767593331988,-7.791249930070627,7.513012392427681,-6.1000000000000005,34.788843689351616,-37.296695210182705,2.839150727929706,-6.104830110090818,39.00424810322192,0,0,-6.11622306312233,31.487793877975914,0,0,-10.213625,20.30506494902722,0,0,-0.77122658498695,20.68582607740521,0,0,-1.1108432582566585,4.208793623433786,-4.1000000000000005,0,-7.848210937193306,5.049378964235046,-4.020140109983934,0,-6.1000000000000005,0,0,0,-1.1521416163265903,-4.675435581005824,-4.074868715332687,4.3578232036623,-10.213625,-5.112607160646257,-4.10217067597654,6.679892917952549,-10.213625,-5.1000000000000005,-3.641981528453414,2.027054774762046,0.13316072226350625,0,0,0,-10.213625,-5.1000000000000005,-30.05961523060359,-2.2618372774201094,0,0,0,0,0.5349041334747081,0,0,0,-1.1110961462653421,-5.1000000000000005,0,0,-1.1211376247080038,15.34699836083524,0,0,-1.1,-0.7171053045076606,-4.106296905505461,2.687518517935269,-10.413851491330123,-0.6023314402497143,-4.114747473353791,3.1944119217332325,-0.7166932741853483,-0.1,0,0,-0.42092266042689297,-0.12252753799100123,-4.179478201249308,0,-8.684864920055773,-0.24132242520608582,-4.142707841295778,2.7723953184350663,-0.7524245055398451,0,0,0,0,0,0,0,-0.9118866283701168,-4.458882159603128,-4.1012175299013505,1.4213880251704518,-10.213625,-5.1000000000000005,-4.150090806223162,0,-0.7756840630272409,-51.011946165567295,0,0,-1.049911500497761,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-0.8392311185510235,-5.111602828125001,0,0,-0.878121287294449,-5.1000000000000005,-4.1000000000000005,0.4367564940336961,-0.7603966668507681,29.165236324459098,-4.100676604045613,-0.10580023197360809,-0.5249567759519742,5.81801491364762,0,0,-0.497625562677933,8.51155999594605,0,0,2.218297455833577,0,0,0,-10.213625,5.404300861695829,0,0,-4.661782176343389,1.9411788529798217,0,0,0,0,0,0,0.449652056184899,0,0,0,-2.3174682659337016,-5.1000000000000005,-4.1000000000000005,0.8912739848551368,-10.213625,-5.1000000000000005,-1.2942879935924383,0,-0.02512424139149516,0,0,0,0,0,0,0,-0.9385592526699762,-49.53361396180381,0,0,0.19344462187129993,0,0,0,0,0,0,0,-3.7715646182864986,0,0,0,-0.2700141011788695,22.831702807944495,-4.1000000000000005,-0.10618504390838311,0.14625986007067798,0,0,0,-5.705547272062773,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.1,-4.106975968275797,-0.11091011246662195,0,0,0,0,0,0,0,0,0.8529831400723517,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8454468211037635,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34.262996240379834,38.47082304654164,53.987824308778876,-14.835445952028323,30.182659863406023,25.45902847276593,51.157902889345166,-16.721900274666655,24.234759649931036,29.336369160831563,52.08701964137785,-18.929792931542583,15.817102917155477,18.80724950446254,47.91376769487604,-26.95009718757173,22.021553874332685,40.28101276946674,23.324192350090147,-16.719116725355942,18.093224209212238,14.80482907062612,48.962491229581545,-19.759560148203303,11.319323216929432,45.642327958456384,18.29341217586673,-12.006218508035337,-0.6861085016650975,27.524926358870985,8.902802332166178,-5.400986547968398,25.994069556876706,-7.125114996185322,50.80540911528894,-20.96386525147045,17.080974468805643,-9.135527003358833,52.09301167103874,-14.534751557974753,12.456905829988727,-11.101666115146594,52.10649142405567,-21.429644692589523,-0.4605449273447542,-3.875769157767005,48.87924699187281,-16.164359534283314,31.816581825850637,-14.010782580464985,52.61789609179453,-16.887744672787996,15.148905312866116,-15.368013950955758,54.405773614484914,-8.891556699306669,10.339160367530463,-10.845834093669444,48.526206433317,-2.2129075274873258,-0.26876130950558663,-5.117235729070386,44.60494033112117,-4.948935203644922,38.729430183910424,38.87854871055713,51.24768594464484,-15.247448502525,5.486445301299449,29.80439072990406,53.1370048556186,-10.127526982306556,-35.506671768149175,24.96701473493721,54.173025151913436,-30.330218941358076,0.20233054523632388,12.582329699514275,41.96387620916923,-8.713510850767253,19.495184826504097,22.075272547305453,47.422718571823324,-20.034434983108817,1.7030001227750433,8.605278866860456,46.874415254940104,-8.427762958349925,1.1332549752119463,7.343348121300272,51.94215529593725,-17.64086632451255,3.8066767607447765,-0.1555653568864299,54.23051512237531,0,11.615907600427978,-13.429864040558464,52.01301769403107,-8.26382353642178,1.9891873394445017,-5.713577040640985,48.371199235541766,-5.06508951301869,5.89175684733752,-18.35329458544517,48.74779986230844,-6.316481008195123,-5.157375,-8.891572650842553,52.926240044027864,-2.4565577240616094,-0.3044769062685287,-6.014173647357634,52.106674648063276,0,-1.0224143941974864,-5.1000000000000005,51.7768884491265,0,-1.0222790905982124,-5.1000000000000005,51.43519925029114,-1.2525528759506053,-0.326047370323849,-5.074440048613832,20.682563482240454,0,21.997298071173468,25.230702294948703,48.163294066013776,-29.124649895820728,14.345728047593749,23.524968865585674,51.65792242324472,-7.840515173561775,10.94353055455333,14.147294086679505,49.62110341652359,-24.514723503086014,7.46730552874946,-0.07173820343452844,54.1844688760266,-3.6902859348730788,11.392737579078599,13.91598155063949,55.60969903823975,-20.450250076911658,7.523064995346811,10.503006471112442,47.319327044740376,-17.84495070634905,0.8912265639433112,27.516017917496917,1.6483522570413975,-7.033333060891072,-0.053629158892158024,17.28900683709467,6.425394532477013,-3.3709799028341454,12.513739670435879,-9.852961544391851,54.286772773916326,-39.527144219266816,7.686964186621507,-13.049202005585588,44.84385342752589,-4.7792009696509075,4.443317398322971,-47.07839132317199,20.15979661283574,-46.85992518490172,2.4648486967627004,-12.070650697380787,7.784336766983853,0,9.578019329810736,-9.890316320419961,49.9415070976116,-9.03598810341753,2.450951143787706,-5.00529522163616,54.14846005738274,0,9.453159414270225,-17.212598583797657,27.526393828526377,-15.752451673133974,-1.0289899909163291,-51.01156619954333,28.196740368549353,0,-26.4343637069425,10.714844056010204,28.413608311938965,-20.85226782648778,-4.059786375346661,7.6019803593205655,47.28186670729682,-7.84033809095197,10.454375212864104,10.743606149694877,44.12435076054061,-20.88694165411991,-1.1,6.921275912233841,47.52002353273317,-1.6327374672183426,-0.1679318072555999,9.94062226842938,56.22540022818786,-2.424769976836417,3.7674156308872497,4.2985793472993254,9.491481018841911,0,-0.5162905608901903,0.5770150717406827,42.36627214904115,-8.964004273268948,-0.5227036950523579,-0.11928570724941978,50.87625142939392,-2.9864917691444917,-1.6962614362860347,-17.508822635762883,52.72071346789018,-13.535916851817593,-6.0220375,-5.104188179175269,25.618491825734218,0,0,0,49.738927424030464,-5.050205856818411,-5.157375,-5.1133857248504775,23.88515583912647,0,4.064815701504481,-17.076208490575453,52.44101532538723,-5.100023481157344,-3.0623463949603003,-5.1000000000000005,33.88514834225643,0,-0.336228582714534,-5.1000000000000005,27.253950447649125,0,0,0,19.77769158033279,0,-6.672012438029945,42.91052134518404,46.171483796220194,-7.759186543634033,-1.1,43.851288029457606,0,0,-6.186656148311214,4.515980662533803,48.528882154102526,0,-9.745679456896877,45.33731056165167,0,0,-10.213625,35.12893370984955,5.676490997259222,-2.318079696622967,-1.1,43.171418546705354,0,0,-0.8366745686415973,39.76634172692839,0,0,-8.977651651116268,3.6404632401857384,0,0,-6.11216311255742,-35.93711683114075,47.689557663544676,0,-1.5857668485249494,-4.708584226657195,28.56508506880025,0,-1.1048090779140403,-1.9847499270288171,31.96546815332624,0,-1.1,-5.101243576863565,4.801873690933348,0,-1.105914546875,-5.1000000000000005,13.593488841925433,0,-10.213625,-4.084030634629617,0,0,-10.213625,-5.101066881838154,13.327858754934045,0,-1.5023050642416669,0,0,0,-6.1000000000000005,37.616717649316925,0,0,-10.213625,-1.6386177626079608,27.384601363443178,0,-1.1148113440233016,-0.5726144757749813,31.353252204469445,0,-0.9597748698845877,-0.40159293392641526,23.967746532598824,0,-4.726427789160425,5.322601624883519,0,0,-1.2971193573952788,0,0,0,-0.17212619851620767,2.6070514498148727,0,0,-0.8612138545895874,-0.1,17.96704218767413,0,-1.1221647777685433,-2.0625415845085917,28.901317881662397,0,-10.213625,-5.1000000000000005,16.522825601551947,0,-1.4349718102031452,0,0,0,0,0,0,0,-5.302815314384617,0,0,0,0,0,14.759636844440863,0,-0.8108102368034382,0,0,0,0,0,0,0,-0.14285134003095587,27.45402487133652,0,0,-10.213625,37.22298501339995,0,0,0,3.09361119552192,35.106394372320146,-2.601611900048072,-0.6696944883408971,0,0,0,-1.1307856817422206,24.26330305220284,0,0,-10.213625,-0.1,14.694410407801806,0,-10.213625,-0.05265667299540771,20.36170664712125,0,-0.9170093813992528,1.5644730360402246,0,0,-1.6783861388989167,-4.152446412877943,16.096972764593026,0,-1.111033174104913,-5.1000000000000005,14.96840911253675,0,-6.111587500000001,-4.830425379156062,0,0,0,0,0,0,-0.422555990614492,-5.1000000000000005,13.914945052835662,0,0,0,0,0,-2.0515546069150403,0,0,0,0,0,0,0,-0.8166190343980806,19.85535867752059,0,0,-1.385691081554481,-0.10136946137860244,18.016538813712458,0,-1.1114886521908447,-0.1,17.805120650430954,0,-1.1114706864789103,0,0,0,-10.213625,2.3926492912408586,0,0,-0.5907441664805159,-0.17141425882962805,0,0,-0.5751067282872404,0,0,0,0,0,0,0,-10.213625,-3.6463593259698346,0.8565168254165088,0,-1.1114529346046993,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.067872558576626,0,0,0,0,0,0,0,-1.211478187340072,-10.214987912960758,6.341696164171914,0,21.752808952549394,43.07196762876324,2.477362178291294,-21.209719515623895,6.826054377464473,45.52098345735631,-3.3958024323621414,-21.339771023738294,2.9167362013523306,44.064793892520996,-8.824598157187785,-9.582072212601533,-60.67688928477858,45.93076089114363,0,-2.5403959946711536,0.3284380006976533,42.1310719813208,-13.838800497802701,-16.147834159035263,-0.7510713535953321,41.62306945591748,0.6087987027551279,0,2.6379373599114104,45.5162354093443,-4.8905719454608505,-47.64902049877049,-5.157375,24.537033898813107,0,-6.352131020135285,-61.892384246851535,-17.292458230801184,-3.2457426418661792,-40.894398297852035,-8.397133777674155,-9.109164240986578,-4.048966655338059,-31.651520517520126,-15.636814326883897,-34.18286033253582,-2.833635312560529,-25.875362619020635,-6.367714653948884,-6.169436359003977,-22.661640617277037,-6.419268029876425,-10.472661007111768,-5.8603372478748526,-3.831112914332568,-49.720127073567404,-4.3625976542179625,-5.1000000000000005,-1.986468048622191,-8.581673686347715,-6.060062273527434,-9.270861407303315,-18.990488759364066,-8.261777954199967,-4.401217008274042,-5.1000000000000005,-7.644506926166963,-5.111763734297311,17.818532354107717,36.77623386428293,7.474402829753574,-12.892098051739708,-12.583950801534609,-6.695295117037017,-8.116767079448222,-13.022033899458302,-10.210483916543478,8.153627882460226,-25.04762829544262,-16.641236361802388,-9.337304072730237,-6.809195723217178,-6.057637179501045,-9.71682304043697,-57.64499606420978,8.878525992685663,-6.246239509902743,-14.865381867491484,-60.89686966035244,-3.436691035858411,-12.09329948939021,-16.574982173845143,-19.364770609498017,-5.6710396467850686,-14.00083281649698,-44.52956897402617,-12.028364417505657,-9.188222723926843,-7.050595712655954,-9.287498717526827,-58.60941096639985,-21.889558402057343,-37.27292166630199,-43.44899812786334,-5.367820965444484,-5.1000000000000005,-4.186042179295524,-7.471594273465099,-14.376746983497226,-52.16942145997654,-11.22620792413219,-13.920597657308836,-1.1,-5.182560345425964,-3.708840905017465,-2.6633375570673827,-0.08055955343972575,-3.4090763423844437,0.06546358611676553,0,-0.9455095026074615,-5.115213599968335,-0.31374068252268394,0,-0.6421824734134743,-5.1000000000000005,-41.06695132672717,0,0,0,0,0,12.605385751130118,33.50760822702062,-14.730982124431147,-7.478882923187026,2.1453957720784675,33.76583869161598,-4.1000000000000005,-6.9666745331886535,2.0095247172989117,6.6339336392046135,-6.356118890352122,-20.568172947483674,-0.8123046879931888,-0.04076323179581032,-2.764376930830837,-9.393523730690667,-1.1001108391474446,14.186085553447654,-5.298369592183373,-11.032491484026618,-0.03903183725934667,19.44382566724788,-7.7782256016953575,0,-5.157375,14.300370054790303,-4.1000000000000005,-6.612055338456114,-0.08209391195703916,-0.07001636729542786,-4.049963801986832,-2.3410427133256406,-11.374259461651357,-11.454128902905687,-8.477292207737232,-13.823367800141373,-60.6072070304915,-17.49767612676588,-15.47808313874554,-51.00835509115019,-6.803732081313299,-9.555154955672748,-6.447340478396529,-9.78940136769815,-11.00467270537515,-9.711838924132337,-8.11483723343379,-8.707012679980158,-9.978268676904573,-11.867497087107687,-41.08796255231452,-11.182351661946912,-6.403036033812942,-9.553342203285245,-5.9759771153914985,-8.528001558626123,-0.7712355693423526,-5.112227011268821,0,0,0.10821559622356625,-5.1000000000000005,-2.7642543530034716,-5.260210382040101,0.93302274931091,30.558180615546373,0.2690245122760658,-3.9780470543775994,-8.03764762410821,-9.74507349460822,-9.307336039795057,-52.13213613583491,-5.434779829970844,-0.6253612743110157,-9.759555553185548,-9.690857629813618,-5.082735760890673,-4.200695303481649,-5.522210362420701,-5.100495455058752,-1.7830189201760442,5.308115447676,-2.1893454693219976,-48.819378159929464,-5.157375,-0.3824096046743548,-4.10102114963703,0,-0.6526773575557391,0.17154018643219998,-13.034783494802163,-32.78729440111344,-1.1,0,0,0,-7.765846491043374,-6.784377100924338,-7.746905654016928,-7.661213698353253,-5.783366516768647,-9.609753738126333,-40.782621695629274,-8.804064169445994,-0.6158567144300316,-5.106932568787636,-2.5834353768042897,0,-7.191031518833928,-9.690725569641184,-6.521051736919012,-9.690000000000001,1.3099872696597905,0,0,0,0,0,0,0,0,0,0,0,-8.367592614952482,-5.158387632183238,-37.47215424886433,-9.691264584141697,-10.213625,36.00496757695071,0,-2.1625882942959977,0,44.41663651832529,0,0,-1.1170747097856955,35.104063663963714,-0.08899029287227833,-21.599960358730726,-1.4479316228624934,2.1835132660758627,0,0,-0.685290807120484,2.8144095360970596,0,-5.106975,-10.213625,2.003240837973097,0,-5.117227828125,-1.1120653747005373,4.644303470151069,0,0,-1.1,0,0,0,-10.213625,-6.615393512266303,-5.750702718611635,-8.651254201695481,-0.849506398520925,-0.5555257691047523,0.1952661702989353,0,-1.1257951465427656,-5.014219265291188,0,0,0,0,0,0,-10.219370353359599,-4.843563596047339,0,-5.106980764086604,0,0,0,0,0,0,0,0,-1.0775859562340784,0,0,0,-1.1046776162255343,17.891033425026514,-3.6290097586573555,-5.116440642145748,-11.1175600890272,-8.406192680462114,-3.673065466407937,-5.1000000000000005,-1.1,-0.20483515128034643,-4.117228807327058,-5.1000000000000005,-10.213625,-0.1,-2.5346732853281058,0,-4.397996329468582,0.4514102721583948,0,0,-0.2911780237647591,0,0,0,-10.213625,-0.12673115769304075,0,0,0,0,0,0,-0.9489894586412086,0,0,0,-1.1110133762065624,-5.106869280871178,0,0,-9.637718216095966,-5.104448726185581,-2.2860484074360605,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8109462716827921,0,0,0,0,0,0,0,-10.213625,18.665661517150507,0,0,-1.0421934725678914,1.9942792070846036,0,0,-1.2000476411447867,5.543211606697988,0,-5.130618585714647,0,0,0,0,3.9601026925379332,0,0,0,0,0,0,0,-8.443612235240659,0.16559830072993023,-4.1000000000000005,-5.106473882650419,-1.1,-0.1,-2.300711290883498,0,-11.201646319882151,-9.108666417936433,-6.206458827106872,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-1.162933988106554,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.744932778744371,15.478493988501825,0,0,0,0,0,0,-1.108948077100823,-0.15897301958874108,0,0,0,0,0,0,-1.100792303735868,1.6060287545292842,0,0,0,0,0,0,0,0,0,0,-1.0118512410965999,0,0,0,0,0,0,0,-1.1104367948523644,-5.101242744453536,0,0,0,0,0,0,0,0,0,0,-0.7239832719744522,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.327338763140077,28.82231049424679,47.45907095227436,-22.028421099331286,23.98118575300613,44.69125481897156,23.599113473236653,-16.837639749566545,21.106735572234165,44.04942785943415,16.77811622857608,-18.411022838282125,2.030468072381374,-0.1,48.16577795967574,-39.53999347638723,8.695558237340009,31.866493949721207,26.049923034608796,-16.650388114311504,7.0175209892199595,26.94023169843917,15.292235337917132,-4.538924309782796,-0.5729657653265149,4.528410989612733,25.34457375357436,-20.421337520306015,4.98559547094781,1.104897394491891,22.221748354817937,-4.848806246654005,22.97415423086229,-15.361032580038403,39.958470749539245,-17.54973598613409,-20.303428156606145,-10.975644702378895,47.3227068657326,-9.411515388126329,-59.53841840064829,-12.72984122607782,47.67789501492053,-11.776819082528876,0.9230781091107306,-5.1000000000000005,44.374230671275065,0,-0.9389011557759006,-17.98205124004671,45.1031983952249,-3.021631617789142,2.141181972627793,-4.773629740541232,33.59675598756519,-46.991782748637924,-1.8405764535208762,-4.836241717668855,43.10426464994066,0,-3.1942528753001023,-9.583444683885766,18.493877577723133,-5.556318046504572,-24.950020594680296,38.77501789839411,1.1014194826789359,-7.581138942393397,-5.496659775621955,-3.993030872532425,4.3295762650422285,-22.975167795263395,-1.1712792900617184,-1.197229500875253,3.2108752196640156,-27.868672236217318,-0.34695128524966035,-0.5345415268152732,12.625910028391619,-19.115684222654508,1.6179091473711036,23.07041207282985,0.05022997302005272,-14.373657328135113,-2.422972008888509,-1.1178162209128202,4.281624140818328,-4.68985759103477,-1.1,0.2340619609804875,6.876026356895448,0,0.1681283212967397,3.8578105929454067,0.7452343551358686,-16.79501441740938,-2.560485278386936,-15.725382210563689,5.9919720462833315,-50.53713122111188,-6.219355923039763,-20.904389440520507,2.3227315211199464,-5.067271379079355,-3.976289550265507,-9.696183118524324,2.253862947566725,-5.1000000000000005,6.330980193421416,-9.777971448245626,2.0279162777030324,0,-2.503093560420391,-12.389770454307778,1.3306270373093174,-16.980457520010553,-3.1595277292291644,-5.106863305928003,4.119512502740831,0,-0.44658115395313625,-6.441126398654676,6.6373321409834025,0,13.360077491235806,0,0,-2.139256881975878,11.995066222418133,37.25672635075911,15.445439432524948,-29.486713509125746,-0.021368127817669336,35.756245076388694,7.833210727283086,-13.554834289441072,22.09082269235709,24.14657926156657,1.855880569010637,-28.469852762892415,-0.011841537216576548,3.347042631683063,0.7705752756152904,-48.377735037763216,-3.7612712306191085,25.894322219794844,9.871358643180463,-14.510875965313103,-0.6095529501439176,18.955561973500167,0.4518089456162637,0,35.30870622685598,8.783032908741138,3.0993210494974437,-20.923096686817846,-6.910979016279729,10.934061468090032,-0.886767929794774,-6.42517561846328,1.110132840499975,-46.39573056197655,36.60813813916508,-5.1000000000000005,-0.07696709306308894,-5.10039748850518,30.70853949498066,0,2.9615382332448963,-24.500916027590105,8.105755742557356,-23.04260887388049,-2.3746842141598785,-9.702342256941524,1.9597429981677856,-4.784734553870016,-0.5266501639204275,-5.1000000000000005,11.28115438661721,-5.1000000000000005,-0.06963276355322048,-5.1000000000000005,11.026828150710518,0,-3.334620520788305,-4.811811853443516,11.773835453009893,0,-3.13324914048701,-9.293285562698141,5.452056199553942,-5.013819887362459,30.155470889115314,34.189957010909225,0.9892180735964343,-19.82045638690119,-8.849310853940763,-4.989089873138858,10.933195267129825,-49.09081915674293,2.6012382783883696,10.038839603583392,-0.42744466215279764,-11.460282391202005,-0.13272421940088197,-0.1409767036602171,6.417322951033641,-10.182439693843104,0.026154282103556296,8.196034447288113,0,-4.804920995652475,-1.1537477369446527,-1.9785584716684526,1.04213271689457,-1.9769900697742626,-0.41696357200212386,-0.8523609206197877,9.610381563435215,-9.195940728420517,14.743528321886538,0,0,-2.0992118073354,23.544991309835968,-4.3832665195600535,-0.7062169253675703,-50.782067328597805,-2.98445845154177,-5.123208040596712,4.349554886493623,-9.332377990552978,-0.04954914774367723,-8.362014391066271,-1.5735642533990553,-5.1000000000000005,-2.29469418692669,-5.1000000000000005,1.5919355586427844,0,10.93585770474366,-10.617708478152414,0,-5.1000000000000005,-1.6014458451426992,-5.106810935287529,1.5922785274092819,0,-1.0788552921217776,0,0,-5.093354288860455,-0.4297294742559622,-5.157858445658539,9.222450700521618,0,-0.9445366849939765,38.78697804931861,4.265777533472138,0,-10.213625,-0.1,37.6852008044279,0,-1.1115875000000002,13.039783690991015,0,0,-0.36573560990668724,5.816439957208539,0,0,-5.580296059968836,7.129838812458816,0,0,7.950103637116051,0,0,0,-9.816078909271875,7.1449677224842345,0,0,-6.1000000000000005,6.672124324315172,0,0,-11.167989838746724,-5.1000000000000005,42.05089230266951,0,-10.213625,-5.1000000000000005,15.226080524134398,0,-22.216897387225842,-3.4429902532063923,0,0,0,0,0,0,-1.177537579020141,-4.844837347392993,6.361489580087051,0,0,0,0,0,0,0,0,0,-1.1058787977277378,-5.114670265188295,0,0,-0.8719945737431729,0,2.9725721100247617,0,-0.9861209984344695,-0.12353029650495667,1.5447161195544847,0,-10.213625,4.279675609179766,0,0,-0.25974197289471185,-0.22647430904002888,0.44015285617295863,0,2.9809031550952785,0,0,0,-6.101239505913906,-0.40401275946166165,0,0,0,0,0,0,0,0,0,0,-11.068543722066861,-50.551239508158204,0.9074128572323961,0,-1.1103538155082116,-5.101487833105558,0,0,0,0,0.6035348516680195,0,-10.213625,-5.1000000000000005,0.8042300888786985,0,0,0,0,0,-0.04039441447879497,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-6.101212203627029,21.832926951676345,1.3356836305189999,0,-1.8902071101245617,7.635416691581792,0,0,6.864198218868603,0,0,0,5.648852823663281,0,0,0,-4.944253775765228,6.119530773144559,0,0,5.590543816413696,0,0,0,6.486758399104664,0,0,0,2.083825730317982,0,0,0,-6.130563055645154,-3.8046056302476097,0,0,-0.5903089617107493,-5.103449002353917,0,0,-1.111280123860072,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.5993109071182179,8.338238149724358,0,0,-6.105964505913906,0,0,0,-6.1000000000000005,-0.12734155842671574,0,0,0,0,0,0,-10.213625,2.330073687262345,0,0,0,0,0,0,1.3583711158799696,0,0,0,0,0,0,0,-10.213625,-4.842227862658476,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.696949925842073,50.25681203484598,-9.732814815198441,-25.564063504014467,-6.1000000000000005,40.0575281037504,0,-5.201923948619116,-1.2630606711634982,44.634299861893,-4.04674225239968,-2.3238296718893734,-0.29430264415488966,27.042621181563213,-4.111602828125,-3.597559606564177,-3.3493750618874256,30.972139086136504,-4.1000000000000005,-12.316816530338263,-1.1,24.335696644868356,-3.0835009652628225,-2.808170636989222,0.8277820472524895,24.76668028764702,-7.790649943415028,-5.1068014931504,-2.1015857354592478,17.876122941340007,-4.1000000000000005,-3.799308537061255,-21.936452751676313,-18.503208103351362,-20.17028211457473,-20.81100449889744,-7.383563678235359,-9.161396700808659,-6.449946375179142,-9.701547516310608,-11.069257146941897,-7.206018765756651,-7.915287419673807,-9.703938267016627,-1.0012001565125506,-51.00892441502328,-2.147568241047592,-5.074312043418551,-5.245141528651491,-7.4416887485266585,-36.16960855252435,-9.718135998248592,-8.159148691423464,-9.690000000000001,-11.11212582329267,-47.93957979815644,-1.710433769150431,-4.773225028656501,-3.8597120666534805,-4.330428497614883,0,0,0,0,-5.181873488176015,38.374751594068556,0,0,-13.58187297828152,-9.589654721274227,-44.98940494479346,-13.834835692170568,-8.309954072160982,-3.8851037445374224,-16.827051151553345,-51.00352344123116,0.9751818675460275,-0.4891244677071968,-4.108739574168033,-19.103327542223095,-4.580642511033521,9.237262558878463,-4.107419165505497,-4.776407696777748,-5.157509735400458,-3.646640984957352,-7.947348362915308,-9.700592001085901,-4.5872885645198,-3.14314181369728,-7.791244004768854,-6.536599241076358,-5.909276159020734,-0.1356682499784718,-41.077445238129634,0,-6.5569746433804,-6.910709256860887,-8.091985836115398,-9.367114974806555,-6.1000000000000005,-5.1000000000000005,-4.106988896277505,-5.101362706772598,-5.228972496591269,-9.690000000000001,-7.791250437655244,-51.138118473196755,-4.698039552928809,-9.69137246562364,-8.09002310417458,-5.101175211140379,-0.8893048116955703,-5.1000000000000005,-4.193950125477755,0,-1.2572828888676066,-5.1000000000000005,-4.180213795759613,0,-4.9243707020363985,-5.1000000000000005,-11.119113330805801,-5.1000000000000005,0,0,0,0,-0.32432270606172175,30.419951514883152,-8.653682360416328,-13.769160571990092,1.0647936924845842,35.45124318442158,0,-9.461519292760407,1.6862430262079722,10.945406285330867,-4.192596822003863,-4.982531753843027,-3.0352911546027768,3.959270037476715,-41.20235939150267,-5.105148313671913,-0.059518085387322034,20.417758654313257,0,-4.916009172218292,-0.2085124345165074,4.721344836455108,-4.1000000000000005,-5.1005279595505435,-1.9896892642045616,-0.4892487258375615,-11.164643883755858,0,0,0,0,0,-56.23763356475184,-15.119212526790683,-13.163237455669995,-13.739869623257082,-4.3193099831694735,-5.1000000000000005,-4.715836518142472,-5.114045946173163,-0.7604205871489503,-4.136060784646524,0,0,0,0,0,0,-5.157375,-4.954391923951655,-4.209526350329503,0,-6.666713275728017,-5.1000000000000005,-7.98367140681647,-5.1000000000000005,0,0,0,0,-6.634394652617318,-9.690000000000001,-7.790000000000001,-5.101350153870748,-3.564436607689364,21.285340054684024,-4.061255874016566,-13.454721765012817,-10.399164051726986,-8.882589536795797,-10.8977871799579,-51.23071238499942,8.281508195329165,-1.3515115692818862,-11.1123390963312,-17.472724445975665,0.10253031647180072,0,0,0,-0.8980998916834232,2.7346231530835974,-4.1000000000000005,-5.100472246747585,-0.7743894892006165,-0.1,-3.989581690017476,0,0,0,0,0,0,0,0,0,-17.222138847022258,-16.98564102925279,-41.01251769694809,-13.822247184591461,-5.843480430611894,-5.1000000000000005,-7.7912500069748045,-5.114653087235619,-5.157375,-4.968634271979154,-4.037486236557423,0,-2.393041492653359,-9.690969070072597,-4.1000000000000005,-5.1165597161907135,0,0,0,0,0,0,0,0,-0.599885784925282,-5.100712527908822,0,0,-1.1198187765756147,0,0,-5.105967945213745,-10.213625,25.68478712537412,0,0,-10.213625,11.106107939675576,0,0,-6.1050445855817825,7.125310242875496,0,0,-1.1161597671875,3.472776768060524,0,0,0,0,0,0,4.961128343975755,0,0,0,0.42700677672197235,0,0,0,0.7479085265204397,0,0,0,-102.20728779097693,-5.107182522151858,0,0,0,0,0,0,-0.09132549648611583,-4.191917781798554,0,-5.106869233189788,-1.105465508711413,0,0,0,-1.8690278872130446,-5.098332587429228,0,0,-1.1059924806533492,-5.1000000000000005,-4.106870354459233,-5.111623050464228,0.4357092198433886,0,0,0,0,0,0,0,2.2231647581043577,0,0,0,-11.217843902993813,-2.91251659716289,-4.101269435196001,-5.096120623264979,-10.213625,5.904561821168363,0,0,-0.11301013756583984,0,0,0,-102.15031605542717,-0.1,0,0,0,0,0,0,-10.213625,-0.1,0,0,-1.1,0,0,0,-7.104821268964906,-4.744405008102148,-4.022508860125962,0,0,0,0,0,-10.213625,-5.1000000000000005,-4.1199956529618875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.353394178779936,5.21594307895246,0,0,-10.213625,0.9385715699319315,0,0,0,0.8648674219127581,0,0,0,0,0,0,-10.213625,2.628926258651229,0,0,2.766292788952881,0,0,0,2.1923297602541205,0,0,0,-5.800875730773307,0,0,0,-1.4996662088685655,0,0,0,-1.1107464675100744,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-10.213625,3.131250726641885,0,0,0,0,0,0,-0.04788579885920115,-0.1406474980444626,-4.1000000000000005,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-1.1,0,0,0,0,0,0,0,-1.1718058815202759,0,0,0,-0.6081634479939395,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33.509446737611164,46.56978929911469,51.58308560582972,42.68689163108921,24.41806653413867,41.77699454649617,39.45132851516997,46.12167790669755,29.0345117390288,43.11685031686356,50.15487214521157,38.688676608741446,30.010285708541186,46.59572117466617,41.44541753348246,47.953676595393254,26.83600592526995,35.14781396017214,24.48483988448022,46.07270573529947,-3.283574851927014,37.95434909068678,51.330685372199234,40.62060239784408,32.58166747275148,34.20775700062048,35.15746944760946,45.74398884473454,29.887197588179202,42.356132332788164,49.68616233824797,37.18417123452914,36.199625220475866,-8.353880586653904,51.92108707837998,39.5951278617385,30.65712639565208,-11.210806799185324,52.86523829019916,38.8922275095691,24.954553928385238,-6.425110737028507,52.830269336698144,41.19514709136574,27.26044210176797,-6.74319862991512,40.86456447485635,39.59243109523173,30.279070478315386,-9.951974965081249,35.519698352939066,47.026210489356444,36.24247432325393,-9.93518821784994,51.16216817367128,40.54880938152032,31.30997522737846,-7.865824553715836,52.14174798144798,33.76122748881991,13.037534312780295,-8.966975660293706,47.71222065202871,15.392501795899905,24.53006124906112,38.84671233460994,51.412667330318214,36.49573176949708,6.889684389022452,39.67677939293708,53.46421931478099,39.623909011762926,17.17956397477525,39.832457790084064,50.76029887073244,41.475906814241426,21.77222699090299,33.6887070347983,52.835738842509876,43.468190179003784,29.712732782307466,34.938781097746954,46.49547068352757,40.289771609323026,22.984575800497325,25.105067080287103,26.8194543601771,41.945576332135666,26.74188137105872,38.27783207668681,47.706377444136024,40.15484684067907,-10.435377697878021,30.504510825992188,58.098625230937515,45.21801134612133,18.380995219999498,-11.781819164335907,54.03919166216717,33.95644786180809,24.504432927798998,-12.179734815960268,52.67966860417625,39.592004957814744,36.23336274651151,-13.447839135920658,53.776165589519266,39.89963164645685,3.8133113023086715,-11.398381110714599,55.22395746229041,24.381222869736586,27.136616093173647,-16.088762649384623,52.776773264758994,35.075192471722566,23.65495013701494,-14.094617166942848,54.93041987427404,36.79162082223279,12.726342832377194,-13.831653048475493,48.16710810317678,13.502581866709509,27.673625328407514,-8.25783127898521,45.976532096172974,36.730361571932114,28.603042347841292,41.20742913417135,35.378124311811334,37.08624897907797,-15.065610703486799,39.51906129631353,39.30893703805863,37.02985114212498,20.114548692997772,35.59002971138322,52.68520759849937,31.352586654002568,28.243751289063603,29.25639299692598,41.05923203526259,37.48755666233283,24.312079250357446,37.71150126912215,56.60607418240585,33.113257187659386,25.228730226381156,34.24762623503365,42.998002115367086,31.236771993141293,16.562162345279035,34.07746993727764,56.60745647350734,44.291011411029196,19.26738549815069,26.498564794511136,52.088392682053055,24.90918601674374,19.123434783058283,-7.893177750826541,52.95867041133154,32.58030682879201,26.4441218723497,-11.423713141287923,49.41944226772099,40.06943670483634,33.08412981221595,-15.021806903456053,57.43931935019115,35.50228378921606,3.340175003016461,-19.16487309077368,45.86445269271995,47.22026330597495,37.898465569539916,-15.854916039501497,58.5362780489479,39.603825080834945,27.70906243194213,-12.157931432591667,51.15511104529685,26.730553547263273,18.163011324676166,-14.193746741386583,44.12782295402396,27.002428096269256,-0.7822537748657167,-7.15728182543385,56.35071936448899,3.5782378584642576,21.466500315837237,33.61051462268817,47.69917694481445,36.08598201954696,12.006025430758019,34.19190979263082,36.99410247315855,30.604010777277022,-28.998117897909445,30.733087659721924,53.085531416922365,31.808365895883963,16.425727382128812,23.033456588251035,51.00012832793184,22.063402147403867,24.20674508238543,33.6945264799055,54.473354259155194,37.11001829657947,21.567372899386516,30.061983291924044,29.377339388412604,36.166064514100555,22.679018673265738,28.42626788049205,36.30690593370556,26.49111106641725,5.486768935051153,9.364081674302527,50.80792815413635,27.70889386047164,21.587230890451334,-15.839579920699592,50.22191874353666,31.21844546330352,23.00312255379114,-22.057566050002865,53.47025235386848,25.2394681933,14.729243267379783,-17.124551892662133,49.644423292288735,33.12725049751257,35.92966658499898,-9.109609897830545,52.713964237101266,10.666551938048315,15.034603867214807,-19.25311074176881,50.93410619121663,35.52054643088742,7.516619900400997,-14.024995157028858,52.932119658971956,8.833006518120023,6.059556335969232,-13.16954870598435,43.202397039569114,13.423371753942925,13.893986064468859,-19.04196311806483,36.51985650046628,38.18834825426864,16.568418232384218,45.63224579369865,53.1775160137421,44.485446500386345,-10.716929104917398,46.02688911287782,23.27480082837041,43.105726451323804,-12.63346306427656,45.21779204861142,43.62675514205097,26.141379483244787,0.33780337786152503,41.91290137455082,9.248120847314341,7.757441166201467,-7.601808025326189,42.23685704760457,28.04115388228409,18.51918650871033,1.689083708473773,41.521019012704265,0,20.650597269917174,-21.840287037387103,42.658663802734374,3.299309110832195,12.129200517371096,-7.777074052026641,-0.1,48.85693575436208,0,-2.7536861318560386,-6.9728788797521,53.150189443907415,24.141663269064786,0.018073232503031278,-3.209210051110642,10.962190770272436,45.359347888359906,1.6783257828987614,-3.9562227966932846,53.2810748706011,15.553097680612579,2.230238900842384,-5.895926724953525,40.42973535782852,0,-6.814598749142872,-4.454256169598147,48.64276645263927,0,-10.213625,-5.1000000000000005,48.98740258539849,0,-1.4267048311049182,-4.674803810381028,55.336364828744586,0,-1.1060288319042395,-4.571516378869481,51.24579412813827,4.578283187616756,-27.135866895141426,37.09684650490117,24.702663495026425,15.261549225146076,-3.568142013021395,-1.3189836571171958,51.98169322572156,12.435122533721966,0.16458964921369224,3.7423179220556357,52.946476444625034,44.96193228935449,-6.660838208676247,-1.050569303727926,50.096907130577414,11.78463278278668,-0.9200857384101682,1.8108079431518993,50.22312249776681,4.832652679792446,-1.1106155069410582,-0.564136305317278,51.9589395324289,48.45124102849615,-19.767535543195514,-0.4192219401499642,46.13246223386862,0,-0.7793983497266753,-0.5047310006079532,52.441853789298,0,-2.071582090720511,-5.1000000000000005,48.74689471432696,3.8474589932588636,3.4258324208644533,-9.694875582913891,54.84805827686936,4.579251753790158,-1.1056133638359422,-6.308796512173894,55.42650404650052,0,-6.117361189195494,-101.4357558733576,54.255155145079115,4.710824120938326,-16.13555339620226,-11.070263727667328,54.89218291293844,6.760006279881764,-10.213625,-5.1000000000000005,32.55345122391938,0,-8.868353250052271,-4.9509932889067905,58.1774815881199,0,-1.1057049348124302,-5.679061640123847,0,0,-16.279889002474206,41.228554654386045,37.53660475183426,46.80908793133951,-7.642167338725339,13.997395833143866,52.361765917246096,11.84703344957958,2.5879807988705745,34.8778309204826,21.760823274329066,14.419125486698261,-53.06302152001701,32.00674617718906,0,2.9489290661429792,-10.708189872009052,26.860147269809392,52.49169868072017,15.185973950855116,-0.19945206774600044,36.60208198155585,0,0,-5.510759543573015,0,49.80825943429512,3.9463021266014273,-6.101243219446997,19.298888469000524,0,0,-3.1895151626328717,-2.1073854289774947,4.189204680432812,43.58303987590984,-1.1059853152028105,-6.02811621202812,49.4045891985047,3.4432994179543335,-6.3405828836703115,-4.620001799361107,49.858445480375565,4.1011002219452894,-1.1050045766830017,-51.06987847859501,31.429301336655143,0,-18.445912543741642,-6.582041962294093,48.91637980266552,0,-0.9569557208893195,-5.1000000000000005,53.81369363042963,0,-1.1,-4.166267390960575,48.603114810860376,0,-1.0961604901217974,-4.1617877470586135,0,0,-17.907493215619713,32.26342553046556,5.931585492269191,24.38128783174545,-0.9887015313308013,-4.031401999363077,53.2541405856352,7.489021775783096,-10.213625,-0.1,54.00728325385873,0,-1.1,-1.1251161946332073,50.19635874529199,0,-11.346716379527225,-0.7261439384820623,50.25684099734315,0,-6.530103625439339,-2.0276674734855034,54.219184483519044,4.53767450400673,0,0,0,39.437784561662575,-2.6398477511013594,-1.8090820009032234,21.645011564592817,0,-6.786494937764905,-2.544685413418583,51.37108617356042,4.4419387267014425,-1.1,-5.209157650874104,26.568522038453757,0,-1.112860582201401,-5.920122536186172,39.39689036561538,0,-0.5348486999777491,-5.101244228844038,10.636885553463951,0,9.896166697777357,0,0,0,-11.011838353143231,-5.039445305803192,18.074490121024535,0,-5.465788683989159,-2.6589896129797355,0,0,-1.1109980945757545,-10.214874872856399,46.42047670746341,0,23.49912316112445,46.62998035898873,-1.2989106664824506,42.22803564837618,24.27942641418106,45.245616858123476,-3.9907281074679233,36.05379140851055,27.483196124854476,45.67173130397593,4.64583861515891,42.327025312503245,22.970243979000482,43.864272295274056,-0.29548204444770215,31.90835214438215,-4.968468956379257,28.385588854093935,-1.4438486256877496,42.43424344763412,20.54791482445681,25.3085539590593,-3.3142814053545644,43.75134830281773,23.77126697074721,33.33634621299897,-8.980152698009787,26.09882040257773,8.103847643072447,24.022643354355814,-3.086690354019458,31.388481678979502,22.306986549937612,-7.437451312352883,1.746689133274415,45.028186263766464,25.024348040398856,-4.728058500436089,-1.0055845561587506,45.2094577195395,19.69717584485083,-5.531611619513799,-1.671327349394535,32.88219535905081,27.246337193716954,-5.569624790168991,-2.5784359349626778,46.05020068785001,11.367085807945665,-9.455824195277767,0.07897504157754187,46.02525192654754,8.202919453036206,-7.535337190441558,-4.358151825343139,45.2013719682421,16.319307682702068,-6.743986059263856,-3.677670238274926,45.55332587625754,3.1358766871687314,-4.228111223265538,-4.071342852083956,46.95608047608187,27.12140741834979,37.77930993492723,3.81042703085017,43.58424528795176,18.45145773521269,26.990514824591322,-1.4077732534716154,40.90281633927422,10.728613499402972,29.873501705371243,1.6759489470104036,27.91758956601489,8.355347603680752,24.900835787265525,-2.2344286544425147,44.547997032750565,28.81943938730041,28.130187777865146,-3.5303576370468575,35.16205178929583,2.915502973610364,15.80549206101982,-11.830917699135712,45.596845164917205,10.796571438278994,24.821366751393846,-7.614187223884893,46.83605430611422,-0.7851278751964204,33.264765900696844,-9.993393341337642,42.041622591580854,19.653422328917,-14.394870922182756,0.31663069181719966,45.403339243273095,18.74379427020926,-16.36748648531986,0.3739054355373314,45.69229469593254,4.591119480527693,-7.627533806381909,-0.925456840562148,46.499801137961065,3.6878937895185135,-12.208040302681038,-3.98715091092263,45.754995239518045,1.6896329336331692,-47.789434933602585,1.6593179532764328,45.28008181146504,-2.1143923545492656,-10.890381196414257,6.957463994020174,45.643185121038734,-1.0222423403382999,-7.257060517173361,-3.031510066442526,46.60400755795234,-1.029036811284533,-9.650458405469426,-4.105341888990393,46.666847135995425,22.535813423524964,24.303117704010187,-1.193706413747639,43.861230310168,19.274407699761177,16.673144639132587,-4.541738156058472,41.85203038127331,9.307628226363722,20.339238873396063,-10.895337125352208,42.19771032384362,12.702912549689552,23.584540332235296,-3.053950844569704,44.77112546812662,30.87171700077241,21.890105655730537,-1.8359472580942182,33.95969700602705,8.452929336288346,16.437858269499287,-7.048545886267759,43.54236225917857,14.145925250030118,24.93213509243331,-19.29813196948959,42.3919043813627,-4.8288811399361915,6.763198559793663,4.88027543161079,34.6118110941713,14.386813323755169,-15.369814816848665,-0.5583563759078476,42.361832475473776,11.304629784931063,-10.615764373792123,3.1568682409577984,44.89370408966519,11.302356384257498,-10.287335681119345,-30.68861162687789,44.81097816760118,6.11202677482844,-6.507303723822533,-2.273581201733791,30.038409739999256,6.252113026650372,-5.101372971031317,-3.6085613896694344,41.525014357729624,-0.7354694714330947,-14.42690486072113,-3.8336171031357047,45.47273593761704,5.154374485201645,-6.828981399027436,-1.3771064940695537,45.05196860658145,0.8101865584768377,-5.101244279349696,-4.214632946715321,44.42552329533279,14.870323842678882,20.97565884432239,-25.602937833068452,45.78085795388464,9.00227253862097,15.19897257997147,-15.745632183018298,44.95507181028348,10.323216722255083,20.577422496071033,-3.936513240803227,45.9765267074751,-5.193428377504382,9.823541686994862,-40.6536138218111,45.59253105939701,8.291665536444711,19.85090976690218,-11.81026539847388,44.140235214409216,2.2593584218715677,2.9653914861929747,-4.687228409098642,44.815764712710205,-0.20006368469626934,24.029140199811742,-4.400344417156328,44.02724874480579,-8.21371244516958,21.050468895920595,-3.53371396821148,46.40190979398743,7.6046662716304985,-10.371003944998634,-4.37507370857692,45.478337999777736,2.169843868430967,-5.106994384298389,-0.5338473144285839,45.18891050841147,4.929878139917202,-5.1000000000000005,-1.566187861441818,44.33751825870038,-0.5257288496135958,-10.556201155940217,-4.107028501399805,44.02546338857431,-0.9607461805891785,-6.592288930255711,-5.663413151297533,45.13163181312845,-48.70563479245987,-10.51030598442611,-2.423080643990352,44.223664157792086,-0.7902494295154104,-5.100415459550543,-4.1000000000000005,45.710248757656736,-0.8394296362637941,-5.158319358340798,-4.0351885429250975,44.77460753481567,-37.30878460874628,44.44928396546717,-2.3115831758522187,20.642906577036506,-7.205370886999163,38.67660658554387,-0.16224507814624212,8.321492067166421,-1.0522359911307735,34.236418228381154,-0.15878184450736585,4.5144575725981095,-1.1112593948488272,44.826885954345386,-0.3427008333419245,0,-1.8619638218795107,41.810034738669124,0.0131046160641354,8.697681585708997,-0.33387254518736703,47.12123830620266,0,0,-9.603514521688627,38.9608867924854,0,0,-0.9165631725958847,22.43279274815549,0,0,2.5395970223812707,-5.0577249964407995,-3.56855365462933,43.35877256373721,-7.149348965860833,-2.3002117050031896,-0.9907000580682518,44.93257864889788,-1.1106266704530645,-3.3316585804482273,-0.7997025686917234,43.97307809829346,-1.1053250068597207,-0.8221352667827923,-1.6316580791794941,21.438789134568577,-1.1409272777442214,-4.6037100901397,-3.2482878995158524,45.89111621501022,-0.29820213141687885,-5.1000000000000005,-0.7414077095607401,44.777324245588126,-1.078370236241898,-1.4615124970126416,-2.065858867174496,30.903235310307224,-1.1062642407364824,0,0,0,-8.420104590887348,6.661046246085597,-4.655681469656514,44.904673148680175,-102.28783058165182,-0.7734548156914834,-2.766537554185936,46.309525023342566,-2.1061596363401334,-0.28443886981069166,-3.117332533722412,43.50853306699046,-1.1115851982699794,-0.1,-4.1000000000000005,45.47144563665007,-1.0476822646737314,25.765531559836454,0.5960794344622314,4.490491445540425,-1.1115024192534302,-0.43173416333642056,-4.1000000000000005,23.68790232933066,-0.635577798428883,-0.8944065865576913,-4.1000000000000005,33.99617734094656,-0.03425088816181141,-1.0572691884546521,-2.7388718453489935,18.184838947048576,-1.2051372780034824,-5.9551813689116315,-1.1933779524307107,45.71020308836722,-1.1319409230247668,-5.597021454817071,-0.3597604159861604,14.736048723046782,-1.1103587854657462,-5.130510696411586,-1.0692770211009244,45.269282193448014,-6.1000000000000005,-5.649548046836672,0.8867827977163437,0,-1.1113910650060832,-2.8954459097677843,-1.149846712926108,8.473170399257313,-10.213625,-5.017104402998609,0,0,-5.915259523177152,-5.128195481897521,0,0,-6.1000000000000005,0,0,0,1.783777761405584,33.21792584183054,-0.1952415677372612,11.592887164883141,-1.1,27.817398703147934,0,0,-10.213625,5.830956176907479,-0.5563939293411011,43.02859926417423,-0.7973939062487831,-0.11270867370809041,-0.443021606521266,33.63653459932369,-4.183596105114665,-0.18869102556466574,-0.18095404244863716,40.28471409573554,-5.796145371398505,5.518215394869403,0,0,-0.24345210632054404,0.8100751096890766,-4.105815751925783,24.10720441092382,-1.1063035821170815,-0.19765352902766609,0,12.12799744888457,-9.30050721026435,-5.020673706417791,-0.7539721336548916,43.505817595837954,-5.775342626880733,-5.10124356346815,-0.844491232699152,44.67458348347076,-1.1,-5.101243222465559,-3.5686068915041775,27.310338679304373,-0.7989702167218966,-5.1085274559242455,-0.6690919465200388,11.526767864031974,-1.106460185243694,-5.101277117185697,-2.6106273064889223,11.57276882864465,-9.80050250882062,-2.4879462672130304,-2.1618627330604228,4.300299143730589,-9.817319766375148,-4.154293451969159,-2.4072914390382376,0,0,0,0,0,-0.5870756134513134,34.56009657980319,-0.19148084300775708,-0.10679393676389998,-1.101177297302768,-0.47362025248112616,-3.040893866338468,33.77612327311903,-1.1004627926126938,-0.31167379955526053,-4.1000000000000005,40.54390499988362,-0.45716220149937065,-1.3500005508523325,-4.106159424394777,21.071116993732247,-6.121756864933109,10.850270891261054,0,0,-1.1047909757453045,-0.9903901908237366,-4.106865151713664,14.859742008652987,-0.9893280364442236,-0.12093851541040229,-2.0206470654778186,12.089465308470565,0,0,0,0,-6.111587647699644,-5.1000000000000005,-4.106876689665617,41.27112945484786,0.28788750021780096,0,0,0,-1.4875607676228846,0,0,0,-0.1454979966981508,0,0,0,-2.0996006245808134,-4.237111990455945,-1.892690413112024,0,0,0,0,0,0,0,0,0,-1.1115796464983676,-10.214875527102311,-4.1000000000000005,3.1936087498163146,27.59904347252116,37.623360164131824,46.50260346113892,36.01869251722567,29.01642448679578,33.75952506255701,48.52828303272846,36.959465833451425,28.030952618266614,42.93984289676007,30.005907512295884,30.7697589448219,24.598480306148215,38.7069232749571,44.74493580022683,29.399683518054978,5.654850251152633,28.979354440379673,37.05597688221571,44.33736726446625,29.30162386268909,29.00062757244034,45.84696908031971,39.785803521321256,10.518062723833014,27.72084869637999,28.034893083893305,44.6615157874931,22.415051486442138,25.487782798239497,46.60842575096339,29.138971521773602,24.87950837640747,-12.177785111366166,46.6681929155473,32.92971326988936,28.138021824029497,-5.933100406281181,46.953946093203115,31.549097781628504,24.78981039742448,-9.407838876037609,46.65717219475853,24.349415419459714,9.082964163979371,-8.849920968646298,46.23179547650944,17.752695178632248,28.43327664594896,-15.202800883068216,42.570974584683825,29.982705550538984,39.669861025026165,-8.829339513051215,49.812187763544706,23.628262952529003,22.629264989731393,-11.503474215779459,45.743194697780474,32.83424891839376,13.99533342512627,-7.57029949669203,46.82991760387486,28.312683611419615,27.250555144086164,38.1575257368038,43.56801319702931,26.35688261920886,21.344599159437806,22.452680088266675,42.26145183350045,24.584902689625302,17.55276002970537,23.162157358872985,43.08990736013304,30.276122504246842,11.931272986593108,23.482805896017428,43.518871209600846,24.404432239643786,15.554400013267115,18.14470936053554,43.9284681542122,27.80332466375611,16.890402219534923,22.03513191903102,47.667196287673505,26.629937065956714,25.554468602885365,19.794954965436766,41.89994705502021,28.589353167555767,9.35705019743712,1.7961776643664724,44.88326689931751,4.434776339225944,15.092441744688564,-19.926141395792182,49.41366821683535,25.40602409100018,14.04934215867614,-20.890515779117994,43.694650391271836,30.001081196625478,22.025940727778586,-23.25547499855651,44.01438185705909,22.4099945174969,-1.1884019887690802,-6.921297731614891,44.12990749079721,7.9551985882291865,20.09929862135411,-17.673170339015456,34.54497075724867,26.385740880925784,-9.543291485940316,-23.052771368774554,49.07147773701783,9.778875265464453,9.255670092273414,-29.285427723412308,23.469997599264456,0.6317684125732632,1.10399448688522,-12.455372663397796,47.39911223963747,0,-16.016734586887736,39.61061204298674,48.11279977925187,37.08621126729941,14.598978000999665,37.987742681399254,46.85420577637148,34.62922477257788,17.810864735319694,27.02618144503351,37.06116096516106,18.09827715490171,12.565771666409766,26.49904300122845,23.202243688495095,30.59621235367632,19.54280577676517,25.10705988101015,19.638723663972453,43.63613634629553,21.547854188166053,25.070451695817567,44.50201241208674,19.576760124317712,20.845101370385372,26.58809217729678,29.198325643035158,36.578169597642436,32.73570233451613,16.12423362840557,45.89575551681462,10.778599724506684,21.142897929726306,-15.939780291009482,45.66299842933362,26.392033628287653,33.46011991992335,-10.9097333780443,46.962496479069905,20.18178547289089,15.92135667001449,-16.662852595018823,44.66824454112026,29.924981301921253,5.651120273846948,-8.641433374576348,45.71032698629505,7.0500464356321295,27.21621109492863,-24.69879948649374,46.169153303645864,28.486372094055028,25.771672091446952,-17.667899311943334,45.410699579001275,20.65341390859606,9.606678345803095,-14.756711455668318,47.93056007002576,14.76313009515302,-0.3675370929892721,-9.126430242388372,47.69798020765301,3.25109429007931,23.859879573217892,21.442490540503034,42.20237664167919,26.48190313970387,22.74227457159746,16.685283002077345,33.40714074567995,22.40875364062273,12.125459721859148,17.5919166453529,43.30135434311117,25.459110236953645,34.48059743245852,14.398178491824716,45.61465588546211,13.368281939816956,10.272788765483757,18.48877838476523,45.52292530038264,23.1227084778684,6.743467350299355,9.774551636656541,40.31311902633553,4.49974584916876,18.18706471398508,7.447360342166506,41.82321798418184,13.720191408987265,-3.514134151266692,1.0690362243644411,45.94429412989068,3.545757583388263,33.819449561347696,-17.78358387463719,45.187216172624105,34.44763044001304,5.9384944986402886,-17.741674418871202,46.80867574001236,14.118178696869855,10.456541952219451,-11.98123996781266,48.10394450069488,5.84004404116784,-0.51967472964779,-8.461064720907835,42.558823050322026,0,3.6595336759577184,-44.40679516691569,46.3883161892947,29.80507485646071,5.27963187118134,0,47.257033133292786,0,1.1017137538776485,-9.873770197758947,48.663257895510334,4.618542146872603,-1.0346363118676336,-9.002958652429214,43.62914698463824,0.23561769757743894,-1.7518300130362823,36.50959804220095,47.18041915303368,19.34326341237509,-7.060612309391229,41.82639559890064,9.160530667302467,3.802416239473089,-0.06451320064576938,39.49523290917655,0,12.556972766787784,-10.213625,42.08191614528516,0,7.6362968926915284,5.098740005823146,45.94966776823645,17.25540975847457,11.221773423019178,-0.3281340226342071,41.132498177696625,0,4.572469097405225,-1.0161689336608353,34.58837815185019,2.1962574868028795,3.8339900742400186,-1.108591193857082,27.778315013374602,0,0,-2.644651730915016,-43.04334773754673,41.91227555136716,4.24296114103219,-1.4846391541913029,-4.305687149260543,45.15006482531978,0,-15.271264770980682,-3.868417910509341,47.326682526582324,0,-1.408828891805397,-0.6465561548123923,47.50181709516386,0,-1.4388187810195379,-5.020810898584828,47.03890360330759,0,-3.3935309507223055,-3.1136872159840316,20.38094954445654,41.55754260006426,-6.543892684074029,-0.6063602987470361,48.78403681130211,0,-1.1537542765901616,-4.140495588648327,48.40993991756003,0,-8.000207339011265,33.42139492043972,0,7.771889320394004,-6.351105548492347,-0.1,38.660765881403734,0,1.5616639049113223,-0.3200318743782431,45.16149011373532,4.477308440422418,-0.7034369536497311,-2.03424151510714,27.59153950216064,0,-2.735621189001124,1.5597504542939213,44.04328558608854,0,1.8330352439808142,-0.12111939850959247,28.69425946420712,0,-0.710439461127746,5.895151924497829,0,0,-6.1000000000000005,-0.9779274169790961,12.26803111567401,0,-1.1008167796759725,-6.46579013673337,37.633369988580775,0,-1.1104081773100967,-5.253302299332334,40.81430898483787,0,-1.1196704442437493,-4.598510628588189,19.485369684536504,0,-10.213625,-51.51977660572683,9.144188401029684,0,-1.0946476299266932,-5.07735451432416,27.079119572188716,0,-10.219635200817834,-5.3424007269618805,18.940848551630225,3.8329173665795184,-10.213625,-5.103131361141232,4.819091321371862,0,-1.1280805439893298,-5.20943671167195,0,0,-8.889223326829097,34.11385423547926,0,0,-2.9072282931067632,33.49903384280201,0,3.6557187991228797,-2.08980691701118,15.347562302832968,5.07838739628523,8.254758078586654,-10.213625,27.76358979064212,0,0,-5.444655891371806,29.27058546781697,2.2533288053561464,4.58596170249477,-9.294060187522756,26.583448713261248,3.5091573093803223,0,1.3812286195453432,0,0,29.248839583085957,-5.575237724769792,5.606934704116554,0,0,-6.12347092492956,-4.432803887864821,44.09692202016319,-0.10688812631595666,2.8334859396230376,0,40.918089590494155,0,-8.483966428880473,0,29.331768247400213,0,-7.382550484996488,-5.026491982232461,6.6839643023704145,0,0.33574041269744415,-3.939655467079419,18.58993726720598,0,-0.11029411654094529,-5.101740990516703,16.02525886751888,3.8099042188597156,0.1377240592774278,0,0,0,0,0,0,0,-0.4564367116175055,33.22329712814953,0,0,-0.4350399655440376,-1.051656044977274,35.965964188531515,0,-2.106987825771064,2.3387274680197576,46.809512201070106,0,-1.111513964375108,-1.3801885785469075,9.209817869647345,0,-1.1012755750589878,-0.19,46.41456530274742,44.69551031208884,-0.5075193191280524,-1.1622839787152068,13.240316363886874,0,11.751979727603265,0,0,0,-1.1,-1.2383164994411109,0.8931345405681803,0,-0.6609998502885591,-5.1000000000000005,41.17695121935393,0,-0.3389233775218041,-5.417566575315597,15.675350493055092,0,-0.49840164463165215,-5.1068625,6.341540366750571,0,-0.5634983048790317,-5.100064426943948,9.52705173778276,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.151951929252127,-19.152791798413432,8.825025112279649,0,26.006439226933864,28.240624767597435,-7.414218326171716,43.56410071504588,18.970076616457746,30.481818424603045,-4.662041704942118,43.21538620405433,16.970743424838076,47.58178552522319,-6.360183537113882,27.561614392191423,8.012358188863972,20.585029318286118,-3.9251845152841915,39.743169595208656,21.928920612117413,37.89377658348052,-27.19264425952169,39.323989204988024,13.405726192335521,15.991507203330132,-3.4465473336395958,38.49788576390352,8.33917388488669,19.595382875735485,-10.358709437009065,44.61615905291722,-1.1248464987196238,36.534609817068755,0,4.281907754204586,16.161804077066748,-19.056613179215972,-5.631070591884356,34.78702906957213,2.543148567088538,-8.6660830373006,-4.422618540467566,42.91591018601477,2.7817155347853975,-5.471041004772532,-5.2424543214941774,40.21105549094417,3.281616117886665,-6.053553708794862,-4.06554662432829,42.24751330291229,7.66524030693296,-10.602117316125453,-5.6182703565255885,39.32490700709136,3.589287154166888,-4.38512907228172,-0.9437865324373913,42.68342108810448,2.3124043133349397,0,-0.33568089139979596,38.74614029545532,1.9580803378162315,-6.867824753585088,-3.915933110947301,30.650675550722447,17.853722295695224,18.838013528355365,-6.158438094040573,27.347155648850535,14.012478810294548,20.15641145607351,-11.946860468715224,35.77752468860909,7.759603943584967,26.45490713526656,-13.649432811722658,39.33380572750998,-13.366408897503629,6.75283262053806,-8.07300060792679,39.114582465399,15.027415547319228,13.636099435458226,-6.727382115409657,40.98721693242198,-0.5603015936589254,13.38867352582294,-7.2766290233997974,42.37984891268673,-0.5257374920564486,2.7881465144055757,-8.792604271220785,43.0146587678072,-0.7383326526612384,1.5995762039262165,-4.1000000000000005,41.54974568141203,3.4620607332108273,-9.71298044480091,-15.474011236825907,37.30638174291524,2.7002217104437505,-9.750770753399976,-29.134148507963207,40.729716464562834,-0.8981736401518955,-7.732650412074225,-5.783750265259558,37.84023941145314,-0.2600422540882278,-5.1000000000000005,-4.119250233794568,41.46961091906171,-1.9779639961107096,-11.175521290648115,-3.4753493288020176,41.85960156315816,-0.9906397329671361,-5.100892862554469,-3.1558691757596384,42.51259863108992,-1.0278584876958103,-48.84652731355486,-7.692520019788107,42.09292102091316,-0.6008444122272097,-5.1000000000000005,-7.986138658166139,21.140308722237492,27.35716975795556,33.03060206550647,-12.19652753543339,43.61701375215743,5.7734397380004,20.838959349824883,-2.5646934529070395,43.70532006662168,23.248504736188508,15.778335976382063,-11.39242862150384,44.64089296342166,-2.8996455990598675,18.24294129030514,-10.432583306930388,44.262858369085386,20.494171314006408,18.87651515066056,-12.612152333140756,44.56720338926573,4.387200545083143,4.1728485638353865,-3.5879441943659773,44.39990008876343,-1.6837391083832127,4.861360358547765,0,45.83280324928906,6.531631654078949,-0.32239301150383476,-37.66973723279825,43.490693622477835,-48.8242673079413,-24.281921131246776,-6.288401617275586,43.164096385987996,-0.04924267820519521,-20.730817979935868,-5.001039411526769,41.63564601140018,1.9824648599581145,-18.324802975632895,-7.137252920328727,43.76685521632324,-0.44232775471689767,-9.507896151965738,-31.80303475698554,39.72558830091924,2.7679623397124007,-8.16417068603398,-6.629746721465234,21.732525964791524,0.2150357668784817,0,0,43.56749296352553,0.13596066140740426,0,0,38.1053684988365,-2.6074915503528744,-9.462216942475148,-4.106225916811401,28.511733815483716,28.678732947426298,17.805788893979337,-8.467483268106411,43.93758631230888,5.068402330172038,3.6430521548889776,-6.996407620941359,44.15308258956788,1.1298447701762182,4.824727775945779,-6.700960655384084,44.114975977955986,9.587861182846083,-0.16025901495764908,-4.1000000000000005,39.41901700758424,-1.1,2.2053138131186585,-6.7479390679611075,44.777555869605166,0.9288970427282919,-2.508367653813743,-3.7702582321409546,43.47966619882891,6.230027464013438,3.3205342614641546,-7.203480980759756,43.177417246362424,-0.02993966689211316,-1.0948407061037804,-2.166336414843257,26.854297456474885,0.17296949337120296,-13.642547609797614,-11.219458261567254,40.32645795783823,-44.095760441555505,-5.106976122455347,-33.479498537855186,33.7224967698928,-1.028926033741449,-5.1000000000000005,-4.109613770053078,41.084713488361984,11.811535138545306,-28.596030201115642,-3.649213125770947,3.419342816649532,-16.597539713820577,-7.383948198296816,-7.800368785354751,38.91583251778625,-0.34660159068793156,-8.506736697553064,-4.117227828125,25.601607262848212,-0.813222753507953,-5.100823499534812,-7.703611035129869,43.892541590737714,-6.043748942967432,-5.164174217560839,-7.870474050427415,19.38222871277952,-7.5007548096684955,42.36288238077813,-1.846341226468885,4.095545769270465,-6.106761052145677,41.196048825186125,-0.15655362111621474,4.379481012790492,-0.31348076080329385,43.76323012985735,0,4.7318554394099674,-6.742383512574494,26.845228470072612,0,0,-7.755986627914977,32.092188640610075,0,0,-6.101351436488379,40.34723518478792,-0.9062563477397216,0,-10.213625,25.742632019866257,0,0,7.997704933034805,0,0,0,-10.213625,-5.1000000000000005,-4.157611532471534,37.24015071204064,-1.1,-4.415653748069262,-1.2645528106164166,20.462775383144642,-0.7005448988711147,-4.7468171306724,-32.64267809288846,18.257050442471265,-1.1117716296586504,-2.81076920592669,-0.2115887985247966,0,-1.8437200366461768,-4.452577846551253,-0.7326607433391985,12.205687252323626,-1.0231759252132966,-5.1000000000000005,-4.111602973095326,42.66177672370699,-10.213625,-3.342938529058576,-0.4978949159578015,4.119949898945925,-0.16103709158405924,-4.63001808814409,0,0,-1.1103692072365987,36.81173859730693,0,4.201185999655267,-0.8308997696813617,-1.008119476161754,-1.7526028995898109,44.56227541418981,-1.1,-0.12025279182593117,-4.1000000000000005,40.26143100941174,-0.665598892081008,-0.4635425925296154,-1.0898184269922067,8.13992489613467,-0.7674311710821512,3.828971088043791,0,0,-10.932364246801809,-0.19367600499168636,-4.1000000000000005,-0.10688935085441441,-1.100242200398417,-0.12016887803333753,-3.8498859460021855,0,0,0,0,0,-1.1,-5.1012426890625004,-4.103152861498991,15.375801357491893,-1.11005025131947,-5.1000000000000005,-1.2497885451585462,15.457482676418937,-6.1000000000000005,-5.101412515294772,-0.8714499278780565,3.2016026000278304,-0.9106185653069888,0,0,0,-2.1592482051432675,0,0,0,-1.5286034042361296,0,0,0,-0.6462581905939528,-4.476823970731359,0,0,-6.1000000000000005,0,0,0,-1.162787421307618,26.16102920354397,0,0,-1.1,20.82564975123175,0,0,-1.1,8.226320876242909,0,0,-8.622585047649897,-0.09997400295639232,-0.5129782290406624,11.385820866736722,-5.484626537189635,10.443839734328586,-3.6168174825509434,0,-17.34776335634999,0,0,0,-0.5874052676279126,6.019924322256614,0,0,6.017504448228828,0,0,0,-0.9771510744929259,-3.9866461532554953,-2.1116818658002585,13.840589704702765,-1.1112198951582277,-2.931123753262961,-0.9329454009127152,4.33314394391594,-9.488822498915708,-4.873179126482721,-2.1984559466572597,0,0.03562083930497408,-5.021927281200267,0,0,-6.1000000000000005,-3.6301860624028977,-1.9140488199698653,10.390539267929668,0,0,0,0,0,0,0,0,-1.1051525429560112,-5.101244110892899,0,0,-7.0970137001881035,3.6723269974603214,0,0,-1.013315266208443,-0.47873061347559465,-2.4842629515095056,8.619841760455387,-0.6982424801410121,-0.6959775655335966,0,0,-0.8129876502027003,0,0,0,-1.0585812991684838,-0.015802322635319523,-4.106863859766771,4.289833696775637,-1.4994605481728598,0,0,0,-0.4704946155252149,0.2464617587295059,0,0,0,0,0,0,-6.106691417325003,-3.393528051904629,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30.42352636050619,45.90731350505246,50.57643140983875,-5.800111781467184,32.421456086783586,44.854108551760696,56.87392157172977,-8.476243163853491,33.528900063815016,43.98251362850597,53.12696854733054,-8.979982748208103,17.4861552185184,46.59453640019001,34.021214455592364,-7.211897874425546,28.92260524018149,39.8719945458783,32.57385010086774,-7.261044856198408,37.36554528635411,37.63783733743407,47.402337238511976,-7.54458986605147,32.05013360990509,35.428310809659166,55.18995088273228,-5.410271297402975,12.124886306671074,35.47821914183267,54.09527534393004,-5.997413532539241,29.522274016525103,-10.69308839850029,46.45855248417052,-13.727793696370096,33.97887320846755,-5.215678559349292,57.12693077231784,-7.992486403194529,35.44185285219127,-5.01000281454979,55.55957374781253,-7.774595872779576,19.787953048144477,-5.661337725706617,57.286547552942295,-5.730147544187353,34.469562311683454,-17.262532491202922,55.75915292405714,-3.4033010640853787,27.836518653297276,-7.230119778968169,50.42129849362332,-9.32808329687921,27.641064744880662,-7.543393692450653,57.33710765867232,-9.676524640574042,-1.0234169252256093,-7.646384739547203,55.19224260720899,-5.209687821266424,32.692781128015454,39.71154515766669,52.475453098312734,-7.916595788812531,22.100466910683053,39.97749719548872,49.133906737100844,-6.169585824014759,21.76392285931135,37.62844533548651,51.59657810580886,-7.214974764841076,14.561073373109785,31.191968806479014,54.86872739183881,-7.8708412670334775,24.179124645929374,37.04001334973149,48.38873591036079,-6.956527419980586,25.66398094836726,31.512184834119918,41.342855769737504,-6.607721101740627,19.753089128207368,37.952816138631604,50.03610436193557,-6.491799099319354,29.59612841323996,21.902700528995048,48.23285337648523,-36.08843117162716,20.43619442720873,-12.004823570759855,53.72062162816519,-19.20703027578341,2.8838798302730275,-10.837101259117535,54.66903442675202,-12.126865788902823,9.99782557166349,-10.592696897106128,53.20507631461618,-7.511222374375513,-1.9953002376050342,-14.08791458395155,54.968734820050464,-3.7169678027551765,10.294504606972028,-12.005752400169584,50.56678557818302,-4.510288784245362,10.020382472217275,-10.99845757581937,53.377964692126596,-9.77786654217031,10.019221070698563,-7.487401321217496,56.621839300877696,0,-1.1014020608262205,-5.164831124738724,52.483483831640285,0,28.31872821839751,36.15762298105302,48.331903571669365,-9.332494681657147,30.561376305937223,28.067200916887792,53.090655776287946,-10.7395977005092,26.038518660170336,34.87437002900706,50.77461742207786,-9.118345125108934,16.646392949457404,31.86546183102198,53.80480098155303,-19.245851920995033,-6.6356692385509115,30.461646580061853,53.98667675810061,-8.423950651842532,11.16930119703784,29.885906596071635,51.60058774636692,-8.115421251619077,18.587713204131934,22.23024471381321,54.15140002509851,-8.505935900481083,-0.7447522647313184,33.39789755728545,9.280598067789047,-2.2791064301769324,34.680037319625974,-15.230734730598792,52.90949671442209,-14.171272766172066,25.450414913058754,-11.329026046824339,51.42792850975234,-12.242466601631287,23.468516988078445,-15.96557682762555,54.00016956704304,-29.708220949221325,2.0754353062398887,-11.05571029264434,53.04094232598226,-12.136892281742368,18.128699003935736,-23.350421550994334,53.42017019095745,-17.106066207815225,6.812859588599838,-4.631675809894153,53.90728946657076,-6.826116092141985,3.404760575741772,-14.86997317649618,52.0677324689895,-8.051219240376541,-0.3487819656878798,-5.1000000000000005,53.68995115636776,-2.9111231144302536,24.22773178135217,26.87657371476495,53.14413165269942,-15.685578304382554,16.04851961041495,20.02983759115553,53.05588518732567,-12.966987902984838,3.229127624277175,21.60625193147811,53.32558656710914,-21.5240768098071,0.3088242098514966,-0.03120374274927564,54.66725998897006,-15.752459906032122,14.014567018364462,20.42220904854362,50.95400370822813,-12.35774063374291,4.53322578093733,12.481251013847746,47.25263720442221,-6.838535797149815,0.8416365238805659,7.142608979769637,56.03072770809579,-2.4281787694901737,-0.904846567559056,3.9977103892248746,55.2443115634266,0,16.913255724598887,-14.411288341043718,55.18536380902584,-22.25362430341756,5.62714953197888,-13.588546167813245,52.90165406192414,-7.5500307119395655,11.29686383668967,-10.464865882428285,55.16345285318528,-9.99171241918478,2.0190007279736406,-11.643911852398599,46.851388793385134,-7.392777137885421,1.3398048333649828,-13.483907950795547,47.21763474796102,-6.941984177183879,6.726994293855683,-4.98785080606876,51.63697246106447,-7.646248136640083,-0.21529703138426745,-7.009967804744071,53.545765415396964,-3.7990636225591476,0.82378637047379,-5.803839281158601,47.31816823828337,-8.148715619585088,-11.156247333343673,46.62227520442296,28.76513796098926,-5.162029495154684,-12.437799575965936,45.77735010481215,5.561102138972706,-9.710183572768704,-11.026414853324638,45.595834115094746,5.770701040719329,-1.2818157297592796,-4.788210763401123,44.080615824968234,5.263579619847874,-0.6504538742734788,-12.594832960332116,8.43173905186021,50.590712358333285,-0.8118185658384458,-10.213625,44.597423806294984,5.068888580124389,0,-2.749479933091523,40.43085647039005,0,-0.6275478315305301,-1.1056574018980212,43.80085717195259,6.084560151675282,0,-2.0884229448801666,-6.073049399447343,54.43834210479856,-5.112614435903449,-2.6628132235904687,-4.982854612627212,51.41815721847454,-4.977181474711124,-1.104725,-4.217089129727529,56.70277947792935,0,-1.1149883511329517,-3.126833489736828,44.0080265371215,0,-1.1,-5.177320298238037,51.281403897419644,0,-1.110860729745604,-0.6196387164177488,47.83229426561123,0,-8.212561989140541,-0.8150120794221103,29.348239926734223,0,-1.1057868001531395,-5.1069980392181105,40.07982378738738,0,-15.963697393587834,37.40326914490304,13.957723401930714,-3.8183136689346195,-1.1,-1.0722925224935593,52.99475454534519,-9.74987717124643,-0.9323526056733465,-1.8214075583294034,50.01896446155655,0,-1.1,-0.012354092109708038,49.48730972593738,0,-7.304637980092712,12.73018296284242,0,0,-1.1027999591607975,-0.6483215560643629,53.91806723829174,0,-0.03431980303708171,-1.240186339848454,54.37325474168227,0,-1.0401001369141933,-0.6014610652913728,23.562657823724926,0,0.6010934607424228,-3.0790068545792506,54.76598618167335,-1.5135362203847365,-2.4071399791173818,-5.2094507217421295,51.2616305784008,-4.695976468835496,-2.156888851235664,0,51.97024860032638,0,-10.213625,-9.769524740726984,18.604608050461678,0,-1.110796703257268,-3.460109230274169,34.220397798465655,0,-10.213625,-5.593974533127277,21.787830117225603,0,-6.1065363510839665,-5.029354962459553,4.866116260231929,0,-1.1058846328964214,-5.117133596329751,11.00141508995046,0,-3.3843856453653265,38.43059667926645,18.139816412855225,-5.767382596128712,-15.875093180465878,39.6354757268644,5.641620071718476,0,-2.9606621590682174,33.13705113259625,5.916063420542364,-5.272911735268964,-10.213625,20.644664029243735,0,0,-1.1,34.93896706201313,0,0,-1.2330631684688047,38.662283184182684,0,0,-8.173133567045994,33.336508358328416,0,-5.106131619805211,-4.631442554061799,3.935847921886621,0,0,-1.1062407584762635,-5.1000000000000005,51.91601904161292,0,-2.4396440644034123,-3.465729249881581,40.49647372867031,0,-10.213625,-7.447336595802845,38.25855027531952,-3.429082251469156,-10.213625,-1.7958940826617906,19.221888312075944,0,-7.975990489763886,-2.1740890908223345,48.79996355083776,0,-0.9980496532944603,-5.1000000000000005,5.156878447527178,0,-6.111641087658803,-2.318812285288352,5.71698813796752,0,-1.1113331378418525,-4.780279075646091,0,0,-1.110527046875,29.548862386658413,0,-4.188905058612674,-1.1,-0.8970618938206759,49.8089845434171,0,-1.1048971980014533,-0.7841505857024332,53.85490914750824,0,-0.880125836350495,0,28.393547088695613,0,-0.878193192317688,-0.07099695490502254,53.16243344470307,-3.473986613296458,-1.1,-0.35797219711893835,22.764075657567663,0,-1.4048515709545475,2.6144697080630306,0,0,-1.1101241878896164,-0.6229346533096982,5.555922521052074,0,-6.111601478786146,-4.939488677641627,49.724253580561204,0,-1.1116113822180889,-5.115615487310316,47.98337465413362,0,-10.213625,-5.101105346211216,21.73340994782538,0,-1.0078930502497483,0,0,0,0.3665131935149837,-4.5979498875523985,0,0,0,0,0,0,-10.213625,-5.100550458337145,4.925436435828422,0,-61.266129437308116,-10.220507022811521,11.503874115525484,0,28.652621056801905,40.49557599084517,-2.426938615368933,-8.15044937322121,26.425067656379827,45.325330298102685,-6.880445066528113,-3.8563204529927018,18.820889815600786,41.93532183388669,-0.40557608090787534,-5.189644297239905,4.514879236743003,46.71451377618162,-2.736700757231234,-6.538706424555916,26.346048188013945,44.19897330881901,-4.340969947857854,-8.783642722320813,8.547413036465116,44.545729640429066,2.4542918944608143,-7.477235865958011,0.45298505604725037,40.996988910159644,-4.342833421424232,-8.809729098476973,-5.884450483310278,44.747615966646,-0.9790188843062033,-13.237511456074412,-29.555829739992802,-9.952090194652962,-24.423605527128096,-4.440793015248391,-14.72649787345962,-14.954930703709072,0.2739043116343716,-12.428340389981614,-18.927777062347076,-4.47193071014589,-20.707393318988608,-17.646384549919944,-9.112281771548982,-31.16442464011042,-1.0818082961378312,-9.402033778667436,-14.835162735754137,-9.110528833301787,-5.981145261579219,-4.816345875410805,-8.650201482853124,-8.302337104772137,-9.236822406488837,-6.029750116756173,-12.619377967471564,-7.13033670934,-14.358868646361636,-12.838418075477298,-3.6832683110377586,-7.175760808940716,-3.6254686277398998,-3.616343260548401,3.2055651397222995,39.5571776422999,-0.4979393044553406,-7.611987581098283,-10.65521796787163,-9.268005740238184,1.3168946063712692,-29.5483871852324,-10.306954267454184,5.2778918493358145,-2.4197960509018346,-9.842764077327644,-12.348647489801001,-10.061164764277441,-20.063649255811065,-13.318356222676899,-2.4967807737595695,16.356935609088932,-0.3155557552336601,-12.102595149939322,-9.17824942369944,-9.625067861241735,-2.5479189282585573,-14.316201891369271,-10.693277254048324,-9.724140675266582,-2.58730157255665,-12.065198538620892,-11.969671799560889,-12.541743496537784,-2.7606671449393083,-45.2633714629013,-22.152849913280875,-12.856570688947535,-0.20708878962863952,-17.31574878114629,-5.1940872161284775,-10.189520677082559,1.5558922582936725,-16.471483773735002,-10.251437222309812,-18.452940063995815,4.740745151891139,-33.51529166602502,-4.967373918549084,-5.1000000000000005,2.3354351660329966,-6.478951502913953,-8.335460778417117,-10.80283391522837,-2.5233423150674725,-8.913202743873706,-4.204740300204395,-5.1286252008550655,-0.8427275574942837,-7.24708638344715,-7.62895807678255,-9.134915496697628,-8.142089914272834,-10.352065217060572,-60.041462055584,-5.107231633812661,-3.630351767283223,-7.126332302325445,16.371305961469343,29.12744929173421,-2.836770065411492,-10.022553195087866,13.999315042566971,24.964505988090686,0.6437859689514142,-4.020961730571908,-20.358450630500485,1.9918378132132362,-2.4183362925653213,-8.835176578528513,-6.681806215586109,10.383097758310422,-4.3076855568784085,-8.76194276831259,9.787038286261016,11.556790202347676,2.688412167750904,-11.905601726969026,4.475824551015233,21.518341533134105,-4.809695935202684,-25.067297785984092,-4.310530183316253,1.3026199855636484,-6.503229219692689,-8.300844205118999,-1.633967346682212,0.865084008558576,-2.888003906361973,-5.10137129593214,-19.376274478892654,-14.126711694919459,-2.920529230489473,-51.07372146484603,-9.721170552183022,-14.571889138548183,-14.932773985363804,-25.63107145610543,-11.675724053048729,-12.054320834124304,1.5968656794294174,-13.821157927015843,-2.026433545481061,-5.078792679779971,0.4327238516204457,-1.445061056112637,-8.439864476375059,-7.628516125328023,2.8207736139449704,-5.845287052059038,-10.518174595238117,-11.986897983717114,-5.479892456076346,-11.535144043807318,-4.831471643022423,-5.101238803943286,1.0402095563404143,-5.107372146485804,-4.628420334673552,-5.106989196824076,-0.7145072461446833,-9.691418911939518,-2.011661142141529,37.60271567225274,-0.38270240119605253,-12.071687666677319,-10.424918943963512,-9.639073728653008,1.5492293655973317,-13.824105214805057,-7.231531396370384,-5.290507345624678,-29.820239594409816,-8.766478385752974,-13.799934355488126,-12.470433842917641,-10.505550232957193,-25.012886642114367,4.088394705613875,0.11666198197295884,-9.858558601115664,-5.101306800281501,-4.1428100115159365,-10.094945493341886,-10.886782553638938,-18.37868100174741,-11.830689334601553,-4.278918777176885,-20.669619463786944,-15.027055401145153,-8.303985631105178,-4.614384716313527,-2.052395938959548,-3.69060354819578,-5.92555484987951,-6.573394139784418,-7.937263807543111,-9.759879143300978,-4.454992972955562,-5.1126091125,6.476863418678181,-5.1000000000000005,-3.6549494627549035,-5.196733441308661,-1.2891832577997357,-2.4667056978086914,-1.9304108444145496,-5.101243264086604,0.03274886433945223,-3.9031612880124835,-4.16931093576482,-7.033993579720319,-3.1537335901751775,-7.1093003416898055,-0.5964874128833294,-5.130777990145171,-4.014791095296718,0,-6.518151223594633,-4.718849758040981,-4.18111561859959,-1.9961752092874603,-10.456192004693454,-33.07658905073146,-38.58506587606028,-24.470304289195113,-5.760669396297427,44.30099239718698,-0.8724030053677069,0,-1.1115889059404822,44.884595136775694,-1.7225748638206646,0,0.9953969533289488,37.40878084419948,0,0,-1.1115124068186775,46.84338818074906,0,0,-10.213625,41.050895553828276,-0.6399321901109507,0,-10.213625,24.89479855584377,0,0,-9.066712090089586,16.869338902214732,0,0,-0.8144608553917806,4.310933432241802,0,0,-110.12579755555505,-8.893842624399847,-17.37835367499942,-12.112049389707614,-4.362051166960114,-5.103882081680975,-5.853563627345757,-5.44406979773109,-13.920801221382563,-14.681914010541524,-3.5296365255443627,-5.107364092182378,-1.1122360490349386,-6.624761521465733,1.0520732450550754,0,-10.213625,-5.1000000000000005,-1.8039387113018104,-1.2627503202201313,-1.1050957115762337,-4.175937655687331,1.0811032549889372,0,-6.104612500000001,-5.1000000000000005,0,0,0,0,0,0,-1.1093761471603893,39.097772608763165,-1.13678598682719,-3.690808512405836,-1.1,-0.6897678059833603,4.266759261352484,-5.106295378800836,-3.5105127573095585,-7.901369916417869,-2.8057684162075045,-4.677426490113725,-1.1107312903756494,0.20416042471666826,0,0,-1.1337901177396812,8.75356592945271,0,0,-1.0680919685482204,-0.19983461024869215,0,0,-0.8262945969002409,-0.38212352877079403,-0.6961508735773343,-1.2572105235186477,-0.09799177432702032,-1.0392007474896545,-0.14621783244765182,0,-2.7083517957537584,-13.515041664044446,0.8970568128447202,-4.38211407975703,0,0,0.8512893431861133,0,-3.817789674956549,-9.75863129807338,-0.46727070488998734,-5.106898757939921,-1.3771880387062747,0,0,0,-1.4702445143174128,-3.2608253825919613,0.6560812649306129,0,-1.1052507904216355,-5.107030924112106,-2.8501722817507344,-5.108120444206197,-1.1161739709029053,-39.92871669592676,0.5140950627523161,0,0,0,0,0,-0.23575422836029425,30.36366230789735,0,0,-10.213625,24.994978513737877,0,0,-1.1105947252909296,30.09608422198876,0,0,-9.790416199696857,0.3999281471561251,0,0,-0.9344122124517604,10.470711853928442,0,-2.5134014040710513,3.967798537002256,0,0,0,-1.0515954978176567,0.34128998240248,0,0,-1.1211060110319084,0.8110765581333914,0,0,-12.668514960658683,-37.244895714470175,-1.99952898950864,-7.580505867966913,-1.1059993077447265,-5.107049937846997,0,0,-10.213625,-5.111252703719632,0.017388998941867583,0,-0.7909399816549488,-5.1000000000000005,-0.5039191013802061,-3.787861788656503,0,0,0,0,-1.113374984664923,-4.680316908474974,0,0,0,0,0,0,-1.1055376136828707,0,0,0,-6.1000000000000005,22.809766784927465,-1.1412896125668541,-5.1000000000000005,-0.5283391231673374,-0.6636843836559101,6.3575998354684495,0,-1.1,-0.47083236939805395,-2.6921343629223506,-2.8399559992212455,-8.109477574312294,-0.824409275102131,-9.200289130684585,0,-1.0536432665828792,2.980416104668823,-2.8672177779581896,-5.118050357065,-1.106862743796432,0,0,0,-6.089407203756063,-0.08005946999887742,0,0,0,0,0,0,-10.680541374949689,-8.479409570721062,3.825516251173467,-5.10124375759947,-1.1,-5.5809843115106945,0,-4.185167648026888,-0.2549599630561172,-5.21230027993637,0,0,0,0,0,0,0,0,0,0,-1.1149508205134775,0,0,0,-0.8609260518783979,-5.265785406884612,0,0,0,0,0,0,31.98236526272946,35.43880499512446,44.79240823654412,-14.173862690752435,28.414029570437933,35.59398530485368,46.96524666994482,-11.763982674595576,-5.6311274417275134,45.65491195819326,47.84131045413493,-10.983579613757339,21.23496270618124,43.48274081042347,33.96846337827577,-4.294939625141028,28.970477261637154,28.04808857269863,46.92688997509817,-12.34244596849673,12.480617306821516,20.101065557141073,49.66816410233352,-4.321195529646101,14.316848690757704,24.648792597557936,48.7266523849888,-8.702961982962893,-1.76296991579762,30.402923864516808,4.725386922751448,-3.001392740214071,37.272683098463546,-11.08161249341167,48.37098872522329,-11.812209869899469,24.364631528511964,-8.852845639055008,47.914360430610394,-19.072479939382607,31.64021541530756,-10.25016755348355,46.785954450825365,-17.04068584728036,30.144341006861815,-4.775996667823138,45.85178665264766,-3.580240523866638,14.27199371290359,-17.10311604630912,35.017589814138056,-9.80683768376297,5.8559911163157565,-3.288540504158115,47.531505958336574,-6.230853210729862,-1.0231579451041664,-5.968312408447126,45.4154619433985,-4.553422905233563,-6.108215083994747,-8.625482592298699,41.704428625961725,-5.472211108294541,25.6880775533266,24.165376490460883,38.48467938587777,-25.100803663280008,19.30908882050317,19.02173527774462,43.98713093249988,-16.701639022370724,12.598103074347728,15.928289102588606,45.156833810175364,-14.249811638190682,22.523861785231126,11.287405882612944,44.73744103220984,-12.740652317548326,13.35617452483222,16.55099861415451,39.497651815975324,-25.81516643101253,-2.0557561437927188,9.353086438223965,38.75414841352386,-3.227884262316252,-0.3061292822942545,23.10433903723687,43.558939330476825,-9.117660811857949,-9.683238594136068,-0.13277677019148534,43.61750627384745,-2.072530801687152,24.44308853944825,-10.867391956347612,44.29270305441992,-6.9136664823498695,31.75905389556944,-16.052247558785425,39.97648156931623,-6.254545625995892,-1.0212923686191944,-15.710025501925616,45.96071699415923,-9.402372627024086,5.561502308178708,-10.199585323071666,41.73368306152813,0,19.775684320947953,-19.629860651639262,46.43535748730492,-9.927433632803373,1.4359205892305726,-5.112574288199649,36.53739294027266,0,-5.157375,-4.9013914424734395,42.84132563961506,-19.860952239893557,26.51748885341511,0,45.003200508152325,-4.030680433856927,25.33449008673047,27.962855989499595,45.975311460156,-11.120805347725735,20.78898914591823,28.338620668878814,22.551761857999658,-13.503883675571249,9.481455686181027,9.20395198943633,45.35953437819592,-11.012795520551625,10.625394748295474,20.459703776137875,34.2169500162122,-7.917192246604319,26.170070604726714,21.555621604132345,46.3403069199604,-13.122080571918522,-2.3034648621410687,2.9337352920583317,43.59614897623316,-8.877913272422713,7.868209492655321,27.36919387923302,4.896617504258691,-6.995860557042058,-5.539384138089828,2.3724530493793994,41.638493179884684,-4.801026912454616,10.755630174099606,-8.86396274784815,45.77907197712514,-20.36913156268965,0.9670902131506016,-10.008901720255501,47.69540720749415,-2.187839597020387,5.725137733747493,-10.647401085647735,31.53698582790598,-43.933897431340135,8.32968671183758,-5.107000627740029,35.05673133459054,-3.642601933428179,8.091699934715024,-8.337108996883499,43.37631578893424,-6.043639610564625,-0.008069235912330441,-5.16899585994112,47.21467860310699,0,-1.026842049526948,-7.44856376169722,37.68129879455624,-8.903007858004097,-0.5913032093751939,-51.01150745079453,47.15002594342941,-3.227462670273971,15.291198894115196,27.89433036157874,16.017767533415604,-39.44622651940495,12.111799591531549,14.828527509691115,42.20078327067077,-8.987171238214822,6.373688503835475,12.730592998636638,34.759403721366105,-13.982727080794602,1.7574934332360201,0.27145408679253985,48.165453074906296,0,2.360821943626089,7.335228043989758,47.89852240947496,-1.9065954218915881,-1.1013679724501904,-2.6362517218608144,46.30587508688264,-9.427113530180677,-5.769848020569721,7.8378153975037055,42.69612807724911,-3.237855127852565,-5.856434020754301,9.483937523667281,14.506727926721858,-6.415911465692722,6.936840123716793,-15.462033001904917,45.74112585558221,-3.3090380348747432,2.498226210070736,-9.705760440687413,36.610507936191105,-3.7904174737460843,3.5381170055604025,-4.916036284709346,46.53094415934758,-5.1000000000000005,-3.230964092828212,-9.703497338051214,28.413081256060416,-4.522160761724009,2.0635310779084417,-12.76158785874827,43.9536872975129,0,0.5163084231738208,-5.093526096965229,44.93177787275987,-3.652414859466413,-3.3051806491847326,-5.101040429487381,47.19998222901639,0,-6.034779753963583,-9.747747714500889,31.764738006423336,0,19.672037790545296,42.53474654940524,0,-3.024390223265172,-10.213625,-0.1,46.20554300217814,0,-10.15302876784277,39.079361453177846,0,0,-7.1800760632670695,15.570571898381797,0,0,-0.5304776464150487,42.4144429373421,4.625188493353428,0,-6.536450376283039,9.442763810417294,0,0,-5.861964836659669,29.942564802376,0,0,-6.123779947165587,7.579325017890483,0,0,-6.104612500000001,-6.314363830469918,47.75524457478551,0,-6.101175693074411,-5.1000000000000005,31.583167884203505,0,-1.1053914740486719,-5.1000000000000005,47.53473275725125,0,-1.4887847082119785,-5.1000000000000005,13.037850887959396,0,0,0,37.436773780676035,0,-1.111287035630299,-2.190195061602709,10.75757913343913,0,-1.105688775112824,-4.998527900253445,15.851821851372264,0,-0.34139622766381933,0,0,-5.670058296166074,-11.968245921881518,34.16625805229785,4.350661939365791,0,-0.8047139216116315,-0.9567868210449885,47.12850864130126,0,-0.7784853695451299,-11.945740803886357,21.143652764651772,0,-1.1020088902299356,-0.19253195915317858,8.420237667590659,0,-12.048278182810378,8.614200621876341,0,0,-1.1171269966319517,-0.8100246605132526,14.653394349962305,0,-10.213625,-0.5911640651896392,24.89611537216093,0,-1.1,0,0,0,-0.7067316385369411,-3.461310129340558,26.086765611270934,0,-10.213625,-5.117227828125,8.421437358234975,0,-1.1053452891162021,-5.044213096300223,4.5793708587318305,0,0,0,0,0,0,0,0,0,-1.560327845662339,-55.59292285779267,0,0,-0.6610892923512265,0,0,0,0,0,4.391237505660047,0,-8.18966644943217,36.883606105548004,0,0,-10.213625,35.76621814173519,0,0,-5.886640349290907,22.13116003217846,1.4279553148076172,0,-0.33161754244571995,14.15574826550526,0,0,-5.9235294306352495,2.0259919852630506,30.620570483163746,0,-1.212090995036597,8.92410729602491,0,-5.106990147147879,0.5172472040254338,0,35.41778702996321,0,0,0,0,0,-1.4767787533903034,-5.1912331286487765,41.85399371191033,0,-0.18140833911963342,-5.1000000000000005,49.05650977258381,0,-1.1107690874096559,-4.950767163863736,19.88718211827264,0,-10.213625,-5.1000000000000005,5.009254229040078,0,-6.105924656730109,-4.866426604535201,11.248260591558555,0,-10.213625,-5.106647730457264,0,0,-1.0852335344586097,-5.106875126201224,4.685772220214909,0,-1.3503439314654604,-5.102011449223561,0,0,-1.2139966328144869,33.73876890903988,4.899705707418569,0,-9.584302569850182,0,24.780881526277625,0,-9.410117342748347,0.33260368504900123,0,0,-6.105974808918221,-0.19369460567806468,12.152192424790035,0,-1.275423043216219,3.638423333136227,0,0,0.19281206874938697,0,0,0,-10.213625,-0.8547238771221459,0,0,0.10762807088382492,0,0,0,-1.6360827363042825,0,6.842943269862843,-5.106981794327181,0,0,0,0,-10.213625,-4.63056627999634,0,0,0,0,0,0,0,0,8.659619091762957,0,0,0,0,0,0,0,0,0,-1.1109030657505021,-5.101360261342987,2.621681590011171,0,19.096112581317293,44.19491903381088,-3.5305984263874897,-20.24104866908308,12.453031484568125,41.290566744909285,-0.2725054240136416,-6.094285591911665,4.809668062180726,34.18944683610714,-6.644788643787339,-10.465272746294454,6.335588962084165,33.29258220148224,-0.3452789852193668,0,9.110186377066581,28.82353894514425,-1.682684497959123,-6.646365254699387,-4.901566689336442,35.87337741868784,-1.4176073190799074,-5.437570971431447,-5.157375,24.0834357175588,-9.50223355247136,-5.8141907099642465,0.4848179518803997,29.902681535754677,0,0,-16.260391465557483,-9.627561682154557,-27.612106283581742,-26.651791465140235,-13.520626401873955,-10.038765486213316,-8.493559695742183,-10.55771615417982,-57.60613450303489,-15.161955374164469,-9.479816901076713,-18.643395225283868,-8.507584092779638,-9.924578078545297,-2.044794965187608,-9.882683386061592,-10.772348736786,-9.81490358166039,-7.649456272175616,-7.042881938514595,-9.052947488660656,-12.631199847644696,-5.8705517685495785,-9.4312886557391,-7.858698647888566,-41.86143644598475,-11.752570396228116,-33.960635093670135,-4.864457805219944,-51.06171197137594,-4.953076962462113,-5.054630225494164,1.1628218306060374,36.95296399336164,-1.7638138048139016,-11.802915362980476,-10.753232295693543,-11.129690085806981,-12.493679363832003,-16.265584320824367,-7.080867062287467,-1.2066985763243991,-31.86534965850778,-24.113389175057304,-19.319241495514106,-12.173054117983256,-32.28834967871307,-10.749850443992552,-2.5583492373336907,3.394955823464856,-9.716780271088668,-8.762807392356567,-10.864908651092142,-9.365450827132916,-3.9414523458508244,-15.032363381409922,-9.039020367845184,-9.487840111774702,-15.007880654136432,-24.338102224052072,-6.820142590021399,-9.136730731934351,-9.687486717256142,-9.095703193623052,-60.02262800046109,-11.494173853099337,-7.221341749323242,-11.362614856137577,-7.537104527891558,-9.803645804322894,-5.976233359030729,-10.710156387581272,-6.369692601433245,-12.289719520245129,-8.568991108336217,-8.102982845443641,-2.5109055364579684,-5.139827882586189,-2.3013781410686143,-3.9852151146404866,-1.5661214679242768,-5.101178039621363,-1.3494031676833529,-5.1000000000000005,-2.6206962794391435,-10.087960657395836,-21.149963452368983,-10.378732925811628,-0.5180784943772481,-5.100645653512618,-4.101249572415846,-3.7011338641412324,-0.6532192939693607,-5.1000000000000005,-4.107107560895222,-4.26957360759767,6.243814301195663,35.703581829063225,-9.611691324251348,-11.833898490708652,1.6624965300132928,34.03740731747185,-4.037589362720107,-8.616493372144799,-4.544515662597485,12.764249686885924,-20.084382125642904,-5.078109151041478,-3.20598604896921,3.167364235767833,-2.582794384961928,0,-0.4289723242285186,13.36116536389664,-3.1370226337847575,-5.101710234968927,0.8280820448449545,23.17283076057764,-0.2071441673917569,-4.643714849690582,-1.950526126023179,4.014615387608296,-8.8142820254354,-8.437300973043788,12.074771567114192,-1.2029938846412136,-7.7963461386180395,-5.1000000000000005,-15.200550535311944,-12.933953905000203,-6.6687857612561885,-17.548720082113952,-11.030505430487594,-17.125673476406032,-9.186760672296158,-14.329612348876884,-6.2834043734818446,-8.256632888175172,-6.808409693311249,-9.356659203072994,-0.6295982775555323,-5.1000000000000005,-3.555787642980259,-1.105501652990801,-7.146141104477439,-8.489595409517026,-41.071539213411256,-6.987435287537365,-4.790604643855549,-51.069889800648134,-4.651109540786319,-6.703984870891658,-2.4992310076526443,-5.069309945499449,-5.231340461913722,-2.6815790268439192,-2.239475474040773,-13.828593270239235,-7.137976381147471,-8.868514813766442,0.05143427914362747,28.054136830202488,-1.6667562764779165,-9.244893556543296,-14.109641298335314,-11.144587824214273,-18.99363981062131,-16.04571884629743,-7.879343179628074,0.8361929493874545,-6.450778379393082,-7.878828678441453,-13.853806272692998,-10.166615182060285,-37.244849951039434,-11.090973668724518,-4.599778279105166,10.967401032601513,-4.1000000000000005,-47.04988769683096,-2.764466034431466,-2.9348708367734218,-6.836466912353556,-5.092656517971393,-2.0232679962359503,-1.8676682498419346,-2.9195645360231883,-5.193583530154713,0,0,0,0,-5.800965018241619,-7.664827768225939,-6.08445382590415,-8.912668893240982,-5.97810666064713,-57.201555279867165,-12.630394469721182,-17.140575801417466,-1.36970018255292,-2.0539812400714053,-4.101243816438127,-5.101097731035156,-0.530081993236907,-5.1003862987261535,-3.2945305933313103,-4.657821062118807,-1.0898240811476863,-4.858769433107693,-0.09454756144519294,0,-53.83564284872996,-5.100911532374488,-4.099479372349511,0,-0.3104625457549885,-5.1000000000000005,-1.5773084355833984,-4.671872105697507,-6.133975445735796,-5.164275722376453,-4.080764242783069,-5.10135,-15.709270258400895,41.30597342265544,-0.15193177487163112,0,-6.564192099060245,23.084940733119037,0,0,-2.856282892925714,24.258391566815693,-0.5143725155868921,-4.737999271042354,-10.213625,7.917246767099618,0,0,-6.1000000000000005,6.400321386397025,-0.8534585429873275,-5.107004582748466,1.6809300007309806,0,0,0,-1.0433560556340327,28.05096683212092,0,0,0,0,0,-4.041693771593281,-11.207326335892532,-9.342921801999381,-4.820337804068617,-9.7055050453125,-1.429656304967606,-5.106982721511246,-1.7418518724179224,-0.6363286632833819,-1.6074239359548081,-0.913641299089727,-0.17490429600801038,-4.634000893513341,-10.213625,-5.1000000000000005,-0.13145622792464523,-0.20416382231406446,-1.5379226246735334,-3.730928979568715,-0.08542995073191549,-0.4470684309346041,-10.213625,-5.158708367974123,0,0,0,0,0,0,0,0,0,0,-1.1125868400458077,9.57143079162376,-3.5364676678205678,-51.070026754056165,-1.1048872101365328,-0.6145950499019008,-0.3919494011400218,-5.117229947923999,-1.1110906164117746,5.412765775446532,0,0,-6.1000000000000005,-1.1794806141179472,-1.4691654123031186,-4.632277929706805,-10.213625,-1.6862037817567495,0,0,-6.077654499027268,-2.6750550455181834,-1.1916537782834546,-1.0926170201224465,-1.1099300225648503,-0.44454894107253917,0,0,-10.213625,-0.522417207007766,0,0,-1.8540220193781367,-4.163973931021326,0,0,-10.213625,-5.939975182110672,0,0,-10.213625,-5.101231335630182,-3.5051823174915873,0,0,0,0,0,-1.3850246548421734,0,0,-5.101010099293914,0,0,0,0,0,0,0,0,-1.110797543908383,-5.106868157361597,-0.5235521827119172,0,-9.99144886765134,33.66315641597451,0,0,3.3865398877883903,0,0,0,1.3885896677671212,0,0,0,-10.213625,0.15365522062024103,0,0,-10.213625,3.244149136678707,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0914995634711022,-5.1000000000000005,-0.014293310357962241,-3.5090543483177443,-11.322261227886209,-5.1069992827180295,-2.851357674992759,-5.1012440172716715,0,0,0,0,-10.213625,-5.220362705272705,0,0,-1.416027325948835,0,0,0,0,0,0,0,0,0,0,0,-1.431130421804113,0,0,0,-1.3562349581232491,3.930265614579675,0,0,0,0,0,0,-1.1168282092919022,0.18264692348559836,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-9.513179152463316,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33.309475385194645,44.474215589075875,52.608350587323976,37.74305893068288,7.007643283399745,39.84297013361412,56.6450617905804,37.46579160559026,14.76478437586092,40.85617948646017,55.27251889321621,35.90163652239666,20.22706593339195,39.54540587018273,56.56588703566826,36.31560573477336,26.754546827158823,36.68935920199014,39.03475206076784,36.53971496319029,22.32033064713601,32.70430006193578,52.19763726656943,35.774899981035354,21.155646329541998,37.201040406996476,52.236844580641446,29.729637907826657,-18.530577784786686,27.60857814490332,52.96104526412684,25.66294298706524,27.27453200884478,-11.364786350228838,55.76800810079535,36.335277689974106,34.795569444960805,-6.258525276076196,54.01935573448339,34.99194734473953,18.93938329690811,-7.03384910757957,55.49466923147154,37.35757417199239,21.921656748784933,-2.8121219051299935,54.2271070103425,32.59026223450683,19.647945130118902,-10.141431703798176,54.24943767754687,27.710288734477754,14.907708271209314,-8.384645793833576,54.97544101575455,25.92572768625273,13.612074891941102,-10.819258249187996,53.32642273914641,30.528896963545645,8.173004293591182,-22.446300499135226,46.13286598189669,26.670997893261816,24.774688158649433,36.41059947740382,52.019813428164525,37.26371269035626,12.166649133321448,38.555029111236855,52.95125658731002,35.789358020461094,-8.98196779331527,36.80719780103201,51.53656159443267,33.27740246644377,7.229134512144327,36.22810645666779,52.416667688059704,38.59071440560142,23.491791449792103,33.494347868964944,53.07112956890903,38.69218105910858,5.488039233054447,28.045964291687085,53.942798951771856,36.94343263428845,13.47288240129146,28.17341415176465,54.25659050555301,39.02556548722903,-3.4827726626666653,6.064822057980123,53.01212429467087,7.567164099060964,-22.504131458060506,-14.6952541027677,53.702604507420986,38.50151761690082,8.775281902755484,-13.373471105768362,55.234011118507404,25.809351640211887,-6.646409196379569,-9.262287504750047,51.45453385521031,27.472909111924682,-0.17974514703217892,-10.132444450563451,54.98030322940159,19.295654632051967,-3.255681713567478,-22.48591889495104,56.02876576111477,19.909435290170222,3.60630002778968,-10.704636583164207,53.671320319879484,13.682180124766093,0.6528977119507919,-8.433265236536506,53.119878055807916,10.59484972673075,0.42564288501491854,-9.690000000000001,52.51400526203779,0,25.308073665655893,37.04576709999595,46.09409808972408,33.857335904478205,24.49178038300375,31.073142881836258,51.984878926559354,31.644023200741874,18.79011692906191,34.61592446698664,50.826596427380984,21.915349476278223,12.55581416860214,25.179787639961123,51.435510281438354,21.67468790699405,-16.727966112000317,40.591131209289266,20.650635513414468,23.058761170509577,18.807054185062608,29.192846979763164,50.820936137423644,24.215130700941348,-2.9522956677384613,29.63508946101666,52.30286381572853,26.15780099596185,6.800054783022105,27.22228859387626,48.654853534064806,15.434166217487485,23.629668536744077,-10.505729425814941,55.275324429241905,28.90041763041783,17.05099590142059,-11.953192881155328,54.47104087691077,31.836899725631138,14.686575369911361,-30.971742617716433,51.53304561285043,33.664346540750294,-3.5376317145086693,-10.527500756711348,50.86821931285337,12.359517076737141,20.018548227301757,-11.063269440795239,53.20389207646165,35.30576939392388,3.1305558289104396,-12.531374631519439,54.395568377180425,6.5406098892275395,3.48433452384804,-7.963707884677714,53.33869020841509,11.87751403132154,-54.13682379855349,-10.910222497149547,51.95861868555201,3.218481001411263,25.99205589137779,33.969738954473954,52.276582093127566,35.173859071945074,35.35623501740725,27.98251951164276,54.501348398439916,29.180824124188057,5.411703159291203,26.951979852074057,51.33580710229981,31.058843964521664,1.7343919365304692,3.5080334727312286,49.41645846925999,12.574584583358666,17.3740486035212,32.13152751560465,41.2308104501285,31.351367724124664,7.859943272869798,12.936638326968708,49.91813342619958,12.80630348609407,-8.398425048198764,-0.12241093261803988,53.066092527490696,12.795668592241363,-0.19357213397184148,5.186001595190139,49.38427898890871,3.763860984776212,11.425446309035737,-14.098911558558989,51.54236072024688,15.31937694576608,6.47483391716146,-15.395674707918632,53.0861755860349,12.933123336104986,0.3323350361827697,-8.38603049752016,53.67128053310458,12.102367792721658,1.0153501053852207,-5.153348044566332,52.316331733161846,0,6.665960727245217,-12.075979039904734,51.431168921788014,6.201669608386033,2.283671378889311,-18.74117970089801,47.501075703037735,9.719780099595804,35.30838057463394,-29.170475805392044,49.179516644420154,0,-2.069956995083915,-11.404967744057458,46.84849790782741,0,1.3826414586618143,39.39605393345259,53.45050239794734,-0.646934925888526,3.924020148751156,48.4968334872365,34.40573023002853,-1.2770355543451974,-8.171665432386037,47.28163000607555,0,-1.4851207357591378,-1.115570997314731,11.800419062153193,57.30433641862191,-1.3800380302075748,1.7815626276527752,42.34771751177212,0,-1.4252870085975913,-4.976024750742413,0,47.15897451640521,0,-1.1113550468259061,42.758592260686505,0,0,-7.055533285146616,-0.1,55.14214788460831,0,-14.237645443269955,-10.175784172482388,52.80382482976937,-2.7563419405522307,-6.096403534870298,-5.979822715845067,54.694262006513654,-1.4355618698633514,-11.253994510148125,-6.682091910589474,54.54381102586787,-6.351083912564268,-1.1,-3.2405288402403274,53.081352720356215,-0.6767261228995101,-11.104676679962864,-9.053318741878938,54.34531708229973,0,-10.15659000723322,-1.21021582873476,55.46943628448952,0,-0.7063441982641891,-4.9860103672896265,51.22207265752092,0,-10.684247675931191,-7.445841515136056,35.765185064468696,-1.7185908199847786,-14.027417491508103,37.70976919889067,19.39037405968064,-10.195234557953595,0.0480161410658817,-1.297819323078222,50.47843579926425,-1.3550467020545718,-1.7789528322444303,-0.026942053699928747,54.57824327154637,0.1688389398854644,-10.213625,-1.3873768757952123,54.840371810206975,0,-1.1,4.0806601323074645,51.440118656786375,0,-5.669922535641175,-0.22778089932430726,52.06802511689647,0,-9.932999511190372,-0.16060893974090729,50.431849376963584,0,-6.101244203343212,-1.8702696965771999,32.77640065541285,0,-7.805745401854782,-5.816225179673758,51.226072546052904,-1.1952272404646425,-1.1052989843761976,-5.4638062166007195,53.833717550611055,0,-1.1064481572515241,-7.728947609374271,54.308511286423666,0,-1.072051028733019,-5.1000000000000005,19.15299088243031,0,-1.2179112770308134,-2.5287168382518868,29.010664016122014,0,-1.081052234598045,0,39.33273291002302,0,-1.0880753134559211,-5.1000000000000005,44.16447777070341,0,-1.1,-5.1057375,9.524238676411382,0,-5.08586814960482,38.39207265225351,19.27792811693431,0,-3.141685935503583,38.79087440317924,5.804011199866216,-2.484347741746845,1.3919661946535216,42.06028255058391,2.4817086048944645,0,-0.8492897420269547,37.10362452645883,0,-1.227114610461227,-6.236609974412058,35.782619442030644,5.727522084427467,-1.420413716248208,-0.7794994609546189,39.65688496159744,0,0,-0.6535631932110677,19.49430175477337,5.423673995550505,0,-1.2612670282200416,12.240285861887179,0,0,0.8051950155631922,-4.744604529028484,46.028134648089406,-0.518788416903967,-5.969095641905582,-1.0238643044667293,50.99230690223052,0,-1.1012064285314507,-2.4885335963123882,41.40702446364253,0,-1.1159429924143538,-4.123479997849012,14.871087500833028,0,-4.16775261676416,-9.608607139733781,47.085318611233355,0,-1.1178609000362083,-5.800398108642968,11.230442283719421,0,-1.7010255059997599,-5.1012375,51.13324777937807,0,-1.1115125449666952,0,0,0,-1.0602284467848202,33.536576983741995,0,0,-0.30055928906197926,-4.574113100115891,50.584483399894395,0,-0.7892344212327407,-0.33303852678781737,50.717463634470015,0,-0.6135880631010208,-1.105213004356171,54.988251146639485,0,-1.0532671955558028,0.32259571356202255,39.898618437443766,0,-1.132151131599637,-1.3999661458189498,24.32024450610472,-0.5807263034057017,-8.826890664728964,-0.6567618658601742,0,-0.5636141490158643,-1.1144187164031842,-0.624415125617737,5.690349266968667,0,-6.101199723840578,-5.00666302735899,52.791261808599934,0,-10.213625,-10.2662541201584,25.095800720180673,0,-1.1103698954089807,-4.832209357818623,34.44077922077194,0,-1.1072440550191436,-5.143403130768621,0,0,-11.333191896659914,-4.206568626400028,5.5497575876597836,-1.1297707004501458,-1.0139624338094886,-5.1000000000000005,0,0,-0.9592469501402854,0,0,0,-6.10129829157232,-10.22048896057802,10.044241466919077,-0.1,23.062124485021897,46.56715956401131,-0.4334976896547236,25.39768292449474,14.874479929906293,42.73495598165522,-5.6483269014379935,30.24795625291551,12.129613465075076,45.16539904868928,-2.055005695265346,21.026252353326925,-13.386666750933486,43.35309467982452,0.4920990391920862,15.258153689752012,20.629485698559634,23.75556673117127,3.997203233509305,24.21197526058479,11.02629784972606,45.10819640139969,-7.462178781760908,19.275889523641695,5.002071769265617,41.508640167636784,-5.343756826315429,22.070228626736917,1.1430373009582475,42.96217112678852,-2.493962327321768,0,-14.466717026688602,-11.634206745238387,0.4709550716256369,-6.493976721573269,-9.881779173010885,-4.187017533258638,-11.41800995568663,-10.867237648152512,-13.23223828767599,-21.106975092471778,-5.056992674086023,-10.095911659039663,-11.018720934744973,-9.241809276009265,-10.16640291082764,-1.3256780141602371,-12.264339807981155,-15.077666543694063,-6.57201143610609,-10.770183250322942,-6.77249456271126,-10.393647449479603,-2.170189190106318,-7.339714966049733,-15.136427998063478,-19.378153832528966,-27.351491833875734,-6.000488725469081,-11.449111700731269,-9.69131179686525,-7.844953747969297,-6.1505140401707,8.237918146574085,37.80149071416903,4.423815235871077,2.7243791946524736,-20.039026722433412,-1.1504776364394589,2.662996048221254,-3.325819423304234,-7.03824620257013,12.76233878551151,-6.259651014108801,-5.048509782238968,-26.39464883825951,-8.977492308237961,1.8965191419402228,-9.14290792649556,-3.377631368666794,17.328415227878363,-6.800205183802831,-1.0840632869161184,-23.45037111982959,-5.191564673895058,-5.465975274010979,-2.335974809688521,-7.364889998076879,11.042767471926833,-9.118866913881519,-5.783119131213005,-10.245631479777343,-3.1961763530437284,-11.195071598975556,-5.048454390292833,-12.729297202514344,-15.854308881056578,4.657864249589778,-4.601650900197073,-7.319340285714213,-20.949540273957137,4.2972469543936835,-7.108339541597389,-21.78355274227329,-23.97959392033074,-8.285421616697246,-10.58694607502554,-6.696998211872878,-14.237668854827788,-0.004416270302257497,-7.575612703576805,-18.875794793375206,-32.022750834723695,-15.792165426453142,-0.41669324023826554,2.575429807200675,-26.44269400830723,-36.90790537110811,-10.303057068179912,-10.041787640007916,-11.78708203072312,-5.680848796982151,-9.005075553029084,-5.307801905692435,-13.612175041975089,-16.26821049118837,-1.945897896346636,8.672523822642056,38.37782448899184,-1.5226602453865332,8.801011574498109,-3.0095138276412814,37.16996143442358,-2.890744664643314,6.130172926069565,-1.4925509015242866,21.186633619129438,-11.17655371111457,1.6604993940537507,1.9587896720928697,-2.5666350473887025,2.6192661700965783,1.6976109871274954,-0.09300190954112031,6.376192170123004,-9.2753089459869,0.8065255684366028,-28.14264192517467,4.505241718583762,-2.0201260388677635,0.6384152731385997,3.4314084037565085,3.3281351601450515,-5.151088340548644,6.833561949185621,-17.386095221797596,-3.148364150322103,-1.2261029501019025,-3.8056100702552382,-19.21498694550783,-14.805434767546748,0.635113615810311,-9.215515056603152,-47.18950605639219,-22.043631614795935,-10.271610725487793,-6.477924517767887,-19.340593703898257,-19.762250159102845,-12.639220613967359,-4.2488762987839355,-7.039461100596721,-9.521766932401304,-4.9378791162722395,-1.9721579497407604,-11.121022743044671,-13.890413546592349,-6.379131649861013,-8.981499993786134,-11.464626769845164,-9.488947871431236,-8.724946873415721,-4.718349503471251,-4.792801528806578,-12.711217906795468,-36.47869670437327,-9.501314222869372,-8.013581453200228,-9.706435624736306,-2.3084996935801323,-8.62968105481491,0.8455155032142627,23.38381690752368,-11.006694804635416,-2.3060651808237513,-25.407230923798153,-8.151690573768324,-4.459399491985524,-7.482608880670061,-8.742861769252272,-4.112836091861306,-19.71968762687195,-8.310890234949365,-6.260952375009458,-6.057444909858959,-5.469990935499661,-5.6207621458871015,-6.243689972855893,-5.031895292992495,-1.9886737830689336,-3.9511159942468583,-8.730190486524293,-8.83463345063639,-19.478495234177025,-7.919817835401982,-8.927198481198538,-7.318745173717831,-16.797676116474054,-8.766339734754625,-5.5803077472557305,-7.0483415350322565,-39.529580532813476,-6.688964212107939,-16.506150642778323,-23.662818203440416,0.7279436561194785,-11.575298704276372,-11.929019683999162,-17.414746393520765,-5.228773022089305,-10.923272657747969,-60.64964218302233,-28.118740977922123,-32.33590628429881,-10.300589013536923,-7.111094526182918,-9.794867161534306,-10.357026065920415,-7.252732914849526,-13.809568830270395,-44.864837464880644,-13.99342336384642,-7.325865916816165,-9.31764774404959,-13.849229140778753,-9.704287379873103,-7.682960459024176,-6.24028203205114,-9.232885322878648,-5.2726672822212395,-5.151742884092604,-10.891921963923442,-18.66880079701279,-20.72398707945495,-11.365926812858625,3.7799648991088235,44.7900260659234,-0.41320334977330336,0,-6.1000000000000005,44.5636949663301,0,0.1616015242626231,-1.591769981630084,46.138743318599424,-3.4144261558072286,-0.19986630041284248,-0.24980789222651456,32.647709675151674,0,0,-1.1111862926892142,38.20027231870632,0,0,-10.213625,30.103090065906507,0,-0.47461820923634035,-1.1,38.700598344011034,-1.5897163001627803,0,-1.1102365241368266,42.21486389344042,0,0,-11.421047401359685,-4.305428670334404,0.2339048826249685,-9.380764829389886,-1.9570114304880313,-4.344233601318691,-2.13629222646024,0.2200962049132038,-5.2512772694582335,-3.6201267859435573,-2.9248418480702982,-3.6672623661449895,-1.4858618620074482,-5.1000000000000005,-4.106885756112891,-1.5668606132466567,-11.200683714533477,-6.5781889451786215,-1.2210675673648363,-0.6359534717932034,-1.1172125,0,0,0,-6.108136898909092,-3.580613805309306,0,0,-1.1060029260863122,0,0,0,-1.114439187808405,38.02840609009037,0,-1.015991828740683,-6.10623567222984,-2.8781871125502816,0.031678320647867464,-2.4277715046970716,-0.9181516013445633,-0.3313231693882345,3.7180712349065868,-0.31195428404160586,-6.1000000000000005,-0.8208480952732939,-4.1068703468750005,-1.404112444619988,-1.0291082741520083,10.829398439959196,0,0,0.910821632839928,0,0,0,-1.1055493987387524,-4.196234497637549,-0.7736023297013959,0.01179282328886326,-1.0143240828937656,-0.5696948553004038,1.1017818141899416,0,-6.1000000000000005,-5.140319175868543,3.817397469427033,-2.8273720461574285,-1.0540845447854217,-5.619732737074072,1.511527481115178,0,-1.1105282702972468,-4.91276205022676,-2.780657609891558,-0.7047250466624668,0,0,0,0,-1.1172804960528946,-2.3460449698008654,0,0,-1.104780671104689,-5.101244153988826,0,0,0,0,0,0,0,0,0,0,-9.234612202044227,25.674144821133734,0,0,1.6328204497672314,30.85481062122788,-2.0092476139243534,0,-6.1000000000000005,17.28138175440086,0,-0.13884429178069274,-1.110538058117214,-0.1,-3.010928866278632,-0.19704287397732712,-0.25279495298041715,8.324915156766162,-3.670694852709163,0,-10.213625,23.19297840715555,0,0,-0.7426536234804824,2.659992860937007,-4.1000000000000005,0,0,0,0,0,-2.6397336780230374,-41.537869766964974,1.6767743060050395,-6.6549345476829584,-1.1,-1.4605443134982714,-2.833848054689093,0,-6.100986616784404,-5.1000000000000005,0.2732573881570965,-0.4169890933272026,-0.8853490077652293,-5.101244075853278,0.17709704097033666,0,4.007392350271141,-5.046860081820135,-4.1000000000000005,-1.6178726871646432,-0.7762149126237167,-5.112613497251601,0,0,-0.9439239250219983,-5.1000000000000005,0,0,0,0,0,0,-3.4779272739009492,23.24588926735057,-0.5667674419708462,0,-6.1000000000000005,-0.20461455346817214,1.3489454907319107,-0.10677881972613792,-4.641934099002138,2.9065986113663675,-4.1012442078125,-1.0218413019929864,-1.3579902591088482,-0.9294156887975018,-4.1000000000000005,-1.0232782676138559,-0.22832158528560073,8.409237489785804,0,0,-1.0760268103958797,-1.019983107670226,-37.94967554977761,0,-5.065748911863887,-0.8115224608761218,0,0,-0.31589315485843955,-0.10679031827701413,-3.9529580533269613,0,-1.0727809741755143,-5.126012285803302,-0.4400187921598182,0,-0.3914340361836539,-5.1000000000000005,-4.106869450096202,0.15262168739087156,-0.9792739930334536,-4.38166220868916,0,0,0.35433144029574,0,0,0,-0.3679698535834914,-5.110054149177472,-3.793668691976246,0,-1.104878068993329,0,0,0,0,0,0,0,-1.1823611212181586,-10.214955156261372,-3.892691236257134,-0.10672063784185262,23.635418850463658,33.12389550452655,48.574984908957234,29.97163147341766,9.775320215068266,29.10044184878638,42.495527934189134,23.405784989517905,12.532097252153648,28.915004919322598,43.26044628805083,27.552474370193494,11.330053952856941,33.56731151125197,41.06746704010772,17.466020781989776,17.73094069441151,24.51278090613819,20.453596087176408,19.433517874049652,3.30287718870762,25.41601118308454,41.269667949250966,30.044631291601895,19.099750294716426,15.961702528933841,34.743928848597356,16.371883009431418,-7.046656804222593,18.165358127269165,47.901823952534954,14.669294864179019,7.844446249932522,-12.257665731566583,41.955415995125996,16.875938839421682,9.550705073136605,-10.039355027600502,43.953683475890195,22.210566609708657,8.333626957677637,-9.284357202041619,41.171192393900604,9.162347109708676,7.638001002102616,-13.198289054058625,38.8348151876366,5.285850754045967,9.994641999654473,-16.867465649475125,37.961494214214724,13.307185861258478,7.603360855542705,-8.019631758803992,34.11914638973577,29.739107952826593,1.041863514122619,-11.629106036340085,24.35331022762202,6.100211182798329,8.027056020909184,-6.114204867970513,18.789789384079633,7.521691172260592,18.31459931617636,40.61200054471147,6.448029597506315,11.460464769560438,-5.000590198594519,2.7259546072027665,5.589400258075777,5.5594898580231895,4.286875237928905,5.023822980300861,2.4508452408302555,5.9256043390120245,-23.51849067937184,-2.393171024173378,4.263291074855076,-3.6349138918000947,1.9231511100894076,15.852005652315063,-4.391522622047942,7.181470630040886,1.0849739898230792,2.376000539353496,4.267059752007646,3.3113580039060153,-4.332490524762592,0.6134125769080083,3.3904992826946208,0.8406819584407849,-3.5475100711496985,-1.3310346493689584,4.8136062676838485,-2.4455193010923475,-7.218874302574209,-14.597001590062597,10.39087014350751,1.2053426719372256,2.6304466511764133,-23.61420343934028,7.753427808887952,-2.0372554901144464,-28.50860803247712,-7.30088504813751,8.932790072286517,-5.361326360370498,-0.8944461764515669,-11.394331955893614,9.745831999871076,-2.6656329010519912,-3.6906518164538227,-11.998670380457376,3.6789563038975284,-2.8332452986814847,-9.433668482311475,-21.40625528265719,4.787797590057494,-2.4779327049619946,-3.5039609934595446,-9.297108036011274,7.559135610346469,-4.279664416417851,-5.480524613137323,-5.118598800414706,5.544480084978824,0,12.753622346091163,23.06429306359252,39.53103826933406,14.123640729104944,17.8812026930807,22.22134708029191,37.23515913799761,14.575965672450916,23.61315343834523,12.617577325138113,7.512685890989799,5.137755853998732,-11.69608944552634,-0.5846151178211972,-1.5219131760488143,-2.060160164639563,2.5473978431576283,37.42631267313952,8.630200316366196,9.498411849026969,1.77501432204505,15.462290531466467,4.429422127705788,3.5226563319792907,5.381191237740872,0.8821433758807321,5.155432903340489,1.941723190004557,-1.222517014774961,-1.0299065353203132,2.9974965377607146,12.5721528643278,11.50631491769655,-14.599156473842198,39.4013653226214,8.300578941243295,9.54582343677994,-14.588130471633384,39.63697458430495,4.7624611415130715,16.806955102802686,-26.360707803588618,6.809560326700291,7.794912558806198,1.3383020746696546,-23.618129562831683,10.067437311675468,0.36800719920514635,-13.783650036748309,-25.790900151417016,11.966706771789704,4.047631940969099,3.1342260719075403,-12.77889047683252,13.458705882087607,1.9404328898891436,-1.0557481747207045,-45.74329165130223,3.739649277245317,-0.8223583856280662,12.79122589265005,-13.365574483340088,5.046306164487443,0.5545805926073285,7.6067136025169475,31.47270412306479,1.1640144507211978,4.156565759600696,5.30112541240554,5.074426161426308,7.671794781846003,5.02708927444485,-4.672256850471526,-0.06822179414179486,7.6725116421251425,1.7590533258812886,-0.8447862610490189,-0.09341871818552899,5.538489623415788,-0.676352583961285,-41.2721656085039,13.485051961590203,0.8812272392045246,2.8363175513110708,-37.20107069300365,1.8895886530008674,6.780123493524547,1.9804778396784266,-41.781696690150376,-1.2448305288281272,6.460634261278222,-0.4417820636528634,-2.776591840352945,-0.45035924749347966,3.413483474881463,-0.12447463439860827,0.024306657725792213,-19.505493164586618,4.5118481573411815,-0.47651455785126334,-8.902553235708044,-9.154295740300443,7.795912667901499,-1.4879361720760453,-45.40290841319427,-15.568978802194232,5.734697120516744,-1.2035474379638078,-4.674333550443544,-9.556554526478312,-0.5722660713284953,-1.4758901259957489,-49.37203635963496,-6.004400857291337,3.5849076892834044,-2.4033042304277195,-6.827612114849285,-51.34984966618599,5.951144088968523,-1.7783132466628266,-4.105269472954083,-5.0942345843463475,9.983594771689416,-1.1602815842282996,-6.644239417246686,-52.96964869798894,-0.07661491041481527,-6.599603075303316,-16.608088683175517,46.61247052869433,4.998008859814493,-1.710446904454236,0,39.46121045717566,0,-1.7202870251814302,-6.586442721115791,40.90490952007765,0,0,-1.1,28.64198337443681,0,0,-16.42059527032325,5.911326754817061,39.00198379286515,0,-0.9396735985673339,24.073314251977553,0,0,-6.193610912492222,21.710431346209834,0,0,-5.464433297604017,5.814617717776634,0,0,-1.1058757998329698,-6.0846146741200045,42.60826984191103,0,-6.102419051648166,-5.101243747950888,39.72222451838845,-1.0916710279183424,-6.049574413405798,-2.7176543783937746,33.583763304250034,0,-1.1115063286227138,-5.1000000000000005,3.6189775561400768,0,-10.213625,-5.1000000000000005,30.1496125792452,0,-5.979608243647627,-0.8431300457170643,2.6821262978017173,0,-0.7394970529611041,-3.3674429333536646,0.8433054434637761,0,-6.106682882998013,-5.120681713410625,47.81056683229908,0,-0.1959229891880072,34.01939403824106,-0.20168212784195827,-0.1068572705156963,-1.1212062978559845,-1.509307868049006,8.309089240564402,0,-0.8908839973264071,24.39893478934781,0.1110971720202067,0,-6.1000000000000005,-1.0950225570875867,6.613225563244416,-0.6399474908312601,-5.603498402441183,9.10282135696994,0,-0.2717176039090076,0.2768379556789032,-1.9943739745664641,-0.5008272629263547,-0.23696565885057908,-0.8647460474167004,-0.5289710906707237,0.0008533957615039612,0,-0.7492081830158372,-1.2744359820020663,0,0,-1.1116631162681034,-8.940862162707408,-0.6887569368145192,-1.2281765171972745,-10.213625,-5.1123372931868145,2.702452099249542,-1.6091420833209888,-1.1113279432435255,-5.1116962753825925,2.686488650325738,0,-1.1363987763076675,-5.101243131865693,0,0,1.3468254427994883,0,0,0,-6.1162727882281684,-50.22590365667801,0.7061571089097929,0,0.2404253756461218,0,0,0,-0.7018282027611127,0,0,0,-0.0335726203891924,26.647433791875173,0,-0.2145972301497099,-6.101255969323039,29.19042304048643,0,0,-5.484471628993614,13.996788134020859,-0.14755870925386194,-0.8780638574890404,-8.066588651839481,-0.17204159740273184,0.866322684332047,-0.6283638610860446,-0.7561465012526809,13.923748180546609,0,0,-7.491537311431678,3.7024277743090166,0,0,-6.100618459319538,5.058951503995042,0,0,-0.552503070969068,-0.3537438450868629,0,0,-1.265223210626771,-6.637468949315044,31.96105523102494,0,-5.988601644478641,-5.117229106204965,9.569431717792492,0,-0.7131996389336147,-5.1012499713977375,8.74680246451892,0,0,0,0,0,-1.24795733892507,-3.7013725976096086,0.8187853232838928,0,-0.93998962594204,0,0,0,-0.7970641853962581,-5.013854969328336,0.20959123433454785,0,0,0,0,0,-10.213625,-0.1,10.748145941483243,-0.5773529645739368,-1.139438443219658,-1.1093140492696807,2.5660301108021963,-0.5681405836394593,-1.025422746559754,-0.21423202757542648,11.29811135654569,0,-10.213625,-0.5579347220648113,3.2892543579704348,0,0,0,2.1766902072178786,0,-0.4870417621822726,-0.1797174990273347,0,0,-1.2112636179654177,0,0,0,0,0,0,0,-0.8745771952270227,-4.162507099340011,0.6809355754933889,0,-0.7489714093202618,-5.245316778695497,1.3481610047292472,0,-1.2305060057145523,-5.1000000000000005,0,0,0,0,0,0,-1.2740233287822704,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,-10.720509037282127,-10.214855640315832,1.703210895165475,0,17.65860379259775,41.0980707069259,-8.986925393931068,15.009545702318055,4.813621376705482,41.504870384206626,-7.489727447037885,13.348387232792817,0.4482143267461729,39.19999007308381,-11.331229694883824,12.014332484396853,-5.084168265159751,44.69050553259613,-4.3646912745402116,8.104200216841539,8.134342124638389,34.73861253192494,-13.15072188964598,16.090799631850942,2.7530413203928417,23.29537639670103,-7.396208260103666,9.87582696423274,1.9549996550314515,28.35688359048813,-3.750468520566981,3.9255469371221334,0,33.965627114111484,0,25.95075924693054,-14.670331930364867,-13.694652172493434,-11.0588286627253,-7.2485440909092365,-12.799194367990484,-16.743836604722368,-8.911324818477599,-11.09397014635541,-29.015976026051923,-28.28158571020522,-15.001014988639412,-8.687440085454675,-17.494166179146326,-11.509983694892593,-11.185513730712733,-9.413783727617798,-42.508266452593276,-11.06732624426623,-16.461515615839396,-12.520565322770151,-12.426897685689227,-12.674693359472286,-11.939192343376563,-9.40684620932851,-10.045078010778607,-12.3917653076787,-11.11336277864894,-6.12240787490463,-0.77892504197306,-5.106617824622031,-4.1000000000000005,-0.9089541855989227,-7.3111706725408006,34.06277209382357,-16.325483788734264,0.9210092660633522,-14.001241607485492,-8.193141205161965,-39.66083051748099,-6.962750149700072,-0.21873500037849375,-5.611788838577947,-40.632516637121086,-7.8956990959742885,-13.729995596751554,-7.179185223542087,-42.89456131760966,-9.043049181789511,2.147902812791744,14.135766484994988,-19.169875562325426,-3.947824136362172,-37.42366461833355,-0.6473855684005378,-29.74298714549113,-8.605568241438178,-0.5710023203010783,3.5395291167728162,-21.404206718021513,0.05118019998307144,-14.791011141803082,-7.830746356779072,-19.27033637791724,-8.706993374441849,-23.78614628075313,-18.093207528168993,-24.675128002578916,-10.369716866701348,-33.85528578011609,-52.57536179573261,-24.49186592761561,-9.525908095671204,-5.824063131455121,-48.03014946505401,-41.6883104625124,-11.415478515891206,-5.953024965975033,-5.1116341846233615,-4.208593383773649,-3.7993984782459735,-11.199444606457398,-12.920514199989707,-11.403221896893738,-11.352278932826502,-9.729638505185255,-17.610529314425442,-11.37421300209679,-9.981534878814026,-6.163507664545,-4.418736845257522,-7.9304443519021195,-4.43021759114637,-0.3991920807200467,-5.107041385664321,-43.93692557004119,0,3.103413901759344,35.78146340197696,-6.988097825982776,3.694428396595466,0.2945096802387451,39.41926356121235,-4.4363453070481285,0.5764408505149379,1.557232250026865,18.877582363593984,-26.977344163097822,-1.4430442476860925,-4.32556305095569,0.21544874490515606,-39.00403675619142,-2.4466573708011015,24.690013359005018,0.06600701705390193,-23.926799427889428,0.746569162031004,1.244531810498797,18.510592327268903,-41.08684323855979,3.441774789541776,1.9756229365623221,29.991512816886654,-16.465505491235866,1.5375999509557778,-45.24371671310979,-3.5434175954786857,-11.07189083420548,-1.0736681384584925,-13.510714601807411,-12.13442877133874,-11.643132486177663,-9.654326286430024,-12.459254823557107,-15.37491162419333,-11.170586578760656,-11.189364513271313,-9.597329067213543,-13.512537003647235,-19.809976752799702,-9.62116525758099,-7.906033550531871,-13.28449846273056,-11.139819048267498,-8.094122588728093,-10.8920791891546,-10.102661685863103,-15.948605978937566,-6.844862435739206,-11.668346200025798,-11.42606655469102,-10.738799352782884,-10.50229994470801,-9.870346132998892,-12.493307419160647,-10.640329525302224,-8.605697047194177,-0.6001480941556042,-5.1000000000000005,0,0,-1.021317333137615,33.047889363678514,-14.342371365233113,-0.8711019452993245,-11.551484775618906,-1.957575474933192,-16.928761230708325,-7.852844305640289,-15.546077443867873,-8.307765252448025,-25.594423986852274,-6.960905893042162,-4.108082977937868,-7.162638125446854,-16.934977089162583,-5.76131854948924,-2.6499174448726994,17.42461589186345,-7.790000000000001,-0.5404068505481049,-5.60020163882078,-4.7465721076332645,-8.094240673576568,-4.3060816534369035,-1.0822556488735433,0.41885615426540335,-4.1000000000000005,-1.180087811467347,0,0,0,0,-6.4784338253228935,-11.361633335728273,-11.619161095448511,-6.306008128739064,-10.252972870318068,-9.143633459735621,-8.206399872673003,-4.900535234299057,0.3370409619824846,-5.105969584018694,-4.16098358245936,-0.5752884604657181,-13.50134623319165,-9.530020519845987,-7.6023196054826006,-6.285263175869185,-7.5147788092066214,-9.701325752332833,-4.107192721613249,-3.8856743801318623,-0.5959125437824493,-5.119891499500814,-4.107627057765462,0,-0.6558688246346424,-5.1000000000000005,-4.100307838777216,-0.5676819149435212,-6.146683509236399,-5.164170449378396,-8.125358665872533,-5.425524747411419,1.7176275062803201,36.64754548044861,0,0,-1.091707609517287,40.429855621621776,-0.5820484306369565,0,-1.1224628372477632,27.413893065369656,0,0,-10.213625,40.56986404949391,-0.23096034389369607,-0.8097999541358075,-6.1022847613052775,33.51140559481716,0,-0.10677208079703507,-10.213625,17.507420724514304,0,0,1.9959328496820263,0,0,0,-10.213625,-0.1,0,0,-2.44186691263801,-5.687022812055595,-2.0876123324460116,-2.7029892088798704,-2.231255374837643,-4.763602217953759,-4.349116434996524,-10.54728887362383,-104.22725687904564,-5.1000000000000005,-2.332631712357657,-3.9452625745327126,0,0,0,0,-10.213625,-2.2776767364942585,0,-0.4850000441240018,-1.1065831914070576,0,0,0,-1.1163240502898117,-5.072724582060816,0,0,-1.1059303512880572,-5.101362912960758,0,0,-6.101379330534098,20.525721753774405,-4.296925242562338,0,-6.212774051119436,-1.1083426059615527,-4.101260553883047,-1.074460091901297,-1.095855791712056,-1.1339241377475422,-4.359956430590532,-1.4668492935637891,-0.18927091530183074,0,0,0,-1.0320738957113924,0,0,0,-1.1124273985818638,-0.10488113302123536,-4.297397540512409,-0.1,1.4679201414170224,0,0,0,0,0,0,0,-6.100968446427987,-5.1000000000000005,-4.113886412376021,-0.2987660666539491,0.30037965553974627,0,0,0,-0.8549637651976847,-3.7592655787685922,0,0,0,0,0,0,-61.00968446403338,-5.1012375,-4.162931138143519,0,-10.213625,-5.118339352109867,0,0,0.5536851950273992,0,0,0,0,0,0,0,-5.954496384489083,25.066176708302358,-1.0710615165571866,0,-4.480516464873831,5.713612317203934,0,0,-1.0257774284915497,3.884410724563298,-4.1000000000000005,-0.10689457087900289,-0.13105088944710133,0.25956330919677395,-4.115724217630894,-0.6788461734654689,-6.051404957540847,5.185043174671756,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.700594560783129,-5.1000000000000005,-0.86418572420992,-0.10575426753075899,-1.1112408297657195,-4.547021854389985,0,0,-1.0559964327757017,-5.1000000000000005,-4.203070173722887,0,0,0,0,0,-10.213625,-2.8494051619042597,0,0,-0.9532464407190965,0,0,0,0,0,0,0,0,0,0,0,-1.1057670057972215,2.6985553758922323,-4.117229361087337,-0.20738719692587693,-0.4097858892201159,-0.5636473203018273,-4.028226516480271,0,-5.335446326726884,0,0,0,-1.1,-0.10637723131803323,-4.1000000000000005,-0.11411378672901971,-4.184845234516025,0,0,0,-1.1832800791980207,-0.6044134758976226,-4.209591188100012,-0.906127926667734,2.8091498288933265,0,0,0,0,0,0,0,-10.213625,-4.602645292218652,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23.010221143085197,44.98262721187258,55.77069157711129,-13.8220432330729,23.736903569919722,36.551130295812,54.58557007971749,-13.838213620967576,20.1143719054998,38.687497328087076,51.905592775920795,-14.232073777627498,-2.4782757059173863,42.874659959283235,18.847409075949606,-6.780322199703844,22.879188613984027,40.607149305718174,30.31823897695246,-12.9567565668909,10.242644093397884,25.33334965726373,51.959937684723165,-24.578317805427634,-7.8454154746720075,23.09203957340585,53.12477664382363,-11.37496601797238,0.6920890079359168,45.08518898892342,4.695888090622724,-4.049168726084119,29.906942494724852,-4.116556504170255,53.39822230298107,-16.148438448281187,18.16885051633006,-4.5486403875325445,50.32565604128577,-12.172816585917612,21.871644061146284,-10.07412611738299,53.35414839155098,-14.101652640161708,3.4369029464623364,-7.480152090691444,55.18318770752877,-3.8247788526369284,19.78312657758553,-14.61473286738503,54.83820786549394,-13.754378826750486,35.82128485576814,-13.217361023142008,51.13013881014464,0,29.9141617744642,-24.499352811233805,52.8918821083927,0,0.02381195659646651,-2.8564876508997705,51.18136105807969,0,12.972326095438575,34.84897196895464,50.49227732868432,-15.655361612560363,-18.249983754876798,37.41413999599744,54.430495839615,-12.82680650696645,3.1177199576170422,38.8811294436661,53.06912944840268,-8.846723168325555,1.49061113076888,17.935085311208475,54.24343237457077,0,28.969451892148545,24.685077074567413,53.06287104846202,-10.43455834612719,6.5001719527377855,10.551646852669576,51.68918954585552,-5.44516900013632,-7.082968806367008,15.248499840300854,54.82022907718464,-5.674261075373316,-1.0289263008254583,1.289426881402913,55.89133437979013,-12.173033627861901,26.798467325054908,-18.509461039554264,55.07157540960817,-28.879651102633733,-2.3693615075778727,-7.544887234230009,52.778650505170454,-7.799933925573438,3.687461979247673,-5.784124629799872,50.616026582612804,0,-1.1,-9.674663280492464,54.32534813100063,-9.05350873826993,-0.9522068005291594,-7.946307018568876,50.441810792489406,0,-1.022998934506419,-5.106983704465233,56.232024332434065,-5.088216068557994,-1.0280345216851046,-51.169756819311665,54.140740534005644,0,-0.603787939624937,-4.34395418876935,38.3925457164917,0,25.448655273085002,36.57237697231854,55.32134068560769,-20.49926460381411,22.257764152371387,40.596972339801106,28.592175142968003,-8.514648960041018,7.109268975749559,34.62057727047012,47.82246140797683,-15.229307714362896,-5.339045074811705,31.66704288151984,13.478427136653469,-10.807832160470099,23.132895414764228,28.585037698131963,39.57663845122022,-17.469491719287426,10.343795372631106,34.68279828130144,4.744705209514826,-39.90658247985992,-6.10067372699725,12.646532237632346,54.04655925624182,-4.993790332133954,-1.1,38.68549409275041,0,0,5.35596728121015,-10.70408999151029,51.83556877634469,-7.019416877782789,7.0313876791680805,-8.315413307113104,56.846209120718484,-15.528133045297503,1.0374646101102356,-19.74700541247718,55.918290515416345,-3.3650472331840113,2.0568253683156663,-6.083376469606987,51.233324526024845,0,4.694153081809389,-6.867904781410864,51.30937809059148,-4.742299554247,-1.4324676243740146,-5.107009153932651,50.56109097961396,-2.2917288222256453,2.9867832049758167,-6.635623135589369,51.62542660364056,-35.858304286096455,-0.11275596155193686,-5.106305922162711,16.125565985251335,0,8.541749570193439,37.607994604585016,52.9904413751328,-7.863224618701391,4.1690406135810125,9.687795767292803,52.99450985444986,-7.890030400626165,-1.1043314317919382,2.425736114095743,42.3975312363806,-4.116564879321057,2.4244696126951357,6.628245763146129,52.77113394774187,0,-6.695560557454977,11.162318936084011,50.89978643290158,-17.130054644762605,-6.1000000000000005,3.6249111808565018,54.169686827323964,-5.10318201577031,-0.15661490110628337,2.6955074874983582,48.31275578200747,-4.454743724335732,2.371024188089285,-1.937315504871948,28.32108675601975,0,-6.925831464430115,-5.734278077335879,50.33154043836673,-5.10120498188537,0.5138262619893537,-5.10078811301123,52.03097001839144,-9.690507580875769,-0.7227577109221307,-5.100934762240892,51.541197760427465,-5.111731987475511,-0.43419713698073087,-9.702950813688132,30.75425298801639,0,-0.9548619709284837,-8.82737182890587,48.86304061799747,-4.400545196104889,-3.3563769463851565,-9.712333501828574,33.9232552106927,0,-0.12659359490396715,-4.937294527472922,44.19927173870363,0,-0.7202534130982665,-5.158185285089736,37.49437269172754,0,-13.295747144826535,43.98695874437953,12.079972534678635,-14.261171633937312,-0.22413164353245724,45.31928426843385,0,0,-1.1108856793164883,43.93101512199222,0,-5.211366891353456,-2.4554481576935423,37.89271114973092,0,0,-10.213625,36.29021156164599,0,-10.450616310917798,-0.9690865861297131,30.13916930497036,0,0,0,29.27586209455015,0,0,-1.1057096362719114,41.47354974209598,0,0,-19.303752828125,-4.183501299923604,54.45011062218257,-5.838099965249513,-6.105990363712967,-3.1059736842734784,55.270431911878575,-51.08739574158162,-10.213625,-1.9022931894264574,38.26755400342738,0,-0.6833255942304194,-3.284339529269066,21.65254651861151,0,-11.613179200434903,-2.463424340439136,25.08323902126643,0,-1.4814362923355733,-3.8303138367893954,5.718548780785608,0,-10.213625,-44.28377160250805,5.588523076779672,0,-1.1091847069769099,-5.101537890443544,0,0,-10.213625,36.2427189167321,0,0,-1.527221233024854,-20.73683421950924,54.36430388419492,0,-0.6926269979046467,-0.8693882285893745,30.72910040231973,0,-6.104612500000001,-1.2131279496317404,17.330038606679363,0,-6.101253699007218,-0.1084349044038942,36.31674069781549,0,-60.18804578090908,-0.14037956963710377,55.569880293912355,0,-1.122117394597878,5.876196524235908,0,0,-1.106688055560771,-1.9412219260500239,54.74193426555621,-5.5265141969274865,-10.213625,-1.36592309937084,49.69993643093272,-5.154139307944641,-1.1190272502881837,-5.101249487792984,58.01150650734225,0,-1.1058042023396408,-5.1000000000000005,27.861391996859272,0,-6.1170432411748905,-10.220506673646323,5.494181822285987,0,-1.1009917543390884,-5.1000000000000005,0,0,-1.1603524504159088,0,0,0,0,0,0,0,-1.105562310638997,-5.185657991939802,0,0,-8.314437122174573,38.61998328441599,0,-6.144311033254051,-1.0193742575344877,-0.1,56.00398594466706,0,-6.105846457544036,29.73052397939179,0,0,-10.213625,5.842393178616543,0,0,-10.213625,27.272441348201042,0,0,-1.1,6.285348921393734,0,0,-1.232436929447561,2.7605736714755977,13.854926900635201,0,0,0,0,0,-1.2372094762789059,-5.1000000000000005,55.97818005118318,-5.1000000000000005,-1.1056480241586082,-5.112264943575188,17.942719194530497,0,-1.4187099430302579,0,0,0,-1.1112298729312877,-5.100795073093355,15.567691479057828,0,0,0,0,0,-10.213625,-8.564214253310578,0,0,0,0,0,0,0,0,0,0,4.288971444187355,3.576149740271881,15.016303762160167,-5.106987704268938,-1.113771043401495,-1.724681556083378,19.23262424120112,0,-10.213625,-0.43114933089566154,10.28391901207863,0,-1.1,0,0,0,5.317091357367976,0,0,0,-0.9281344322090596,0,0,0,-1.1185852562371943,0,0,0,0,0,0,0,-1.1184192584375088,-5.107876517976436,13.42140326886615,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1107100201563609,-2.143905340542921,0,0,-10.213625,-5.106965437008905,0,0,0,0,0,0,-6.118590312768244,-10.220508414101865,20.66930358049834,0,15.412977582265647,45.74293929831377,1.3581545257224297,-20.311532170772107,26.828848583265184,45.02605394836439,-3.1461491920364613,-12.781179764848105,1.0728672206140002,47.62047806704427,-2.8522917885530754,-10.012999611881456,-0.43976879951536185,46.18141184500691,0,0,-3.305720247702609,45.96521109574881,-2.7908399154421186,-8.845120082172713,-0.4506522959813193,48.14087207207339,0,0,-1.1,42.56214016586518,0,0,-1.0405749263510087,32.99500780341346,0,0,-20.9503233840446,-5.717967304793639,-21.866194361596207,-31.03696301147049,-7.243402236485611,-7.632484356242172,1.3650814765825943,-17.960966214871174,-15.118951598672734,-9.794897912353775,-21.445263607072516,-26.582828476291322,-11.285069469849368,-12.386616715729453,-4.1103056711600745,-14.13206195299561,-9.680223207814418,-10.119824180365649,-5.092709411864601,-13.645446147376884,-4.4758666684487105,-7.824651949281674,-3.3157111802105033,-5.143219651770099,-10.33035270901706,-11.928095588858525,-7.135660468998195,-17.381985906559994,-10.42996007727929,-8.899925071401075,-7.6398222069243396,-9.430812308962764,-3.5774872951390755,38.01254570944286,0.6307358488667165,-19.66974627434253,-10.53523538839605,-8.112438686593645,7.849496348397271,-13.514513544960991,-9.846925755996166,30.3727482878684,-5.603457351967396,-13.721197847380587,-9.809625064196641,-6.7988987752453856,-4.326476894698551,-13.85092229777907,2.8896982566841682,14.269880205523139,4.984104554585906,-9.601008045135808,-9.21924377011659,-8.240163633018918,-4.048285702482155,-16.391202837380384,-1.5859318982933641,-7.393446797373122,-8.50178793860464,-9.629363629100173,-3.6716483807118707,-3.9116234393325513,-2.737966758633235,-4.936765964563554,-10.237338043736322,-11.72450524712822,3.3567343328519406,-13.828093143252257,-7.974689451063668,-5.080031040622205,4.952264344902246,-13.93710474117153,-8.158851972747632,-13.338339916489584,3.980458259192816,-17.64605826330574,-0.7271584063447663,-51.06776201595548,0.7680548510848828,-5.260201479004779,-8.983389366734777,-11.307388267986548,-7.325141000556746,-9.718582296315647,-5.061632265520041,-5.1000000000000005,-1.2858759776496274,-9.858655564193814,-6.025617534344819,-5.0692158733715775,-1.2227375409437724,-5.10224808447656,0.37671272338044337,0,0,0,6.430161155974709,22.561679526877867,0.9603429876656985,-8.195259468019376,-0.8556012992834594,16.930131641375397,0,0,-3.9088578378980516,11.546900775859879,-3.051858760023057,-9.701030639780214,-5.507355273705059,-0.29662120068190423,-3.3711508291424175,-4.253062674911527,0.4454532582220856,-1.6811592861699456,-2.8512401223819337,-19.204137239971658,-5.185367544967562,12.490646717554618,-2.9639022213098194,-48.22608888337333,-5.121824328848132,3.7748699897427027,-3.353049065731851,-3.8447732842177262,-0.918826850995267,0.296663682015501,-0.8213303103603025,-5.035340767791115,-11.91388875466005,-12.659338449410255,-4.832170286137177,-13.847445624138697,-10.449645228872459,-47.453381613807316,-5.969837250921984,-20.682654701450247,-6.362617507523621,-8.969911995008466,-5.1289396404960605,-53.69165362069789,-4.247751054675032,-50.097397667542836,-2.2043724470298125,-5.316225002413784,-5.07733660691739,-6.256195133550487,-5.584581231125597,-8.476155632134597,-3.4899000302876413,-8.136563643941944,-4.294454682390232,-4.330764816318088,-0.33340779737808346,-4.656828139544378,0,0,0,0,0,0,2.4497467865612466,26.66516802103108,0.3115344762964618,0,-10.51250741513849,-2.4139534494798407,0.25924043824562243,-5.101207328802395,-11.975840904735895,-5.822684418639429,-10.312724837592064,-12.08002335594663,-10.437154963467862,-4.102274701466803,-2.116340884439672,-9.74075230082467,-6.762435592955501,18.239924478364554,-4.105738903769231,-9.444243141387103,-9.616018641449283,-9.108638116050724,-18.740955703048222,-9.695983132270966,-0.10921643904750783,-0.5560125137962558,0.608184107162034,-5.146175653980514,-1.0017836130390214,-4.711443954906073,-3.6498762343489357,-2.7387858994070906,-2.90893544323336,-5.1012375,-0.14794839306489316,-13.857208321209038,-10.47458957539089,-10.0737333997485,-2.684744392442037,-51.01466669118642,-0.2520108326837024,-5.170759916952456,0,0,-1.0280022610270423,-5.1000000000000005,0.6490326234273817,0,-10.666744781069356,-10.6476174395228,-41.013822552179775,-13.838319389757693,0,0,0,0,0,0,0,0,-7.801934848626844,-10.114133348741806,-9.937006402554243,-9.69170018008178,-70.38207466519458,40.45832179800729,0,0,-0.5849741537748228,45.25524907538702,0,0,-11.933020083785822,17.837510800792348,-1.5692399217524047,0,-1.0407020047234923,8.589277347005911,0,0,-8.819415125928275,21.75630774816617,0,0,-1.1111351024308331,4.225591047996685,0,0,-1.1049988713468977,8.88645093304724,0,0,0,0,0,0,-13.988255351369293,-6.4689190153658345,-1.697640459976466,-5.106993710021973,-10.213625,-3.9326169579617414,-0.6615242761000113,0,-1.1046125,-3.977044051243757,-0.3670573539650036,0,-1.0173175737721774,0,0,0,-1.1058914985855182,-2.6244597580898077,0,0,-1.1164069007734934,0,0,0,0,0,0,0,0,0,0,0,-2.0903535765706582,22.662671439342326,0,0,-1.0923176780561257,-1.0128236631324457,2.002406992561173,0,-1.1,-0.22752427086186555,0.5824931937722213,0,-1.1035997556880732,-0.14902236063138508,-3.574890459144916,-5.107042511570575,-1.3427916719555109,1.1014773117183672,0,0,-10.213625,-9.06370300239623,0,0,-1.1046798193704637,0,0,0,0,0,0,0,-1.1099922041640704,-4.678247672853942,3.3045515160749623,0,-6.1068625,-5.10571686362015,0,0,0,0,0,0,-10.213625,-5.106511769861646,0,0,0,0,0,0,-1.1,-5.1057375,0.25432200174383796,0,0,0,0,0,0,0,0,0,-10.213625,22.099552861506986,0,0,-1.1046125,7.4758676737381755,0,0,-5.799692366590666,2.9742820599160797,0,0,-0.909175755144664,4.021028499231342,0,0,-10.213625,7.516148247766529,0,0,2.6422820654556207,0,0,0,-9.480267435014465,2.6946371583880824,0,-5.10825367090396,-1.1061241982372365,-0.10981745715222256,0,0,-10.213625,-3.215022181273711,-0.8826212042077451,-5.121847777566176,-1.1151777723739542,-5.1000000000000005,-1.3800760890459238,-5.1000000000000005,0,0,0,0,-1.479825333916059,0,0,0,-1.0451671665663367,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,9.807308783378268,0,0,0,0,0,0,-1.1112189228188305,-0.4934947275505698,0,0,-0.39037683006990415,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.104941287444199,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.125784419912271,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.472267402123148,26.2529365521305,47.129723274294605,-25.349760931769495,31.189650076852114,15.64887514129426,42.54211001408082,-22.439337607094643,14.201319900141218,34.17982514846703,28.504893804854465,-9.572241749124329,-2.3366573429545245,39.05318372251345,8.198957530194884,-2.3110488141636214,14.82078160935402,29.99810421062476,26.245361639552726,-23.424053949826707,1.0172311126079392,12.058557635123872,12.677963575491313,-8.294602989204645,0.44649592987124587,10.277756604050644,41.225030200867884,-3.137563039802029,-5.157375,20.84897440286896,4.595118964284136,-6.386336274800233,12.60479107913238,-10.986192418111328,45.5802451938559,-27.296899202193114,6.274190213053378,-5.67073310775533,38.436488177168656,-42.73428426823592,5.691014974783958,-10.50206739635265,44.557772140467016,-10.914757340861353,-0.33139347729306723,-1.2103847815782445,41.47281634869783,-3.88581710828945,2.4154802942880997,-13.822615546283139,45.13120883920055,-6.2413523796391726,2.61698729453942,-8.120137952167829,41.70363769202801,-3.1236223292300105,1.6878897115264007,-13.733487298944207,40.19996853616944,-10.893394784940304,-0.8335062959833954,-5.106875559400941,30.12220343887546,0,-1.298531653004439,37.36282025589847,3.5066212861610815,-10.673791470540396,-0.9269713932944392,-1.1587071265810922,6.60127269824881,-44.8921355711042,-0.481557851895078,0.7853229021114752,4.6181758915758415,-42.14546941663137,-6.033640328125,-0.010425715099136756,7.257974110867689,0,2.206831817460105,12.052267750002056,-0.26343504903645965,-47.31438071484912,-5.317142036600838,-2.9296469232916698,7.0434668616046965,-16.914442176485768,-4.451308994992314,0.2764352934522366,4.932382922268253,0,-1.1001539010028785,-0.1085861852578213,6.185795138903736,0,-9.168645105690347,-14.45929811125719,7.593363190733541,-9.691355906762618,-4.994925890612001,-9.66348235551866,9.902596945028192,0,-2.069807129103129,-4.760141040987004,8.070233392837835,-5.0696483600461155,-0.17765687736784522,-5.1038348092393795,9.493111773354098,0,-0.5975482476162961,-5.101238471902449,8.874604207637011,0,-3.1333718753598285,-51.070314121468336,1.6093113842841524,0,-2.7010910872535874,-5.1000000000000005,3.723843805327457,0,-0.07274212470030594,-9.639634022656633,0.9714136244465721,0,16.761940117924087,34.667890348101494,18.76346826576459,-25.69031990891141,4.1641022932329985,8.401193814645987,36.453683205307776,-14.92680779800914,13.14351038887697,1.1810618687704997,4.011709085054535,-38.79650672351177,0.811259952802432,0.08330151457121554,5.212009689545087,-9.50610717261351,-1.2830598808007343,8.997958148286514,2.795824467311402,-42.341193633184744,-3.9837353941368634,2.933633177680199,1.1082316836303827,-13.071517080741815,-3.128277485449989,0.9203433208629946,5.705086428210358,-40.047445366945006,-5.6100843996438545,3.080769710547085,0,0,-0.17717498876291843,-16.08682197194254,35.08169245184338,-13.213094592518093,2.832836557977931,-4.795451579685209,14.472575959920983,-4.89660861239647,-0.4087745063026422,-10.828727695907686,10.051948776046409,-5.1000000000000005,2.0468692103950676,0,3.210564277329095,0,-3.750147546812036,-38.419427617673904,9.801621854854703,-5.084490582266298,-9.029407103425047,-12.986581687925506,6.169098895267935,-4.79762227782511,-0.7122632627028653,-5.1000000000000005,9.265813310104908,-4.847510260805809,-0.009442126093066217,-5.095143345085095,2.8951952248607595,-5.041929272913702,-1.4455381984493927,29.52703914813743,1.6797400024390043,0,-5.166749320750586,-6.9051363261027205,8.001412135250247,-51.05746785378682,-5.157375,-0.11175055232291546,4.293229282210262,-5.106932562607934,-1.9811800784247013,0.2314586902219469,3.299700146816907,0,0.9654578323191454,4.281713189811839,0.3842967730410294,-9.700769040760772,-1.1001478466515855,-0.3518301918518474,5.011467241262558,0,-5.564514235350163,-2.334756836953027,-0.3986871112395124,-17.161892756069832,-5.559047904982723,-0.17417386932253756,0.1677645153674998,0,-6.775104033172896,-6.650956466270796,3.530348487958134,-13.677822385558649,-4.64816119538487,-9.00497312078373,6.561776250674648,0,-2.5996015370778336,-5.10044266116196,4.3621300090751305,-5.1000000000000005,0,0,0,0,-2.878410266773306,-4.7679621177874,3.7168862962255527,-5.1000000000000005,-2.784518636515137,-4.985065608910254,0.43168151965321144,0,-2.379474184978891,-5.0698946897270085,1.17363293999761,0,0,0,0,0,-8.602408077834713,37.589799465028065,0,0,-1.1112281910326924,25.328969428928982,0,0,-1.1865752623342054,29.19789989835338,0,-5.183658803939335,-6.1000000000000005,8.250893444369064,0,0,-1.0251719489185185,-0.011130646218499397,31.812234279890486,-5.209575504973056,-10.213625,7.814921249340208,0,0,0,0,0,0,-0.8841665267931286,4.167475117015328,0,0,-6.105542957889981,-3.2661616367338278,18.650665967792566,-5.117239689188628,-1.1058427244776048,-48.73225822853397,8.296478035233138,0,-1.106149577561231,-5.101250210224094,8.25974959722381,0,-10.213625,-5.1000000000000005,12.994524800027339,0,-1.1107303583006851,-5.1000000000000005,34.54827690937807,0,-1.1427841730189465,-5.105382340066229,0,0,-10.213625,-5.100820218810312,0,0,-1.1315823840517805,0,0,0,-3.8176613618581867,30.913701782281095,-0.1671359472178152,-5.10699494140572,-1.100113393486058,-0.8367642703855582,-0.7978709150901754,-5.110296724769419,-2.0951126790583734,-0.1,2.1589414769294404,0,-6.1000000000000005,0,0,0,-8.3154682121807,2.1306171700805288,0,0,-10.213625,-0.5655095706138653,0,0,0,0,0,0,-1.10618450738903,-1.1439231452280756,0,0,-6.695251756907491,-5.106867689062501,0.4356066736012165,0,-1.1055592598606094,-5.220179086341115,1.345557101141335,-5.101249305816706,-0.6689160159717641,0,0,0,0,0,0,0,-1.5348168546988856,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,21.399877061806798,4.236224206252451,-5.1017390688741155,-1.3213075429731822,1.7435145969443042,0,0,-1.0429432312086684,4.119893963543551,0,0,0,0,0,0,0,0,2.715991141039563,0,0,2.3593811102776145,0,0,2.6105806250720054,0,1.4252192972893754,0,0,0,0,0,-6.101225346717688,-2.6792676156510584,1.2921788957752327,0,-0.806267369769103,0,0,0,0,0,0,0,0,0,0,0,-17.81070974785468,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-101.9823128381332,0.19046254688555375,0,0,0,0,0,0,2.2693846881942603,0,0,0,-0.5141713010115684,0.00539135137993505,0,0,-10.213625,0.5920787429382844,0,0,-0.4597735786638965,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.111256087908143,-10.214875163098897,-0.48602980019287334,-5.106976406433486,1.6844959424817691,33.662262030641074,-0.2252557049317531,-23.21372970970728,1.5796352831427403,40.802598310908245,-0.30866972747855076,0,1.6120858916735628,26.08540003597736,-7.2782768359845,-4.159473366781633,-6.1000000000000005,22.102384457425522,0,0,-5.994051950372566,15.84492054062075,-2.0174864117747413,-11.39937355752063,-0.04782097822425213,29.299013818540033,0,0,-0.027690219065607202,14.021458581304467,0,-3.2098674976941277,-1.0901711431301222,3.7689725256804194,-3.476071727388265,-4.153236822232545,-12.495050647151217,-10.791364563234264,-14.670948078382665,-17.336997847763236,-9.658338516757269,-9.408487589108551,-10.1729973933192,-21.528846529341926,-12.02778060089997,-21.987871260564233,-31.124070303185047,-20.95166881352519,-7.261118530895416,-10.399127301478343,-8.12735707135085,-9.516145094265298,-10.987208752613942,-11.75679479418233,-10.6296077944041,-9.718145659450549,-3.3812386310953157,-16.78595730625092,-16.32679001595021,-17.650534682104816,-51.63830590390837,-8.24134201585707,-6.543729645754222,-5.101472469167247,-2.5170881951271453,-5.1000000000000005,-3.0988733123305012,-5.146582918987553,-5.1619875,37.47177972580551,-11.676558659808068,-5.12184107069707,-12.279937011290357,-8.631855847783962,-41.07807262533685,-17.5985029172717,-8.03714725206997,1.6733361160567926,-43.083622564251876,-7.070313348313422,-6.1000000000000005,-4.682824409053098,-7.644721792525608,-5.108175710494513,-1.1784099480682413,13.185647916912886,-7.808406813919111,-51.06688386620077,-10.662127438035085,-7.8000649821711985,-11.144112327668571,-7.818457626579948,-5.3847922828867265,-6.222428332999616,-41.01243719335422,-9.373167745121119,-6.468953554394571,-0.6044761835557471,-4.108255995993859,-4.9001274132057056,-9.862549107108752,-12.22724859480401,-11.352719671092046,-21.058726586081587,-9.70318718953162,-17.563616061836417,-11.755509147431315,-13.825800637877023,-6.537038505189122,-7.66930630750311,-7.713970013765661,-9.704572596423212,-5.157375,-5.1000000000000005,0,0,-1.7700641609300485,-6.500373170113769,-4.108927190114157,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-5.157375,35.449528578945724,0,0,-52.22891621801162,23.525188060727434,0,-4.94061259233807,-0.21148192612456818,14.458393040145614,0,-4.936751305384817,-0.8225365646627798,0.8461372996646077,-3.8831457855267595,0,4.141897772276341,15.85618639637765,0,-9.692060518032047,7.660836590487149,16.279384926221034,-3.2281824851963523,-4.905950488132819,-5.157375,0.3933177802966358,-4.1000000000000005,-5.049578693927238,0.22447456920919323,0,-3.6440299715557503,0,-9.750490564416873,-12.108543065392992,-10.37595906996389,-13.83478608065709,-8.433538285387117,-8.697455651713941,-7.579075054792897,-9.691125061023211,-1.0162551712931178,-5.1116115514690765,-3.9961355885018373,-5.075622347299909,-5.825108240731214,-5.051061344875519,-7.996379116384479,-5.130449301314233,0,0,0,0,0,0,0,0,-0.8982671698180301,-5.1000000000000005,0,0,-0.6161762673410864,-5.1001428225142025,0,0,-0.7995471356450399,31.71200711578002,0,0,-15.600244125269878,-9.68133083176339,-11.183331780548816,-9.448392542674247,-5.950008640981759,1.3048126488536398,-7.390623695507073,-5.100873918343336,-6.024913353308554,-1.0718653237786446,-45.26211015518085,-5.1000000000000005,-0.21516656234375306,5.467279960363809,-4.1000000000000005,-5.1000000000000005,-1.000792726976684,-1.105665801711622,-4.424563274744329,-5.102974346821533,0,0,0,0,-0.43203102206586674,-0.1,-7.791243362414263,-5.1000000000000005,-6.271855985724409,-5.1000000000000005,-4.20412607771046,-5.101363057123243,-4.537914325148711,-5.1000000000000005,-4.117229228997852,-5.101243178848698,-1.0281404871424327,-5.101568521220861,-3.6939173606987086,0,0,0,0,0,-1.0770339670110303,-4.206709004603531,0,0,0,0,0,0,-0.5594613554345872,-5.1000000000000005,-4.112542059910527,0,-11.600952011800667,-62.54327852263292,-45.65474923593807,-13.829363465195366,-10.213625,16.34386280518051,-4.1000000000000005,-5.1000000000000005,-10.213625,12.928762134000667,0,0,-1.1,0,0,0,-1.1057430312721068,0,0,0,0,0,0,0,0,0,0,-5.335437573923017,-10.213625,4.292746037609809,0,0,-6.105757928856595,0,0,0,-11.260205719774971,-3.458668814578215,-1.782611717092439,-5.109520888062111,-1.056951705067814,0,0,0,0,0,0,0,-0.5949027458005393,-3.5003232224973235,0,0,0,0,0,0,-1.1048257733097886,0,0,0,0,0,0,0,0,0,0,0,-1.1057613070331465,2.90140361802888,0,0,-10.213625,0.10534567497146688,0,0,-0.83449277433536,-0.1,0,0,-1.1,-0.5767814600412173,0,0,0,0,0,0,-10.213625,-0.5895652198615933,-4.061204369966728,0,0,0,0,0,0,0,0,0,-1.1101962428209506,0,0,0,-1.110926368771606,-5.106987725222624,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1542371248673404,26.543205850506574,0,0,-1.0436863498125366,3.8451097716301876,0,0,-1.1054732946985615,0,0,0,0,0,0,0,-10.213625,3.2089114510312524,-1.5553457474425767,-5.1000000000000005,0,0,0,0,-10.213625,-0.1936162750363536,-4.102502705192925,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.100562523367682,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8208016212597127,0,0,0,0,0,0,0,0,0,0,0,-10.213625,0.4480763247738928,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28.26431405942781,38.482128419632105,55.745082990123684,33.500632008239606,17.373732247634287,32.150731478941466,43.162041407153424,28.38016940611716,29.425971356502913,46.91489606477917,25.8221039027876,23.512584760713207,-3.756349881863453,38.086302222714565,47.20121353876989,31.88948449157569,17.572367224218816,33.90757451358959,33.9657976797392,32.08690673512163,24.73415320446207,28.912611728176607,50.70369779584877,29.928540527732423,14.964898912582214,28.260532940999006,12.623103990372355,33.06079949886061,4.755763751463055,25.634080050623268,33.998218046144345,30.85114828463004,28.728415480237178,-15.288895953941795,52.71304542114626,24.88957292522011,30.116437684706508,-9.087614112692298,55.89919394615505,29.298631315792328,27.943450043586566,-9.515412846223368,55.37738297066174,25.915149736010843,-7.868575738887988,-6.316154280850049,58.035076812846185,27.32073145649884,18.09993833750686,-12.517026360406877,47.09414097010612,25.63865018055738,21.57168508438757,-10.422889705711906,40.91847052993323,19.84639941058741,20.827066496838768,-15.554710506592018,47.498898220628824,23.291594502365445,22.539198158121973,-31.289864911798308,41.968062270637944,8.432537653468767,21.61705435496526,34.81917212790339,53.420300773582966,33.25606986364064,26.54794593306557,33.19293900428659,51.036832282017656,31.0989227655124,6.716559664705558,27.813398859760007,51.471533444489054,25.672020439945356,13.635557167255634,34.884495746427106,52.14033207293897,37.619261588906205,14.948017708218607,23.480744245709836,36.41061588188527,19.930205201199747,21.188834622911802,22.334277312844968,52.203309749396816,16.72178382488346,11.532173540568763,25.490688178060374,57.663095718410624,38.109452962198965,1.592584338301573,27.048432625142894,53.20785362828408,25.01442310346548,-14.478044183117834,-12.91233525157129,45.2791991421091,24.502521441520134,22.03251591498394,-15.045250976259199,51.20116864893238,28.686638815085374,20.11180773251252,-15.66125413242638,54.70472437150315,22.803037116395416,8.82483213340787,-14.516470655605817,51.826460034788376,6.090885184169615,8.797693060531465,-17.15131496244343,50.1739288094508,22.806699026696453,3.782464010575624,-14.022431057212575,15.611208746665184,22.149565929953013,5.3290624742231225,-10.69790788554472,54.281020603466224,8.993581474787428,-2.0904229451846774,-9.476586446434982,10.975996682794445,6.298892664753318,18.605925405635084,35.398838331511335,32.80634509707915,24.826240976405824,19.51144964852151,34.066767045527506,31.89441245933029,22.272002369843392,14.913953206363548,22.64708117348221,14.360306867542613,13.411649859145458,19.661572814076056,16.393502086043227,54.28411520431621,21.23209439884349,28.2074607110801,36.4084528290628,26.96725211567018,19.84609775910993,15.875648044256284,25.28227030285,34.95660893634985,20.98472987495221,27.813056278377466,25.641499480938265,49.68818856452921,19.27642328556719,-9.051422504151045,18.849232840144726,42.275696001891205,18.45023119733516,17.19621845466341,-14.84505956463542,50.84647471559804,16.70380745319743,-20.00718809439145,-12.54488513354496,51.40861485503622,12.253012532187515,-15.025685024459943,-21.475741720101826,40.7476425540264,16.71991971936799,3.1405544268067573,-18.469981003718733,56.00703610139322,12.891040959481332,-13.111988287653798,-21.792346559171097,50.44802805085634,32.84462411623871,8.549397087229524,-24.246029377233477,11.61068049989407,10.558940223607173,15.909400082881257,-18.73726439961804,49.92837352800425,12.176354632974181,0.397910881888937,-6.580453163082515,46.877607082578564,3.1568377884444327,17.442738708245304,23.6278716369487,15.210282532666294,19.804083270419728,19.126455969554858,13.56716395766221,27.415196838997158,13.677444114050004,11.81650467906289,12.543886752496098,12.41081838662581,18.359174354517464,1.6920381217213536,12.36128983094759,49.36250925155057,17.433945272562074,14.560917731820254,23.631903804371355,51.771302970931764,18.973069530231026,5.746806687309917,10.801145215801693,15.265997404940059,6.994272253130283,-3.306459486201468,11.528195091882449,42.430167211315265,12.754426288073068,-2.4819667419584874,1.0288519110327952,44.38288206372287,0,-7.68091808922999,-20.02997650747217,33.64628969059846,17.51983999179734,1.771976587000477,-15.766173638307142,15.971837046740571,1.2402854970630153,3.4117042295413116,-11.771994151058152,48.28706672674966,5.985895508353094,-6.1000000000000005,-12.365214086559234,46.08299259016795,5.508002702846243,6.885401568564483,-20.94457615462992,18.35309724245673,7.980987672337263,4.7858543520695696,-10.053071209645367,22.92470764820448,5.147359224564875,-1.584898644404256,-49.751261699844925,40.575205620450916,0,2.753835168869937,-9.178429574306172,19.909580671704113,0,-11.052202207160843,41.836825656348715,30.97194773075561,22.756869755861807,-4.348766870635281,39.85423935363159,10.917572100879388,14.904479256729813,-8.153602747727815,8.36037707885476,53.20718364713264,3.8439961379275056,-3.2582226937999046,4.581354173026868,45.968541223200475,2.6777725463528257,9.94220908693389,37.26203388723718,24.45325716921866,22.625148609342823,-0.021319386424148414,37.49114220603447,0,2.945465079904437,-1.1868459960484516,18.53002972482165,0,3.1928541306098723,-10.213625,33.57375583373389,1.4842326005151076,0,-11.435980193206397,-7.501292419770303,44.883469198410545,12.361023270222436,-6.107134262863653,-5.293395948726158,46.075457811965094,3.9172371906488084,1.6885770861718923,-5.092210214883958,50.901851573231205,0,2.1785094679322197,-4.344482988962388,56.61570874038927,0,-9.533507708871607,-3.56762180753059,40.38206665899335,0,-0.43785471767121753,0,0,31.387631624046524,-6.1000000000000005,-5.1057452203125,28.316402466561783,0,-1.0052161334324894,-5.1000000000000005,48.12790237686291,0,3.1203064563365306,7.389146656706764,46.92227347306469,8.843063187959519,1.829848139205915,-0.8813783961626758,46.27128806239816,39.29105957110959,1.1601559996166921,-1.7001061978703444,43.718256874439156,1.4557695933522112,-1.101261940741258,-0.10698272188720251,47.22603784416687,0,-0.19276856837958345,0.6429719651670672,48.326220206476776,3.513874247838051,-4.338590522138184,-1.6322655233633219,33.33641063193392,0,0,-0.8952001821282931,40.07634672283236,2.672974377981612,-1.1012375,-1.985307021767001,16.94395626867659,0,-2.743505454114353,-5.820006672864771,52.35203206737479,3.536659442054514,-0.5065938345008169,-10.121246209520427,45.16414457205375,0,-0.9686731566950001,-4.990552417422227,39.671801271282995,0,-1.1054754510819202,-5.478249710817675,25.702474846335555,0,-9.59401598360988,-4.993053037102507,29.761008255920185,0,-1.890600152681062,-5.106119269345886,10.130241955388971,0,-1.1,-5.101009630096968,19.59502406159809,0,1.418869400376841,0,0,0,-10.257742880318936,39.48485891274111,13.53014422278423,12.270460595948274,-0.2643231449919856,37.927164514421,0,3.7459338715276576,1.7281964341438512,24.972174710742596,0,6.784362931251065,1.4686625482819193,30.3881299415516,0.9879841213083437,3.9540435461813668,-2.3048347674040572,27.428141010836548,8.528545611547226,4.944227395911647,2.6777106939397424,0,0,25.516952241245185,-5.832181206586592,25.302894881882246,5.625435211796451,0,-0.18454657455235496,0,22.45481814228298,0,-1.0171592885362626,-8.988148577031613,25.750811480009755,0,-1.1113688076806978,-4.734355617488864,45.461620494123835,0,-1.1105464228037443,-12.69826914371493,51.95079749884492,0,-4.736176360057525,0,0,0,-8.129561333334287,-2.4597305225926887,23.445746535941666,0,-10.21374395795727,-4.048211161968797,9.25677770733027,-0.1057404064610918,-5.477931904971642,-5.1000000000000005,0,0,-1.4035680778271074,-4.085124433348541,0,0,-10.213625,-0.1,31.26070440357386,2.6067618718244123,-2.011518591132498,-0.9452581872442002,20.52899349500431,0,-6.1000000000000005,-0.1,32.6902683825641,0,0,0,23.110026250489256,0,-4.536702339841031,-0.13627554349646495,31.967073866024887,0,-0.7260828419934144,-0.8253725531330542,16.269017186833683,0,-6.442758478037832,-0.5137439676477441,7.359468345072194,0,0,0,0,0,-8.868148256473468,-5.1000000000000005,11.32832459076626,4.043887845594422,-0.13203012863735575,-5.92317741007705,1.400896112992912,0,-1.210545743128332,0,0,0,-0.7174058203274564,-5.118654754702143,10.331086546426548,0,1.92666545905563,0,0,0,-1.80078546590868,0,0,0,-5.344690957034617,0,0,0,-1.111333691057484,0,0,0,24.439621478775706,45.17375801646378,-2.4449537740397163,16.27424004793445,10.858546201702593,44.11985447038936,-0.7045857976333528,21.58228793300753,-4.764290307133779,43.31371061391244,-0.6163145160462979,30.536376518733704,8.456133475913115,44.06677836368273,-2.4607273037470248,20.746870200506464,24.507594329967134,50.31267431899582,-11.908115478152261,24.861555914728356,11.668165631753482,42.1249770816722,-3.3262314191135958,9.76355093208743,9.52646198616721,30.993573623302236,2.478688273239913,21.079991479122725,8.165088543271887,44.639817561181395,-2.259852583013047,3.0614976138897965,-1.6371746529685702,-10.857089961927764,-2.8714127589598757,6.414970509548038,0.8811960813793698,-6.8133675129208235,0.5409394067467117,6.052714824983868,0.387002201659135,-10.327054985333763,-6.639644603943996,7.572222791340209,-26.489342198800145,-8.87262950154617,-4.691332876454179,4.565381459616664,-27.773773804652816,-17.094357144105643,-4.750028580997049,6.228733759490184,-4.318725553600123,-11.083320786293442,-5.380749359024142,5.364364940224464,16.04088180478335,-27.951266572542725,-13.849947837648072,3.6304944740499367,-1.1982626316679252,-7.753849953627327,-5.764310493761695,7.212667027429448,-7.1872409329640305,37.71853177183178,-4.893621864123025,3.3976062495177075,-15.43788351026911,16.350734009332314,-1.7380271226385493,3.8379435862402467,-1.483008263232226,1.4568703018268918,0.5858286377034463,-0.49347547703853867,-0.6183183036062108,9.690713505709386,-4.646125315303848,0.7093171290297238,1.0760759541841505,11.334979880216945,-2.9548238156109328,3.6813308509758125,-44.647287864450654,1.0086998641374512,-2.1642851677999047,-0.876115749505368,8.769862457101153,-0.33351150980302724,-25.111091203021008,9.380724338700034,-5.489546758053418,-3.3016188982199273,-11.334577134598202,3.469331352712933,-9.70600814859489,-30.156773763707733,1.2064678804484283,-4.873639632998384,18.756922625263226,-22.57529765835872,-5.961042172531883,3.32661975663792,-0.5490924171116713,-22.653984288097977,-4.194003960301877,2.7575871597126533,-4.859064095521333,-8.957409824017066,-4.938703610157921,3.171482957371793,-5.386290811613601,-18.691898718641827,-3.5968671762198032,1.3718350768393819,-6.682293851763848,-34.39786399713079,-6.8041540362340776,-3.4989291227984416,5.885036108848911,-8.743814415872947,-1.8742290416310607,0.5018364933190098,-0.04159887694646129,-5.162623118829927,-2.0992578562823825,2.066152225289318,15.435495283524565,32.284863868316705,-3.479196997687352,9.844120077197601,-11.172051218267683,30.8980130281775,3.388159754486716,9.196893725651668,-26.47889151152539,5.221152610242702,1.5599757343755964,3.242065865505352,4.795899136764168,3.1996669394190116,-1.5885908048786377,3.5061155283866507,-22.54935685105691,28.503463175253238,-10.538423683563297,16.29965866057615,12.956316258967295,13.299547233484716,-17.60405106483448,10.729614011028051,16.908614693279958,6.529571801433617,-17.40176958933082,4.119231783958033,-28.12832031165435,-1.9779459859226458,-4.191181495613177,6.378088664749974,-5.458886480829547,-15.784560443985937,-4.254940423290462,8.015348715154117,-6.028403337076368,-13.987027693469475,-6.3535966231854815,1.5817853634731995,-2.29375328129251,-39.25423397443228,-25.457313027122233,30.036236495201663,-1.3143709458203994,-13.72251767095152,-3.920488592869387,2.5999846611063715,-3.5909386542046637,-6.706621809521868,-3.5642388870987824,1.08996927540011,-4.739101291468881,-48.022118669189695,-4.100135183771832,2.7412756874902535,-2.177455589850005,-9.138850897450864,-7.288390630068321,4.198941004168602,-0.08575635817430866,-5.1000000000000005,-4.1000000000000005,1.4629140736007904,11.328183339009787,29.20182388293296,-3.81059477859781,0.15245830756674067,-35.22537564296509,-1.0345127897678776,-5.624194628535436,0.8483377862932914,-0.5719856671494341,-4.1960427839370285,-17.29052253756188,1.2345513621602564,-7.314221881242645,0.5382275668255999,-5.512985416115348,5.266431721786055,1.5697514525368481,7.1107569753989965,-30.815851603256927,-0.46062680644016674,-1.915890680019916,-3.367043760816608,-13.264026554642884,1.7202662763429393,0.44400564216635074,1.0150330336415072,-15.745875087348947,-0.8867516677137549,-0.33688194069686195,-0.34730613511017894,-7.417671977733756,1.1642709569722263,-3.3608513567777503,-7.021253927247728,-4.1000000000000005,2.2795052189582647,-0.5270518661083503,-8.377038205188324,-3.0023391903816705,1.0821344007240659,-2.488424534770602,-8.8959190649924,-4.1012375,1.2666106478097192,-2.2925396037819947,-5.1000000000000005,-4.1069764068965435,0.8082881802956157,-3.225363624407251,-4.583655335758907,-2.205286069535515,1.5547115304491617,-3.057459902103464,-9.695885440258097,-2.989864563966343,0.9240898554456979,-3.254466850914762,-4.9003439124179495,-4.112538631254006,1.653930561014522,-1.027921480256,-5.1585314116652885,-40.011055198719404,0.8026031505384578,-0.03883765014027851,41.017237988166684,-2.152405762681797,0.7565631190683738,-1.1114424488623775,41.73079648165756,0,-0.8202400004699761,-8.9337672432331,37.34779841855763,0,0,-5.763961787923112,34.511724409642305,0,0,-0.838625059751826,39.884647371086025,0,-0.11271429954981707,6.84647952624589,0,0,0,-1.1110195208758546,44.793572697660544,-4.100569806415554,-0.4410811872068652,0.4337791918226582,0,0,0,-1.1106264881391803,-5.300223865680106,-1.9029920507773477,3.362475164487117,-0.8655994950583523,-4.257693417332313,-2.4399811855581115,4.595868886869694,-6.1000000000000005,-4.123810458937181,-4.10534080421403,5.9535029356511515,4.477478604044858,0,0,0,-1.819561521385435,-0.9674535495449121,-3.4837021247668654,1.261736536701855,-0.352812090864381,-4.739068938046207,-4.02612001396235,0.9079624149394859,-6.101075419201433,-4.837625081823501,-4.106876344292822,1.6578386797813887,-10.213625,-5.1000000000000005,-2.931854330027461,0,-1.1,37.447629613830905,-19.114053950036134,-0.10590133274190376,-1.043985245195405,-0.6977759499462834,-1.9456944953171547,2.403910192065903,-6.101037136529806,-2.7659879571766477,-3.1690661073568784,1.7056735493247175,0.49225517470348157,0,0,0,-0.241978009383854,16.17647095520333,0,-0.11154642410629854,-5.124479775783895,0.3018804814780091,0,0,-1.110736342288728,-0.3831617132666617,-4.1000000000000005,0.4681973148383034,0,0,0,0.9241619130391316,-80.73793140223957,-5.104752101765721,-0.6106157811346589,1.6231273304729537,-1.1116261436498078,-5.1000000000000005,0.9463802377374,0,-1.1066771661900738,-5.101250024351232,-4.1000000000000005,8.238565630955751,-1.0220491628270725,0,0,0,-1.140767971212106,-5.100664446962566,-0.39245540262894213,0.29807328023164337,-0.07765955181175369,-5.735945958669755,0,0,0.5746837153500831,0,0,0,-1.1050456945673184,0,0,0,-0.7666908948273656,35.836455817287764,0,0,1.5934270776447106,29.76460505119713,0,0,-1.1,20.854621995673327,0,0,-10.213625,-0.15035566847502368,-3.8529796873567252,1.3543775600727102,-6.8832980098997005,14.489773163800212,0.2917378785019544,0,-6.1000000000000005,-0.5110314939923148,-17.58815742692327,3.405968534810762,-4.71483963431202,0.6347548140288166,0,0,-1.1217693420764234,0.14847063798365442,0,0,-6.105974148737015,-5.1000000000000005,-4.106876682561032,0.503096085445283,-0.9879885633532624,-5.1000000000000005,-2.080252467608488,1.9463140004127335,-6.1000000000000005,-4.152324060311329,1.695552546822376,0,0.6622036307108727,0,0,0,-0.13142883574860975,-4.755644945012661,0,0,-1.1484843045975717,-5.101659848566495,0.38756231786868156,0,-0.43830502326764187,-5.085064858853715,0,0,1.81347941127039,0,0,0,-6.36135920762331,32.342869755226964,-1.2625037468718157,0,-0.8842798261239291,-1.0265527214818593,2.4085953633962722,0,-10.213625,-1.5557876803683122,-3.1998008271076523,1.1235763392324918,0.4119236197760657,0,0,0,-0.5322602637339519,6.565688888539258,0,0,-0.02667132580565106,-1.425378189748294,0,0,0.8493665964902427,0,0,0,-6.116222710810174,0,0,0,-10.213625,-5.10120258676907,0.5109473574969015,0,-6.1000000000000005,-5.114719454436568,-0.36924173361609547,0,-0.12692428803225705,-5.1068625,0.6750179596367711,0,0,0,0,0,-1.0231953363248845,0,0,0,0,0,0,0,0,0,0,0,-0.7541730688636252,-10.214473444702472,-3.444472475730254,0.7976820278741001,22.090873307012235,38.9150489028536,39.03425397098879,26.432215533898365,-22.832890802640453,25.061017168731865,36.13701999441934,19.141951367711165,23.286490760170565,29.58871345539407,39.71212424719151,19.835263590704145,9.54568927618728,25.858986365237513,39.676764826452775,19.922295029222276,22.083647015054826,26.858044326830868,44.91143338064042,24.142885968745123,-10.997281496394436,33.1119666057143,41.08625080386724,18.11664508209773,27.567313580799613,20.3115596987098,22.039083904308555,18.20149951429807,-17.050691940629854,30.395741943324115,14.277687952151737,13.935569432031004,23.680191590014477,-9.988688120596198,49.134682806995734,23.73256336200478,19.63644107630929,-7.800733063560424,46.14931367638699,23.896948855359547,19.694947516798546,-13.011062395825281,32.405183605025165,21.83396515960264,8.890060626213359,-6.08149357854135,42.26555476034413,7.503065254097921,22.80755574011893,-18.532392762512668,28.59807865890504,21.293429114290916,11.072970629349781,-11.890406760426036,29.714427561687422,18.803654862104583,12.312914830797453,-17.553359904907975,22.10327401634907,7.685089658597548,34.97173517346487,-4.891079708151451,44.295000239658776,0,17.786509631565547,37.39530291886438,6.102817930669828,8.592268429579837,-22.621709388164568,2.0996120142298587,5.618452045408501,5.315432905863254,20.348645529502456,4.815841814870172,5.926778565530249,6.011694491721879,4.4607259564533415,0.26102376112804715,6.167152643006366,2.4677972266950023,4.845201278154823,19.354229747633312,3.2680033413341816,6.575427950495385,0.9467163160260026,0.22051634590623637,5.007841929600113,2.2381155328340387,-3.2148184399001956,-0.2435429510998613,2.289529759654101,0.0718869272635944,-2.41773634044403,14.887806047552687,-0.41795446076641324,9.482696631427721,-1.275061495257825,-14.28101246463074,0.29323329670099696,3.439132673830911,0.7428630987031135,-24.74409410915117,7.001448422472133,-0.4147565496633102,33.00514578424322,-37.68531880990522,4.15689877976394,0.6582252417514148,0.321685323884759,-20.09612637538524,4.333919733817361,0.5248979194375487,0.7097817336478398,-16.58359902298062,-0.6438074280652374,7.840368887101723,-2.7047557847428467,-12.165913835994306,8.033160957553202,-1.1795051381026525,-2.559929641502837,-13.487650249927823,4.151888015502185,0.3872084551610324,1.4856197595827965,-13.332475930639003,4.709721931400593,15.602185873574168,-8.157380581096593,40.43343067147831,27.039409245750665,14.615278745623145,8.64734217020567,26.377118710612255,19.33600469129219,11.646437237018862,15.675426222643118,14.19247532338093,5.961100015444432,13.748465729151965,17.223645176504398,4.384642537537744,3.092284338668059,1.7931829489403224,-20.028935291996163,22.817344542582077,7.256998235815132,4.090400717198711,-15.80456791789397,3.6664273742410294,10.60062659898049,7.355232640063076,-7.930337348561597,2.2200782940118606,4.694855085741625,1.2152649386734136,-39.06685608623175,5.193515983262996,6.817870867683595,3.9769129345802177,11.636385731557894,-15.240931293897786,16.543455313648952,9.221558152683931,1.3779099337635288,-9.318736826689298,38.9727583590976,6.884621091013214,2.3015510203784215,-36.27638787931803,5.4917902700996235,1.128026723896597,-1.0613068848134186,-8.25873167208979,11.420580487554293,0.09944162583017815,-5.4435450519191795,-23.959107723372068,6.50850161745976,2.5296289996622794,-1.6466921121315166,-30.486418106831017,20.52467520217493,1.4172854552364975,0.9808383717656786,-27.34386700375887,2.1025682069682965,3.4320108970146186,-36.67995402790055,-5.1172355484375,2.94405595025206,-1.584967840966585,-8.646119690014846,33.90066368536542,6.924767524310888,5.05605916197991,-17.64643144052234,2.593169982085173,1.9784566180827672,-0.1279500377857819,-3.112930736729435,0.5126890551188032,4.319976765981816,-0.9354072892271238,6.189127007730046,2.6967612650259722,9.83007191118588,1.112206732690076,13.988220548975653,7.076009163614483,4.27283188038962,9.948012191365267,-11.873433108675627,1.9772982344494718,6.870837156028447,0.7251294401968352,0.6195823182990354,0.9390591127859773,0.6682102322749529,10.306435859685555,-3.350532810479589,0.8052964546866184,8.662391276953814,0.1747676606914407,-2.69175799642342,-14.799466590669063,5.519865003579684,-2.3639555461216326,1.3727982794865006,-27.55134146902764,6.801474485139488,-1.1065628607907403,18.212005976953762,-11.202708240987908,2.429995569063573,1.1074407559138766,-2.3994486220991713,-4.7696311359495605,8.958731848379589,5.410039306276341,-1.7944274360798298,-29.387568768601056,7.1116995426692435,-0.1560068427117741,-0.968193608861496,-5.1000000000000005,4.023088626549734,0,-2.663888596358943,-8.858066903419628,5.287690675784587,-0.11787604179869993,24.319052153392118,-12.49501515639434,-1.032761254441483,1.005155686540465,-8.640202525532015,37.2349294379344,6.588467742277381,2.3520262362303037,-1.1008245881331484,40.80228046332491,0,0,-7.411891572091717,35.38352439780756,1.5067327255138583,28.589288515034074,-0.338070615395774,44.34464414202501,4.5617415075294385,0,0.03934228295508069,31.482340390637756,0,0,-1.0484601886354425,-0.1,2.6451049921697494,23.367764092824967,-7.717011866617922,30.129468015032657,0,0,-1.108523911984385,9.161521003419695,0,0,-8.577876934307081,-5.023330407260544,40.48925147671343,3.2866753228205496,-3.6392592624850204,-0.7265288129911447,32.72793738597058,0,-1.0473498429346493,-7.378358814220569,32.070572616623544,0,-1.1054700864871527,-4.787138648858419,4.851572475550013,0,-1.0534177979276342,-4.189246934682494,27.386976069643467,0,-1.1,-5.1000000000000005,48.70847084260634,0,-2.5182445596854226,-2.465295733472623,0,0,2.6431289100805877,0,0,0,-1.1,33.720209765876966,3.4468020596301585,0.10442123400881259,-6.065795295419193,-0.11037656750380005,5.695238309895919,0,-7.00414182072759,-0.9872788196506944,4.147279525821665,0,-1.4029497642057844,-0.14903757276070734,5.778309179270998,-0.010118769679738737,-0.34053438915192613,22.564376639097794,0,-0.10574139165556727,-7.024557172399499,-0.18117508932276052,0.25200995748400407,0.0979018777881964,-0.17214610016830356,5.77549909583219,-0.13127569679180803,-0.1214944346668255,2.629869873670762,0,0,0.47628085208614546,-6.0209862786894,-9.463134153865495,3.6807262068136226,-0.18648286150489723,-0.8326353217074374,-5.413006209650634,0.8240193656396937,0,-4.678945771536595,-9.691487039391369,1.6216519361926034,0,0,0,0,0,-5.192684654131449,-2.777748726149776,-0.10239757666781434,2.280340628529367,-5.591452059059084,-5.1000000000000005,0.8776667538330604,0,-2.5566581411049323,0,0,0,0,0,0,0,-2.7262760050630708,11.446138403976695,36.539469733745825,1.032976960373462,-9.404901970837855,-0.1,34.90515032333885,0,1.8317774713076067,2.7088319021624723,-1.0147950513026287,0,-6.1000000000000005,2.8074436655673303,0,0,-2.4240953628342155,12.532879371671473,0,0,-5.190571222552794,28.910426979738002,0,0,-0.6493672819938358,10.337264351499297,0,0,-0.5686427271024401,0.8682062228550992,0,0,2.179008889773589,-4.937741679920179,26.24144755942977,0,-6.101102955629967,-4.790376642381615,17.841098923057963,0,-6.994947963839309,-5.047102555882671,1.3954216344648565,0,-0.7871016261394129,-4.948307182997085,1.4014937123949656,0,-0.6046607929724681,-9.65343070461332,1.449656732187143,0,0,0,0,0,0,0,0,0,1.0654863822485727,0,0,0,-0.03168814251160708,28.46894273485892,3.2304839916605506,0,-1.1599674742175266,-1.01967778437439,3.177750576010928,0,-57.49494831432965,25.166499784255972,0,0,-10.213625,-0.8955982257431936,0,0,-4.707799479348689,-0.10326079236131194,1.8318858113434937,0,22.378599588191737,0,0,0,25.104056979654377,0,0,0,0,0,0,0,-1.0709335410626073,0,0,3.6942222352438705,-4.105443073600613,-5.1019116153606365,0,0,5.945838354598249,0,0,0,0,0,0,0,4.105078693707763,-4.956630215791339,0,0,-1.1,0,2.1794991924751983,0,-1.1115066596589138,-5.1000000000000005,0.06556515030640384,-0.019206151216413992,-1.1173489981921196,0,0,0,11.829838651724788,44.43723873892765,-10.867251455800506,19.414510277120865,12.071973449775907,41.84573550862029,-9.73325709484411,15.964974943511622,10.284621653988658,44.58538446798717,-10.782846569638004,19.181418890641147,-0.1815127525952165,44.17681450137412,-2.4249557143276887,7.246627491419056,14.153300867369705,47.78063673809995,-3.6938070727135175,22.233267385996136,5.993231382511317,30.67727424199653,-1.2186651890086226,8.090112592830527,9.987683014897627,29.341813357920156,-21.04626324749215,7.108371210480808,-5.894766385187688,34.73387742520571,0,1.929997809265492,-4.8939551738684575,-17.906316436465797,-20.383291685619987,4.739140404408032,-16.995458020403092,-3.628040504686603,-2.210073882202611,3.6866607388991532,-4.2476747993911985,-16.261626028442997,-9.623078217607832,3.733146250267942,-40.03978756183716,-6.2544721573352025,-6.35293987456779,2.1212562281337526,-7.913171260674021,-9.56722355519267,-9.164710018557251,-1.557557472331782,-6.323314635928317,-17.942817472839906,-6.311052503835918,3.281301484233256,16.254715206078178,-10.557886799954659,-13.864990180001824,-8.016479125896282,-2.1092544029471427,-8.996023009236396,-4.10598339720071,0.5340961941065507,20.67902326015205,37.26678059177876,-22.753858630454452,1.1903872201449515,-1.4955437601921455,-2.6432709430500685,-27.668836215381788,6.476377563870654,-3.264964400425068,-0.5083144956123844,-42.25412681368514,2.4796556010678907,-15.238186940855394,-1.559378298745102,-14.205016820335848,3.008264533969554,-2.1553671602154885,3.4092149266773597,-23.7330863023036,-1.7052363542949758,-12.17526718324773,-4.507535685359609,-27.527459996664753,3.2459883946119166,-9.801946327352669,-2.9688458249982226,-14.249987563727135,2.363293245740589,-6.816857939633045,-2.7685353857974913,-41.057801012434574,2.9458880803180922,-8.392572482205091,-19.660377039288573,-20.101333684016836,2.246160909601815,-2.751436959124497,-5.115111449411014,-8.542549743066125,-1.6438924284758456,-0.9990456010584288,-49.110460753423475,-7.882736034255073,2.0778229988275068,-1.1,-9.697941145139206,-4.132809368358256,1.0354233338269216,-3.0005842797823146,-44.21806663862667,-8.119843363553276,4.486330111404483,-0.1717872217366673,-13.832974040723387,-41.84088202123615,1.8267863599966447,-0.42580632862107337,-4.451341952982186,-4.201269715692944,1.0959270027581713,-6.101171524496111,-5.101221422252789,-4.101246103696453,1.716792731265066,15.211383603935973,29.113775161730786,-10.120027700898005,6.933319006898964,8.940186325413901,37.05400999453676,0,0,2.8795621951423342,4.458807731473352,-45.089698208480314,1.120894777599259,22.152066788565506,1.6848121336061785,-19.20395221775586,2.615085138385844,7.216002128197246,14.029375014034043,-34.34733166265493,7.405814666541226,-1.2718492189694963,0.3122362938396653,-23.031083135516006,19.256350568041984,4.8285759188780295,15.090865518270967,-42.25462287627171,2.3095144565595644,1.9011252451229161,0.42952871925404135,-8.0972063856832,2.0136915246013007,-31.732795869476828,-11.073086810114535,-18.796760032568105,1.9030526181225138,-2.3936478605753635,-18.166070092628058,-4.951787279724186,-1.160107886312301,1.8530921051732947,-15.891830370404966,-37.81552819416788,-1.7552277999335326,-3.5590350608715258,-17.400197083397636,-10.731064043465068,6.533426612342394,-5.948248898950123,-4.65265430256333,-14.188992303052727,0.12308839012865641,-0.02128570670025476,-5.106810897784754,-4.101183789848114,2.0164461224664922,-2.5752392602375638,-9.615323021589681,-8.100251418650911,9.649826825462682,-0.21583551533277792,-51.12038167994821,-4.101504370293586,5.6023443501273515,0.0671310842565962,32.32238465887912,-11.181897114637362,0.5729990426733577,-3.0618460975440565,-3.826876411210886,-19.094801281200386,2.3138354190082033,-5.279002987554063,4.970647627591861,-41.12193766075623,-0.5627368976761625,-4.884859119522753,-0.949352643890175,-42.10330321951169,1.0564570584148445,-4.233022602241204,-1.5544319355742164,-4.132831514456682,0.3552113617840779,-1.1132898011473338,-0.2952966714718505,-4.1000000000000005,2.5271491199988474,2.8332727059526284,8.327244924334948,-4.1000000000000005,1.0816030391964193,-6.1000000000000005,-0.11927701370578157,-4.1000000000000005,0.476739306891164,-2.446113892003083,-12.971300923590057,-7.939650499467662,-0.5976358997498301,-1.0336059725901474,-5.150171987177985,-4.206661702942175,-0.017704558867934247,-3.155140445097867,-5.044195334670884,-7.708829428533378,4.678892124290132,-0.9541043453690048,-5.101132687764256,-4.1000000000000005,1.0766889318544495,-2.5278266450293216,-2.160092834902061,-4.109430730288572,0.2828070551351497,2.3877484749721454,-5.008184728493194,0,-0.0916972608498024,-3.320121609160573,-5.106117557237103,-4.11822691118185,0,-1.2528941560859765,-5.157773250444354,-7.965804959660154,-0.7964537079993458,-4.673755779240059,42.54436428000776,0,0,-5.048379727426616,30.38139024299446,0,0,-1.1,23.929695095169652,0,0.04619824346667015,-1.1,-0.1,-0.34202104265212513,0.8650272482543834,-1.8595037849084695,27.27935998394605,0,0,-7.816721958088999,7.030650577929014,0,0,0,0,0,0.05488522865078779,-1.119697989975318,0.07675597800535605,0,0,-1.5471062909656885,-4.434993648303987,-1.566097543439208,7.7451146764738645,-1.106689803109464,-4.269380455882704,-0.6202110242601834,1.0651937939311753,-10.213625,-4.829692003167028,-0.6346117835310197,0.42930459580686675,-10.213625,0,-0.5774898915879206,0,-10.213625,-5.1000000000000005,-36.30795069038164,2.7379886583175486,-1.482897493288964,0,0,0,1.1484832124039521,0,0,0,0,0,0,0,-1.0617060148247883,32.87808888789288,0,0.10534925753575242,1.5426592357915336,0,0,0,-1.086352238355553,-7.277067002918561,-4.264864615158162,0.9115943551731982,-1.0946807338999658,-0.4674277175704135,0,0,-0.31899955151162784,-0.0744770368971391,-4.196898779408513,0.2707489790873075,0,0,0,0,-0.32977713470501807,0,0,0,0,0,0,0,-1.136347895409621,-5.090247795442695,-4.48659394404224,0.08822298725580399,-102.20728556943509,-5.106987299179647,-4.43095675043028,0.21054184325741582,-55.82334942334471,-1.9116598502795297,-4.092656642819487,0,0,0,0,0,-0.47241226016734583,-4.848640164865039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.5607736319140972,19.860965269474708,-1.2809416873421484,0,9.040680629368909,0,0,0,-1.8437634143853512,-0.14808131058450352,-4.1630228479604705,-0.03078016108387907,-0.6384824487051874,-0.06401099896040223,-4.1068625,2.7858403431665044,-3.360415838914152,7.509985984231811,0,0,-1.1064103860195347,-0.029516217446594772,-4.187335013427482,0.25469204774223514,-1.2798897183056837,0,0,0,-5.148262056394774,0,0,0,3.752147556316678,0,0,0,-0.21699195404737406,-4.46909155041136,0,0,-5.2489177347229585,-2.381466623135563,0,0,-8.318084119674616,-5.101659699769188,0,0,2.185108734147623,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.514217316156889,0,0,0,0.47283084868548175,-0.1755231688768737,0,0,-0.9743589099649861,9.028034846769593,0,0,0.37567479852813046,0,0,0,-5.8403169971432956,1.7899140541754335,0,-0.105868642778877,0,0,0,0,0,0,0,0,0,0,0,0,1.6840647601795196,0,0,0,-1.4734246091917085,0,0,0,0,0,0,0,0,0,0,0,3.435611866237835,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30.622587774225202,38.15292792122526,51.07988750906311,-17.194032098064405,29.833446469838805,29.845458102474645,42.399112603995285,-17.165032613218226,30.696420134065967,42.17714786460335,30.007495750193367,-16.752037261888322,5.9402375168591695,18.031415539279802,57.021165604240245,-13.088760631038738,23.239452851828073,29.614083306412283,49.554240729043705,-14.920612012353752,17.978269029862222,21.37238640421225,49.77565076158576,-18.216590711483548,20.185319537451438,20.46654534928182,51.25454220006662,-16.119828279453483,7.499101031706843,33.85584772372238,21.090994028584397,0,25.570753540105507,-11.145890026917339,52.709248978674076,-19.88919771845503,11.618179797691718,-7.055153336721059,49.806650752318205,-25.51397305800442,28.310182764475424,-5.313220467652715,51.64775151208513,-9.600645937536147,1.2812008320876203,-5.528869758421007,51.39072268033711,-4.957594453803894,21.45658748144122,-15.594769525037218,46.4245822000633,-13.239569203714936,0.29475598845919393,-6.776263412272387,44.480839189714764,-2.688989401642261,3.417737930690463,-9.500881211696562,51.26273194327794,-2.4696184160138626,-1.023129479992014,-5.502781282184069,28.875045630331392,0,28.91916250867333,29.044538184198796,54.13015033466051,-19.13787130749192,19.484838954614453,15.032348678931317,55.3068509492526,-14.242656227654301,15.963900338976163,27.180836067319497,30.89240686371086,-15.55517420543149,12.900278428980258,5.821274867328682,49.58887593721078,-9.004649386013057,29.12549828021606,20.217183086432726,50.33655075630585,-17.628790889375377,1.2043595159139058,33.22937207783328,51.889705922155684,-3.2459196404488706,23.335937609744892,12.853310345877059,41.21060686830846,-2.892667698582853,2.9925006351606984,3.2019708614367746,49.02150422577624,0,19.71631630865991,-9.095824001972499,51.04924491187305,-13.252963361527822,7.970752726191244,-4.289912179083313,51.2332391824031,-7.648672621151921,3.357312274167607,-13.671411929833353,56.60196291876887,-5.952017012660845,-0.24608615905123213,-13.842255213002037,50.65934030443812,0,-1.0065224705828433,-8.613018436084317,51.6096936482404,0,-0.9532745728666732,-15.377941563883489,52.149015861248216,-1.9407083993177316,-3.283527592403072,-5.105897301148952,50.37454586564157,-13.906762847315319,-6.1012375,-5.136907890357477,52.91158744750746,0,-12.99106669497694,40.49369109912141,53.00283838751877,-25.249472205098147,20.47641604738007,17.745414433306465,54.441288010850066,-22.736272095983267,14.050553799416884,15.685388708228647,42.64684152634646,-25.704566117053922,17.408435099117874,13.180187746225677,54.396524634495826,-30.11434236890423,28.444745747408547,18.158020789593536,22.09046085630073,-22.475158209902112,6.341460023412869,8.034002354448132,22.54766830172192,-11.75380657593102,14.727804760768969,26.092532088889598,15.928066021871224,-19.32978299210222,1.961800529079254,9.085684105887273,0,0,9.251097343586807,-12.896556115018601,42.59196144990556,-22.959095929716,3.2228853863584117,-36.999801993727885,50.5248884089145,-8.190396341434406,11.89940103953143,-8.181600217995339,58.65241724477722,-8.97427867338504,3.0010254658563436,-7.024942200687494,45.56582418478452,-8.174661048588014,9.769788418800832,-10.386620236926204,22.234708488640084,-18.378102873772477,8.416275153314198,-9.229623146138541,50.0485324588442,0,0.3635581153426686,-43.47374193163669,50.271029167012934,-13.58470861901789,0.9042524857317349,0,29.927023181607275,0,9.679094897915597,21.29611667770315,41.449903366863644,-26.4283589645515,9.524441913209715,11.314664403869031,42.406148782711135,-21.07877864317417,19.767172815873614,13.357220921330489,46.81263396880474,-13.177588583306337,-0.134604010703103,2.837766099903261,49.40778419347397,-4.430427545019014,3.9563704754607585,9.410951663463726,47.34599160133742,-11.411892025515996,3.603505578540904,2.098757560314069,41.08602185114307,0,-48.93817876975632,0.6210703910803939,41.18461087773022,-15.238543586744084,-6.075683605310953,3.401658870317548,39.205561669991354,-3.314282393013852,-20.65359698178085,-8.454496222669786,38.86764567971949,-9.284264119894107,3.4530625558638093,-9.425658735009359,45.99959379636909,-5.1012375,3.366364632915891,-4.827967823851047,44.375796133475994,0,-0.5177368071539017,-8.910403028731201,31.367257830501668,0,-0.7923254359274555,-5.1000000000000005,42.68501738465627,-3.183029663781296,-0.5434341112510682,-5.1116103739717555,30.637281491467697,0,4.523856131955962,-5.1000000000000005,36.45785152371528,0,-0.6768300604614114,-5.15813643381802,27.77716614025859,-5.1000000000000005,-0.56056214421718,44.083940014972995,17.425945655974814,-1.4204610924459027,-19.303752828125,40.21983599791507,5.329123311103647,0,-1.484861563836567,37.35897221000179,4.9084246227035475,-2.0933546891430903,-1.1103277671658682,29.96674504460592,0,-3.214920771348405,-10.213625,45.0573149783973,0,0,-6.1000000000000005,30.03609831547071,0,0,-10.213625,-0.1,28.185783263160836,0,-6.11262108632198,11.841844359671018,0,0,-2.6616152166790874,-5.1000000000000005,52.29809362122214,0,-8.337967774976942,-1.6729135934726778,35.544515527193056,0,-1.1029282709951675,-4.847930986388623,49.53974172630537,0,-10.213625,-5.1000000000000005,31.493942552473534,0,-1.6741701439659824,-5.1000000000000005,45.30271990140393,-4.028839544039009,0,0,0,0,0,0,0,0,-1.140563238857041,0,0,0,-1.111297976973075,30.676043556061863,0,0,-6.10136776660232,-0.820147229454194,55.054160187412855,0,-1.1097468596076503,-0.6240604481824216,57.310886846710325,0,-6.098846520999263,-0.034462440194944155,4.7921855922876935,0,-10.213625,11.66101343923742,0,0,-102.15247916206735,-0.29011694047996495,22.182015019044695,0,-0.6382387424668626,-1.0889645761027371,16.292023514517957,-51.06982262456375,0.5715235121796223,0,0,0,-1.1056643517480296,-9.431529091205217,38.96078750325365,0,-10.213625,-10.046340494511242,9.717706925760158,0,-10.213625,-5.1012375,13.7021292658388,0,-1.292556387376595,0,0,0,-1.1095846460494176,0,0,0,-6.116227927270694,0,0,0,-0.6686652438801995,-4.242126563963043,0,0,-10.213625,-5.137147494755648,0,0,-6.101193918466349,7.949022360903905,52.28965047995339,-2.4545138416891064,1.1811921055177257,31.75814496125064,0,0,-10.213625,0,54.32856730377709,-7.584325793694196,4.8630278757672265,0,0,0,-3.473384629803252,24.363585620672815,0,0,-5.984674495533987,12.762670666364782,0,0,-7.66649400607924,3.4583842642034526,0,0,-0.9405565062424546,7.6981300808302295,0,0,-1.5373140863046746,-3.949548668416013,42.17630016131457,0,-1.1049554048935366,-4.419482915439084,19.455083993678194,0,-0.43997429039978686,-4.344327990692295,9.673251506641044,0,-1.3488829701956355,-5.118362552518561,5.242600335198336,0,-1.532415280240195,-4.434625348749608,14.17875622058449,0,0,0,0,0,0,0,0,0,0,0,0,0,-99.43150926611088,19.29123427089382,0,0,-1.1393779419349523,-0.14735764616927852,27.046436135880597,0,-0.9437198184896964,1.302471961638311,0,0,-1.0383555847262587,-0.2648206575903147,0,0,-4.711671128913715,8.701401916609692,0,0,-0.6504245889080645,0,0,0,-0.3751538246416482,-1.1898656860547243,0,0,-1.0844073602963449,0,0,0,-10.213625,-5.1000000000000005,15.342893750136495,0,-0.37680918400275254,-51.07385987099997,0,0,0,0,0,0,-1.4817404235492813,-5.101685896950143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4816877079909245,-10.221037260381316,0.6749755343150965,-5.106988186511123,26.47959527362953,44.30160026924003,-1.447957826238812,-19.388305300724344,9.058506420156379,43.006698088206036,-0.15234716382839128,-26.608922322414703,3.4416871642202267,46.41809250836668,-3.684513523849402,-23.18439556724406,-0.5855976751876563,45.17372283646519,-3.8632106950434912,0,1.607067775810626,42.446274767835746,-3.320073731729424,-10.759593552164347,-0.8810244890610512,41.66592660425695,-0.24812587403728237,-4.021552849782772,3.684404765374248,41.5113143563094,6.133616998854694,-9.336346517482427,-4.6884165659399315,35.915760678463776,-1.350143541380703,-2.519925238217784,-16.4365400700393,-9.720561844467936,-2.64888826797876,-20.46850189623187,-9.654844040927218,-7.010308687556588,-10.16905425071715,-17.5281848484275,-9.694309939242755,-20.515736006075976,-3.5166664168808532,-17.05065067910551,-8.186351352398018,-10.389220074187135,-5.743925760057114,-9.798033080095335,-9.17711288838893,-11.375432920312079,-2.1494252473818296,-16.893976702612633,-10.998571670870955,-12.298820702246132,-18.368086356526554,-13.325913012144971,-11.827953471519471,-12.247705787499402,-7.732287313055558,-16.36616642371422,-10.24727141974524,-47.70285797150525,-33.43678915174246,-13.62171056286407,0.7734031672211992,37.64322185454939,1.2571274247292756,-4.774119651176422,-13.529522641773868,-11.18087566005357,2.9263120691204363,-28.43017119438992,-60.929173349469465,3.143421877260545,-41.06903907136942,-45.25486934588375,-9.47531505178646,-6.034095668664331,8.594975198563228,-11.254153902771877,4.644699478034368,9.993956878826978,-4.402109528128676,-16.22161422792012,-8.284480434549284,-6.780897861915415,-1.9287209962247038,-9.091462395398501,-3.7902055236143277,-7.9205735806296325,-8.275310355459629,-48.24727192448557,-5.191275912816406,-3.723484928322432,-3.705059827417636,-4.548146191204576,-10.63898741795565,-6.140387321469594,0.7233426258000409,-50.811200495971846,-5.043446569714649,-5.1000000000000005,6.709769501730213,-5.1000000000000005,-16.64696189111351,-20.807268066581447,-25.435647073311493,-50.56321257039181,-0.5281616131289866,-5.101249636846455,2.029038526609882,0,-8.017572969521616,-10.334827454633299,-5.439599469429061,-13.783082156066262,-3.444626890601494,-9.70652889791328,-3.1921956792823982,-9.37519032906262,-10.18414856404073,-10.858573788091396,-7.357932595412779,-9.684672862495614,-0.38792100418670783,-50.30899247390412,0,0,8.7085993144024,34.17029827837394,1.7419060252439267,-20.485064560336387,-0.5720962066427817,38.417807736337124,-5.7680626722758825,-4.72278003084775,-3.1978169334915325,5.706029968595932,-7.45452505703954,-22.10145479657998,3.2247141147812695,3.1971766829727692,-11.380938994329844,-8.839850870251546,6.43322241841088,21.139248946478535,-2.0468422100398804,-27.31598071560318,-3.8653956871112793,7.321754205972836,-0.824308934829087,-11.754592426208363,6.481123984631227,4.18612263678308,5.752715431006704,-25.353230830541836,11.697995698655866,4.0242261548171525,-1.8833153529218487,-9.06907302504246,-8.722992223776904,-7.261006528999541,-4.22574549882512,-9.732830784910206,-8.945052787643826,-18.33596694739561,-27.681487928206987,-28.88567605119941,-8.342337670495278,-9.620156371953051,-1.6423597772123637,-9.71093174844096,-6.085412907684471,-9.41074173328446,-4.265333338022167,-9.629109219690775,-10.928824594875813,-11.229961855562316,-12.362562429090936,-51.01256039784541,-4.2264796707183825,-5.106995217676278,-7.169427578307196,-4.943417687285692,-7.962161441990579,-9.577290542385388,-9.682791656135514,-51.014845532550275,-0.8167819264337232,-5.105197907614922,0,0,3.9367523122895447,30.82173084878828,-0.44952420709281216,-9.637053302756701,-12.900037504430118,-11.575645945477515,-7.093199826600719,-13.821419851030562,-58.70457506071851,-3.9517983527938707,-10.075245984464807,-13.384862343245043,-6.203409400341232,-3.4291644053476764,-1.4926458963263038,-5.067635546218621,-1.1020029971338674,19.727246260058998,-4.1000000000000005,-9.635173202239098,-4.945445714489217,-4.520115266734696,-6.288924536792864,-49.261060678294726,-1.013360662825011,5.175066450382295,-4.1000000000000005,-4.95390856975321,-5.932847840882889,-3.3540480316176207,-4.1000000000000005,-9.639320831202188,-4.041195774389735,-4.854940153919703,-2.9526983798188313,-8.982290882059651,-5.11756020366583,-5.1000000000000005,-3.7626395141306084,-8.89910388189298,-0.5645535154495179,-5.137840799118385,0.4727973613376222,0,-7.295618239547478,-5.13978236997125,-3.2706047912122624,-46.35584723123222,-5.157375,-9.127563694442085,-7.791118996070647,-5.101351458307365,-5.497132020913646,-5.1000000000000005,-3.5469991393689915,-4.99586859789822,0,0,0,0,-13.271996986277747,-17.97000484319287,-10.716213495325679,-13.48391355803039,-6.108371937005837,41.21350438705103,-0.5956278216796037,-4.86950968871076,-6.104612500000001,44.65735899572691,0,0,-6.121840328125,23.962712848161722,0,-4.863394573757143,-0.3695852920104843,8.18451339744059,0,0,-1.1082416079219615,26.70117511426841,0,0,-1.1103575492309645,3.2958064257036606,0,0,-0.6851369842167436,4.2431221351441035,0,0,0,0,0,0,-1.110598663085757,-5.771368779063023,0.2864822585182122,-50.259986184782164,-11.203281082545779,-5.1012495968384295,-2.5166265576501763,-5.072399097064163,-1.111482935246731,-5.111566504703055,0.4296631008972391,0,-1.4916834161007486,-4.696059996111631,0.26371025398504316,0,-12.030017885981836,-5.518786540478289,-11.67989735519452,-4.994827313706815,-1.162081249441554,0,0,0,0,0,0,0,0,0,0,0,-6.105837330998103,18.469816340144412,0,0,-1.1106747912545554,-0.5662155912121395,0.4149380266347058,-5.106531094048107,-10.213625,-10.826636982625903,0,0,-1.1,0,0,0,-0.49953944168244724,0,0,0,-10.213625,-0.1,-0.9672888247384176,0,0,0,0,0,-0.616705449525746,0,0,0,-10.213625,-5.1000000000000005,-4.079620627328896,-5.117249538158946,0,0,0,0,-10.213625,-5.108352965883179,0,0,-1.1128839747674868,0,0,0,-1.5580007629739285,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0986450357306372,19.768308428505172,0,0,-0.9656487926871956,5.59540399587577,0,0,-9.827308954377731,1.7041961245650703,0,0,1.126723370623035,0,0,0,-7.624376297817596,7.001170362443615,0,0,-6.961421288648116,3.5172034587400502,0,0,1.836424639259076,0,0,0,0,0,0,0,-10.213625,-4.536137924585058,0.31115460975150055,0,-0.846003150103495,0,0,0,-10.213625,-5.1000000000000005,0,0,-1.1051975438937354,-5.1000000000000005,0,0,-1.5904464014899549,-1.5183176248657546,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2457574021886075,31.37327943877258,0,0,-1.110943999916783,-0.36526972825372406,-2.7833027082917043,0,0.1712044561485863,0,0,0,0,0,0,0,-1.0460252241199486,0,0,0,-10.213625,-0.8374529881330539,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27.2637117704084,47.72116161054461,21.86803081365965,-27.666260109661977,7.82572084475706,28.424133871364567,45.23692828118739,-12.931699327321741,21.57608308009746,19.79724671155187,40.98516448736591,-25.481284364978173,5.791759674445785,8.623676439531987,33.5015597904027,-3.53066950589025,3.4586653095677105,15.48795240878878,51.526986695936614,-29.9943866542285,9.49803440262785,13.765262970506113,16.379748182612854,-11.48958514547001,11.1102074584303,29.591950502738403,19.570908086463163,-13.048319466157766,-0.006711523561518801,43.59411113227069,4.945978720341607,0,10.648330205054549,-24.516705338855626,48.769729290513176,-34.34132201044153,5.671022009898631,-9.531364293140724,45.12800440486623,-12.305071614556287,32.563596455674094,-8.674091470958029,33.95670117888318,-14.487297591757255,1.405860878730788,-5.927317438867876,44.80184857506226,0,0.5510758307758685,-10.490375997243286,48.673702839278064,-12.439059476032806,17.253159694991023,-11.453572644422161,42.950065728873554,-5.1000000000000005,9.810833044859994,-5.1081040071676895,48.6887065815409,-4.894237013394177,3.4507367858636133,-5.00982749420044,32.873987550849456,-2.3983876855351185,5.098908312685041,38.19712188581034,2.547764268190767,-18.283187824473373,-29.992563036053166,-0.48780083641640243,5.483969991426178,-31.056391879143295,-3.2399288344851187,-1.2317017086554576,5.011945028349471,-9.614294420738464,-0.9470535448443131,1.0741509405668825,5.324851358640517,-5.1000000000000005,-8.124355079388623,24.465203143692722,0.030448519056194806,-46.124122867489916,-3.3257308205140452,-2.431362141090636,7.007909643573166,-13.461087760712319,-3.3072524418555433,-0.22757684499740619,5.129133008523446,-21.234150234952565,37.035372758222366,26.577114501950735,1.8442805115880678,-23.29940666809941,-0.9324825036030697,-14.05290982053872,5.407903214132612,-9.5157776411951,-2.757753287828943,-24.556351357169795,5.572842281612623,-9.007283469356386,2.4322959148319923,-9.814947116781916,5.293336713229346,0,-1.6740825713929572,-5.1000000000000005,2.4539444815678806,-5.100718602774503,1.0788886830544042,-14.61712171741715,1.4274494244536418,-9.696555150009388,0.22787300722377507,0,4.233727923777887,0,-0.025610451606779633,-7.682004405611288,3.8780823758853495,-5.006181429355911,-2.649162529666153,0,0.6253156890583971,-5.04592194265629,18.513126601004178,32.48413821847581,19.909378883468165,-29.40829612883669,3.9341020319007503,7.063128362451917,37.338698255634895,0,-6.581633138582987,17.81987016932101,8.287731405222567,-30.333768940784854,-0.9352923858223012,4.551993631071333,2.5153328203586662,-8.467715980575795,-14.20612426332979,7.181207214543984,7.1692297335304636,-26.11868484709376,-14.067192797204378,12.645290583177253,2.971519893779051,-30.112285229300532,-48.00216637191464,3.755684824916469,1.754968347977166,-39.22185878294807,22.373427780875907,1.9446358594332525,0.33620417539540526,-4.853514783433751,-3.2358107904884506,-9.645858035280748,37.48884994394937,0,6.042509629514649,-12.380823786606832,33.48880599635108,-13.32110951320378,-0.845500918072628,-47.96703347722596,8.809699567323475,-9.677136023025874,-2.0700021142483807,-5.082043247666234,6.683353755658128,0,0.6693061193007175,-6.626098674187921,9.071188066650837,0,-2.818380004011673,-3.970631171136968,4.524410691084873,-5.057561031068288,1.5757102838720805,-4.951000292160512,9.032695893406618,-9.696864389889143,14.266676999949635,0,1.1370480564524144,0,7.555384139154851,33.44189064559293,-0.03346276348183288,-9.297446519502103,-2.2214343128846377,-2.3273724414748282,1.9468069494939535,-9.690878932134765,-20.06789079141646,-1.6057574210703525,-1.8907926526258334,-30.118745803050768,-2.7587104068750006,-1.2927708723695441,3.282203496520886,0,-21.758809928235053,7.500918818308565,-1.124141801846406,-45.54894861107009,1.10700674486039,0.6599340173939572,3.2498389873204196,-5.1000000000000005,11.795913816242551,2.160348002793454,1.7404678956567157,-4.560137536717829,-0.006523514330781452,-0.1090275015825629,8.290745414859778,0,-2.2539242619835704,-4.725054478731887,3.970305255489998,-4.958806553637199,-3.4132545023722884,-5.021100502060316,10.416268575542153,-9.657000077174377,-4.387928101996451,-13.822003502671876,3.1675401158474195,-5.1000000000000005,-2.7777217325041015,-4.9741452802572255,1.6113078283979947,-5.059015520438198,-2.2296546347031807,-5.889474578129,2.8937623778404493,-9.594741346297123,7.749698901952581,0,0.016985749043641363,0,-5.157375,-4.90611934358416,0,0,-0.908887873609665,-5.157498593911875,5.5111433697519425,0,-10.213625,42.307786039561734,0,0,-1.110851019354165,26.272640975026224,0,-3.687682797115139,-0.5346488121504736,19.279092881833567,0,0,-10.219376564212226,4.609901395819956,0,-5.112501521978868,-26.03190810750437,27.84681924211641,0,0,1.0944029940469555,0,5.0114181013276635,0,-1.10725014270135,6.583856587911038,0,0,-1.3675073160584064,0,0,0,-1.1650062889680473,-4.299034885805842,49.67647357908394,0,-10.213625,-2.3865345118820933,12.174967515523884,0,-0.7736905154010788,-2.097593197339277,12.562420133182956,0,-1.3514316300162368,0,0,0,-10.213625,-2.5595747133712874,8.743784740139937,0,0,0,0,0,-1.1103054787159057,-3.337019686165023,0,0,0,0,0,0,-10.213625,15.030573874878684,0,0,-1.1300186818117701,-0.3366473733318682,0,0,-1.0075751962174206,-0.4119552347551541,1.1386167009803165,0,0,0,0,0,-6.110916770659537,5.249721065267018,0,0,-10.213625,-0.20898527234075293,-0.2587810905366201,-5.10744858190493,-0.24140869698176265,0,0,0,0,0,0,0,-10.213625,-4.529248114268529,0,0,0,0,0,0,0,0,0,0,-102.20660961250842,-5.047578606462391,0,0,0.2766223162531512,0,0,0,-1.2372464887746144,0,-0.10147781150386984,0,-1.4392809096293995,0,0,0,-1.4856792210946221,0,0,0,-87.04243016665292,2.542901811914749,31.026680660404008,0,-8.071939769397655,6.382333105140075,0,0,-1.6431154047625076,12.405446679142647,0,0,-2.8589347237467146,0.3741851616518531,0,0,9.985706789775351,0,0,0,0,0,0,0,22.0460289825044,0,0.238644076763478,-5.116093494138259,0,0,0,0,-10.213625,-3.929894800622604,13.899867222322047,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.0323425072602386,0,0,0,-1.5559569686717964,0,0,0,0,0,0,0,0,0,0,0,-93.87872818015443,10.199420016700975,0,0,0,0,0,0,-1.8022622503896895,3.06055932095623,0,0,-0.6173489965317582,0,0,0,1.8931920734428331,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,1.1744662045239393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,2.7322375790270197,42.91623877524131,-5.706684743845836,-18.823768869603562,4.579311402760061,41.995282821787065,0,-7.616258948111305,-3.7875882202587743,44.11369319527981,0,0,0.15024143566501702,33.65792238991516,-3.792165192175668,-5.023981424520759,-0.2343217736295836,27.924516208767624,-5.563572767542534,0,-0.1987218296521469,38.65654524585173,0,0,-5.157375,39.62420748781764,0,0,13.433253608977166,0,0,0,-63.410491197368636,-15.782404959417999,-7.8605016139111665,-23.954983097750613,-11.965694607479275,-13.0194141003873,-23.70979967690079,-50.18963410655968,-10.53271114613865,-11.145693569251549,-4.53124892219637,-9.691428232603998,-6.438978423305825,-8.687266861071988,-5.664095284811209,-9.692032940941797,-9.000591830109943,-7.831833571325056,-6.324677349653825,-9.723571490372937,-0.8802766752772618,-45.62329327480933,-4.029554591124423,-4.935099278374152,-1.2035330487876144,-4.566543109938029,-0.7823729494742572,-4.847469543531685,-4.355082641574832,-8.915499546780898,-7.657634790314816,-5.105231558170472,-0.6883964130411191,35.75302592059894,-4.110956436479629,-5.101169394979448,-34.540158618643765,-11.726409682856765,-24.522753461216205,-20.85562951876812,-3.7988284581086624,2.993473265432254,-4.588488339496943,-5.081394919772887,-1.39288165345714,-1.3872465376888705,-4.217854683663696,-4.918803881249539,-10.384925665851231,5.972064860952405,-11.119115252418286,-9.69097308760372,1.0335216704104422,-6.034501823875726,-11.207358047623774,-13.596509062934764,-7.629040893404633,-1.4319477828309077,-11.257303358797378,-13.37480321710342,-0.8173252620677811,-0.1109515901397651,-4.104846564229386,0,-4.457428121564776,-6.563777460529393,-11.46979576341024,-51.071113744050635,-9.676115483190284,-17.664955344357487,-14.6956658365709,-13.680007313215366,-5.898659647013258,-9.353159231886114,-8.04213672183268,-5.090161633957552,-4.409819960588655,-5.139346624211559,-8.300257416375324,-48.78876619936073,-4.245433853213939,-4.242021987434006,-8.028399387418117,-9.697008706271776,-0.6729780688825304,-5.137882822812923,-4.079671584361337,-4.878876619937642,-0.7008824689505966,-5.1000000000000005,-4.1000000000000005,-5.107111374417247,0,0,0,0,0.7981276719978743,34.709168836665384,0,-5.050640697665239,2.189937071979455,36.48668606801358,0,0,15.254300640283537,2.681206908950821,-7.395931615697873,-12.941795633231969,-54.001872159857825,-2.4947565533219613,-11.176616026395202,-9.558338091924748,-1.5621261755287703,30.61454800898887,-3.7817621305270017,0,-0.14929492482870232,-2.1225032820613903,-4.150381519720816,0,-4.701829540581411,24.201808624669816,-4.1000000000000005,-5.092407383116133,2.830001627523365,0.15261836666812056,0,0,-10.356596098776276,-9.335641049430045,-10.662988100191884,-9.690000000000001,-6.373491969253059,-7.958485869315386,-6.807515445342917,-51.01062440081317,-6.33459516126162,-5.100393041299518,-7.701773424136152,-9.690229392975189,0,0,0,0,-4.187973289746953,-4.276493995041895,-7.622808039460283,-51.01216933842636,-5.1987396185640415,-9.708460042737588,-7.555769780082924,-5.100043713248047,-0.9452460352026764,0,0,0,0,0,0,0,-1.0289277327640634,25.132886617270483,0,0,-8.183395181984725,-7.748642581855535,-7.8641902199475195,-13.807116583442575,-0.7735606241247321,3.083997678309122,0,0,-6.009397170262901,-5.8631554753977735,-11.335741570056499,-9.61025769691722,-0.315390376192844,2.0180929371623497,-4.159140568683078,-5.088746786326813,-0.6007967160601129,0,0,0,-5.776679611415296,-2.6300565328229033,-4.310705299477713,-5.092756399574494,0,0,0,0,-5.302073899213026,-8.150301603714944,-7.7663278739995665,-9.627402834761018,-9.665350744252025,-9.773973428593207,-11.092456010060623,-13.57724056463241,0,0,0,0,0,0,0,0,0,0,0,0,-0.9880144841793158,-5.1000000000000005,-4.142684573172616,0,0,0,0,0,-12.725372610310599,-63.46944167623151,-14.775467748827063,-50.29621544766779,-10.213625,15.45501609515544,-0.6558795289892821,0,-98.61797718282654,4.921023822121958,0,0,-10.213625,9.795440465430406,0,0,0,0,0,0,0,13.34332102924196,0,0,-10.213625,4.191407155933449,0,0,0,0,0,0,0,0,0,0,-10.213625,-6.32401385611516,-5.766241014864688,-5.117249825051532,0,0,0,0,-0.87392429218235,0,0,0,0,0,0,0,-10.213625,0,0,-4.858038901399609,0,0,0,0,-6.1000000000000005,-5.106878502071735,-0.24071305072293186,0,0,0,0,0,-1.6061146067379017,8.765277411340659,0,0,-0.8104529615159525,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.010741351147509804,-0.09152317149033806,0,0,-1.5462542592352566,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1109132344151529,0,0,0,0,0,0,0,-4.488027947135919,6.488216797167695,0,0,0,0,0,0,-4.248533206895086,0.16147004859232283,0,0,0,0,0,0,-10.213625,2.138194150807352,0,0,0,0,0,0,-1.1029047852363314,0.8343133474268266,0,0,0,0,0,0,-10.213625,-4.891006745983897,-3.842367561202268,0,0,0,0,0,0.5849574635791751,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2528754950436334,0,0,0,-1.016917074082704,-0.23277973623724632,-4.121940113136292,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1105806044087163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29.47784436103144,39.0008829826263,31.008393886209692,34.31297709017573,22.980081858259176,25.065985678747452,43.771134963843835,29.976152640218896,19.586081176261892,29.81663341554137,50.050387396369594,30.37406649018911,15.05220727318495,34.71830971601395,53.44316462187678,26.23927249033328,25.02755426983166,26.808725090489183,50.80757539390853,31.500448199890755,10.58678510636323,23.547205210061907,50.9721953941212,21.93302329324032,20.366686456378098,21.304603540074282,25.11537228205376,18.01265319191393,1.8438678228099539,36.84129799694589,54.15602231813885,36.3121781435469,26.073174142767154,-10.854016606835707,52.56508574538805,30.99740123030104,26.389377389194337,-10.359683666828499,52.31304551154058,28.203477634039103,22.908120054338944,-14.335675284749122,51.32489584632093,23.65841979755256,1.7001848580611243,-14.53396799506132,50.304710217519585,3.830753651445321,37.37845143258081,-16.959860561820598,53.89297201168313,20.22258569187955,6.74568756614908,-6.4107885345158655,49.72016089365571,9.549933610619341,2.752170899044071,-11.449029243498801,14.285744466996508,28.168048430258033,-0.7839036371117141,-4.965200939657259,44.944607385836,0,15.519113835357857,32.8728342329517,54.790542040577904,26.671714111795655,13.548017657039797,26.349349990498407,54.80808266032996,33.12800065128841,22.419214360858756,25.223318710153684,52.597824266768164,27.173760334022322,-0.2219364443656473,1.594301297087349,53.88451841900767,8.70879086298061,18.070953267777405,18.623460081635066,52.2925597797975,19.190140724094842,3.7838759259465333,5.826226935676159,53.66230651529956,9.204129012885051,10.869817940143232,16.031493683539683,10.02428279106757,13.990502943301397,5.276880539880684,-0.03405625217179555,46.34153459905165,6.07334258404382,19.202513335735944,-13.271080009690277,26.95537359580249,15.02561302393297,6.728606014674831,-6.1412044760486015,47.47607596190387,6.843192274767059,0.9891822669159187,-15.004391602950085,54.34630492018134,0.3843620002950506,8.551562248380586,-12.412775393366344,40.864311568052315,9.955808319439566,-3.5171901280801015,-8.789454707914611,48.11428029434638,3.735132747696152,1.7989341890612272,-8.875797491831214,47.82199087087937,6.377636561045273,-0.5234078343504328,-6.905440586432748,52.63782396149688,3.2947131275617103,0.030677660641132087,-5.1353349138564806,36.30412261382815,0,18.50968616185931,36.25180667533877,27.331819772394404,23.450062955531198,20.589293266113355,27.999584814340697,45.95689465176213,16.29187867235831,2.150193099461262,12.025658684958465,15.133500760891238,19.907220297299247,10.604601952189661,9.56307562345928,44.97152869028846,14.906532288691244,13.032550672546588,21.570971931726387,34.98261327905968,22.067753435337593,5.6060748863906085,9.610628678146384,14.659762993350304,9.153397338094846,7.305030288461177,7.2863068966251285,57.71663637355388,8.059578761712274,4.407608338970528,5.998332360329781,57.26381250476213,4.724066267478164,-27.17941878592022,-14.227872496786278,53.14007894203384,19.417241406114815,34.7161875042676,-11.11960232335639,46.3592907782772,5.935005117365503,11.348658415627789,-35.87773074803383,41.73590239809749,8.768122797825194,-8.317017565907264,-7.406531050800963,42.35695899621924,3.071304479397647,5.825297862800836,-24.83179596506921,51.64028768975123,4.4118329455275,11.897083631974645,-3.917532750047119,56.02789201527344,6.344456445314579,3.174566584246004,-9.038459508085893,42.08465006177692,8.0941132277644,-6.145639717282267,-5.035555054888776,50.3875375025764,3.63209124664935,22.595139198437714,23.758034360953037,44.23212823033813,20.487737115461066,6.120034653211471,11.567463960750395,50.120646476971764,6.393655152509444,3.8813342807259197,10.42165972126104,44.229534346273184,12.831677286936841,8.20406322967768,-0.0650349838499891,53.57759304759375,-0.1,-0.41463270079634207,7.713162311296049,45.55545802054555,6.786308192609962,-0.08813012025246914,3.96623408113661,47.38779314147361,6.881285758910778,-6.100934027207627,-0.11539309199997363,47.95654280084246,0,-1.7083054420886747,-2.0941467650210135,34.89828203240209,-0.9328746792797931,-1.760946399440635,-15.541047037122475,26.869635590330386,0,2.8359504428729614,-9.322240624311856,47.126317182332,1.866572309632347,1.0807028293060048,0,38.020584581771864,-0.12764922285978508,-0.6345529916453756,-5.1000000000000005,54.57259654522382,0.6336152029663781,1.885858273363238,-6.166473789039758,49.37972788343392,0,2.320185193834017,-9.690000000000001,36.7532247449221,0,3.2126820333924253,-5.1000000000000005,53.57961836521368,0,-5.896993378494129,-5.157375,36.92930939982769,-0.1,-14.748421153011662,44.203350777645944,24.835143626657906,-0.8587070390540053,-2.8532426791448615,39.54797001161988,5.422979881822896,0,7.141461661177306,42.627306272667475,0,-1.4548971275358324,-1.11664212462514,45.0283970113811,5.488024517759892,0,6.433305784154254,45.58681723255164,0,-13.519585589071927,-5.325094337460978,37.679649733917884,0,-1.2886518946912786,-3.295105898167923,38.632328849123965,0,0,-6.1000000000000005,4.544778464836017,0,0,-0.8251991162112726,-4.582939668086238,48.567416444637615,0,-1.1078947402058459,-1.7016339904569535,54.822445811986,-1.8899349029866415,-1.1115200129967409,-6.379354359208405,41.10195223299383,0,-0.8256587829532953,-0.28234449562317965,20.312563384303914,0,-1.106152584827237,-4.9600560825273305,32.38696196953475,0,-1.880742133329673,-5.102309125869443,21.232778036867778,0,-1.110710583798411,-0.21264860874215616,50.708340734728615,0,-1.10462953439699,-4.656732544167784,0,-0.8623066315208558,-0.5141723707698089,37.81823224711272,0,-2.140689484010305,-1.1116009920385093,-0.6248929435179271,47.78642675345819,0,-1.1218977347497627,-0.24948701803283035,55.17633160506195,0,-0.4238024902693881,-0.1070236793037158,32.499390314408004,0,-6.064166591531951,-0.07278936075382657,54.873007545919634,0,-1.1,-1.3749720458052925,24.923266531152407,0,-0.3138096174659314,-0.5037633385591516,7.50826141733307,0,-10.213625,-0.10689415965891386,0.8931374999999999,0,-6.944615608782927,-3.772692749790453,42.65266260640845,0,-2.042948963940539,-9.80867748013889,38.5446548999824,-0.1,-10.213625,-4.4723424795593125,14.011263963059516,-2.4325377653249536,-10.213625,-5.209216745661732,8.83685199691728,0,-1.1171181393645002,-2.6441525287102885,25.217506085820723,0,-1.1059136145941804,-5.107003501335946,18.01497412503624,0,-1.1170628718629652,-5.095322355759242,0,-0.37281571682430004,-1.105703306639614,0,0,0,-0.14706569028089467,3.761089872950998,51.16366967648413,0,-0.9794765330445054,19.276451749184172,0,0,-6.214927975886368,-0.10135000000000001,24.82152717189077,0,-0.7244930583880635,26.693838455801302,0,0,-10.213625,21.79567012103411,0,0,-5.564233870798905,5.111691005783193,0,0,-1.5643568645961292,8.487987191358373,0,0,-0.9089003712747017,1.2383350448532564,0,0,-0.2744542022296635,-2.7039706655844697,42.76263174649565,0,-1.0834391402012271,-5.1000000000000005,33.5993292440555,0,0,0,52.195648580111346,0,-4.239066353191631,0,0,0,-2.0067874153391383,-3.1633291165566977,10.986184276072642,0,-1.2248249152080692,0,0,0,-10.213625,-5.100001537150941,1.3515222226317751,0,-1.090111763079137,-5.100789545114505,0,0,-0.26838583619438944,19.280495522797292,0,-0.7064554162270998,-1.0660435765925118,-1.0251474326481584,35.5532073252457,0,-10.213625,2.018949315006166,38.17111291716057,0,0,-1.2511729955898825,0,0,-0.9946710181517832,-0.1643798468964192,11.508116756301355,0,-4.709662220813238,0,0,0,0.43363096461460526,0,0,0,-10.213625,-0.1,5.238189011584555,0,-1.1098854345480065,-4.739822272364575,11.790841760112393,0,-1.1059933061995004,-5.106846341970727,54.746577984919824,-0.10634629414999669,-1.100280456465077,-51.86239001192503,14.573309062785775,-0.6626454430302472,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.5112682374745647,19.223244932390372,41.916692168766794,3.0613193484907093,23.418469499008047,7.723091697671016,42.53990863742114,-0.8873564994191654,15.093562956123362,2.08535054934205,45.476788861542545,-7.549638286553316,19.024311864365067,24.035146427396274,43.15579008730247,0,0,17.475368249498047,40.89458524948142,-8.161046178341017,16.97522741969613,-2.9104395958074702,33.744114804475814,-2.814577864527149,5.477879967377595,-0.04363802339414624,42.66668969453932,-3.615079849342556,6.466286412780141,-4.103697250112609,41.35716662822844,0,-2.306711834163789,-25.11399692860068,-14.800643899772684,3.976935812741795,-10.882435196967231,-12.022209020314532,-9.975324101377861,-0.6228097340721335,-8.94860541480465,-15.332277197041552,-15.832519733404736,-6.665993114229723,-13.388184905355317,-14.738304648082282,-13.630577758141003,-4.464360659887236,-13.178065179885671,-5.446764933159532,-19.546836705154014,-22.176834132753662,-13.77024903861558,-8.741993635410363,-4.957303073986127,1.4290041688244288,-5.160777969353078,-15.601726994014214,-15.508772479882934,-18.44522074199716,-11.872636216568353,-9.725633516482734,-14.390706023746896,-13.133468398289809,-9.715686349256105,-8.676017434081729,38.458443512078745,-7.922117496612377,-1.2841445646380647,-6.721711447778648,-9.370776127245474,-20.63923293978765,-6.265780998925178,-8.322227313028192,-6.008123237721523,-29.585305136824765,-8.672077914007458,-14.230863298461488,-10.906649875209201,-15.253230827550645,-9.976125482453526,-7.544016901556941,17.40760152467455,-32.21048211823289,-1.8419844535010872,-9.867330348488228,-7.69910705177863,-8.456029454896646,-8.094618409818152,-2.5696971107438404,-3.4916075301083147,-11.11337529846002,-1.7546475900752023,-24.529667603396092,-4.9292897167281735,-14.476535261691524,-6.887475792517549,-9.843541060439971,-15.128483132423415,5.437490053343771,-7.441331789967818,-7.983951850669783,-18.230594589786485,-16.04490773270837,-10.260580185753195,-13.427779588059995,-13.538273531013063,-10.636487678388171,-11.17179136696225,-18.153209148663898,-13.656519839448197,-12.144632748710595,-11.107438914809718,-12.175273390589819,-16.421772609732823,-19.080532252462195,-11.506033012068228,2.1046499912286225,-14.208731493421833,-9.659864686208612,-9.169436692624997,-6.971443570297755,-5.110936941312916,-7.420526456590034,-4.371294787380093,-0.8596980047629439,-5.121261492875901,0.6614148210748182,0,16.643854048984327,35.88603464610033,-2.4455546620096595,10.452898424277322,1.597140439199808,36.662882047391875,-5.324674525077026,2.172013784034374,4.6911354097447235,4.380064369450907,-9.975316541326187,13.983768797747521,1.5304257402650612,6.85961838206146,-31.879225721788067,-1.8308498548106797,-18.679135068710124,23.66169396026053,-7.541284704006264,5.567956942094979,-0.32748611606118905,13.470759997591927,-5.077241713650701,-1.8351488363845991,-4.440202476272274,25.176797553192547,-10.973936599174966,-1.4743154646667882,5.499390279321798,14.86196422107121,-4.1000000000000005,-3.459522724986865,-23.608866480212008,-17.26637749438593,-13.45830884919162,-12.488775130020183,-55.78306341278338,-32.052392112943245,-8.496577648995405,-11.324929080336744,-2.258678439946789,-5.1000000000000005,4.684885557506177,-2.932963858885995,-10.15238354025373,-9.511959044344977,-9.286116349183617,-6.163269210057206,-12.378808129306996,-10.761674936187454,-10.261895664885802,-9.059679486600276,-59.68801452866747,-13.421648714826762,-26.366174969279626,-10.548685037281933,-0.3961912326561941,-4.542313540732761,0,0,-0.7346284513602616,-49.58420745397667,-7.791306373839193,0,-0.4998870531308055,35.08974794831646,-2.720494049726113,-0.631810024091666,-13.322212046321795,-7.68214431393084,-22.891642110632485,-4.6092624797514326,-10.080718745821889,-7.912934082411981,-14.452664856318243,-6.784668270037015,-10.101259471944479,3.554713177199716,-14.107914551950465,-6.615614497664007,-0.717788454903757,11.805950698605983,-4.106883972747948,-0.7632052209322683,-1.931114495493502,-7.650159238317601,-17.87869952774353,-8.364089444207645,-10.575894064957087,-0.7887093371546073,-4.101250545824992,-3.3716419449740136,-0.14607585929996977,-0.5108489825487763,-3.6184378694449517,0,-10.239827049312128,-18.349136783995544,-10.620304493514363,-10.384770962840776,-8.045909143940609,-9.404143646689782,-11.216855586698879,-8.327676788447409,-10.574985429225826,-9.610625484800389,-7.115700987787613,-6.752301152939752,-1.1,-5.1000000000000005,0,0,-12.436644229883196,-9.353700864358569,-17.574700183809092,-7.618186152173252,-0.7918280245097581,-5.1000000000000005,0,0,-0.9805356707332821,-9.591536268100924,-4.1000000000000005,-3.1843963404630458,-6.784656385172674,-9.978194444893331,-7.791244190427037,-8.034852473272084,-7.9693591705931315,43.16235446228531,0,0,-1.0826553407109678,32.834545942744285,-3.457688077297701,-0.10687386268206836,-0.29213181758586737,27.641585840076726,0,0,-10.213625,8.353858663473314,0,0,-1.0793802027592607,24.850788318146957,0,-0.6979798888384469,-5.98048080944265,10.75171919126245,0,0,-5.936244601102383,6.482818219636268,0,0,-1.010692422924649,4.588393032271469,0,0,-9.707972754234744,-3.3013234076265747,-0.777786881834376,-4.498336600765586,-10.213625,-4.510694200500793,-0.9629051161557125,-1.5844968237854968,-10.2193625,-5.1000000000000005,-3.1051868927007087,-3.795087121897837,-1.1,-4.9828593531510865,-0.3002310977706998,-1.0472521051171595,-4.513043933699172,-5.1000000000000005,-4.106863746863356,-1.5504558508954442,-6.116069306251923,0,0,0,-0.9185285999960121,-5.106868478336287,0,0,0,0,0,0,-1.1157936359259304,23.335150992773524,0,0,-0.28706793618800774,-0.6552752052593671,0,0,-0.800999890893738,9.166229887845738,0,0,-0.5895524533940625,0,0,0,-0.9998142749061355,3.901164379321847,-4.1000000000000005,-0.20258225093731952,-1.1110474854760601,0,0,0,13.689894118632385,0,0,0,0,0,0,0,-7.0848306842057,-5.100147485387757,-4.1000000000000005,-5.029213677609772,-1.1058056867370694,-5.101250621219048,-0.2793258673631984,-1.4141198950488365,-10.213625,-2.180060084904503,0,0,-0.9666263493561227,0,0,0,0,0,0,0,-0.35600398989924903,-50.35012094412574,0,0,0,0,0,0,0,0,0,0,-1.0196688966623324,36.820141054508284,-4.106863917080948,-0.5773330483037628,-1.1059625000000002,15.40053100778496,-4.101352646553855,-0.7028605953101712,-0.5157125957125729,18.14405987111197,0,0,0,0,0,0,0.6753303309197634,13.207264699412093,0,0,-1.1098457492839544,1.0918176051015007,0,0,3.7137778157207055,0,0,0,-6.1000000000000005,0.07360285536065947,0,0,-6.009462074768041,-4.953925739537016,-3.897606840086844,-2.43911748959001,-1.1110263301416594,-5.1000000000000005,-0.8924277632858314,0,0,0,0,-0.111539546875,0,0,0,0,2.1680484487950964,0,0,0,-6.105719306251923,0,0,0,0,0,0,0,0,0,0,0,-5.634578005432552,11.781926988656068,-4.1000000000000005,-0.2955713092629829,-6.110879526081014,-0.13903541488584317,0.30535524028984257,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,-0.11586397969021373,0,0,-10.213625,-0.1,-4.1012430057129245,0,-0.8265415743851598,0,0,0,-0.9289381463660469,-5.1000000000000005,-3.9952691889867107,-1.8041237464875268,0,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,-1.1022736837583884,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,15.964278258147854,34.883158697475665,18.76588283492374,21.931026653072383,6.759830681866168,22.730965794578083,45.05697477027252,7.9007207294382304,11.254684445213089,17.647117797141,31.46834814286564,24.27198987805176,7.413402393955135,28.58491415753081,17.312307554477385,16.4907700514961,16.530965834640245,16.364828529823914,19.545985938652844,15.157070418154111,-0.8408219718211813,14.317388060933029,43.47482086863534,14.63595818220298,4.725543337152285,-0.1,39.27374835761839,3.075248970232172,1.5311778790056294,38.520127540081795,3.433482818143235,5.850932528571693,19.658772133443104,-10.116102594957313,43.58212194827859,12.297563730196073,6.534386100558605,-9.248912063953439,50.09799157960008,10.932899125384917,12.53770539410485,-8.942010704482318,41.24787316347998,7.05635753852739,-1.0224680204813041,-7.571951991188031,45.26974515837722,28.672068192926602,34.55078810175321,-25.360872721644192,41.87630732355837,7.426863766478608,-2.9349035912126142,-8.600692346834544,46.01717179943403,2.7899351197373896,2.166215227899917,-5.1000000000000005,22.567074289666756,1.5440431081932975,-1.500264805140905,-8.776468358443593,27.603111580888665,3.0413670926505167,7.507899433546108,19.724069763360824,0.8637396599715776,1.6310692344298576,-3.245569641285762,0.8779932251838442,7.596938270162234,-0.5209492472286428,-10.229163315497688,-0.31180652550297117,1.5155099468599218,-0.9536031967095671,-3.567033301461817,-0.5083122765144166,0.77526506566692,-3.7561631124690065,-0.35942349461509027,7.750062094114218,2.485482173921093,1.2020201277854192,0.9846243453582983,0.39674666290813754,3.742208762678433,-2.8400675495841026,16.882152458184677,3.2707789976684065,1.528557774838455,-0.2603287081942183,-13.949054673175567,-6.152247508230936,-2.028263023622243,-2.685371728639434,-30.23037065985639,-13.99485492647753,4.256371019622215,-6.942504279429674,-0.47519665198836525,-9.725974534838992,5.620966536049545,0.10810123049520248,-3.2902604852342217,-17.128496126342657,5.236297956603352,-1.7131472883833536,-1.644929221842185,-50.292580372666855,2.157463386823223,-0.9178033008334898,2.9262239274826936,-13.144676023909975,5.082906563847261,-0.5611784394403255,-2.8477817606247258,-9.718696813281856,-0.10988017411095458,-2.600069165143395,-0.18528263680476043,-5.105485606793472,5.8361928293157534,-0.2854168659578011,-0.39716569583524824,-5.1057205617986,1.04043894339682,0,14.501251377559448,21.26386254135072,41.41264785892072,9.881948903625705,9.670641820652401,7.373589492401151,42.117738627432246,1.9201792709199823,-4.499965975012586,4.803232818812353,8.389585468552399,3.044243733352361,3.5775795492840627,-0.2968376821010715,9.512778294871545,0.12241919275545225,-42.96080258214315,4.354292437185089,6.400364563501462,4.892648394048486,-47.726787936048666,1.3596925333585403,5.08853800287926,-0.3921041754835165,20.34769484089015,8.240553729598881,2.006145524647295,5.540438361798299,12.929620133677908,7.000820728408365,2.8221412221868745,8.337664164787347,12.974277953314505,-29.652289824558764,36.315692828244465,6.110973064534097,-0.07888456313434809,-5.107005386787437,36.6376891245297,0.5439714750607989,0.01830676918523252,-20.714143573508466,11.110523202408823,1.7503581638689818,21.006738856960723,-25.371602285048194,1.0866059975761504,18.444045593969477,-1.398782258895361,-5.1000000000000005,9.02215428772999,1.2489882676154043,-1.741654261067258,-12.436444959192832,10.743526096302373,-0.9373635866786579,0,-4.446625808099222,8.93382722579914,0,-2.377926138075247,0,2.2472756341247564,-1.0802002424742354,3.4669958287262017,33.1399494491699,0.6474100600873818,0.4114093564367045,0.42152275752336266,4.196912440581912,0.5570517959197105,-0.284589981658818,7.716905820228214,0.05340215726441591,2.618994525586637,1.6070800347562582,6.366930656351147,0.6786052266982674,0.5525077377351282,0.465187260048734,2.11910164839302,-1.9337064473408034,4.649857224714743,0.93339211957994,-6.27366361013062,-2.1709778209908066,-0.06880762343740729,-1.1896512139918478,2.801081442412992,-0.06010618565869626,0.6395288344329846,1.7592809566725658,-3.7172459907747957,-0.020707105384804927,0.9252649660936975,0,-6.071735336713096,-11.274336309881235,8.137381727909352,-4.641225785612094,-0.06607968882283331,-5.1000000000000005,5.723221498785956,0,-1.999356099463192,-5.101188147835073,3.8438538302271614,-0.10815742267364557,-1.7641479730785,-9.53379731169648,2.5163937008662733,-0.10808957774155864,22.134299048435892,-10.401331203549956,11.14240010493252,-0.15692959870014198,0,0,0,0,0,0,0,0,-8.461577656047947,-5.158532623281541,-1.576906409575324,-3.451629275794337,-6.111570287957925,6.155908374542895,45.61251397350979,-0.9746253065931714,-6.0949997984727595,44.81123826682265,0,-0.5695639612381156,-1.1059841675920792,33.514085827688874,3.775461026093625,0,0,8.169099348558788,0,0,-4.447100016823022,30.547836620029635,0,0,-0.9591621876218727,10.714045532427235,0,0,-1.2175270252130765,0,0,0,-0.5244485689542298,0,0,0,-1.1009875873560564,-2.8676549003730862,42.11336460917544,0,-6.101362434480544,-5.1000000000000005,50.57928577928898,0,-1.105734816382412,-5.1000000000000005,25.621202518324584,0,-10.712264771292215,-5.1000000000000005,8.257641278469272,0,-6.094394619247985,-3.741385793117084,6.246135168115356,0,-0.16313615158928949,-5.101250438062819,0,0,-0.40871317941959084,0,0,0,-1.1058346029601187,0,0,0,-2.1167165124704304,38.01875609828585,1.7032237848396365,-0.5039165375163078,-1.114333054104382,-0.10768755940991495,6.9149248155942145,-1.046789765535742,-6.1000000000000005,6.328080489009573,-3.1605483276062376,-1.0570879890918423,-1.0140121660305896,-1.095873327861303,0.8554411218624729,0,-1.5644846611919725,-1.078123430125039,1.8344834492851438,-0.584992230729088,-1.1264028603097476,-0.9777841383775728,-0.13884988571343088,-1.2998274240675536,-1.0250796471675165,-0.110540567325342,-0.13714085918429858,0,-1.0950994890317947,-0.1635164482865848,0,0,-0.8146684026311889,-4.76551343578553,-11.47124874000314,-1.8200612561628018,-1.1103801797110477,0,2.220293111588024,0,-6.0353584014583594,0,0,0,0,0,0,0,-10.167280628941732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.717773746135721,26.723665977737394,0,0,-3.795605255859849,12.386526192170802,0,0,-6.219600914068827,7.245818239476373,0.16813006713199619,0,-6.1000000000000005,-0.1,0.7996165062256702,0,-7.134401352832015,14.320929163422706,0,-1.1124673760153394,8.640945364803986,0,0,0,-5.966718596514019,0.38934480292891105,0,-0.740055351722318,0,0,0,0,-6.112452457505427,-4.598729531753807,7.521245080401439,0,-10.213625,-4.681391134449623,0,0,-0.36909247916127835,-4.927545028860835,0,0,-10.213625,-5.105762655373671,0,0,-0.7956305144771667,-29.53285002570812,0,0,-15.256885670476748,0,0,0,-10.213625,-5.034105185230582,0,0,0,0,0,0,-6.106864436351682,33.79787570709885,0,0,-10.213625,-0.6847695131189878,0,0,-6.1004877872188805,12.212729927897042,0,0,-5.6938304863026605,0,0,0,-1.1058298551429657,-0.1,0,0,0.3704259386415297,0,0,0,0,0,0,0,-5.999145981170857,0,0,0,-1.177381332163549,-5.1000000000000005,0.9595049719316247,0,-1.207150724066802,0,0,0,-6.116710699513854,-5.1000000000000005,0.9810405149489743,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.161422854127485,40.643207292118134,-9.726128935905773,23.053177526459077,-2.4959464839921335,44.85287485279509,-4.534375475348158,5.979571228122392,0.6741118775512323,43.60024373752793,-4.1000000000000005,-1.2979997707177173,-4.331264272428726,43.580927241116036,0,0.9386313719253421,6.943344151226718,34.65477378070922,0,4.802053861175363,3.5808640537957714,14.831114388447208,-12.126413203172515,5.533312633355466,-5.157375,22.679487355982268,0,0,-0.5024431482613134,30.48580064226203,0,0,-11.742166095185613,-18.22140640650047,-13.217801953446514,-11.501515055905292,-11.949684857716186,-10.881622056472956,-12.494865348250938,-10.468147101280575,-11.11682881998999,-11.811081149719154,-5.6755968531499645,-9.37883004260305,-6.5424059736769005,-8.99114848542128,-8.358776935155133,-5.89484938718194,-0.9471820493643719,-8.458678005207076,-6.697707002726527,-5.934492276522033,-17.07251009487898,-11.965902398015263,-13.79914645647689,-12.025480486652668,-4.598215987433284,-9.134952106969966,-7.790000000000001,-7.497830188307017,-0.32991867411415116,-4.95529000987479,0,0,1.7304096743234707,33.48707840766402,-4.087966736115073,0.532964047594669,-13.075020284706707,-10.369625092438646,-25.01980498452613,-9.583509153991319,-47.91948684930002,4.413983256592314,-28.182491842344973,-3.7392671521193033,-0.8090064664160055,-1.9044538241296376,-41.02621802532907,-2.9153537605477107,10.1329700209524,14.126141257997965,-41.05237077790703,-0.14966573568762526,-3.2172502437038997,-2.6817008333370644,-4.144860200293631,-2.341981308690891,-5.4144567718077035,0.04527869708365517,-4.107744524823463,-0.4067510823923312,-5.157375,-0.49057899198483956,-4.106982905214198,-0.2852474885103185,-12.840402090101081,-13.003478262401792,-16.97742770802133,-9.040459117722714,-12.411781835079957,-9.626447048545671,-11.616601448217468,-9.1846873298985,-4.262440700436948,-5.110741149664265,-7.798100220879316,-5.568750035901273,-1.9583135272131285,-9.695643092600678,-4.101244919292292,-1.8153519733712657,-9.280177830530743,-51.14373952499202,-11.156363352847261,-9.900389395952008,-10.680550757473169,-51.154767984677434,-7.796249958444854,-5.862641622100916,-0.7345528301270181,-5.114644306953678,0,0,-5.157375,-5.118366984687945,-4.1014185292708945,0,1.5457491154840124,34.167591645141414,-7.37520969179301,0.37532573128169844,-0.017382633656636143,36.565510981285456,0,0,0.4284602703402376,8.49221857975764,-10.74883122691135,0.7379700003444802,-5.964712101374359,-2.3183496924483173,-11.48144136628632,4.565678597421028,1.8307679488546826,8.311010362021841,0,0.5438036952815746,-6.1012388921875,5.552995918276196,0,0,-3.063586559818594,7.575012880364869,-4.10559503271862,-0.20405754405369309,10.440713763949505,0,-4.101249758342535,0,-7.884882617420037,-13.450399258993844,-9.050591772288378,-6.864824525021623,-7.545529712264274,-9.690324444139375,-6.337988172086607,-4.070567839597638,-5.885797680829711,-4.407380693135398,-3.6010701734436084,-0.10080597732086322,-6.8715639396214385,-51.01765150865617,-11.196648940421477,-8.109727689053726,-5.476995551484614,-4.648643239280398,-4.031950250709763,-2.9348644465800553,-0.09598763068622668,0,0,-0.1,-0.9797491898914764,-5.1000000000000005,-4.10620315214655,-0.2734952782879251,-1.1891290088718858,-5.1000000000000005,-7.792301941990695,-0.587755569552812,1.2615929660103693,32.28189884024422,0,-0.628935908307389,-8.052443449953085,-4.214820391882874,-14.214377780136127,-4.2120026833396125,-50.72708198139548,-5.734229026629919,-11.151274129734265,-4.878753011408791,-5.8612928356939555,-0.0649072836410925,-7.797620407811393,-0.10064626961664616,-1.013337617128979,-1.147169341732269,-4.0237270468064965,-1.1952483060239842,-0.5759307342351468,-0.008222716012978871,0,0,-2.566707118403936,-3.522501534269727,-4.1000000000000005,-3.3915810026960798,-0.6061326842857502,0.046966700450090396,0,0,-0.5166476040239633,-5.102871736565014,-4.047114307572965,0,-5.863019716193705,-5.1000000000000005,-4.117227828125,0,-5.8317706832346525,-5.10058005739361,0,0,-5.554124174816166,0,0,0,-5.371640062955965,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.867705892524178,42.24488174634719,0,0,-10.213625,7.875993032576903,0,0,-0.6437989954536137,9.599372281740843,-3.753275485076796,-0.11151397090427465,-0.2438409489367208,0,0,0,-0.10224009883463037,6.331176601220989,0,0,-6.1059672879039,-0.1,-37.98127604639414,0,-4.370116428719567,0,0,0,0,0,0,0,-4.66660231377398,-3.08305123236439,-7.772218578806716,-1.0834929073183426,-1.1107237801890004,-5.106868261019911,-2.7315748402947637,0,-0.9344673666776004,-5.085169730620642,-0.3470070580260938,-0.4948516221519308,-1.1084194357982866,0,0,0,0,0,0,0,0,0,0,0,-0.6035595987814957,0,0,0,0,0,0,0,-5.688150098575248,9.76840863598196,0,0,-0.8436985866148339,-0.578406678956095,-4.100724356336488,-0.8866325676278948,-1.1103832662761026,-0.2838578189327648,-4.20903091696393,-0.20257628465684652,-0.9933993442102212,-1.5560631013939927,-4.1000000000000005,-0.664817190514346,0.10245898553835478,0,0,0,0,0,0,0,0.05393678140084717,0,0,0,0,0,0,0,-1.1,-5.064283892922617,-4.1000000000000005,-1.0594365686413396,-1.0333480329301146,-5.211748035863008,0,0,0,0,0,0,1.1211691922089404,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.525829143792929,16.83213587345046,0,0,-6.209525445093298,-0.10573761992704821,-2.426134357847907,-0.4545723220219552,1.1465975463258133,0,0,0,0,0,0,0,-2.2936396284870955,0,0,0,-10.213625,-0.025588954527489594,0,0,11.675762715362856,0,0,0,0,0,0,0,-0.7043804088309632,-5.1000000000000005,-3.8183083063500245,-0.20156147090290516,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.8653129546255087,0,0,0,0,0,0,0,0,0,-10.213625,-0.1,0,0,0.12698785886378197,0,0,0,0.9452435518293314,0,0,0,-10.213625,-0.1,0,0,0,0,0,0,0.5737497007860264,0,0,0,-0.6710200659140187,-0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29.47830208613173,38.34278908427382,55.280979907640614,-23.400972891507408,4.6985486970868635,26.08597726069494,15.006744150146947,-6.0723465674878225,2.5882745098730653,20.014617866776604,52.786072612335765,-20.503675052265542,0.9589608428081524,35.47885575760926,9.831522823942857,-7.094848097734683,9.630301929967317,35.732578146468185,23.677722725244145,-13.85825651277516,-5.197725012701898,44.2828172362715,16.898481933832855,0,-4.435740421281737,-0.002292845861900639,43.978850413153445,-5.6709079369170174,1.1684519703515537,38.40564625715598,0,0,17.27077752517201,-7.226348454566566,54.603531274967935,-33.909049499413385,2.0667304429076934,-5.041075140544618,46.03264247908241,-11.58857311748531,3.4652535107911273,-5.3064030899718535,46.91705241995572,-11.466741776163811,-0.06381336064753214,-4.300885884532863,51.3543182320947,-5.7125562497938205,3.395838840224492,-4.1617054899578285,50.95260505491421,-11.30707426906982,0.32532361101611107,-6.996159837897888,46.220908097892924,-9.033464586069705,-0.5929957626371088,-5.1000000000000005,48.21103130366419,0,-0.5671068900053102,-5.106977784518605,23.979328760821225,0,17.395303909601658,37.68736805263913,18.54479473473744,-6.628927568096854,4.265150240084468,11.054366603219368,53.197651264765454,-14.051484828373374,2.9594752978474403,35.78655156768144,50.145669006403736,-14.541785944747996,-2.8924199792009815,1.0773796977946137,50.708994053739694,-9.639042951794321,-0.1565720495122549,14.512944974991823,35.42161624444017,-1.9452501859371454,4.367687120894255,-1.0137622287974,48.66172926679886,-16.57118132870049,2.4085110791995565,10.122469686631273,51.079066153947295,-4.7563136197372975,-5.543508410421796,-0.04945568756594451,35.42379865194739,0,-5.157375,-6.5422708419501525,48.79838407928714,0,1.181754972155424,-8.428466108620738,48.88189302806778,0,-6.821124553311291,0,49.042972469028356,0,-0.32127732054507263,-5.101249169057556,35.522827047204686,0,-0.688090221435209,-3.5102312815946597,44.67521076562426,0,0.8204801765323948,-5.1000000000000005,55.8235130328243,0,1.0981309306016032,0,17.52445146500333,0,1.0778270737864388,0,5.51795055856816,0,16.642348695672794,19.880542398543678,53.45297602667787,-38.20052707217553,-3.5505162100144547,11.490414850704955,23.676461330324962,-4.50644029633041,-0.24517696608278605,15.004726708441467,43.61771772565203,-33.17409894197796,-1.1338004520445035,34.70393849482951,0,-4.62025129890483,11.650476508727271,0,11.926962250472354,-7.764254482029084,1.6627032938564952,3.461747447417382,36.730798935461074,0,-1.9351020105019952,2.5681960023016117,45.407396513412486,-7.695340040344105,-0.1796273272687131,-0.1,24.936167263264622,0,5.778619156931883,-5.082458376678496,55.358034785157756,-15.940865875892982,-1.0280641955912684,-10.174657209035892,54.45619934949548,-5.105971069997019,-5.214021579585433,-4.554467017142389,52.40689963632781,-8.295088385230661,1.8087943399760664,0,27.574110141439867,0,-1.1,-48.727765832032496,21.847028993101254,0,-0.3359695068007967,-5.106987267851206,27.551095083046313,0,4.665687225951613,0,14.931127952556064,-3.7448632334565275,-1.9936685807887549,-5.1000000000000005,19.78922175609961,-5.1000000000000005,1.05492114936705,20.68367998252956,12.251388443811713,-21.419464413737003,-5.159332309310502,-0.05284886183005014,39.67640381598316,-5.1012375,1.9437679136328436,2.1897029996966637,49.29077924985196,-3.8792699374023574,-0.12364562591479483,3.176808994599056,42.009531703349985,-4.981911023579958,1.6320415920821485,10.71854076497295,0,-5.1000000000000005,-2.297792242673694,-0.8948740716354763,46.441980144642095,0,-2.993864595606694,0,46.27702687128972,-9.62535482168337,-0.7217532267744398,-0.12161774674123649,6.048771989812105,0,-2.6128533213975316,0,39.91332032921773,-9.661693355101784,1.4115827036884614,-9.693214878182754,25.626554855777876,0,-0.6145161968757958,-9.07118789253019,31.448976493853557,0,-1.0226165575058102,-5.1000000000000005,6.072218713008166,0,3.0775312735751363,-6.844442484247319,8.751047831218532,-9.69025953704544,-3.4021945940565446,-5.102168843319504,0,-4.97061944423139,9.907409380663323,0,0,0,-0.8276348381359991,-5.158306089192903,9.178442115475752,0,-0.48239939030647216,40.12354372563154,5.845979257511652,-5.87297426111416,-10.213625,44.07027163996443,0,-5.702528149017365,-7.53789756697857,42.234956017987436,0,0,-1.0344256130987641,0,0,0,-1.1,3.8197168432627118,26.76183677693693,0,-3.0940632670190595,4.348936367015499,0,0,-2.8095805123882025,7.949134950516395,0,0,-0.07904671122269456,0,0,0,-2.0077003224677825,-2.096214181646112,29.731472529054003,0,-10.213625,-2.306460797587896,17.656500837371887,0,-1.1058882254119917,-5.1000000000000005,4.703558153569605,0,-5.302409993928736,-4.63793332002244,0,0,-1.105477073160644,-5.1000000000000005,14.655769279949395,0,0,0,0,-5.26754024093032,-1.1002852495382889,-3.6210468032972045,0,0,0,0,0,0,-1.117130151029025,0,27.29303734976917,0,0,0,20.338411913053186,0,-9.768108525125104,3.1357955615961792,18.890851417287443,0,-1.1108008154113356,0,0,0,-10.213625,5.208349163399664,0,0,-1.1,-0.16821078115618518,12.34293841933344,0,-1.1080143519663825,0,0,0,-10.213625,-0.1,2.5914489285450157,0,-6.1000000000000005,-4.835222841836057,23.31521976270562,0,-10.213625,-5.648572128955284,14.07938263674869,0,0,0,0,0,0,0,4.807059479523282,0,0,0,0,0,-1.1156911691026383,-5.101310374808102,0,0,0,0,0,0,0,0,0,0,-1.8681103322943806,41.57325739382993,0,0,-8.892319279165967,3.833577695427601,0,0,-6.168934621110945,20.82121520760282,0.8376037042755229,0,0,0,0,0,-1.7102244236956594,1.7205381597604725,0,0,-10.213625,7.321608344875268,0,0,2.7225759369421128,0,0,0,0,0,0,0,-10.213625,-5.106869068774426,4.364512175915166,0,-10.213625,-5.106790913841242,5.63927364694889,0,-1.112258101655355,-4.715022237098437,0,0,-1.6560863912686923,0,0,0,0,0,0,0,-1.1054721702629262,-51.057453538000075,5.143139247685373,0,0,0,0,0,0,0,0,0,-6.161996453848726,0,0,0,0,0,0,0,-1.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.23446223262988522,-0.1392485808082207,1.3049093313075417,0,0,0,0,0,-1.478749637453509,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.5922999037788925,42.16640279770817,-0.711785757020027,-8.790743393558122,-7.491519849854257,43.89288235482424,0.548704499620328,-12.699257647093887,-0.781436594609419,44.1844166999711,-0.4655879637087059,-5.128319948337853,-1.1,46.2556089607255,0,0,5.199680061601022,43.38847940275387,0,0,-1.027795693667208,41.20501389108116,0,0,-0.2903302724776543,34.75775893894439,0,0,0,0,0,0,-7.431025214217929,-8.357808942343114,1.682940336077472,-9.795695694957947,-5.631925005583357,-9.39319547814462,0.8446884114657938,-9.810337738028666,-5.5900391005148835,-7.408936613373431,-8.007818591711283,-9.873683100660939,-10.181755393854496,-13.835265890623528,-8.50635437362203,-9.778300427951145,-11.860846397078166,-32.14996275139275,-22.75388835009459,-17.657032032629186,-5.157375,-9.696150029393722,0.362281544978864,-5.101190671850547,-6.431252809901553,-7.787767690221849,-3.7789427945357015,-5.111754147832567,-5.157375,-5.1000000000000005,-7.791255671052735,-5.257578108751889,-1.0231585802808245,37.35676405592966,-3.845455236796045,-46.446030705164794,-4.941726787971311,-4.487583456975446,-5.2537816580971155,-5.10695235545942,-0.7131264445787191,-0.1835935261588626,-0.5211180982297657,0,-3.7399516107133945,-7.609717508312693,-1.0948398191487385,-9.720660009122984,-0.7450939306486213,2.2772640989588897,-12.360021725115768,-4.99511429667208,-5.157375,-3.1627609763896634,-14.962158265170569,-9.702021419853086,-1.0475683892903571,2.0337574232984403,-4.1010346271502405,-5.140033473625275,-6.1059749786362865,-0.36290447954303173,-4.112606937356396,-5.13224864865418,-13.067278028772698,-11.930893260869663,-12.369268610073885,-51.129557772547564,-5.887655677188333,-10.04307738872955,-1.7236284787861993,-13.901101350679415,-7.79907345273888,-8.160685780824924,-6.074488040878126,-9.692536819518057,-6.1000000000000005,0,0,0,-0.2141430120790666,-2.070466116633338,0,0,-5.392691178920499,-5.1000000000000005,-7.661178385134732,-14.009701936189519,-0.7999625779627394,-4.502467184554905,0,0,0,0,0,0,-0.8968801001629629,33.20936008863543,-4.1000000000000005,-4.6213375199945,-0.05939164391698615,33.33859081061433,0,0,6.317022765105008,2.700782747132388,-3.0326497094652973,-13.445049825931523,0,0.5730947152219987,0,0,-10.469701704980233,6.86840512962913,-3.434920346384332,-4.575707031397593,-0.7103891456766523,5.1585548672617225,-41.12454398998174,-4.8501951916354535,-6.1068221539862915,1.256402234774613,0,0,0,0,0,0,-11.19911267720337,-11.79055263433812,-38.056143463646436,-13.759347222640713,-5.703116517981898,-9.691124811808798,-8.02057778778952,-14.123565498890072,-0.7326478817384964,-5.1000000000000005,-20.57270148051096,-5.10701531279539,-0.5369872165745687,-5.101609726647264,-0.8796833056512491,0,-0.5921425417660519,-5.1000000000000005,-3.847600543878528,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2166503145969656,18.619443568448183,-16.884843462256924,-5.031186865194091,-6.561905370554257,-7.175554873495172,-7.288218387686605,-9.69870906588788,-1.12824444596676,-0.5518844294734476,-4.1000000000000005,-5.1000000000000005,-2.737014780666103,-2.8444213855145306,-3.2432381706717437,-5.11430862118206,8.3937313049867,0,0,0,-5.157375,-5.133277370380912,-7.791249296182742,-51.045266045446525,0,0,0,0,-0.45882177245358174,-0.48295287636039685,0,0,-7.965909996600682,-8.338343177398315,-10.63108871907403,-13.896434372080968,-9.166351193783857,-9.799102312986182,-26.20220335329006,-9.691188808737543,-1.8873109730325335,-5.10094679104857,-2.4214342446212336,-5.106933216239976,0,0,0,0,0,0,0,0,-1.0280653747269863,-5.101227546896414,0,0,0,0,0,0,0,0,0,0,-1.1105401000566406,16.510541531477372,-4.1000000000000005,0,-1.1103806981687916,4.280812399673737,0,0,-10.213625,9.486606818951394,0,0,0,0,0,0,1.4577037245128464,0,0,0,0,0,0,0,-10.213625,0.8443032013857098,0,0,-6.1000000000000005,0,0,0,-1.1113113089990454,-5.1000000000000005,5.009775795701944,0,-1.0923620574668194,-5.101431340715903,-1.0833593034721472,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1057988318467111,0,0,0,-0.7814307927755486,-5.106983660805042,0,0,-10.213625,7.008790672587578,0,0,0,0,0,0,-0.8978109363023907,0,0,0,0,0,0,0,0.17455774686728187,0,0,0,-1.1052818514226497,0,0,0,-10.213625,-0.2630466372814767,0,0,0,0,0,0,-6.10075408368165,-5.1000000000000005,0,0,-1.1106904024771234,-5.1000000000000005,0.5421999795696714,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1115023533656743,6.5969062221074015,-1.024146744524968,0,-1.5632080635306382,3.3586504712381924,0,0,-10.213625,0.2845496798418611,0,0,0,0,0,0,19.931003204802437,0,0,0,0.4465659831579123,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-2.5380987910057593,0,0,0,0,0,0,-9.177205067558832,-5.1000000000000005,-0.5364886240010421,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1198178770518488,0,0,0,0,0,0,0,1.0482535720283905,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1056435334391943,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14.361598283991238,23.762134079373897,45.15335634709657,-40.88076501629529,-2.1339710924633493,-0.10579152889777324,45.609088866351186,0,4.91232192551157,43.188836465540255,0,0,22.473360509714237,41.325904696596375,4.741813896292155,0,0.9137309965642721,17.113192103174153,10.141792433328824,-9.222443259235234,-2.8832648997745256,43.33352245808326,4.889207304322259,0,6.013412531218146,12.327602164529566,5.775422864908708,-6.588821345016386,-3.302611952158021,12.34815130485924,0,0,5.822624587651653,-5.776445906726848,44.5828025556764,-5.1000000000000005,-0.781169381445192,-6.030730139623741,46.859526038170664,-13.129731113385235,-1.0925731633823117,-7.281651790882506,46.54334509971102,-5.1000000000000005,-1.0277769965803332,-5.082656651731752,42.62021915938514,0,-0.8338459369310188,-5.1000000000000005,45.467050785231606,0,-3.3275337245674352,-5.1000000000000005,27.96188975138333,-5.087822823275115,-0.01850644976963736,-5.1000000000000005,45.687212768045136,0,-1.1356503209337567,-5.1000000000000005,20.609018039981486,0,0.43404103157133733,37.01113661750618,0.25756642202847546,-9.677612924867901,-3.808245415176229,-3.1313675812735866,-1.5437389489819129,-19.855102127487847,15.820554027859066,0.8665947449900212,2.3038147565039524,-46.307066172669465,-61.031224979486296,-0.49445336173005683,-1.1239033772287157,-4.783678696426776,-1.1878451224942976,16.464168022480283,0,0,-2.0511465324094544,-0.181309664231063,4.729556880387491,-9.200364785527672,-6.1000000000000005,6.522275385223769,-0.9878360986133548,-4.937273749029439,1.9992929100818313,-1.5565136761447833,6.535411682551124,-20.3402555506311,-2.0852671757989056,-4.056742498017664,6.577735049527396,-5.101609647406579,-7.527038497306514,-20.912594227111136,-2.4169288883093896,-9.691115191008667,-1.521256518712192,-11.80962368517013,-0.7096880854384391,-51.58612906640745,-0.195350757361334,-5.216193731606968,1.0658901337612299,0,-0.16506043350539962,-4.00239967458516,1.8758006530948974,0,-3.3956791472949646,-5.1000000000000005,-0.24640771270368347,0,-5.157375,-3.136949629181602,0.41154533833551094,0,0,0,0,0,7.691751957898164,4.049376089939176,38.202233119422004,-9.320600887258887,-3.7722075767722836,37.513241581436,0,0,-14.126388466693495,6.332743067894556,0.8985583411119427,-16.570401021857283,-3.040012664555801,8.839992479374697,0,-8.99215345079299,-2.4799743843202835,2.539385118765232,6.377012912266837,-5.111578728486317,2.960765924715271,14.17138110824881,0,-5.100547791438693,2.285406189204527,15.062110588930727,0,0,20.064588783553656,5.076897109193614,0,-4.974597868461554,0.1599216930265177,-3.1193246902940004,31.390115716625314,-5.1000000000000005,0.04236595425777989,-5.1000000000000005,30.312020823623193,0,-2.8392344965448775,0,3.852134472530868,-5.1048555289363,0,0,0,0,-5.3755136014403035,-5.07617812761905,4.49778521899676,0,-1.0193665223379633,0,5.089763704881548,0,-0.32674814887269044,-5.100536820807496,-1.3012922448234194,-9.848545573972572,0,0,0,0,-40.30862275327723,35.330042003462665,-0.7417039278742001,-4.977868249113105,-1.8691613899795523,-0.573566929807233,5.1135482224802935,-9.700353758121462,-10.575730035058005,-0.029410558773087292,3.0875703630980706,-13.839913694142254,-6.896531747215868,-0.09199543125017706,1.9916430394070974,-5.095499293990069,-3.9259983712438054,7.140841004511809,0,0,15.568792839532602,1.1516983953750564,1.0450334518398117,-5.099526569113348,-0.4682956147877471,-0.1,4.609191099621033,0,0,0,0,0,11.070706946895047,-5.1000000000000005,-0.9494915825210025,-4.968362172829722,-0.5787803227932675,0,0.4333642632259337,0,-2.3351274233884536,-9.653005883556204,3.5844653657444523,0,-2.556296056914847,-5.1000000000000005,1.0920258437071693,-5.1000000000000005,2.5443721885025194,0,0,-5.1000000000000005,0,0,0,0,10.087395644642326,0,1.3421089562696555,0,-6.034785553216487,-9.497044601970053,4.634812131274892,0,-5.243840622213755,38.10380473062001,0,0,-5.99296928458196,4.246325625096247,0,0,-1.625172943099636,4.7465933606882365,0,0,-10.213625,7.031328716480262,0,0,9.23548091717883,0,0,0,0,0,0,0,-10.213625,1.2664774101741316,0,0,0,0,0,0,-11.740356531111685,-5.096627815950933,12.17347813337576,0,-1.1115150361602386,-1.3277756597895483,0,0,-1.1938691300469835,0,0,0,0,0,0,0,0,0,0,0,-0.9781520698110251,0,0,0,-10.213625,-4.831596895749902,0,0,0,0,0,0,4.3220281771603295,0,0,0,0,0,0,0,-0.20472545927390604,-0.43953344317075643,0,0,0,0,0,0,-1.042260602977099,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.1000000000000005,-1.627606736425583,-5.103444974223342,-0.7258227049267326,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,11.660356100137644,0,0,-0.23073726186682839,5.557106128162436,0,0,4.649603680091289,0,0,0,0,0,0,0,6.896829048288332,0,1.0801713767758125,0,-1.4901154614894392,2.2134332658709446,0,0,2.3496574023952372,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1,0,0,0,-0.6387250038541982,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.157375,41.940138710957555,-3.9985801897267983,-5.10686319474632,-1.0275040754454972,30.316877638800108,0,-5.112116347028238,-5.157375,39.199185458827216,0,0,-3.360902114977818,3.9027844759761146,0,0,-2.0085548654641006,34.0666666252193,-4.1000000000000005,0,-0.026680748402354904,13.631295935073144,0,0,-0.5928224934928505,3.621826221523694,-4.1000000000000005,-5.121746999995129,-0.058784682979928254,-0.07733005416670274,-3.3384545365949663,0,-11.027358841419554,-12.48722013458589,-26.959763734697432,-17.60281442956886,-10.82767836756074,-9.49276594189428,-10.869410393955793,-14.097305236405298,-6.1766281234251155,-44.741813223970496,-7.067416043333111,-5.1000000000000005,-0.9532085964391614,-5.101249735669214,-2.971847779767547,0,-0.8985010224084701,-4.863677452052896,-0.2840630276235658,0,-8.446948361657503,-5.101252509149999,-3.9635377179896087,-5.107585474964809,-1.0279387389896781,-5.1000000000000005,-3.0619945739753813,0,-9.011163286215956,-5.1000000000000005,-7.388386905595988,-9.955194560935686,-0.1404821357287311,37.52655583992489,0,0,-11.007311912257908,-8.006023221185936,-41.28196656050724,-13.822459229399833,-3.13457115010459,-3.169501633766201,-4.1000000000000005,-9.690000000000001,-0.4094056745610387,-0.7479303618645098,-4.207955290605588,0,-0.03892694452410322,12.894719322189964,0,0,-0.5010802228165704,-0.6371867297217151,-4.1960741131518615,0,0,0,0,0,0,0,0,0,-9.32383920701105,-7.092398341225622,-8.404224816717731,-5.1000000000000005,-5.727903445940458,-10.401023676716218,-8.403867035393056,-9.694803499021395,0,0,0,0,0,0,0,0,-0.678665613449177,-5.1012375,0,0,-0.3052800350220222,-50.7472421809188,-4.1942181691186375,0,0,0,0,0,0,0,0,0,-0.029631934304570756,25.98789990910637,-4.1000000000000005,-4.8687695214177005,-0.6738720242589682,7.265313211683134,0,0,1.2093609928037505,6.60447930729203,-4.084798828111304,-5.1000000000000005,-0.3326084293053637,0.8680908201419275,0,0,-1.882756370812812,2.6743411816118376,-4.111592702653058,-5.085848453369611,-3.247467929650007,0,0,0,0,0,0,0,0,0,0,0,-5.157375,-5.1000000000000005,-7.791255671052735,-5.1000000000000005,-0.6562893362861648,-5.100912714332377,0,0,-0.7805909708816197,-4.764016516341203,0,0,0,0,0,0,0,0,0,0,-5.765091564222995,-5.10573387335992,0,0,0,0,0,0,0,0,0,0,2.3633809152411343,0,0,0,-3.5864199066592137,-4.773184173424531,-7.791244006570254,-9.690972746970246,0.08155139224331372,0,0,0,0,0,0,0,-0.10448319490277637,0.528860220927096,0,0,0,0,0,0,-0.650954940089502,-0.11645076413658165,-4.1000000000000005,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-1.0279257757643139,-4.846793110891088,0,0,-0.8839315173147254,-5.1000000000000005,-4.06059933218552,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213661631822958,7.161877841825699,-3.1872122925467234,-5.1000000000000005,-0.7376969815880331,6.586387171867417,0,0,0,0,0,0,0,0,0,0,-0.9120549875845294,3.0954905873834146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.3029658174050096,-2.8579464676678765,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1164252023964985,-5.1000000000000005,0,0,0,0,0,0,-10.213625,6.453848488502732,0,0,0,0,0,0,0,0,0,0,-1.1177088823510883,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,0.4894146499377954,0,0,0,0,0,0,0,0,0,0,-1.1115074128554545,0,0,0,0.5755438531588837,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,4.053855536558188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27.82688543922072,44.87419432237397,51.18030231631301,39.33852063147123,35.02647553903776,40.771327276336876,48.646211321632435,39.34810535969536,20.958442436194403,42.702441508446555,51.15381464141648,42.98041414418992,35.46735590962827,43.756535739330275,36.17376043142391,40.73794377045899,28.820780872378275,42.09472233388968,53.87980998110007,38.63265533711762,27.994805243297407,37.76446643720362,35.49760811977556,44.04760544158829,26.152935012299924,36.02363749678184,52.86399192175854,41.63244154457816,16.054285034352784,32.04133708827864,49.76440570856986,37.19435017103906,30.299084325967513,-9.077825539096306,53.16899645163426,39.74845873769603,31.527221008594317,-11.853442480783134,52.92401313421599,34.19351151934485,35.84671267116641,-5.809746514929516,48.71162799365478,39.282287807053095,30.229373035663436,-5.676404727299046,52.15604254304197,38.49690962790923,33.42182590157178,-13.687344332256192,39.373669500874904,30.84757350412121,16.49987374240083,-9.221363569966153,49.89552030033796,36.90787334339942,31.168987670586482,-9.934796298051978,27.27126906547244,45.56099444374944,27.613610430512917,-7.929335186302729,49.06571495614681,28.56886690350695,32.52430361806651,38.78705991546392,49.654981331398346,39.96546204696099,23.428266533219258,35.94544051930138,52.02045360235794,41.079958349293776,33.45561029862284,38.86027643355162,54.643862238763575,41.632681468149855,23.865658279473898,38.07298700404582,52.77143577708412,39.73688925492513,24.119552880313336,35.81020773848283,52.67034900119095,36.36697904270554,19.425826578936753,33.83889466218052,53.15845836630293,37.64536176306583,32.29556120343899,29.78933445399391,58.24907815789076,42.46654401236153,20.308027247226555,29.4390432125469,53.289413219142034,33.53192828502146,31.40046770501688,-12.356338222001881,21.54898880105601,44.60511636822935,31.431988013984665,-14.09424166093258,55.28553166673051,33.69721679994678,29.36729868366919,-11.726348552367519,53.53648883969717,32.60176179639629,30.388915319997807,-12.01833351289891,52.97885282318796,37.63311598816605,22.587109255585883,-15.51732158733841,48.00509533869275,35.72402292619027,26.715165222587554,-14.851357884773533,53.768952569544886,34.65887213623875,32.06187638931379,-14.093098599665247,50.368373867575315,32.320603790788155,16.17672743118863,-16.974062194329775,38.64359369841043,16.795961689995202,32.228512974865666,40.53126063416552,50.26235961916608,38.00814710431399,33.70081401255877,39.162911704987586,56.03493592421323,40.60380786443076,30.089982759702178,32.41212401658455,37.094723256926,34.24716891224509,26.51501023031978,28.433538804236036,27.39749866401056,39.920440104049526,26.699051922482212,30.074470790637086,53.62119796169818,39.38774809832247,32.61407251218258,28.21674517513377,25.96609015927158,35.99084844231399,28.26429849938993,31.861280807989623,49.231027577422324,33.23103233284335,27.550127178605695,28.95440777980353,42.53131892286845,28.9999299980362,13.126568932626963,-10.901850124779896,56.23436701201324,34.48533874368592,33.17152362582816,-10.284675906721475,48.558115912973754,34.756175555812554,23.647714275599363,-15.421646256175245,40.49924601090717,34.813210880165826,27.56848209255842,-13.117886014642933,36.376668340285335,32.263977743781396,8.081119315486575,-20.079787242286613,54.7088422903541,22.8527869870665,23.113904308705624,-13.130412790932427,23.778096955927875,34.603260290250795,28.98870206443031,-15.450376271063284,51.346760390041624,26.571993755494486,24.009276630852,-10.774087138815222,48.692995570105374,30.545255955689218,26.240852766520668,35.06627675738962,45.0666429383989,36.452492160798656,14.799637644573874,29.31702295273376,26.347862632947457,32.74421583223265,18.848071917234115,27.935200686797348,48.02278290140443,27.498680208005332,22.051514134042872,23.52162468046736,21.095452811146185,29.812310015035056,19.328151706704105,29.126108238248502,24.208220826850983,33.245546664342235,14.680950581198905,23.325852841575557,22.930177182191994,36.95635349278379,17.988855617191707,25.29317784437857,22.2885380671546,30.857822998039833,21.95512340757592,26.07304742858525,56.18469147766563,29.07498687769956,30.335757799987224,-15.23464463178404,55.496756607107336,27.746226042717737,27.90648618360038,-16.102125719379348,24.19835778666159,32.389666445266926,24.424814935037954,-15.425881484668277,52.10808201963547,24.702863876839164,14.360574711380782,-15.938712088228295,15.571183124900937,21.79417975019905,13.90813768507332,-18.65501266710851,18.61442762564364,29.47798643521643,24.2055251225241,-14.93987672565875,51.67179514857545,45.27511449129457,4.611258327571001,-15.250593640914238,54.427170033742556,21.538799598790423,11.095434441009683,-37.173842573285576,14.02777049745588,37.650592538579176,-14.935811542339621,45.99694431229286,43.47675261400886,42.997261771362325,-61.39938946915964,31.820111545850985,37.62802572711528,42.421458458341355,-27.15789334172655,44.90120539074471,49.79219782910744,38.360215212072674,-58.42971780421865,44.501701343512366,34.773941954764254,22.756674928016263,3.48280244480729,37.66079063852956,37.37523713565133,40.207951684057804,1.1990809749341569,43.75262352950722,37.38851626819774,19.8646381754822,-12.281233981317083,20.693023735867264,23.536166475060057,42.891962948571695,-10.894112004262546,28.973979436464937,41.17864989774398,11.071791141304425,-19.386119220413374,-7.560082980394735,54.904302566944516,36.56224357988896,-2.370220692023379,-3.046738484263132,50.090141531529284,31.95501349253667,-15.275548028224534,-6.288840979268345,55.65663893038368,25.113972668478777,-19.34964125087117,-5.827548287590955,50.36946505504463,6.669949994377447,-21.64925137955408,-10.88937593217251,27.109594014254203,44.28787223378924,-15.442844779877701,-5.960942432656967,46.91549137568388,4.6434878117647145,-7.846086743669182,-5.891254683165789,48.40253254825061,12.278197609647965,-1.1247885399793136,-2.8718909928282694,32.591095470435114,3.522469008267634,-12.216405957679063,37.14227451900282,47.52362704625546,33.95572231559561,-11.013473796649288,-2.8683738641194676,48.49112508516531,41.78728936612401,8.020961530647748,4.44559340047214,43.65434443914849,38.91204558575794,-5.741411609736345,-1.106222689348416,49.96235664821991,4.398362528904019,-5.867375431831408,9.793316177318685,43.00288124459127,39.60410389282623,5.0048147607187765,-1.9301564504182198,42.82790426525531,11.443668439102549,-38.66581343243875,2.6564536821355236,47.51837214334423,3.6603090086988566,-7.038445274392439,-1.5365236011642265,49.32082535891848,0,-10.679528572641996,-11.985455062891779,30.545429418704842,42.69593205178625,-65.20431834097545,-20.569662464367443,52.77128570488806,4.577169857105081,2.2585756644129553,-6.4508899322156354,51.47849620286418,4.942575063796732,-0.4791340935186471,-5.121847023225528,54.41054841371414,8.206987007796446,-4.673043931250192,-5.104936604175824,22.300759299539404,14.229032531741227,1.6248437303198315,-5.1000000000000005,48.17823254904524,43.06891947381822,-10.213625,-7.730599069869525,50.06122655595499,0,-0.7994140885447143,-5.117227828125,52.770400358248935,0,25.266999026007355,38.53991392035328,35.215937615958616,34.86235197280186,23.2340787826727,39.007970072168234,29.47110840339579,27.23531897260396,1.6071116896092352,31.791391748395196,28.111974033182012,31.77258742754626,2.5058585901290655,10.19009400876449,35.356406066931704,6.940960855839896,-6.15015783080214,31.374836048706385,25.006689907387432,37.32393904729154,-7.662894206989551,37.11719207879403,20.54260168178973,16.412219338475804,-3.279245883063149,35.954381361640706,27.379071787112952,17.27819822703588,0,2.9702541758554855,44.52517232785068,4.770264201742547,20.952445602486605,-13.090866271994985,56.83719288446531,30.930360818156927,-1.6811488095779414,-5.564213395873034,49.34456407880579,16.93471896502497,3.843068770086296,-13.994395116542034,52.651993622026545,9.521309250710345,-82.29213292333202,-6.177803949045389,36.86584944805984,2.8479871787538134,-0.8165238519145532,-12.316360911051616,36.779191326290196,37.8142502858842,-6.716808061372268,-5.660997160081552,37.2405646185579,0,-2.3118941055236544,-6.422417118976967,54.02215736518457,3.6187439216667885,-0.7630951906501923,-5.1000000000000005,34.32533084100534,0,-5.340859915505544,19.11724303154238,33.617719324592635,34.36372811276469,-22.763859962808954,-2.162652749114047,47.41593775508056,11.219079155836184,-7.053010976533878,2.042812248393078,46.105838683666484,8.009387693984957,0.6225894286971922,-1.2287805847264324,41.347169546058105,7.21381783383053,25.48417566069531,3.769307069544,50.31671679696686,7.172590244114491,-10.818519431542626,-1.359905844010129,50.80180440273449,0,28.775521364475274,-0.9216362074350357,48.04077398594956,7.4275159406974645,-1.111621026022102,0,0,39.45061340296199,-8.93804774201832,-7.609715918215402,52.03382734508187,8.14181073348664,-1.1225757740998776,-9.880809794840548,46.0137258349771,4.070969128908119,-1.1058111283503151,-5.1000000000000005,47.75547628936571,0,-1.1058830433820392,-5.101243413546036,50.62355826367464,0,-9.92407925056318,-8.621058586117226,37.050139427329476,34.863921396054145,-7.328358824734177,-10.053012989605929,41.387541125382995,0,-1.6413033077892436,-5.289809958009974,10.137180362893627,0,-1.111573479634189,-10.21487552016459,29.414499458927725,0,22.22909318281528,43.70932754267905,1.5200729885695792,45.03782891743688,27.766086620769407,32.357833041067664,5.8840342474509875,43.8036296904426,30.590480601664787,44.30883980505352,-3.2518266318122127,35.76181145555583,18.85882759534341,46.29307861021723,-3.070316443393967,40.76932518479519,29.35863031735689,33.96937057299185,-1.2262980698438755,45.06161174382878,27.097551533852272,24.422866656855327,1.3021871205988877,43.55432184001322,28.739501709522152,28.23579049044854,-0.009899772491678949,46.713542822188444,9.834906470456833,26.093645826864673,3.7007969965451597,36.89503488520472,6.473626223362349,-7.405974933520764,1.4774288584889097,45.69183246220724,20.574314593447976,-6.787117620121094,-4.490192064900011,46.14651372887514,22.94737701471899,-5.167859689390718,-1.4940162055675148,46.031113398781116,22.260878310137088,-5.406296766308454,-2.07301623209641,46.165453859246774,21.12205857264861,-7.127904320410991,-4.689006691075955,45.57229443746012,22.27776979382064,-6.493251895632181,-4.890019451670413,35.154921970368775,18.732833089770494,-7.730202970768559,-0.7839843203897968,43.56227703350183,25.37414829012936,-6.988870346702395,-1.2687447519998625,50.521520489723855,27.87286697127555,40.03550579345469,-6.013532729189519,44.045162783542125,29.570017725253845,26.58856160753255,-0.472504736553141,47.99207009401134,22.713002957555034,24.285342808381138,5.005748469117894,43.26666570055568,21.31715886857876,27.557997719072848,-0.031745334603337394,45.81355093168416,25.99827017909672,27.249845327035654,-0.6010070658986437,43.65637111039883,12.766466874005726,31.161767779590917,0.6373452185898254,47.90789908457509,22.00673656502399,23.181076929106386,-8.560980657299636,41.59686173132933,-9.36656456942625,24.920539673610786,-0.4005826979389747,42.89929141797596,18.92139647640992,-13.626724906753712,2.3529266100611426,44.01394684486009,20.898576826835974,-19.040652273728572,1.4350208083465068,44.42477663366539,28.052618570927454,-20.752548122232618,-1.76843246565719,40.33521985260245,13.478501269424513,-38.68344769034421,-3.1192552720158613,45.802427048700174,18.606041788112382,-25.1985645748944,-0.9618734247395957,45.32178339671408,13.649626090759705,-13.609200080744563,-6.287474994084351,44.373412162321124,5.447203603085341,-14.351549694830497,-10.01124289974777,42.7373111863036,-2.499301750655098,-15.958042154929661,-3.1809412479940353,42.02701827804277,25.113341254211957,24.320776139203762,-0.4623836596413091,32.75167844620938,30.27743166809292,24.78690786184854,-1.3380841640173604,44.435394381941634,30.11483405123778,21.966517703999926,2.3320357597193215,37.34698477885561,28.025797104162937,20.61041466902318,-1.7304844179255217,48.57576653254349,30.478622052030353,27.695254517481434,8.735101809594584,31.113986238918805,22.126997759787663,23.632170340903112,2.854901452768746,41.200347952851786,18.062320630544328,16.452934670295278,-0.794744698805346,34.75133973890358,16.71896138364059,25.472178070066068,-5.4620504889981785,38.17318397171383,26.28801363591049,-17.588386364378234,-2.6491364450988018,32.63290858434696,15.87024506035263,-14.230297307246792,-4.248681362749409,37.04058524858413,4.129951280077036,-21.490708875831935,-0.5455446006675859,41.999179733647615,12.079337623657874,-13.276538786384204,-2.0033799025104218,36.733950937349746,14.999404740862627,-26.106909115094012,-1.1588642650419652,39.50442952389312,-2.205923637846517,-7.462702559023538,-7.125544429366531,36.32792295238354,23.23483276189274,-21.06573895463132,-8.41856030088173,38.030606078277714,-1.6544524298107102,-15.046037197755478,-7.464517508548361,39.95529580888029,-12.764771970708455,28.071729345739357,-3.46926605586576,43.10841616375417,13.999894342724662,23.317207795442446,-4.5261672911309665,39.96095017871307,20.31804738336012,23.75300962227239,-6.831306944421279,42.40920569196004,4.3079168087250075,9.741624240769855,-3.098535969438653,40.05165445653135,16.441803479908874,20.89706114682987,-8.673161401161698,40.12302414594358,9.68156400687521,16.381610051903717,-9.725260054433814,40.75328211536995,13.358015290562724,18.303003239238418,-11.247479266752821,44.831272584963635,6.662531932524383,26.441100024569863,-9.34925867839213,37.80087080723834,11.704991011748183,-17.97006589057117,-6.443982131319641,35.36040346499459,5.839427494577869,-19.019461007907882,-3.060392597633614,34.895574228409984,11.96955029713666,-18.94141568203447,-4.106982498225943,34.57165561641225,0.7495511910308501,-9.72189599113347,-3.7015261130284474,33.40270581927549,20.19341002695483,-12.307369995067678,-29.07646929070006,34.32410888977418,1.9286926679228995,-8.055268821616277,-2.769203410824537,37.59277934188061,4.492667670026015,-5.101387897747838,-2.8954892125307663,33.2236014019604,1.4604414169745823,-5.157935266184424,-9.384984284094173,29.777467323992155,-29.921632708427484,44.71040856342846,-1.1341991151219113,36.452003136566745,7.753840369672611,43.159108837656596,-1.88052868847899,19.681818914728037,-12.793425973792136,33.79532869685117,-3.3540729662656714,27.882466441550058,-4.609944353576742,4.764048524957785,-4.035077502558689,41.12462374766195,-5.735705318724522,22.58721502448958,-5.7951637667109885,44.01988408711798,1.89325744023053,41.98208228915135,0.8946540324175344,7.634734805636581,-2.262115228746661,44.220246506582825,-1.8478334691381326,0,2.2584701355515975,8.174419195327886,0,41.75676620774892,-3.541817861907191,-5.696619032671548,-3.3459528758566663,39.04491158545837,-12.156212057200525,-4.387545915465839,-0.34794141815148183,37.5493602171368,-6.576957319022405,-4.622752971725872,-2.0691507632224058,39.214769767713236,-2.7819112753159776,-3.7509229498547487,-0.5803481567025671,37.34253913894471,-15.137694721289826,-5.1000000000000005,-2.21050859421813,44.11208093624791,-10.213625,-1.933460897017228,-8.149473247432306,33.263564394967254,-1.1112304446721648,-6.320239802530688,-4.1000000000000005,42.26198077336763,-1.1355453337105874,-5.1000000000000005,-4.1000000000000005,26.229710840905025,2.478992596366911,37.74248708711903,5.999054063776605,12.255269197859832,4.530949151701142,-4.1372339978350965,0.26755343809084,45.02528497897725,1.9112961323657305,8.62715058012884,1.9920249298474833,36.61159409630375,-7.017316498962252,-10.43161859753296,-10.055617155785246,43.96919524519538,1.6024211811830091,2.721882597558167,0.09866489822618399,40.44849325330375,-6.116292618106235,-0.3978803108849414,-13.0817411420224,44.602797040503056,-6.101254930422857,-0.1,-4.106870348463271,41.99993849759807,-0.8117785294008965,-0.6395867382811542,-0.04465848413826308,26.663828412275457,-2.6625470803173945,-7.3320824980582975,-0.90776770250016,44.387185513026274,-11.919174310082742,-5.121630660111281,0.5551578413952101,43.00464356821641,-0.6037165132659048,-5.1000000000000005,-1.9395549570876633,36.10008784479559,-5.109264786284654,-5.257350259644939,0.2329276009436566,0,-0.9882359987806351,-9.643530744435715,-41.12614624434007,43.58792267640137,9.76480496508147,0,0,0,-1.1,-5.207064877069724,-4.1000000000000005,26.13260259960699,-1.1172718299268072,-5.106882030650384,-4.10687037744473,47.173381938593984,-9.947847704944099,23.916152660242055,-6.837380726758219,40.819730628289754,-9.32694543177629,32.13028769617256,-0.09485316073327443,8.394306064393216,-4.462300573691331,1.9059885629327864,-3.6141118142364075,35.503511290255474,-3.7909574956934615,-0.3682296476818502,6.505286745132348,38.50177870507145,5.0785207721344605,5.7650272492186065,-7.227983506531036,36.83103088966259,-9.223082255289299,-0.23891937424756568,-5.819512871545012,41.971036578132704,-6.424277191302697,0,0,38.89311621701803,-0.9275517998497809,0.1107579830397149,-4.106864111028094,26.70073837477277,-3.558766033224524,-10.026613063915674,-4.166112670873172,40.310754985382474,1.2978975097872774,-7.993989396633124,-3.008795584868863,38.97109114914638,-4.469580424960607,-2.3881107759286997,-1.7795599741154797,26.334541179684706,-5.728909768168734,-5.045237088927462,-1.834074039071537,27.41935056696235,2.123865144892688,-5.101316473295458,-2.528671566398077,35.362006642356214,2.089433770728934,0,0,37.87719203732447,-0.831130517096657,-5.1000000000000005,-4.1000000000000005,43.74317730449301,-3.032586550640275,-5.3730017621376005,0.45320601107743885,0,-7.08778549391867,25.96633518144741,-4.3735372195205295,4.536884632802947,-1.091914425811077,-1.6723898251603875,0.3309376801901157,42.621795488657725,-6.1000000000000005,-0.13928445020764083,-7.235645077094302,39.60601998417515,-6.077292541001331,-0.9203078287938186,0.37452496931451673,38.928334699887394,-10.213625,-0.32621258858055496,-9.869470777228639,42.354973037053085,-6.22048855004114,-0.20305773281071637,-3.1987351040963468,25.276858366983074,-7.801103647741407,4.069424121390424,0,0,-5.499752263444916,-0.8334989642652266,-1.6693604254044836,0,-5.843311761818124,-5.083615201159024,3.267589014355816,35.894715590237276,-1.0376997437732256,-5.1012440362354035,-24.242778302728183,8.523024993502823,-1.1,-5.1000000000000005,-4.15980399780152,43.351357939175195,-1.0539414623126873,-9.803459865401386,-0.28172904342596183,0,-10.213625,-7.333105527944992,-0.24422792869456278,44.192808820348205,5.014787224158395,0,0,0,-98.77526558271867,0,0,11.778691985821085,-1.141553020520768,-18.68786045386615,-4.106863944778041,9.417664799863502,29.326255015341378,43.000838259297666,44.52110429783317,37.93099604373422,36.39596204852573,34.377143021168244,48.36620284499076,36.11834150558116,33.17932007575403,42.79482980624298,40.31621494628361,35.90386741356379,28.2721936242956,38.57523603699135,49.31022856543637,31.58779459291358,36.98525518927301,43.06030431643141,32.574019076757445,35.95472025449876,21.58286064908618,36.84656500900182,30.154091238864947,39.10617831183625,21.047692983413118,45.40195485126108,28.011820690964075,34.369491065187006,25.89794329160042,26.82450020051995,35.36001634496896,26.869128295376,34.549243104636794,-11.064770437447374,35.90316238099453,39.26426597873413,35.124522818556486,-8.06979865830058,41.47023925819817,35.688312238790935,33.02200963822059,-10.791578079666635,50.42821640986747,42.4116004643616,30.99174781965029,-9.143972586214295,44.194482460424304,30.229583377817278,33.81072837201331,-14.567623481252943,26.61111366277981,31.395289924123027,23.99028365456757,-10.004580955081009,50.1791509947973,25.811522696053007,16.651352255352435,-9.10372587756099,28.407514534297533,34.88529645857464,13.485608889652923,-11.515039689485745,46.361396202061435,37.37593267176774,31.299029410371013,27.43286258022668,12.105381076243484,27.06547094966173,18.75702362444535,27.92197435330091,48.75937627723196,23.542623546784245,10.683543554270745,22.33197041595365,21.00340337428696,29.19040888539974,14.94302511919492,23.014085231168558,46.38696872746517,22.93346956722943,31.69874038867751,24.710941814101425,12.710936719213777,29.272980828386597,16.789150962877528,19.520188422934467,14.782963204868057,21.422436193080696,20.556609061117328,20.968155072016675,46.230991541073266,21.351982472487887,5.58848656185218,9.016137746252538,19.207141655147975,38.49555071662238,17.530570360753504,-14.845605089298697,15.690266043874002,35.894264162954606,15.793419934271641,-21.11448745293688,47.000501403091356,18.994482386795138,14.639285933390662,-27.936459252016657,43.35640838533133,23.463826706325893,12.51024158346743,-20.456875256543277,12.325987390551289,32.184008918072934,18.14685543535803,-21.438099078997382,16.466402442937262,38.76339906405963,20.870531359573707,-29.9163335465029,12.822916795560909,29.326507529063814,13.163397947767024,-23.856399084119992,40.27832235603245,18.91659054978784,15.862389760037095,-12.865236101274284,25.55695563375118,10.88594833300718,29.44312314998026,32.006277603906554,47.54949915051183,31.56226202039206,-20.794877533385225,40.26404588774071,24.865243010006182,27.539044828917593,30.662062803471546,27.428312791516863,16.386661112157974,24.802762685084762,10.50607699172965,18.89281238582246,18.854740661014333,18.872285754604604,36.85446765788069,25.024684642574776,32.79582427122793,31.40102013012222,16.86447902060205,29.474699844023778,15.492411566276097,41.71487755549394,33.77045838731803,29.00339286587169,27.7933908218,29.64252089466723,20.636454238250355,21.516690698090237,40.70254108480169,24.12880572964564,35.71810204146165,-14.57803324128948,45.32145578139903,33.640117675779784,18.50030557618463,-13.912612717401714,42.04609189987515,18.53042599852076,32.77554831429577,-16.844511693276942,41.09155801294385,27.912478365341812,38.82880786600181,-26.033995709715263,14.645041651579731,17.972917554554186,35.48643748273856,-34.81327440936846,46.443662823882754,23.21481773737337,29.840869830366973,-21.048605599362148,33.6582958313958,25.258369204013707,29.226080650905192,-28.03829356869905,24.64528847734528,30.753694484802736,33.844412761018425,-14.931157806586564,34.234998951335335,2.0040609455766254,19.46645831149466,22.55815116852974,19.007740934177285,26.193325081772752,20.536175096657086,24.323170949216834,47.96337835672475,26.084825448656556,20.316094890230406,23.755865707413374,31.220994755589448,23.839405808694806,21.29419439877978,19.17605740005293,20.68019514068808,26.002242593539282,29.052394616450027,26.134125596480768,39.00359733038458,28.631100652101406,-5.1373136808047795,20.49189880392143,43.24386381586544,24.83742725201028,7.517288383023789,14.003344808218548,45.45523077238953,20.968560911259825,-2.8138317904366894,4.93137923853405,22.079747351913436,9.379107654206184,18.25677629566605,-15.862012331861653,12.73633315144534,22.445025774877067,-23.69429722801823,-24.10719645765421,47.499549973976464,18.263191091817916,18.156725905534813,-32.724789914057766,13.203432818026139,30.111073560764435,-28.509777298337873,-23.42782357687633,47.63488277954326,6.750379367211611,12.768632418217116,-30.123215803482907,36.2841594250089,14.872522713896089,3.891630992051517,-13.869527300968393,38.956708123787315,7.907093817700391,4.6203465122731115,-12.806535533058234,41.62908666522945,5.1711185693734265,4.995666146092983,-39.968868917997675,42.854708665894485,9.356961716829641,-5.464271874126769,46.4003233759251,33.295443338318584,39.42395951783715,-1.658401153301,32.69687666546725,15.948986423815313,19.15456669505137,1.2375268580629069,39.87388169333343,30.882185853115264,36.41169880146215,-6.100907387864829,42.62358076928139,10.615558928757551,2.384029530625837,0.6247730362482535,22.998871080214315,13.625930410035476,39.58675848566114,-1.090911793922885,48.96777647466452,7.405844972247812,6.959548554744195,3.244166396940355,39.22827292716213,16.22892604469334,8.26595622281502,-6.1012375,43.7202917423524,0,4.266367561278794,4.616710216727567,-10.05142497789522,41.33493692772763,18.32305949215812,-13.584783250232471,-5.616127642437193,43.9884609254067,14.31008868836863,1.0177195488993243,-4.763746872581356,41.94415219441742,4.937299031467034,-3.6820087366474388,-4.697806625193989,41.44647354613624,3.79691927779821,1.286906117502955,-6.451261615806963,30.49638193255075,3.241294308594972,-3.839861168953146,-7.0240050759129256,38.95296617863691,0,-2.0373341732087784,-1.6495722310378385,0,36.22326411442837,-20.144922331156472,-1.2737282845943163,14.734781996499873,0,-3.364660215275035,22.91907241867436,24.306548971381716,34.080636487782044,-2.04279208165212,-2.235296802962574,12.843312239135482,9.894392300267082,1.1549022518886085,0.6778432046000743,44.11662874781927,13.474993368334685,-9.117250443536348,-0.5148639977408246,26.96888118995181,0,-9.573173058186159,7.036201448161553,32.88222569617703,34.19631383657595,-1.7503616484870967,-0.49379289879552807,31.372927696358293,0,-6.100872844048473,10.116295109638413,41.06231633203377,0,-0.9875905528629345,-1.4945950020816654,47.51783326404027,1.831070064256472,1.4057307434133677,-6.0466429731608935,51.23955061452378,3.4987550577148046,-0.12958309246613986,-18.178994168098775,36.66559126075525,3.990555899621255,-3.301874430310539,-6.3952848605113966,37.041485739745156,0,-1.307951427608818,-5.362928863763503,30.4188760164678,0,-1.9899662427170228,-5.101295942592183,17.813730410421314,11.183255453130293,-6.105381144788734,-5.107217530737133,30.728643575380957,-0.10673297316648174,-7.585832889084579,-6.813777876224237,22.014144925788994,0,-10.578970504908106,-5.106691993281041,12.525109698651086,0,13.01356147710151,17.94419598593205,42.450701624557446,8.861420762250905,-7.908027261112786,36.02185768581591,18.862528380925177,33.569088987633265,1.639983286336295,8.158530595922203,12.95304670557126,35.11257876846421,2.9379499658377326,1.8548064301849965,24.329707054258655,6.034322605502339,8.344001416547359,29.780884077491603,0,5.359697958271054,-2.13793360486922,28.389575804118127,0,4.0989938235300505,-13.05545076240352,1.1829632306991218,1.155034280873078,33.28265087795992,-6.1000000000000005,0.5032339552481152,0,45.81967569546328,-10.120598728882035,-4.878680322684223,21.79658558109036,31.72322526823061,-1.1058847076502287,-5.101244115784668,44.37829555124019,0,0.5438608097672306,-6.103207975629714,46.41051213179132,3.9128456444405253,30.44752310141578,-5.1000000000000005,47.611004588578766,0,-10.213625,-5.215031605562203,0,30.788914672066955,-9.01101787488034,-5.1000000000000005,50.18528484164309,0,0,0,0,38.691081247204615,-10.213625,-3.975975699599453,4.32100488505812,0,-11.553673166941337,5.137995893721203,39.21406121620914,12.03453771671704,4.717825643585637,-1.9662926697420682,42.18360583864768,0,-2.7902552756286645,-0.5346858721045332,36.04160029077883,0,-4.6659743080122835,-1.6914886496310604,32.058419524449114,0,-9.986483930379206,16.571308255131747,0,2.9326953285252184,-6.217699326931497,-0.8634030567502569,35.96890681711907,0,-1.569408562346703,-0.10691849848695299,32.62552752642099,0,-0.8121716180299826,-0.1,17.361255019603767,0,-5.531154576385571,-6.471088770128722,41.646535983992194,0,-15.138018206677229,-5.621032042402847,21.78844561296846,0,-6.111653933538802,-7.499629900552161,23.843521246541272,0,-10.213625,0,13.17254974760202,0,-10.213625,-5.111517614342617,27.031722549260962,0,-7.696789167116982,-5.271231574657722,10.203887994744289,0,7.741367159373251,0,0,0,-0.9387271445750542,-10.214681068037649,5.109242326145538,1.1978016585184135,30.216775258690852,33.10775674409785,-7.746458241058329,33.9531533877547,12.969548972517444,42.67598791587153,-2.9761562024611266,26.04674260143015,20.084039828020853,25.295580369101465,-4.683086350205713,21.968530648428555,-6.829795938729651,14.693046382034865,-6.294272249627594,24.892173398182152,28.5572646383005,27.23105618054964,-5.926861529893009,20.675277610477533,21.65650560553763,38.55704603969527,-17.01024129193525,19.480160083879248,21.7959686925013,21.974608352127362,-18.158935542788544,27.480176380246196,-23.520409912548576,40.16949957189957,-12.359004892008977,23.667324751880784,26.448783519258107,-9.447374319452924,-7.436782081713732,43.653820646938776,17.413134310825175,-8.68342694130735,-5.873889735625759,29.19129368151533,24.50244857172256,-7.498783310282712,-3.367049981010279,33.88553996967351,-11.136313087421584,-9.974537620394225,-3.323282298253185,34.130932102381955,10.116244745045432,-20.801130234988683,-9.14653241928247,31.78184593529818,12.630067192569559,-15.323717704279323,-10.392502682177025,26.570570850980612,8.29164722716188,-7.98440292435883,-13.79612137091939,24.857945886186403,6.215753718382462,-42.51864336230915,-10.075535770952225,34.104608179192844,29.421603540264393,41.12731754963582,-4.0404386439183,25.451382078206336,14.711504592663786,13.874372843721044,-14.072375841959426,36.91604974816084,7.372471955258332,11.998149619472265,-12.791565857046981,37.91930218954514,11.622444281261512,8.506640434482813,-13.983550750109444,36.94211875264607,12.169161238557596,10.634665471647656,-27.51593312412447,28.220736864924575,-16.933944704871568,14.852196037346028,-10.026376412429924,18.01828974487669,10.723292445138089,13.240808582618035,-30.145589110697284,31.881239822834527,1.9503147988849143,4.67978869265534,-10.949135075957093,30.02690675971035,17.84261240593526,-14.831907150140186,-13.016069601027203,41.37966490385825,5.5952343760678644,-15.851195097285766,-6.571326295793356,29.378615760435885,14.46679721244476,-16.400006395145667,-4.035475759992619,35.98547297762081,-0.1453103336979149,-13.807415896445152,-37.033292036465554,28.4740680039229,2.9801814266426283,-15.75814065922648,-6.811094516748021,44.87927913967874,10.078966670705322,-43.50043861126555,-37.645062077070904,39.20701051784975,7.343486734798265,-8.93591907095044,-13.188801017465883,28.53459934088281,-0.8377382531057397,-8.691008416657917,-4.111281610238232,41.147048093808934,-21.212401247534697,29.972398903252337,-11.45224956560961,40.70126445963086,16.834160496360543,25.436670498829926,-10.667134192309884,40.38396870463265,0.6759733120633045,13.3564376551141,-20.524796033248997,41.29633815601368,16.402956084441975,15.994919272072881,-7.3584728922685345,32.41323422939861,11.065247217066524,21.422491116841567,-8.975089693779362,44.545841440845145,16.498799593426956,12.986763846159347,-16.838872158313805,29.76019246158405,18.532384567749677,18.4080284732909,-17.748792379870462,26.44757521601116,7.424865792444821,5.021177268641817,-17.004888389117195,44.789036264584865,13.056226509754788,-16.96589572287322,-11.360525849800961,23.25389382757787,14.09266837310659,-15.165523691400603,-26.778855554273935,20.036232348990502,20.277294345323547,-28.635634946211532,-8.344144723693708,24.552220499005934,2.564509276412861,-51.165661881438794,-6.295227899648161,41.43250055747702,9.971110757040611,-23.683172179681137,-9.195079097691348,28.396289588973662,8.3137631432187,-15.486298881284297,-6.914033130601445,16.816384790729064,-1.7368615347858967,0,-6.74171027921114,23.951008287946014,-33.162725964039,0,-1.3368935613924717,33.84507111210361,22.697678654256933,26.479107848473756,-25.075465997114236,39.72656739767219,9.456398539380135,10.522887517637136,-13.972692614222842,36.807103127869354,12.311937196996364,16.824925533342963,-37.62047919822687,39.44627196216066,14.105959394770887,5.562688861778861,-7.53606663282103,35.243841882517856,12.04885240123572,11.489939814170189,-21.12453179956837,37.50246399485592,18.474098733359938,9.778544311042074,-32.71776735555365,32.45023376061015,-46.65786886277335,7.866681750228511,-10.899260778555675,37.81690508257663,-6.1000000000000005,0.4999172742337503,-9.8583229018183,17.3758159676197,11.051142492965514,-24.10091752765086,-9.013040109940748,43.22891049078531,-0.8054791532425456,-13.849085799795537,-9.822010002614881,34.29594361099514,-0.22455721225886424,-32.30313361725267,-3.9832838270339104,38.56083865360538,-0.7112359790447031,-9.077675829314677,-4.157386739207911,47.455926406670024,2.334177911737935,-9.274967117195338,-2.491963986813213,34.1631729976656,-0.22566292220845607,-9.256199625246508,-7.798101593566745,39.14082743793518,-0.274287303586044,-5.1000000000000005,-4.1000000000000005,33.528212877236534,4.173365795677496,-9.796715541065197,-11.172030935760326,36.19965404532809,-6.594858717512209,42.084619198336384,-7.685204862405537,34.075158536749164,-1.1,42.24192188585029,0.05734727673738647,2.810204615108039,-16.143839845059702,2.9818344895430053,-3.453009044268179,29.995006458493577,-10.928992817481543,42.449167910804015,0,0,-4.620617832082416,7.575368778043368,-4.1000000000000005,34.39654084917255,-10.213625,35.06927377256468,0,0,4.526584837002536,39.8339610119298,0,0,-3.3976476524049275,34.190454181273786,0,0,0.20501525412853883,-9.039710323448492,-19.46478999087428,32.29721964582438,-1.1009974471838697,-5.1000000000000005,-2.2151908216496383,33.50533535457397,-1.5299568840878068,-3.552805144167742,-4.115347849325802,27.82239112845274,-1.0676862665694573,-4.794467540550614,-0.14099280014244328,17.349155595261834,-6.8774709600288695,0,0,33.04807247440668,-1.1109208600391147,-5.105745249644531,-0.020480488806813215,19.233587227083515,-4.668695805474009,-4.627802434875588,-1.0307941374769267,16.02204338856899,-6.107044043583083,-5.1000000000000005,-3.7072724226295692,2.0702566913582534,-6.1116224659776215,35.062129049689105,-7.478657427301652,4.123287774465377,-1.0129592030260637,-1.4152623631849233,-4.1122824642632665,23.114644146569578,-0.3446116174732409,-0.5806782980005836,-39.22593071322867,26.65094563263506,-1.1012375,-0.1,-4.1065248376804595,23.64893786418872,-15.668819498384961,-0.1193724179679857,-4.1000000000000005,33.49720824576656,-0.36353888016835445,-0.6574576367976056,-0.6921913927357126,24.51575623306972,-10.213625,16.832195845246368,0,0,-1.1005354097247966,-10.308218550097877,-4.110696994813621,11.473081613736662,-1.105914546875,-7.3859771891538,-4.1069814869833055,43.97445172488109,-6.105976357238115,-5.576921403735824,-1.2697133082044563,42.988833560259174,-10.213625,-51.05756881300814,-4.1000000000000005,21.654360213504926,-1.1213156814614973,-54.04076949099257,0,0,-1.130171877838889,-5.105111394951637,-3.8089565239467826,15.426824604081695,-0.26902675828038625,-5.28888939180244,0,0,-102.20432768733879,-4.847022390728054,-4.1000000000000005,6.254769226742208,-1.1060805916376932,-5.1012504711728175,0,0,-28.640042056193572,27.20280351453646,-3.3130855637913523,12.324370903376215,-0.22134822513656474,-0.1,-4.0277551117194355,30.043520061805424,-5.479691790059936,-0.09900730072471874,-3.9301560227338634,24.990414951123313,-10.213625,-0.2611171714813107,-1.7932429123523341,17.336621877495737,-1.0537479649770645,-0.17996509210358955,-4.100205663364363,37.50546381512892,-6.1000000000000005,-0.1,-3.8302478582601234,40.35624395493106,-4.727173880136899,26.87397668460409,0,0,-1.7852118458177793,-0.15959147424049208,-0.5399373886543742,0,-6.578607946484148,-4.928013759077361,-3.058830145787386,40.82306125844232,-4.546394472169898,-4.348637855795302,-3.7876962069614253,15.112445107366227,-1.1058322349774068,-5.1000000000000005,-3.9898040833778823,39.1714967081363,-10.213625,-5.1000000000000005,-0.4356662380272056,13.582001408066368,-10.213625,-46.31402661230282,-4.053910389400133,38.02475530334229,2.3298116106292817,0,0,0,-10.213625,-5.100320359827065,0,0,0,0,0,0,-0.9242481338284328,31.69451886105143,-4.418422797308981,0.8643730247303236,-7.528059922965859,-1.1066426927561763,-4.117227828125,25.18765872096824,-1.033943639212542,-0.36007900431427653,-0.5500244302498288,19.060544452607985,-0.8183722142373832,-0.165923153647181,-3.847275077604385,44.14161378681123,-6.120526017235711,0,0,29.513382063636467,8.336105601205592,0,0,0,6.866927387779845,0,0,0,0,0,0,0,-10.213625,-4.400055606719908,-0.4504207370155193,15.477575115645003,-0.003504201262093609,-5.211930646908082,-3.437207619917134,7.638414088359888,-0.29228107578097423,-51.21183582348104,-3.218072548940647,7.414830362763596,-10.213625,-51.16500747783666,0,0,22.366099609394382,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,3.773033966182271,0,0,0,35.396693539406634,45.3508311271755,53.02559396692305,-7.68580425724276,32.72242397275256,45.42076849817648,54.24519230965597,-10.986497009822044,32.16630068236715,31.05734441819321,47.91294574974714,-10.334490910510741,34.381020863985235,40.718842551006496,50.472635902182006,-10.912211812420876,30.489066942186895,37.84544416811449,22.151847882493282,-13.064579343834705,35.63327548286005,41.31885699779494,40.42203265552095,-10.500343768080533,17.04498816017194,28.463481472267002,51.02264437850723,-11.152320348725965,22.866759350194933,25.588531514814665,50.392520439688305,-11.156359498041938,35.483300294205705,-6.9163736051480855,51.841193881415215,-5.783627285722261,35.16952947192024,-6.066740658509328,52.403448132855665,-4.210463327847639,34.04020935215308,-7.824013230019061,50.18069815786994,-10.915969305159201,25.700530061717284,-1.9431380869424957,52.18616973284222,-8.776160959388356,29.835796008361566,-13.88531906376784,53.83576486163797,-9.636201357373393,27.514523610225226,-8.556379455337913,51.04935142864002,-9.530957598623448,32.656652843719,-12.279694355294945,51.689929267474156,-17.23239721169344,16.93420141997661,-9.269807479822607,51.07808785946331,-5.625582183173328,27.58803708199953,37.95355907426622,45.9896824424832,-13.3026429962856,21.325244732203352,35.596453796016824,54.32913540668855,-12.261118413173056,28.393769907052903,33.58390875798503,54.43496839206916,-10.129394318092803,18.008469077213,32.92638505651749,48.28780836400275,-10.941122047972833,23.921961830493792,39.38588123344543,50.661973990331276,-8.420481364645651,16.429762938208462,29.381914955324447,50.057807637955975,-8.133569248387646,-14.093601143415626,28.664537640905625,50.69630831029756,-10.455316514261671,15.355330849336642,19.438076263172007,43.234580350442045,-11.926017772376554,26.303188895895993,-13.603299450912527,52.588712763229985,-14.573069940574985,32.8712875745349,-13.198836506204717,51.19512599109096,-11.573009107128899,24.54493843427072,-13.171172318918606,35.5813177016541,-12.222808927885978,7.96485618934606,-10.134712711129056,49.89869696057353,-6.98355783789019,26.385288958584855,-19.86842741616391,47.25655849598308,-11.97185239261359,19.449180562081352,-18.490984526678698,48.91296170403106,-5.146104689199691,25.54152557277632,-11.507818631844922,51.46044142954597,-6.943075144632855,7.923204893576116,0,53.698972407485236,-1.1164943937481162,26.137939090461224,40.468615775876984,55.221543844181724,-18.548604807054236,-1.1127072740887676,36.55966561590422,41.51794944878929,-15.923316251075226,30.612431699689562,33.870152582770565,51.81156530463071,-16.18902990177787,20.36310760481863,23.13386278018411,49.96270587895489,-16.135793452392573,35.796560724620434,32.68057663603062,49.52335457153544,-16.286290587242014,36.33237164456729,26.446196904108685,49.92054790619872,-14.445379738490805,2.017047881949787,25.381246237009165,21.142352592683594,-17.075754467027256,9.469930262434714,16.573624747404946,52.20482746355419,-10.163879956420267,33.43733340245478,-14.12186234496731,51.19301112597992,-12.360403809483266,29.06752921109948,-10.408474495865324,56.68642725628015,-17.78241639227393,23.211275781368492,-15.07313323291871,54.07044633564108,-17.67855809307431,14.064548446321117,-17.91205309173765,50.899953356187005,-14.244283289107738,7.752135245633349,-17.873911270466373,47.43577344348411,-15.829950198002278,18.545887232668278,-35.266847952011695,48.41570177873762,-16.011000404780653,19.217245601109177,-18.945299425774913,57.340509434794164,-15.122511905057943,5.436185296766015,-13.135928762398123,52.05562764414362,-10.422500045207649,5.4029143385022,30.301851551492135,31.469143386762667,-16.904554573411772,21.555782335542684,27.787088245712837,30.99807631668702,-16.16124423222422,14.696847048364955,13.4084547027835,19.875204969083036,-14.43805867401888,10.745083863702888,29.86523721135767,49.6562576733266,-11.7946663953891,9.740516143146335,26.310702648056207,45.76290386135211,-14.346314530223838,14.74914874372137,37.126792309857876,58.75342150767597,-16.22657502600511,17.748757882249365,17.95977439471559,52.942098116315364,-9.696806353022001,-20.036886800921472,11.684021125324984,53.08954573089617,-2.9756261197747724,14.598977445614139,-17.724954747668946,43.62425879219172,-19.45724877419876,9.473557413871848,-16.349133596983958,53.69164989306449,-21.464355624672507,9.801154046601727,-20.275828598370726,48.51925712774654,-18.51967445536997,8.528844403837637,-10.438820678842447,51.19379439407396,-4.3092233565688325,11.466198938895277,-43.92627773407196,53.84844377159714,-15.919613899840364,2.41630252437897,-49.399189778518355,52.962660466218246,0,-4.877335420772149,-5.110742715294833,53.14090818048386,0,-0.1275366666064459,-13.875703083959191,53.25713654288736,-4.111564464356642,-2.966575416140961,46.402876941805516,37.300523965645155,-5.32057156665185,-12.436328631894588,34.016785996900374,52.388882797408655,-4.414391176090181,-18.486598886748567,12.114141081048293,51.28496461855995,-9.284281838290637,-53.627349986348726,44.87040596962051,10.268132255970727,-0.6081229203024116,-2.9068745380523304,44.290184913025016,25.84287557075613,-3.564980559159558,-1.1791177458693831,44.544879947123604,14.18600665530463,-2.5175779604867157,-3.9193886054286233,40.1626423642363,13.899469482260987,-2.4913904710775037,1.9953209449463258,42.04225517040946,5.556786274268151,-0.632047595032659,-10.490225825286362,-5.759111306382856,49.22231107304758,-14.396838485514891,-1.8472663571593135,-4.397616202027912,51.07020149858858,-2.446660314960387,-59.56616624238635,-8.739326958127844,58.92289433771865,-1.719092507674089,-2.307247048154378,-0.5101135774796098,48.089358705777954,-1.0449317627376666,-10.947946817706871,-8.8714283468594,49.3916674943477,-3.176899928481654,-8.21230717163887,-5.146508824978086,58.70109040360053,-2.4563464744414714,-0.0004084408848989973,-8.757886194648929,39.41049376082649,0,-1.1073468523401713,-2.7345264573178087,28.98707154929533,0,-9.073707317914343,35.969542202257145,51.061138481767486,-5.749930903979134,-5.564533878636894,-1.2840430313019995,53.572630796481036,-4.778007328305631,-12.355928103253586,0.3761844594951187,49.05536127033012,0,-1.116163527143935,-5.1909081057649376,50.563465067736594,-0.9780148177452261,-14.30257375779287,19.412802537926463,5.386718378977696,-5.817712019489898,-1.5899886916232422,-0.8495936798360695,54.65494822769106,0,-1.0511878103541048,-0.729254961927532,46.654864714602574,-5.105654983587545,-4.288725127189984,-1.8094989029214064,28.09662413971345,0,-1.1046125,-5.819998570576056,48.13317639748917,0,-24.843415041343498,-10.134276731344663,53.350094578713865,-0.7411317870082272,-1.118689495924437,-4.790857136152975,46.107113664637964,0,-10.213625,-5.101251287250101,25.813120011416846,0,1.3361269353593042,-3.9237643222507232,48.062001402606924,0,-6.480098523079132,-5.160540772197869,23.9512882681554,0,-0.3087983370519184,-4.986375093754768,9.999349024424799,0,-1.1488664820160208,-5.1916980560657,10.458650548237518,0,-3.580803385549763,17.882579311642118,56.39810167311893,-14.913830150594567,1.9250999537517144,40.03309331853435,12.995059705943186,-2.248378825829614,-5.439938770510744,36.34013438102014,9.049045219193419,-5.274189481688422,3.989303233234508,34.6667548575229,1.6061271269229438,-5.1000000000000005,-12.311649336406523,36.1980186227952,0,-3.3166607978567013,-5.917624166022355,35.220797726344294,0,-2.4223629997518743,-2.4516182185339592,3.435197557132248,42.01992659940703,0,-6.1000000000000005,34.50509731908643,0,0,-4.15793173944007,-4.7097468247894465,58.613318269180816,-4.34047355613266,-15.530169712300623,-5.567931552794517,48.917570505853746,0,1.1048316055205307,-5.54384040760868,49.32837835461621,0,-1.535506623338645,-4.762180585795122,47.846216882876064,0,1.0787088070984219,-6.637999946996658,46.59219722506773,0,-1.9340272538177399,-7.483487176585215,53.31589167033476,-1.1613842366673446,-7.84063707416267,-2.461351619706796,49.92898023322482,0,-1.4948216195317654,-5.1000000000000005,5.47164369946626,0,-6.681753266114439,1.1323929701168733,49.00611080633926,-6.477235310873769,-3.350491819629,-1.3037403738809525,50.351087435447,0,-10.31943760114687,-0.7758874324116964,49.61347814177011,0,-0.804999401322748,-2.3244582622559906,34.284995868679616,0,-8.22136111694658,2.3521648275934366,51.32244317753653,0,-10.213625,-1.6237278333923593,35.231259170579094,0,-0.5724656280347347,-0.7057780859576693,46.13368861746085,-5.1068625,-6.1000000000000005,-0.5755106565821346,54.23629337866645,0,-2.978310288759207,-6.245125692075639,47.5869092670365,-4.95827149023096,-6.649890932819227,-5.1000000000000005,25.890176953498063,-1.3370332598639985,-1.133224963759586,-5.1000000000000005,36.85881472663245,0,-1.1688826945212456,-5.157192272503139,5.0359079316856254,0,-1.752558014058074,-4.743583262235023,32.12882514129097,0,-1.7232575941034742,-5.13663772995433,10.507152927569958,0,0,0,0,0,-1.1115734723002613,-10.214875520156339,19.304683985557936,0,25.72319614991087,40.648200761667155,-2.74460709675281,-9.307190905854151,25.084271555156764,47.05914230559677,-5.164590066013715,-11.308167896438999,15.54525938194889,46.5738751547209,0.4840669600316417,-9.804594609234744,9.346005820058881,47.439700406057305,-6.275583937732752,-5.839403689958225,20.294671066641964,35.17989231667012,-13.693573254306534,-10.068691869147038,13.099637517797294,44.651989210134595,-13.815630891924874,-10.797480840111223,9.552211775770976,44.39145018947108,-2.3897121907860517,-9.11861322042725,-4.460237530011625,36.11986909542095,-2.2788245552970205,-6.300806681680671,-11.751191939926953,-7.985423180873366,-1.7001367991070915,-9.479512714000682,-40.16879638270731,-9.302137865007875,-0.956704589327435,-15.741714727134442,-44.448346619968405,-5.441267780916631,-3.3132301006349416,-6.364396862594807,-13.016839127043822,-4.102116686072337,-1.6544895870356986,-9.681081544552727,-17.39017345466324,-17.52203385723086,-1.9504353589350711,-13.707598496485348,-9.801002198788797,-9.259622444946825,-2.8836893175749383,-9.254058034723387,-11.958799127419212,-11.231455596727345,-0.7935994671784478,-11.455814046286651,-15.387445178937197,-12.584865854051577,-0.19957259499024277,-15.637120462151344,20.1599860435287,38.29051660921428,0.22452983479777938,-7.568769746733847,-15.10526695494688,-6.048507374618534,5.6401252732722265,-13.913891346039078,-5.627066435007286,-4.68177322754938,0.37459665556490657,-8.656192002877075,-11.933481766331386,-11.310548335366992,0.24600627971463238,-10.73647754527076,9.724533562736852,2.25896231544663,-1.7747651052625053,-11.304019131302898,-13.49296275937405,-11.704343610109511,-11.985535975915667,-7.92768608115951,-16.65321737362412,-4.765966556183706,-9.413467541035013,-9.469362468829907,-12.185267733997383,-11.586287533697924,-10.899897198597756,-9.35260963109171,-56.077562567773356,-31.20318895593359,-1.502508407842627,-22.852672488751196,-15.550488732933026,-52.42516607793277,0.4670293243626158,-14.853453168626828,-13.205630047429997,-10.770294268510622,1.346533573660901,-29.218369735090363,-8.298079284192909,-9.839715385570695,-2.0547731861129637,-7.320294250010173,-13.947970482066362,-16.697927424240902,-37.37377158253203,-8.287731026214878,-15.421161504943894,-20.98953648035753,-31.34814581913519,-10.757262610791708,-10.625238714674541,-13.888784283114461,-11.371808470387997,-6.577747947196962,-4.07138796125462,-5.070817931614922,5.299479563702941,-4.323814550012735,24.91000223540465,28.23575147978322,-3.3391553958211877,-12.617466699705611,8.816992533231918,21.8755994064389,3.6777797195055175,-13.165119898462805,-5.200181514762726,11.580695104241666,-1.8036893039153843,-12.707913600255726,-4.908963938983426,12.898705961370093,-10.693192233255026,-11.892521874050882,25.17633910718362,6.935724879419901,2.3058976918457312,-14.753638219836699,-13.53167258972374,32.7723259123909,-3.797693364285136,-12.153079375084776,14.117728545452232,0.8220375650363042,-12.358467404218388,-13.964654404763136,-3.49530772336681,3.3426027241297622,-6.967986180714827,-12.627023896066758,-14.985279843593588,-14.981010358985923,-3.5497801069551,-26.321532261791962,-18.754750315620527,-15.488879504526057,-16.431812766694506,-20.954645781296577,-56.323395475413065,-17.04114038507413,1.1781825465178992,-15.513458599718529,-9.658618106798938,-8.966198167104174,5.240260260034162,-16.481689631344064,-17.15321646090111,-26.917691719768126,-22.334732903226985,-12.955823264549096,-13.825518141415035,-14.751944580815467,-1.0983205872279111,-50.16408504233219,-7.668574738957821,-9.434459923099707,-3.5241598501164235,-35.203849854426295,-53.20435415692149,-13.34217296884038,-9.304894522498058,-17.328827373997218,6.408615882819427,28.628890273960465,-4.17050363865721,-9.492141585500617,-23.357988826302734,-10.46756962756052,-1.9423086586709006,-22.4179640596636,-32.56700928497777,-5.172851345968256,-1.582251539716367,-11.809874404407376,-4.479985451133641,-11.42252753670376,-23.23863108439042,-13.895854728854566,3.845362086097423,6.370223591390968,-6.342012716901605,-15.866865604732665,-13.13242134726313,-9.313406617051639,-9.574048021204172,-9.294748375505522,-7.514843808962625,-5.0193567036448625,-13.754825331069624,-15.671355813637835,-11.605643948380829,-10.505278673173294,-12.433294969404388,-9.944286582285537,-13.686741984540653,-15.472353014191212,5.264613481772446,-28.446226754213004,-15.805373364813178,-18.336384897877245,-32.78131466095981,-15.513511263445565,-11.185265923892322,-8.557070061909823,-2.520901767550147,-9.226909422910751,-6.960356213029776,-9.767875454689957,-6.67732961925371,-8.843433502729063,-10.214931546907401,-7.71039218519412,-14.873272077203293,-6.315971104571774,-51.38965832039449,-5.107099402389415,-6.539383897228866,-5.563273131260496,-9.884926612101875,-9.5928401733601,-14.737358612456758,-7.960702131529336,-60.01105519871935,-32.69156562973707,-32.36883326089604,-25.96460126658311,4.406482366920909,44.93811973794739,-1.7287380463984048,-6.741240035269776,-3.3069968121997353,43.72896234310225,-1.8629436082002642,-6.1299465741439,0.4727747007654126,40.06839932787827,0.00043934741474345175,-5.106940588911746,-8.71353216790123,38.74167502092974,-0.5022537779272384,-1.5778132990306297,-0.38675628664865597,40.943489882931985,0.5458696603590781,0,-6.81553049897477,38.27241967235579,0,0,-1.111188134902706,45.31889270658369,0,0,-1.1054884048902227,44.041766113082964,-4.106875550151032,-2.488040899619718,-102.39380043991073,-6.865117412815803,0.6495650678956073,-7.393115959963132,-10.213625,-3.1192508527668257,1.4020473894708603,-4.038692019512186,-103.02839578607559,-7.308853368596344,-5.074505062172588,-6.984342341438039,-1.1053346584653914,-4.718860354689168,-1.255814248802082,-1.1860307792649583,-10.213625,-5.1000000000000005,-5.324047810364665,-2.6069596079804835,-1.1052705148869586,-4.231466722351752,-2.7337423860100807,-0.5014522066877029,-10.213625,-5.1000000000000005,-3.195480765676805,-7.42362808934795,-1.105944311144627,-5.101249738253423,-4.1012375,0,-2.8250504923911617,37.715105103394066,0,-5.70245508676405,-11.253513936951729,-0.969534339722216,-3.3118229151303655,-5.112607560746303,1.0054345752816733,7.780417212966738,-3.5719610469326324,-5.721364902198145,-6.10588323791091,-0.6202719675690198,-3.6596059000084207,-1.6312837030356562,-8.850272684310228,18.377119762522128,0,0,-10.213625,-2.65495083220195,-4.0007077157517426,-3.448870226258471,-0.8004127017530535,-2.343974763680769,-4.1009970661476824,-0.5322531904094525,-6.10596402712477,-0.1757419304693172,0.3201595640981649,0,-10.213625,-5.1012375,1.4212474819056506,-13.120183101660867,-6.1012502067725976,-5.571959879356447,0.14226742946633741,0,-2.7822349223378273,-51.62139133196892,1.6306917226016222,0,-1.11126611350657,-5.072686917805204,2.4173615408225575,0,-11.21249116444307,-28.162701542996217,-3.744403151977724,-4.878962417041797,0,0,0,0,-8.116894222970995,-5.1000000000000005,0.05716878234416285,0,-1.10563189478439,-5.1000000000000005,0,0,-6.111620152017102,33.384841000637785,0,-1.367308484942579,-0.040914846491888215,31.293415022186046,-0.3890954010707873,0,0.8919788452574726,17.519306780305882,0,-3.101164952170277,-1.083862303556815,0.702320562094,-3.439740423875325,-0.7441297667092407,-10.213625,25.22984637241707,-1.6418894466469849,0,-1.1161661851576734,3.0464460926403008,-3.249451150738579,-4.199577311799568,-6.909833125503938,8.754777856432627,0,-0.5543213688975727,-18.936897198403226,0.031676174672544535,0,0,-6.192358739123729,-6.555174433690899,-10.02337619731012,-9.704131037219778,-11.202572756846635,-5.1000000000000005,-1.042334038776545,-3.03107452384704,-6.101291110658632,-5.123366528783027,-1.030298092537889,-5.1000000000000005,-1.1115628098293546,-5.107059105371329,0.484477929237503,0,-1.6908907619467617,-4.275362138697926,-26.60964287472183,0,-10.213625,-1.8050618606366982,0,0,-19.303752828125,-5.1000000000000005,-1.736935868479712,-0.327528102446486,0,0,0,0,-0.8974489750827929,28.240561861518806,0,0,-10.213625,-5.121842928586547,-3.9705869940000045,-8.181394171509105,-10.213625,0.6644080684605858,-0.29223432021819423,-1.684946204804736,0,0,0,0,-4.924427789306317,4.698631650900094,0,0,-1.5639466951845562,-1.6316652095885535,-1.52230918104862,-1.3379241510041902,-10.217282815823133,-1.1361427058874163,-3.251391842782775,-2.0673209746398444,-5.908289374477011,0,0,0,-10.213625,-5.1000000000000005,-0.8204226538477213,-5.11725005157799,-11.220844686935429,-10.12894640434407,-0.6227272787669398,-5.106996422122094,-1.1335753555984824,-5.180744731627634,0.331481251914596,0,0,0,0,0,-19.303752828125,-47.53275485059655,1.1361857512788225,0,-1.4953032355179203,-5.1000000000000005,-2.248521822749223,0,-0.8426511973453952,-5.116957461597412,-4.1060680893732,0,-18.11081988099138,-10.214881937796346,-1.2269494154654865,0,33.40642236263917,35.355451342079505,43.31172462494836,-14.229603247188914,29.671580640430584,32.99885279410654,46.25928772859687,-16.055123807140085,21.209295875826204,38.10504106190346,45.746009958986356,-13.83140859110993,31.110310730273703,30.823487739169465,45.73055255349749,-12.500005509217768,31.285235330080308,26.8713343051163,47.63794509050187,-13.72631942625413,9.409007829162054,27.474551956668115,33.830794722434376,-13.29112948609523,37.07644715257753,28.10362735481678,46.623626949826026,-12.630593578013446,24.81103187298408,22.705794057058863,41.065628837562485,-10.802650764053915,26.561777568372214,-12.459432808766344,45.22545437815707,-15.788420399207013,-26.084923721575347,-7.048996130031811,46.844664679453714,-15.68230478399368,29.472433687190865,-11.240201910409928,30.082785690031123,-18.217116824299765,19.28144895252597,-9.87578648235058,46.397564675115234,-7.195921424630702,32.943024560997884,-17.232387761385464,43.1631487663345,-12.86455647504052,33.698418790684585,-9.944029712095935,46.6129916606563,-11.300634206172012,32.53343718390412,-6.649540231306126,48.746823244289516,-7.8833648387554955,6.704961408407533,-9.429691933249854,45.77708547959422,-3.3034150651433434,24.012090920448617,30.58639946664738,39.584791513772586,-21.566841759621028,15.314297105331946,16.962093259147252,27.107484595808362,-21.170492368229016,33.37504905984849,20.57129226727186,33.87265922632896,-18.541155238403135,18.094301273871093,16.21810875103645,47.11145584278173,-24.33015299923919,28.458522068392792,16.69976453056784,14.463458276689437,-20.929165348710782,13.693290982341795,12.176667638577431,36.616521033454866,-20.009344425745383,9.10991607768333,11.233300758192623,43.628440721003386,-16.877232680069618,1.3222663529402632,6.87000236341086,12.250586766665908,-24.98723356282505,17.932565523554942,-14.316984533646835,34.93250916073257,-26.985761611105808,15.484871816834449,-19.383198690354217,37.95566342594934,-25.23961779413744,11.316427726316238,-17.332118294908582,39.691711855548384,-21.62145110747661,8.371293764063974,-23.277503949598135,30.741860430458733,-5.010294104367002,8.865769454372286,-23.329296843343524,18.845727816595442,-28.431833889335213,8.863222444540986,-20.074035021858244,23.762587103093438,-14.65341499158492,10.556122487985954,-16.27115577268494,43.77851464638279,-14.538382604071607,0.02290745010230122,0,44.83555458425578,0,9.416661903058442,21.776065343924483,24.780788994069226,-21.39688396382814,37.10055084250767,31.4342008172846,44.79687238400553,-21.681398090130994,12.556095411093342,19.715468134603917,9.908043460364567,-21.628206425713632,13.96265137762055,16.497588695682595,33.65247442887912,-21.69160474397106,11.268022075496006,10.946538930141234,16.101012171151638,-19.631544927392156,17.295275481388977,21.038169135658283,30.462807718749097,-20.12162541131656,6.206723974207619,31.244508119629543,12.083644944885163,-17.509577697085533,6.454993219768511,14.27746460119436,35.689034030658064,-5.713998738528913,16.511175404105806,-14.062236878157293,44.289025429404376,-22.051183757390554,14.651862401134771,-13.163948765920065,44.47036787459608,-15.239176318493136,11.202404512611398,-19.291474942446445,44.72587030536039,-24.347140968364737,7.821869183554365,-14.478497462468658,22.99413676188668,-14.055964984126295,27.855970305422307,-24.305820383431584,42.44168327200519,-26.94867603853023,33.277618824730354,-11.064733388554957,40.59012143488141,-11.508568050159367,4.717025254051688,-7.5993842911477625,47.602042678464535,-7.6274485215497965,9.469930938269805,-16.296692327718848,44.161523499251466,-16.093779368030418,21.15820945292031,21.089724488380693,46.4688633599168,-30.93500548517349,19.23502102402309,13.787100164764048,45.01453882016677,-15.96832615147597,-7.7639543885807925,14.802654901855995,38.71521943936132,-18.538212273195455,26.89298421953827,2.779905866756688,41.32515010928454,-13.284028933603548,1.975872091234208,10.076618394058796,41.674355385156495,-22.880757815857137,6.1561689132817765,12.084653546654458,41.16450700275632,-10.730864539358317,9.305085108097828,10.550245957123998,41.990690005230945,-6.939642875902993,-4.157544060567358,2.965297463589319,37.1280169219939,-8.273862275548215,17.76903773560302,-18.894641734609625,42.907001994476545,-33.13112742257481,4.768591033427663,-12.41970670750387,38.505255762893356,-4.504473809621866,33.41687793295185,-9.185355135594023,38.964679519203905,-28.47490762356943,-0.12824399859383356,-9.691286566256148,47.99460746541665,-4.861148597819456,15.942721037676375,-16.184403312514288,41.85774411373021,-17.1458502531562,-2.313545757550433,-5.03761127826197,36.088882848454,0,1.3373674969591427,-11.743098100981031,40.77504305697407,-28.959174643016222,6.44754062935343,-19.454145152913743,30.097858902332465,-6.923802151019372,-33.875658974883905,11.732796399555495,46.095345248338404,-5.918646705452483,-7.987056328265469,40.58415657888937,0,0,-3.4430228334673925,42.9383300626683,4.935607945959782,-1.7287996184585235,1.975865505607524,35.70069169089693,0,0,-5.298052470561503,39.65031538601127,0,-3.3883023991090186,-9.208009145002016,40.477231407005235,0,-3.2830577033051855,-6.866859156166468,36.077136157030786,1.8476489265174962,-1.1196339238262467,-0.08118516617443046,3.798185847750622,32.72085331541488,0,-9.582953317003856,-7.302904629030013,45.717331146333834,-1.5684915731906806,-8.610655056417427,-5.1041351104034804,43.53298848473001,0,-0.5265115556603848,-4.677988819305678,41.479690404055276,0,-6.106325688035991,-5.1000000000000005,33.643330525645084,0,1.0401250268850732,-4.564216926907786,43.28756427713171,-0.8270913058041366,-6.258971932565382,-4.22144225157343,28.716404404313987,0,0,0,29.317124305126445,0,1.3549557550983946,0,0,0,-3.370045109672415,12.917518636241933,30.814866418842158,-3.5318655669232104,-1.1,-1.423003640677207,36.39347326507147,-0.6243787029083165,-19.177888397146056,12.884852059478295,0,-1.9318734847892616,0,0,14.281022929553624,-0.49645841483549735,-13.006465051733874,1.186042063984235,37.885121160087564,0,-0.20855447318194376,-0.16554885104565834,45.7800691492738,0,-0.04945893975178084,3.588669974219137,0,0,-1.1111509162539754,-0.1057389063003784,12.81654173363277,0,-1.1,-5.1000000000000005,19.231698842831594,0,-1.391094631041999,-5.890484244563723,17.51039792091097,0,-11.203419845719708,-5.141945817458654,12.681702646341304,0,0,0,48.31264842999682,0,-10.213625,-6.6006357809997525,43.71946701347544,0,-8.74560035978332,-5.1000000000000005,0,0,-0.024725691281428652,-4.642857266322141,0,0,0,0,0,0,-21.789187741017933,4.114339311243367,30.53134675084156,0,-10.213625,38.12085732131378,0,0,-0.969463090993886,27.802257849753556,2.0978825418235227,-0.9946481069242274,-0.5847118840368722,27.191597273776356,4.981546892064024,-5.106987435534034,-0.4544839084745591,29.878647976215447,5.259353517864081,-2.8834431375065694,-4.37961166105678,33.54669216296207,0,0,-3.957609039140732,25.86708231384309,0,-41.72988707511092,-1.03062996909208,-0.1,3.358967627127887,0,0.30570428219965295,-3.303633955398765,46.44744046498658,-1.3738156700869233,-1.1115012877589467,-4.935775646136809,35.32356462659968,0,-10.213625,-5.101701802565137,38.19169502819914,-1.6860775050287835,-3.203793486325134,-2.972059178845406,8.982422202734124,0,-10.213625,-5.1000000000000005,21.5135969828422,0,-1.7305089208906335,-15.225996313198673,50.4503917329317,0,-7.9251291497389875,-5.088391033280205,47.37724998187135,0,-10.213625,-5.100370419798477,2.6484838252086913,0,-10.213625,29.321286146025823,0,0,-1.1109168778275267,-8.49152698876619,28.21064472858263,0,-9.506029859922997,-0.8757161606784272,32.37938100688267,0,-8.632417107933797,-0.6138108135612014,4.767360833577579,0,-10.213625,-0.1,16.080671157920687,0,-4.29399410782965,-0.4686257122246904,3.9568946281621105,0,-10.213625,-0.9033882947877662,5.0267819753313585,0,2.1975875223049,0,0,0,-10.213625,-5.1000000000000005,21.76460925826417,0,-1.591149430873525,-9.981311136136163,13.629527789085849,0,-1.6350772194378551,0,48.20885439578059,0,0,0,0,0,-6.116216533359931,-50.714081071238446,47.66579496992898,0,-10.213625,-5.362999577998105,0,0,-10.213625,-4.844977602392747,4.204698403084752,0,-2.0778255211164915,-10.215962553711257,1.7485215590322927,0,23.67984751310523,40.76514728916459,-7.187731088372188,-23.008327670697632,14.887869520848863,42.34915391555855,-4.83670823592999,-13.980052248530606,15.805718049319598,37.2269014142175,-11.219626357520776,-30.236288699730913,-1.4531759108250988,40.6092445890781,-3.9486319909664767,-9.90126769836492,11.690235810009053,46.0863925725368,-10.011170810586881,-16.969400623042773,23.912433654008517,17.475687018818427,-4.805889640686658,-17.229102186430048,3.6681948957157813,36.63431580549708,-7.453423135182245,-11.464535709467174,-3.2503628999363263,35.230183879496266,-4.1000000000000005,-7.945359801641061,-13.540118281671528,-16.980457182432517,-4.610124871381921,-17.495997961847422,-64.16323114627632,-14.937716369523518,-4.258532924369003,-15.666085646606268,-14.266960646299946,-14.854629112087801,-7.396804075111908,-15.38461910182849,-6.738430522483974,-11.157995704015818,-3.494284425176834,-12.188697993947034,-71.8490904450686,-29.887466794149983,-4.303060046007595,-25.77442732925768,-8.920780810347269,-9.797781918019174,-4.041807781334945,-8.731082832702853,-18.390558281369596,-15.046192792773283,-41.0632657422494,-21.432116516464507,-5.157375,-5.101245087347561,-2.7319133136728304,-4.283914307974128,7.316108168753903,35.78687187726821,-4.5070081886071405,-6.653879322691999,-13.067114585267817,-5.9549651216852775,-11.712388434955674,-16.433856693189725,-10.98192740718409,1.5885418725404068,-15.541501180755912,-6.8168253064325395,-16.26951106418521,-13.11625149196927,-14.963411798133773,-33.8598477002496,3.6552576122188682,10.242160127084624,-9.362030941950389,-17.25518047854725,-11.767986402122222,-9.919957145077717,-26.074690819039994,-14.166991738192195,-57.079174689133126,1.0289039676279415,-8.247113155854176,-7.88706244759683,-15.057244970838354,-11.761417673091207,-14.40372916748952,-16.87178743443214,-30.837778970799576,-37.34609093144471,-12.015212098046247,-49.492262091605085,-54.93947670700189,-20.91479650008148,-12.825362245450977,-16.7081313286102,-14.7584727158328,-15.406508360309424,-11.799057383264937,-11.335439742078758,-8.564847246145206,-9.795797915703648,-9.58355423198422,-7.543716200772385,-8.969799479204115,-10.125114987310585,-7.539924638580356,-11.74152544815022,-10.649984982255969,-14.153580657419202,-10.15208701068142,-11.104967242733029,-6.270197142919397,-5.129926138003904,-4.608153911311465,-7.647252181302592,-0.35813475875144196,-5.111368734944433,0,0,16.05443340942927,40.27187556755934,-10.434671697417246,-14.789848417102936,4.495137147997622,36.04936809422132,-4.426984130442707,-15.30069707294243,29.687239211697907,2.317296904587493,-19.906112346553883,-16.368648084734872,-8.254742854015443,10.90126665813219,-7.007552304588069,-14.063285545121522,5.666177237954461,16.109242096715526,-9.808669853419417,-14.212211221151424,15.169786735602223,0.5348481641062582,-4.1000000000000005,-9.432782845914781,2.061065339524602,-0.7541716581569495,-17.099935451871946,-24.744587455502995,-6.00225163844931,-0.8512524145075993,-6.383495226184112,-5.335609070855034,-19.54812799811538,-20.754242748788023,-9.658895754737296,-41.98815250817836,-8.254708744679773,-14.09829817080881,-41.13215557559116,-16.200985329438396,-61.57426907116785,-17.063871935606716,-15.208768233384777,-14.531275859621541,-10.913124084004677,-17.550950312768517,-7.903019487375062,-43.81585778258434,-13.521003488376794,-16.090451999796038,-17.452779176148066,-13.27292977071371,-6.1855088609056725,-4.5584254697989275,-3.2777817964735734,-5.085048914337376,-7.769132570894482,-8.910693626041635,-41.02281674843665,-9.69299153458346,-3.8448491274949292,-5.101238976825822,-8.032730855671211,-5.85118262034036,3.4875119986978262,28.28755365298871,-0.13803019842068096,-43.85658865070495,-15.233638428965627,-11.943961106905114,-8.001548563743698,-35.70853188804234,-10.120630697684305,-10.130706566726232,-10.762496747688141,-10.77613869339179,-6.24597746837209,-10.61999602579668,-17.696612291219598,-17.201989309429663,0.9575687343984871,21.07052640518483,-14.009702776244648,-17.43908181557644,-13.051935091193325,-13.31809141482955,-13.802258059543599,-16.228625991877703,-6.069748077054763,1.695335461343841,-10.528155115912702,-8.056270857621932,1.0753312476932055,-0.7308849164537535,-7.791243744668646,-4.82773656732027,-12.516028825447387,-12.790858632802276,-7.908336245125399,-10.64163944312019,-7.3361879029041415,-5.452445468736936,-2.843393261658312,-3.4483321566674787,-10.167152614923598,-13.09002489973605,-10.811809410629616,-10.568179145143576,-10.05233656930696,-9.698237567061593,-7.166761857666657,-9.691652033759794,-5.61340009494586,-4.589706380049498,-5.565554418250181,-1.3991178806296114,-5.958464091037933,-5.111371163772976,-5.940434362550338,-4.245109954968883,-1.0311711302593582,-5.102399917547259,-2.9283872265202326,0,-10.74746617154002,-10.21928117534286,-10.654373218548836,-11.67061871223562,-3.18389001583558,39.13192894156073,-0.24852773675997142,-5.112613059400942,-10.213625,36.57570402961476,0,0,-1.1090013862192507,37.063296651480954,0,0,-1.1108467194991902,14.394666136747567,0,0,-4.8019773136279,27.677214702392572,0,0,-1.0428845170428722,19.868422516463337,0,0,-0.5707929239191246,34.65039646209161,0,0,-10.213625,1.0658163459944086,0,0,-117.64877591338616,-51.06862499999624,-40.68874601368624,-24.087720268293744,-6.2566060578581695,-5.1000000000000005,-4.840062223737377,-5.1002176471123954,-1.8076224173897604,-5.100541759606713,-0.6865649309928139,-2.917750896427549,-10.213625,-4.46068548757393,-0.2138293145960738,0,-10.213625,-5.10877433111176,-0.17971372957686002,0,-10.213625,-1.489351989611327,0,0,-10.213625,-4.094762436221771,0,0,-1.2132127626600562,0,0,0,-0.04937530879434515,35.13661622839189,0,0,-10.213625,-0.7624065919596515,-4.155268208586216,-4.608528757985467,-1.5484894356073324,3.2422308101662116,-2.468641177665459,-0.8383709120595491,-2.0298825819168806,-1.8954179783814267,-2.2174600365710013,-2.76193259266304,-5.539510341213756,4.549052784970199,-2.264780748870134,-2.802102575827095,-1.0567854352881978,0,0,0,2.0467464189339846,0,0,0,0,0,0,0,-105.45913612699769,-5.116541014926735,-4.201032609605996,-5.1172369992289255,-10.213625,-13.979959322834665,-5.630641794983742,-4.147213786068754,0,0,0,0,0,0,0,0,-10.213625,-4.8354324322849,-4.903881513631415,-5.106565568146909,0,0,0,0,0,0,0,0,0,0,0,0,-4.510966685658122,31.065444685861706,0,0,-10.213625,9.711396047374157,0,0,-3.8440934162509723,2.375053833330558,-3.2986267760549923,-4.090002751227829,0.46558379939165606,0,0,0,-10.213625,4.2447361671759385,0,0,-10.213625,7.384370291980025,0,0,5.577253155122708,0,0,0,-10.213625,-0.3182595329034147,-1.3142311647231968,0,-1.923100077308674,-5.1000000000000005,-4.1000000000000005,-5.106983109054059,0,0,0,0,-1.385656931146842,-5.123248084001584,0,0,-18.43030221768208,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-0.058894203746277185,0,-10.213625,-5.1000000000000005,-0.416715983832475,0,0,0,0,0,-5.542133474414707,28.17255257451348,0,0,-1.26610366304919,-0.5685935432544196,-0.4172864887785231,-3.728666711982536,-1.4949342752194044,-1.709200787621627,-4.108252874434121,-4.751863955094993,-0.38401675098895033,0,0,0,-8.177256050604846,3.0431849403329516,0,0,-0.974639334039777,-0.43793806900623367,0,0,-10.213625,-0.04874481242926071,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-0.5623732923808646,0,0,0,0,0,-102.20722028043963,-5.1012494888708915,-4.1000000000000005,-0.8329466998819612,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.947818731517327,44.0025667880936,52.71881178019851,37.682295879364545,27.177075546583485,42.84964939248843,48.81288353983491,37.04280587496553,32.12598289914971,41.4730900825127,52.03881819760031,37.02454871977862,18.279502449066687,46.44590705035255,39.50546578422412,36.83900349829421,33.13531316433178,40.88698281199853,52.919861687858486,34.27459135719023,30.623707308433787,41.94272836498453,28.895481897486775,30.537765378631615,-4.2556991651603315,38.68808331738326,51.93413979495751,38.198408651963014,25.695658366378623,44.70031658369032,54.77263312144945,36.905516521090036,22.317189191039564,-4.5962653244855405,50.106422212728795,34.322234384155585,29.21783479332232,-6.0899208213793585,51.22019501303612,25.301679715048003,24.401809454059805,-4.6691232432470215,54.28268207992766,32.619971454489146,27.91910339798905,-4.687138713314455,52.711446709654126,34.10711478890433,23.69717229953998,-6.6474873048692915,44.29824088161341,24.90624178548621,33.62094146894252,-6.882727290946059,51.80019841629411,32.806994060289384,10.951455256884875,-15.05794188487517,51.52677198909197,35.3747874701732,12.283534931080352,-13.084313429721037,51.649195701605464,27.45325108114333,17.488530420139895,38.52432110417074,47.526196945642894,38.13259293045481,25.563977642229503,35.37887849743355,57.6866919494933,40.158735782693846,18.632181121324557,35.70317008341745,49.18897606130451,34.95096304274531,16.643441358201752,31.20973687546122,52.04850412806984,37.4198071561,33.41035270116071,37.8345079898292,54.73113112226556,35.38411107153575,13.814126390538547,34.68123533271634,53.480483778830475,34.3357046467258,41.2944208248393,37.17240936420277,52.87190785252775,38.09247746407643,8.491284437608641,27.746664452785442,53.08883409334709,41.37061020882774,21.457397606489792,-10.850390974075097,47.711703912618155,33.052649953360316,24.22198214879851,-11.549601446542793,46.15823510321026,37.370149313312794,33.175691380397,-15.48294870063711,48.64809627465157,27.542139152328446,17.748663685982837,-14.571118795468353,54.83101114867928,28.08173094166778,23.048125446229655,-19.543764488210346,51.756009849178994,26.640477478826664,-21.436054989158286,-28.407179309354984,47.53609153689693,29.92918981064012,20.193939069411954,-23.190652432655668,50.57759694050443,38.29244716584134,-6.1000000000000005,-11.981292044248601,52.804416638127904,12.634482309334015,30.504040996614435,38.00111300320938,52.61986243765268,32.513429716595994,20.055495238365427,38.75681046450589,53.33114615292412,34.22457576501728,21.45543068191161,30.030112445458595,15.804353456183415,20.579880599192347,19.538262168782758,27.37301991584222,50.894905119723276,35.9131100743122,16.645827871714474,30.227137171568778,24.301464123039132,28.264925598012198,8.500649874236036,26.484371794611686,42.62162274285305,18.84418983912707,18.469753754337322,30.032909109261386,56.862168825431866,22.494139444850546,10.926751069995715,27.32749343461044,25.469985954867756,24.43811051522745,27.906781816707234,-12.48523720944217,37.47945374727213,27.407386800091846,23.254149895738852,-10.97996087535851,54.60514827683162,31.641646822417247,15.57322814161279,-12.779595774101551,13.94668597667677,20.269155415804086,20.277813505071105,-11.493375326288348,35.38985378968969,22.7184477399374,33.57235351750664,-18.330590016966944,50.398219545009134,23.631860597194535,24.181181007985117,-13.096676609442493,45.19621230006754,30.698340666666873,16.73193265361737,-22.558911243228337,51.30062319281219,24.86088389912455,25.87965948609745,-24.650461706572216,49.87431026271014,34.80187934294296,25.816974408530132,23.709901758700106,42.122349806786964,23.678112252138767,11.225704107159233,28.07789533982988,37.01225542749121,31.386009729173196,18.94250748440562,23.982824979009493,51.026426465645145,24.133535441027274,13.546351050552069,17.60534967066578,55.14010076909706,36.17718972993729,-0.07651955371491814,40.99147051269079,42.89735841580193,40.00020744740138,26.767819250885424,24.87353415650618,52.565966403706796,35.29115317640079,17.481491923171067,17.272814541623752,52.33396477285838,20.558619255175227,13.087457285551539,14.162137724753642,48.895014976779834,13.378867436083878,20.426905943791663,-16.525507587015877,47.912584934027436,33.5101746449831,13.49582004872911,-15.418425690269409,54.83637494760113,20.368855640455507,9.524166376181032,-18.50863731245913,50.03015931273783,36.460595824576245,-11.304312873385864,-9.060769249447361,52.467707184719096,9.968802257529099,13.48676836112507,-23.19168366468832,50.527987875923344,32.529669409949136,9.008028844350903,-12.639703782329793,45.626844179847275,5.019658292933155,2.9683455019520624,-14.399560846195023,51.01027460563633,19.269082473391848,8.572790910277424,-11.569198557162364,51.02518914405301,13.262600541652619,26.905138799503703,42.7066187141503,42.26687810026999,16.79984419137396,17.320663953518654,46.74238540737791,49.31463005669547,11.71228939957443,-18.109838054341296,47.75305859386322,25.84493340693046,11.961680135823359,1.3110903013239104,0,53.76748770676294,20.256681565439525,-6.3061431538399795,43.06275174701202,26.30018923159765,27.218602461354024,-5.062989638075346,40.83508893550512,14.211750149843187,6.538858108865229,17.808689019115725,43.38819881022871,13.634205948211408,7.705303839036775,-1.1,39.372554276900225,5.637574873407674,0,-11.674877691206152,-11.07870019668249,52.851815358451326,9.80241241259912,2.2888755581381304,-5.176708036271138,53.70563668288165,5.8137833343166525,2.3321882217667858,-4.8441756141373755,51.79613908731391,3.0410640639810635,-1.1055890800472543,-5.107988533416332,57.89223366518701,0,1.2055747550406186,-4.997318124455533,55.27883797702915,3.7851076455385013,-1.1,-5.1000000000000005,51.90549530264428,0,1.5423240267282365,0,48.17817700382022,0,-4.382581315004764,0,0,10.107627985280406,-1.9393324401371432,31.566461598024258,45.864949660153464,9.040494577963536,1.3273110486683009,-5.481199482761677,52.70307199818408,6.8663908631367185,-3.830779243586748,-0.5022408059916302,51.2153084875384,5.3110335537114395,-59.34323491888692,-1.7927860989426476,53.965065823832944,0,-102.15039413716806,4.927694473601712,54.786209700801706,4.022261432624715,0.23837472140892757,-2.573114657168643,53.930650519459256,3.1874270907259827,-18.106228989154356,-1.1038400203471732,55.65500379650311,8.687590053936619,-5.73757660713061,-0.29918914903889654,43.097625299590746,0,-1.1071297197139334,-51.36885468979997,53.973562301953415,4.361871127563366,-0.7583312777014195,-5.10124320716448,55.79176990408744,0,-2.60275317349897,-2.522529068084786,50.92504387444979,2.9247441003386907,-1.0985523808797448,-9.350488402050912,34.006643157253336,0,-1.1089324915799155,-8.948413023672234,53.214975390025224,0,-0.644380823791094,-10.371928374844064,29.605731275565677,0,-6.106491514692122,-5.191687739976453,37.14380668101404,0,2.2308355418799857,0,0,4.336475828486007,-6.78109734904363,40.62414464671769,25.688857713303406,6.52733523167955,-5.163461537020422,40.81689833472972,5.497570752950885,0,3.384284283900648,33.70649894795452,12.634091637354832,1.732649504391071,-3.1125567278972706,37.616793602897694,0,1.827127384933349,-13.900350378166724,10.309296994956192,33.69139430528574,2.4734270253247583,-10.213625,3.8354449674038307,50.37788412299153,35.199658108849576,-6.704307147902465,3.9584044965296976,0,17.79273680761496,-1.1171392580890283,-0.1,58.55274100148012,0,-5.703513724918509,-7.695134465781913,45.62583420000888,32.49516300097109,-2.7369621038922842,-1.7823251510647462,46.35664921246377,0.6877539395549199,-0.5230004381060213,-5.1000000000000005,50.754366305407935,0.5814024707655835,-3.401207747164624,0,0,13.55034793921668,-8.761867985911664,-8.363932503007454,49.052294750306885,1.046902075083891,-6.60872106329337,-5.117229302189824,49.246595496022266,0,-10.213625,0,0,12.122615080369707,-1.1,-4.901955497859806,11.001974388582958,0,-12.227866250212568,6.298908157334479,37.75044902462139,0,-0.03359448084307126,-1.8802413785173249,48.63958001432198,0,0.6462132534667548,2.48814596604318,48.3567117698702,0.22619772362038693,-0.6213866709769217,-0.17507902773528294,36.73345895920919,0,-62.03984058578468,-0.3279700324218576,50.39425210430244,2.923806581354036,-3.6200249285429456,-1.2147187415306748,35.82591745842864,0,0.2765572739704911,1.2614361325165664,0,0,1.1356152417648433,-1.111592477318784,26.676860399191373,0,-1.1192062700933045,-4.998583653890944,52.684080261367576,2.9366034230074356,-1.1046125,-10.197492805140168,38.11397975149536,0,-1.1103887903424956,-5.106789494652595,29.78141189484429,0,0,0,0,6.440368188736066,-0.3331736434159469,-5.1000000000000005,50.31545228629341,0,-10.213625,-5.1166264915384065,5.582342115602086,0,-1.1163957017217923,-5.1000000000000005,14.885485378620416,0,-1.1162231210527345,-17.95268341797543,31.054745929779724,0,-12.113033474164283,44.867795389462636,1.6250183721427236,32.542100639602026,27.400865124986574,46.663275196061555,-1.4618087921610197,29.53045734357651,20.108537670327177,48.465105741794424,-4.415020388524065,31.4341013479463,16.19400757223721,45.580278615888815,-1.5994065314948112,32.196892042257915,18.1732606520936,27.135178317736592,-6.592386527329375,27.322191457572153,-6.9842122190392395,44.61878140050067,-4.266184929935273,23.467865587391124,14.088532626942055,43.00563474576761,-9.273442627037348,31.35259661133408,5.785093462675741,45.88903438200889,-5.4515538208638015,31.282908158762353,0.7293051855581401,-7.887939777411188,-4.282933887846706,3.9570547316926867,-22.08069643446872,-5.527905777238735,0.29748115037504963,5.39898339138768,2.5887923422664953,-5.409510500492693,-3.841312868794656,11.170931287236565,3.5369991764614532,-4.323899794029107,-0.8410092802254682,4.73969388779608,14.510205804790973,-15.868514306843368,-8.571764470085046,3.57423122753688,6.112315993355663,-12.907638860254142,-4.345371136302649,4.457592656874431,12.769361821654586,-12.068988151504238,-8.003065705282227,5.425337938471255,-33.86214981541295,-8.566819416900703,-10.842804403245196,30.53869617307603,12.842613182089337,39.55920219166062,-0.15149512692798378,20.944253535075294,8.07442971974606,5.713858004449582,1.7339669304007814,14.076718666276191,0.479854514526564,10.225425153551846,-5.716635974812629,6.233554357101501,-1.669379272857741,-1.409486768613038,-4.245184597698606,-2.277094518386471,-15.914440270226262,8.932679029824467,-10.950727327563841,15.963885954308784,-7.506714367170902,0.41364396855872587,-14.785780279609464,2.2638751653811022,5.628651382984676,3.366592368010937,-17.74196593439415,18.33235878080191,-0.47207385020876336,-2.1665215919495338,-10.228375013007048,18.017040297276754,-6.922751238452809,-13.141365235847218,-6.015649457433782,17.388785568200404,-37.165378720493216,-31.12170324865198,-0.7781838005550155,22.760968425026427,-3.5327485131815344,-33.12192333918075,-4.794187926395791,14.423973657445686,-6.094639963309163,-19.164873411812525,-1.9631933751483102,15.533554129778828,-49.971432432418865,-23.609324092133136,-13.467804877473963,28.665746727437764,-4.933176356955754,-16.8975712597988,-3.4029325968422084,10.528938812047377,-0.12781419182524356,-25.92257346188285,-3.0981685812859334,10.896906570512865,-1.0228321210996962,-5.244750543214222,-3.2598424287442693,8.156300471365823,18.962087811192742,37.18708754497568,-14.297766849421155,16.41022323767571,16.595498194839372,25.858221706559043,-5.962578891787467,17.899877565659846,12.257861568504062,5.6004540831248155,2.031543700608421,17.261129705819638,9.022147248244734,4.64075740412012,-0.3248979316708358,14.434166112665466,7.586802215364463,17.779014666368862,6.235852284217049,5.219941178427388,7.93531742778441,8.597433456105982,1.4015313362447572,15.506036906642693,-33.41120249190115,25.793452168088674,3.254401015954843,9.255638714005023,7.063245680336187,1.9751198706363613,-4.48356108825732,12.18422182756119,-5.912615302003396,-16.7525575692828,-8.282721970991583,16.134545830516238,4.334048499868134,-16.892719103634743,-11.313894250298226,15.683124093263848,8.786526652921351,-32.466690805645115,-14.840812720066012,17.065086395631738,9.87027801531374,-20.287436836283565,-3.920309503539415,3.554827231177869,1.49029540086289,-11.15983111606214,-6.976166783036514,10.830759464927961,-0.1653996382938889,-5.1000000000000005,0.4513455750253913,-1.4239048507861949,12.985902941832414,-41.79237568264335,-21.207582840673794,5.669867893122439,0.05711118438119852,-5.106935887801034,-3.171791002613989,14.564231383132789,18.161349612339144,32.636583684948484,-5.3450370164382734,12.826574735090794,-30.065714654053323,-2.3936463084390747,-5.283467018044253,6.438197049532611,3.1507894693916625,3.3890033978473544,-3.178296170930163,19.553953391589612,-21.53201631961997,-1.6491177897045541,-14.104395393864005,15.342490080395397,9.667742887306105,2.9971455336100465,-7.255747389687887,18.502125525354963,1.1085325047156935,-0.6021797582399822,-14.457782924961053,11.71739893397062,26.557599590417688,4.187314924319931,-36.69942958411039,17.28187220051118,-7.008806996112472,-2.442055904768745,-15.663547711843583,16.668758479383882,1.2761141551236586,-25.990321699892828,2.8320782588734366,26.04072958776044,-6.175386192707914,-26.309515455813614,-0.1603982916204333,20.024757262760957,-3.212503124428581,-15.553759847364384,-3.5220124416776435,23.85066322450558,-5.153532018131848,-17.55814694708749,-4.667163987551842,29.003653741525202,-7.072872565424348,-7.400845010294477,-11.24403183521575,17.487011631749738,-5.6316809436660495,-4.993169702912713,0.5351433442826291,15.50181183766502,-2.332012015654949,-13.21129174919868,-11.701986558918064,1.8185830570981603,-3.5511746164284035,-16.80140444727229,-10.317581886935788,13.425963188957896,-17.228592350949917,44.66639448862341,-3.077044781000469,12.001387163858784,-1.4849491730771964,44.63845244276112,-0.4245394918417427,0,1.4729566306911828,46.090286400364306,-0.8078782627653509,2.578120719867804,0,0,-0.5885034808559502,18.12247603286939,-5.214455208858616,45.201304278553884,-3.892372886087453,3.401458625129786,1.1555915403923123,41.42079270285355,-1.7107489106644023,2.9887004264706984,2.276379731013758,4.416174707483278,0,17.459479412386727,-3.9803974968160416,43.06828297683296,0,0,2.556308466257091,-8.466407713946838,-2.3411453762006333,20.47338463765501,-5.3108558394046845,-3.9962329341688068,-2.684468438241968,19.217318386694725,-1.1,-5.101249757175976,-3.6970137475710416,12.57696159222304,-1.1,-5.10124983596066,-0.5725150513386993,12.740136173935436,1.586892255239249,-7.183801519628542,-3.7986994430616843,17.003033758353336,-0.5774380488576898,-5.101250319038635,-1.5050457409305456,9.470091299513307,-1.1068625,-4.914647011053958,-3.7520207373711707,13.47813079294622,3.780523442565036,0,0,0,-4.1658911248243795,36.73372740470414,-4.106987937466945,0,0.04730660793963026,-0.0723003855667395,-4.1000000000000005,2.7870478921120445,0.5456465727981687,-1.2155213342083053,-2.244431038261706,18.485702523356775,-1.122920926612558,-0.6574402301526523,-4.1000000000000005,13.599258526857952,0,0,0,19.170837175815656,-9.980147790507539,-0.1117794190537357,-0.3553036181370125,11.829190202650075,-10.213625,-0.10126895047318779,-4.1068625,11.08931406685562,-6.100808757716303,-0.8551009254757524,-4.1000000000000005,4.51453782658974,-9.284520918957957,-5.1000000000000005,-2.097138823899783,9.03935775253741,-1.1056218218198377,-9.722050564038481,-3.763922264783622,12.154634152298541,-7.111741986422767,-5.109262047728922,-4.1000000000000005,7.326257721632233,-8.323843006843262,-5.1000000000000005,0.44761504440919997,0,-0.9986076900853803,-4.987718346757196,-3.137270263313729,6.389281577879026,-0.1516550051236717,-5.107740071670592,-1.1770237485157728,5.375965581068563,-10.213625,-4.460686739819742,-1.5171957181050062,5.065335992983359,3.2058050844590307,0,0,0,-5.513756141285657,34.09965004863088,-4.106863476369715,10.689956972835793,-0.740715865639465,-0.1,-3.784669060559917,26.244042502747444,-0.362892448895844,-0.1504895490602107,-3.428178338859125,14.855482968075961,-6.0936274191381345,-0.5161359290589599,-0.6524526763344292,23.461763375684733,4.074882744340133,1.5289529852289516,-3.9384231122516065,18.246746267607143,-10.213625,-0.1,-4.1000000000000005,12.127216627484353,-6.1000000000000005,8.865358890459078,0,0,-1.0923992898827324,0.5698437560626752,0,0,-14.836083434916624,-4.895565092325322,-1.7248153486841238,19.44418034225064,-10.213625,-5.1000000000000005,-3.9396168660417303,9.6039129467611,-1.1,-5.101253956611917,-3.763882645153785,12.182021158185245,-6.1000000000000005,-4.783332702865512,0,0,-1.120728392276337,-5.1012375,-3.323197018240545,7.419325358845155,-1.1050156842902545,-5.100002191551528,0,0,0,0,0,0,0.9979652884104664,0,0,0,-1.092573594342725,2.3402429019426103,-4.101243632570202,20.40559042258525,-1.1204436440883643,-0.6590991213072499,-3.684159176409886,14.138494247115732,-0.44235538242804995,-0.11260101836318429,-4.106983538895323,27.552218262159982,-0.9291792806154539,-8.105361612113395,-4.122086047206159,10.388123722635708,-3.281858322434287,-0.07957697694303768,-3.5831078845613074,4.621350703801155,-5.410266460573116,-0.9361972668661823,0,0,-10.213625,-0.124814546875,-2.6597790052734114,3.343364686824577,-1.100942721744232,-0.2228437525841594,0,0,-6.1048165031594115,-49.56017801233165,-3.6548298166712883,9.789931253178914,-0.34768086299559303,-5.2133805143266665,0.11411189027817983,0,-2.1005028911044326,-5.101250164289762,-3.4140873372057885,1.080195905676598,1.8707621510745698,0,0,0,1.3248069229371575,0,0,0,3.0135859654025303,0,0,0,0,0,0,0,-1.1357163572439288,-10.2149026809019,-3.710466668810279,0,33.34075247661545,42.65768366429327,27.197608536511485,28.306129583655903,20.386794012952,35.49485657722183,41.0652146501139,26.277228704424655,20.768524978974625,35.02107214053889,34.0793522810321,29.036866467992137,26.719665593030886,43.759042934859195,23.36013552827953,32.08043636384251,34.50327216794671,36.46985442955946,24.168742021350024,24.37134643918724,30.12407241789227,19.352918171782555,29.493440524535572,22.262278201406488,20.41236465545775,41.49238945921178,18.4778705397081,24.447130955649,17.77278102231312,23.284781191545083,37.815727362989755,23.65361125335553,35.503757253697586,-9.546679211820866,46.29341955904953,34.470176054788546,21.85097530996076,-9.408548308281846,33.67020067580519,23.204281782638976,25.64107092969965,-6.22584164112581,41.19629797976935,20.454080396749674,23.891535882171176,-11.843442020535477,41.10471769069755,17.852741663266407,9.53429997993409,-19.134648225238134,46.6502879981657,19.93856711196528,15.448785177296031,-12.01539821420122,29.59678015670084,10.733508774111598,11.534607910776124,-25.42532096460414,34.33681269089795,30.637458816829767,2.907737759077411,-22.301852809094633,29.79902921484957,4.5102982014298485,17.048991416311047,23.998945888989727,4.3950270104909315,23.643499376581506,-6.447160334627367,4.779353229617616,2.379769706699135,5.980735394804203,-6.298694573585151,6.216758126125032,3.9157232531372594,3.578845547997902,-29.287455617922554,3.4275003800177757,1.9480407404672089,22.510179374883126,-1.58979269069442,10.845022261433638,3.659914609635436,21.31352771706169,3.613348100925199,1.7692421173236066,3.74109130265337,3.898162454108486,-1.9643583975985575,8.103166892713459,6.104808246763906,10.259236601962176,18.569580336787112,6.614192978132603,8.525217294377835,8.951097562916608,18.92729730972738,-16.12422696428552,3.84521820171394,6.674803148883605,-1.8079314961541124,-40.1419327103791,1.8047708569364496,19.61006590560094,0.7207659589310929,-39.37838287126722,5.1380703993933,3.6475340916152637,3.066479196011062,-32.37978755852449,5.099831254510828,23.828341867808916,23.739495159346944,-26.664825227980472,2.058153478101159,7.517980453327463,5.774118986058875,-44.55859656663073,3.0488206274031016,2.388728644793544,0.2698830946729971,-45.68028180080856,6.381452824498715,-0.1373861953343803,-0.8954011475733731,-9.71909928000435,1.5874887126992385,8.993493150584271,-19.561060527844095,19.255467819834106,38.203456445573686,20.486982015461745,20.6480385834971,15.786825456324552,32.954849802417726,14.481020669971937,23.48251504163886,16.937057183796163,3.5340096740700173,19.159795200407018,7.513918251799062,6.880346666301573,5.185004174456544,18.3600882983669,29.856882948543582,21.578176324705886,7.968744542162963,25.454203646706187,-29.848965138214243,19.654019398411126,6.606461575307627,9.022246352456397,-11.930403801062742,5.212662551157147,4.271937705079596,11.901603241135671,3.957141633556202,4.899416241436851,3.347431491552001,11.386207596865097,28.796519569875816,-18.762761804701707,33.363811335600644,28.70098379938787,15.738395196248828,-16.124931327928564,41.11871810427099,10.588668857981594,-11.56422112716011,-33.98696164802425,4.166271388328978,2.969401395877643,-0.3894780455822188,-47.296407682431415,5.1238933718727,4.2125148696396915,-2.852428938596976,-34.369128398186874,7.006658050587171,9.272697840177932,16.972599492921823,-29.96828286851906,6.894776676718593,9.21280162861715,1.1218310653156927,-35.24283231023069,5.116644518346207,10.813709676587932,-1.796953188049968,-5.035348480781262,4.832758612924736,0,4.397150693850801,39.35403413025943,-0.7446019178712605,11.70074287633748,-27.75493062823464,4.801198262121592,1.6043229316475047,24.145683056945057,-22.087221437670625,1.6957291460317372,5.459531050493135,1.6476625937658687,0.7794756298137211,2.7779817184521733,-0.1598778058720276,5.985347688385346,18.437858185842884,3.8534816630609425,0.46377312070175936,6.944996293154817,22.916520156810094,3.069743608782899,6.483346799273433,9.715596745181893,-27.558800835987935,8.390215494246394,1.9535523978135578,16.850473416338406,-2.6196217739198264,-0.36034945827794523,-3.5890685454192477,19.846394633288554,2.688860947454479,-23.607446027212607,-6.002276696226154,11.934035601779867,-25.727216183263746,-26.422783898905777,-0.9204341954486852,7.784188748605629,-22.229515765382178,-42.76557130873245,2.2208024929781036,-3.0588201118901157,18.830659297202256,-51.1585142165259,1.1863435479825155,7.793294058723482,-9.617260629419807,-13.210955600981706,3.079550229687972,12.84154073119123,-4.290215993551754,-9.690044769209324,0.5119961481321746,2.5645176063281125,0.4680477658292881,-9.690000000000001,2.579086870493874,6.970614044619424,-1.9539927849006213,-28.20831402539843,-4.683193076981997,6.99431205491044,-2.9182738278150886,9.764856880929754,44.2854087959923,13.981983569689831,-3.8864087727697316,3.72741770632739,41.52807294636922,5.379601265340984,-0.8164308150055621,3.529110870033032,42.882627299683655,4.256133943490813,-18.005632481323715,43.79497151880768,0,0,24.07281168967004,29.097180028131135,6.151840473590253,23.884807081874076,-5.926511964229317,31.90218936443648,4.839225815999971,2.649734066917199,-10.213625,4.451067147269116,36.77683508987912,2.002078172881261,-20.47828110108117,19.531166026888787,0,0,-3.143851922330838,-8.852744748366094,45.90722906654203,2.6243233836787825,-10.213625,-12.270760557264554,43.549383897416234,1.080474195303253,-0.08820322694943683,-7.422310995662528,43.30897153717759,10.101413402674025,-3.901827408403715,-0.6231787022737095,22.284119972419013,0,0,0,38.192920078309555,0.4329048652791956,-1.2592110458469172,-4.977397630877007,31.135656785107393,0,-1.1106033152674741,-5.1012375,39.57021934444899,1.9843959757820828,-1.1170340948088047,-4.941720855857601,3.863059742108098,0,-69.42161352714348,35.50703255942442,-9.299071992534401,-2.4513114532800837,-0.5207545888808572,-1.891232944540752,-0.6538906040530421,16.670569507127045,0.19692739906027001,-0.20157540182356748,4.7983361540745255,0,-4.968536331553723,-1.175248273977208,5.136386355553529,0,-0.7423241638296032,16.313491340565314,0.44814672781890563,0,-60.397544694333526,-0.5849422942933701,3.27655414554553,0.4390390200733983,-1.8447650270841875,2.0676717281588806,0,-0.10614109667836674,-6.1000000000000005,-0.9170104568773714,1.6043204872638062,0,-4.002775151342868,-8.952568467008463,-9.783500108668441,29.63930698758,-5.15648664846012,-5.371805588162934,0.8582143034239035,0,-10.78671275835036,-5.150391330911178,-0.1193703127650533,5.817313730186255,-1.1114997921875,-5.1090013202755165,2.425664963723012,0,1.9799425525686019,-2.5343270904249757,0,13.14263029501322,3.4885764313884273,0,0,0,-1.040123438156935,-5.1000000000000005,0.3979812797624794,0,0,0,0,0,-9.71924129763844,32.384727225756436,0,1.2946858671454977,1.8019261611283572,-0.1,32.68288584033715,0,-0.5073100699007285,9.9985585353324,-2.2655098104424107,-0.6586504198966253,8.682685819712432,0,0,0,-10.213625,17.979404123161146,0,0,2.561165445516112,0,1.7260130263317572,7.929724121960447,27.460781244992422,-0.09092045407998459,1.169128101108733,6.4479753538331215,-1.1012388921875,-0.10597067577784405,0.5410761971485374,17.543880508340667,-77.98639762805857,-5.1012375,30.068893783244818,0,0,0,23.179806121534668,0,-0.506860355550753,-5.1000000000000005,1.4167545569985405,0,0.2820226665683913,0,0,0,-5.385776318836069,-4.990611861221841,10.323854668079754,0,0,0,0,0,-2.2634981521440647,0,0,0,0,0,0,0,-9.887006092467846,4.090091643173386,-0.4082280283605922,19.096487713038684,-5.864021095356226,-2.5086697153997943,-7.574082451562762,0.4350880716516179,-5.435564225591364,-0.45741536273271016,3.8630050521473667,0,-1.0778536736415758,-0.4761725493855439,1.245176240313958,0,-6.1069806405072775,-0.15827031001652347,1.2957443350440152,6.648191369451457,-0.7523182177374074,-0.1,-0.017367799273609433,0,4.818540076948299,0,0,0,-0.5673081408665424,0,0,0,-6.11608676095527,-4.981063426472847,-0.37940475975294996,12.85069491319043,-1.8669665934435888,-5.18961416474694,0,0,-1.157477506165813,0,0,0,-1.857693512473098,-5.242910880929461,0.16083913742754188,0,-5.950954667734553,-49.63924806753278,-0.09795933934464802,4.285054794306901,0,0,0,0,0,0,0,0,-11.816187630542116,-10.220507024107553,0.9,0,18.854552043453292,37.12200947102171,-7.25495532548928,22.47390197182853,14.070641905721603,45.20849027850822,-6.7546550107170855,18.60878626541063,16.32485285083488,39.934463774683806,-7.07527271746237,17.557660709137505,10.426039930304416,45.310213427713435,-3.5950248499330137,19.311082385776746,18.567248484322157,31.30654714131994,-1.195491985223946,13.928078311522084,-33.46014108318981,39.94239860009279,-26.602108633562384,15.356870269986691,6.885577663337205,30.301975411909147,-22.705934046977035,9.703995485437277,6.742654657759267,34.56049724053202,-16.618102524807366,13.877929371831359,18.177214285901602,-13.976322226440418,-14.751164669527366,2.5682049445916078,-21.232277865376084,-12.035740405251907,-9.750405984661324,20.15391412913922,-21.644184298286238,-7.247682491515724,-7.445673598049046,16.87769786921232,-4.18896329930601,-12.524229076500758,-10.693221595416558,16.894200301625567,-35.84259978417257,-11.691238371364275,-13.46898602321853,21.692845688369186,-0.8899814496040404,-5.1000000000000005,-5.9090038982053645,17.858302346097357,-2.499772867244045,-5.101315894715813,-4.101257780671418,26.40769752246217,-5.398047805029242,-5.1000000000000005,-4.1347687517139144,29.83975847136181,17.908270951463294,36.561966036147886,-42.10906522626987,14.667629948485898,2.9694701188333372,-1.9449977027895575,-41.12252662387101,23.15454010724531,-2.1941730488519475,1.0690464235068573,-41.77684159460393,23.770150073850033,-1.8448782737410192,-2.9408871300506676,-14.156015127109388,11.554477134063973,8.396551603612846,5.231527626469976,-38.22171233001386,13.243283934859912,-1.211631304799003,-5.369483906433074,-23.40725408347068,28.820839715090152,3.8525251110289416,-0.4526777009190028,-19.362341053656237,15.887342250861822,-1.910644717344254,-1.4235488840655448,-41.98932960089226,2.361755363767256,1.4876804814593307,-16.69592209656326,-19.44936832825892,9.767150750197814,4.74099832385358,-14.148650278720044,-26.224810632391467,24.670033719486355,2.4113508111391706,-14.719089850007062,-4.1000000000000005,19.88234287653684,-48.07487115928228,-13.898220410282567,-4.118451947384302,2.485286154477948,-1.246819147292903,-13.440305304350915,-14.53147527041725,17.710225068673786,-55.76009092612902,-5.101253674554225,-8.294514745240912,9.620975185113629,-0.9555834446472843,-4.9202223274700865,-4.106632626632248,11.172927076583697,-1.7628128427361123,-5.10126397938934,-4.105808768178289,25.53447249922262,21.829523638083742,34.08395524669048,-21.714929469341882,19.077509554524788,5.085278398824158,38.84768698992249,-13.323197188261563,7.038722170333387,1.4840619230252923,2.6550337189362594,-38.363612650354646,6.329663141077379,-8.84798725808518,-0.7460600125090799,-40.433740100070665,-0.3412449796760858,-1.452846352557926,7.701450219107338,-39.337960491066426,7.004636152550081,-2.1523101330615324,11.45819160024328,-18.73516796100788,8.789635141423027,9.831563776413063,12.096032269140764,-41.649629183315575,10.171758286014882,-2.419014731220842,4.100114543707263,-11.097442645778198,12.098888269016832,-8.823701290281761,-20.04627909340501,-24.762962232667714,3.2702896528257583,-0.0265871284126272,-18.114048799548147,-32.96803407325218,10.01634850471991,-5.0458851929380355,-13.301432143416992,-8.000503177720908,10.991145612816421,-0.0861957336976199,-5.054227174383283,-4.405469595450978,18.811733054522506,2.871539834325394,-5.101349719639794,-7.725810482504602,21.31200059213743,-0.6395256778254184,-5.1000000000000005,-7.711347454635229,20.15581614433217,-0.84872579899629,-51.0653476764018,-4.101244073495713,14.878789156223103,4.28859632652472,-9.690000000000001,-41.20337194421844,-1.5580427550464122,6.718762567623644,32.41335275699867,-18.890873764607683,9.486604683353937,-1.4765882415535465,-1.82515923493354,-23.33472738316362,4.851885026692227,-2.7111803498141254,-0.9642921623241433,-19.931080760055053,18.475224314791422,-2.1782346633781007,-1.5130016160227522,-16.815647352470194,10.95748543751875,-37.00538558826331,10.964109344534291,-14.14799441628797,2.2455071425684814,4.041859657856644,-0.13453613237626627,-8.488272249177523,5.833750694442678,-4.261581806402344,-0.9981480448735673,-7.796212797828781,15.877201290991454,-1.904668832879252,-0.10667846028792086,-11.122228929361999,24.805255655802448,-3.4271906153779543,-10.677539210857285,-11.177659711096101,23.43682047562298,-1.9647001039759453,-9.51396547865107,-7.986592695444232,22.25495461138431,-3.2347841385872695,-5.109524911365398,-7.809993089824488,12.473483061380648,-3.1231650153591803,-5.178283879916833,-4.1000000000000005,8.885938076476759,-0.05027786235805079,-5.1054838919602465,-41.01249214284977,26.819893525191063,-1.7198997045748794,-13.822055879159254,-4.1000000000000005,15.176159686660213,-0.08168348894916151,-5.100303765863827,-4.100912118491785,2.154005329020695,-5.9189463016184956,-5.164033814589321,-4.1000000000000005,4.397412122793794,-0.4321788499474555,43.25119682799295,-1.3523041738444814,1.904359882819801,-7.60278915866076,39.81379298437985,0,0,-1.121428467058018,3.834836677918937,-3.857794637344426,15.42966817677142,-1.0563716243358507,18.90304164566611,0,0,-1.0589566730413147,32.43888677568379,-3.0313917807172084,-1.009144427106283,-0.1555423834589009,0,0,9.617691774428497,-0.014062870774414194,9.195675456148962,0,0,5.579239646588308,0,-4.045610754190683,-0.020872139861451325,-1.1059954677542645,-6.319883622135652,-4.124627910410018,6.870002378716713,-1.1054413901080993,-5.1000000000000005,-2.930852109548368,4.8565551967451475,-8.452703548208127,-1.8748728691024832,-0.9130320164717738,3.135316884572777,-1.1068625,-5.1000000000000005,-0.17977971098866805,2.854047520329986,-6.10596812335874,-5.1000000000000005,-4.1000000000000005,16.567581990090936,2.025736770908876,0,0,0,3.2671238779343117,0,0,0,-1.0994725813053021,-5.1000000000000005,-3.362107937900057,0,-1.1248224028686626,3.632351969130946,-4.1012745814042715,16.200742989299428,-1.0916730714618552,-9.100529736497519,-8.07654877706117,18.07100865145639,-7.94369194565615,-0.21582495636875446,-4.1000000000000005,12.01400256251081,-1.1163664065132108,-1.6911306352820064,-4.666444589157715,0.017541427843106906,-0.3846171241256827,0.719251367742215,0,11.357523112217024,-1.1303958629143673,-0.9743153738610645,-4.060523898705815,0,-1.1133131151632425,1.878302844534545,0,0,3.769110967248964,0,0,0,-1.1,-4.62165118089181,-8.01353440852691,16.830230968545518,-0.3638983436693754,0,0,0,-102.20722020665148,-5.101242762318254,-41.116867137516955,2.4738947942989693,0,0,0,0,-1.0437348209329012,-3.689936908133055,0,0,-10.213625,-5.45233835680434,0,0,-10.213625,-5.0754580247398815,0,0,0,0,0,0,-6.03516180520447,33.62995648220214,-7.2486336507353535,-0.10577947647496291,-1.1113676644356714,-0.1,-4.1068853161190475,11.11582298519534,-9.84314696262025,2.7331130944296147,0,15.490845403396001,7.57588108709677,0,0,0,-3.477059918724634,12.959969170431464,0,0,-1.7294953341408417,0,0,0,-10.213625,3.4618994042094346,0,0,2.5207114108219226,0,-4.053908494537114,0,-0.9056381978938394,-7.6322488835112825,-4.014955116783643,9.516953614326638,-0.702191736700925,-5.117227828125,-4.106869865202887,5.051296021944014,-0.74827107589549,-4.909883764875158,-42.05231725452593,0,3.2774369866401134,0,0,0,-5.8127805018243,-4.697568552811844,0,0,1.8214424477535236,0,0,0,0,0,0,0,0,0,0,0,-8.293998442183934,15.496973196419136,0,0,-5.496857857373212,-1.1953144518187655,0,0,-1.104743418200253,-0.1,-4.099412609293956,0,-1.044632124781975,-0.18089881503072314,-4.039409964255033,0,-1.455906449758361,-0.11924767044332543,-4.366725987734975,0,-1.1001367739982266,-0.1,-4.1068625,0,-0.47319201214160816,-0.6731311993817191,-4.1000000000000005,-0.19820057603746327,-1.097976173807383,-0.26518692688279244,-4.106864016188595,2.776156996211062,0.00902782778084763,0,0,0,0,0,0,0,0,0,0,0,-1.1,-5.1000000000000005,0,0,2.073033921973425,0,0,0,0,0,0,0,0,0,0,0,-1.110791927563316,-10.21487464091851,-4.1000000000000005,-0.2638808356562389,32.84195963600133,39.052158265386424,52.76777420529569,-15.484957776785288,11.640690121874558,39.81650887101486,46.25255624663653,-14.687867986703605,30.8606006836513,36.0140959937699,51.701290451728596,-14.55814536000846,20.674684006230482,46.52716434878005,14.013419227850695,-14.810891880279794,18.44853078951904,42.73537758593463,45.537146380669256,-15.06443488648484,19.248920630411433,25.657011179292017,42.14934466550643,-12.520699585097109,27.140536165629655,31.239464053844173,44.571652256527784,-13.163164397524554,13.131547710579916,34.71519120273385,49.57652576655521,-15.812862299325136,17.337202426338163,-6.022416464095952,51.22558563663046,-16.163567409966646,33.808570100262486,-7.347678221516674,51.985433989477926,-15.493748204733473,36.59698577382108,-9.375230743387464,53.94551957858953,-13.995469715612183,27.926898129796115,-5.3419204541486085,41.331237681143804,-12.523279283833613,27.162036574376383,-11.399144051753249,51.730657871744405,-13.303403500197781,15.28509173496828,-10.80492841312546,52.95524231109611,-11.275892607316775,11.952406530745877,-7.256741246669507,55.37628833655497,-12.994051215093611,5.050554020599103,-11.16866886330782,45.25990671465599,-9.80500752505787,29.03229291298348,32.41073587208027,49.3355229771084,-13.818920640123618,34.7195728006678,39.155803836230476,54.3141014384399,-13.99069013780815,14.857237069974587,33.093885413173865,23.987623481997026,-15.014296218739394,14.830852112761646,17.764823188821495,55.459941586370306,-5.80190333972636,7.284796539649527,23.772071435337498,40.59278751921477,-13.241585392194796,-0.7312918504347806,38.4065812909554,49.21060534323625,-9.390207924516353,12.584007052135425,11.15160442885864,52.56215074275039,-12.22111496692633,29.81316555609179,38.232819832928996,54.05609458838799,-12.215873527998513,32.838973630059755,-14.08087964616589,48.1263805682032,-21.156436338631295,6.747406665499799,-14.50984473887181,56.11042288536185,-23.7758636362456,14.47809619022322,-14.638576091018747,51.892712490906966,-10.904888245886395,7.8629492355277435,-8.295721353645758,55.05635348533784,-7.301405182638138,4.228923574929784,-21.002038860067927,49.04708562385467,0,-5.1009048855138674,-9.699920660185034,35.94430733742094,-2.230936395417904,-1.0227650636337724,-7.353948556077153,50.40408026171541,-1.4884628983273231,-1.034645347041162,-9.69855003319595,52.90553848757079,-5.813502829685064,30.34112645234068,33.59368324732338,54.74451395481668,-19.203089906930877,25.565204727028224,30.64577607598659,52.311873965136,-17.787412807894455,26.84977029518463,34.33063775718686,53.724348429675956,-21.253778840911508,23.950695575716924,33.44231036345594,24.303295747660254,-17.369911528669075,29.435202103386086,27.7883644802386,48.33381550777148,-19.430322825396317,18.556707404113233,40.1617991194637,12.433577678100317,-27.943302200317973,20.74866428953854,11.615908668710762,49.24105968480766,-13.542193611862864,3.268405929048258,39.1009047055191,19.094396750076346,-6.958341418237801,31.186128676778253,-12.611276917969557,54.2785208366481,-26.087049148708314,36.41028933603745,-19.036111704706112,54.1932656991539,-10.916017676218607,20.591830972571103,-17.889597499424035,52.257960110855805,-16.262942924160022,14.695257078461356,-15.861831831164572,50.602305101128756,-4.931084987885096,23.1154560112242,-18.473569404613897,52.88356710118895,-18.106633418002687,9.875727496357094,-26.517513243011607,54.9166196671453,-14.962647858023534,34.7279963163678,-3.6595101740537777,50.213116986243186,-4.0964585558794875,0.7586457192885767,0,50.045549279689666,-6.35742813561029,14.611796004165813,26.74542839929306,51.21796043594725,-23.82589632050721,9.122747843129668,24.44517252726324,45.22253383521161,-17.036686785290648,11.49233127650854,17.978386291599637,49.47376272583282,-19.2302253277948,6.155683046750506,6.134948980792136,39.95813443287075,-9.706281508810125,9.329272981193673,25.749981835556905,52.64365185085275,-20.50301566901228,2.604898731816786,9.02052472483552,53.721814779360095,-6.24362715007464,-2.8730397926764417,9.572251024326526,54.6549015467382,-27.029525740694005,-6.106992561548315,3.9343524510805796,54.367125389163704,-3.801334549390587,7.492063392441694,-13.003207047245992,52.75059159408922,-42.72244824611547,4.124100441532134,-10.451837277940962,49.11856006095341,-9.494888622203378,2.186284564545292,-5.101374647348376,53.128552109297786,-37.28155240398564,-0.14307184496996703,-5.1000000000000005,54.689990525096206,-3.7005215757449053,-0.1435970988088254,-10.925006025741801,14.570851915477014,-3.048746624851352,-2.2225406083192336,-5.105584271881217,53.03642981212267,0,-3.3653434538011613,-5.100529306442466,51.91457538002473,-9.09045677099073,-0.18184123123071033,-5.157579571385135,46.95439424225384,0,-6.86416672947044,46.77893685679795,18.13508946371965,-21.344525803797836,4.720826553617158,43.259411813046285,0,-22.61051664325092,-7.354133282716561,43.17731751132976,50.91147774346067,-5.72952489203408,-1.1114872609977688,36.67651285037989,0,0,-6.533021732276702,6.865053490610102,47.373686411393976,-9.4960693898688,-10.21784760379244,39.0661217450098,0,-5.861693642817537,-10.213625,44.889911324039865,5.589833641544678,0,-9.817849942992456,24.10517894409466,0,0,-11.339114596786128,-3.947910835754911,53.112094434140126,-4.312397302980656,-13.66902048772348,-5.101244030812736,43.05533184269511,0,-2.4779745944143388,-5.106976400872852,49.086349870408874,0,-1.1059878757537818,-2.9031690728740855,27.207049492512155,0,-0.9466158522278545,-4.490884312205648,43.93422586000069,0,-1.1115140479367347,0,32.27104934625204,0,-11.693252119987704,-34.95678164385594,25.104090730727833,0,-1.1381607409101722,-5.112432476425981,10.751416482628898,0,-2.2491482835687653,10.661595914828368,52.89663509664918,-2.321137372786739,-10.213625,-1.3833557293487302,53.83831983873685,0,-4.2550067451564155,-0.2913070982658007,52.89238497133707,0,-1.1011652206561604,-0.1,52.505629904435956,-4.231630223587341,-11.198768186022509,-0.0776722605433747,52.79976866145442,-2.3023352385053033,-8.632046878855771,-0.9352975506079689,31.7230157463742,0,-4.56815107965398,-0.8838040750755892,28.820270156302282,0,-2.2306336278547807,-1.1738540533364625,24.997291293623224,0,-6.876839763461771,-4.850873013301893,50.32283014886134,0,-1.0839554994291096,-5.554085549539761,39.31549281337807,0,-1.1107360939241537,-2.598971588665562,15.239321829991233,0,-1.3518824515832364,-5.1000000000000005,0,0,-1.1054679775023977,-4.329626353866371,24.553466527479195,0,-1.1684011274334982,0,0,0,-1.105787795055937,-5.120341710613571,9.595833138267038,0,-1.1103704743638538,-5.1000000000000005,14.487888113491197,0,-7.112316551512389,13.460209054962327,49.5025331399213,-9.120372879067421,-6.9946726293522365,-0.1,52.73780018303507,0,-9.868964331885955,31.360961085396937,5.491324324540676,-4.067927202826942,-1.1771800395499346,21.20488266254133,0,0,-4.551903628104382,33.58896320942137,0,-4.301089717835755,-0.5263331096475898,21.40170594510491,0,0,-0.8116567161287546,30.365668356740777,0.7392122287015543,0,17.682094848398037,0,0,0,-15.432475979171638,-5.111602828125001,49.69812826720673,0,-1.1058816654968702,-6.787793692720824,52.99094189356583,0,-1.7925113272120354,-1.5641982903027711,4.925560754573342,0,-1.1111217411851324,0,0,0,-1.1176993957167152,-4.3748008406576,25.63180994150733,0,-0.15261055442780713,-4.702995587088352,0,0,0,0,0,0,-6.121839337033364,0,0,0,-10.213625,22.95303845031905,0,0,-6.1000000000000005,-2.7802910606810936,50.17892246732709,0,-1.5186043535155989,-0.5906511739331094,18.726993721294903,-5.106955591094408,-6.077068516991087,-0.657001191647617,5.292479267077804,0,-0.85075111207056,-0.10126974267369532,27.32261632735995,0,-0.7129200129452593,0,0,0,-6.101720489682179,-0.10125213046134003,8.327297669748415,0,-0.8125649973521608,-0.16319592278647238,5.309163720436927,0,0.42853081999506415,-5.1000000000000005,18.332152452756016,-5.1000000000000005,-1.1282263161264854,-5.10735371890479,9.942654075049955,0,-10.213625,-5.101884265777035,15.053634217026012,-4.874772191084755,0,0,0,0,-1.1098387825285518,0,0,0,-1.041728407516156,-5.1000000000000005,0,0,-1.5344738597767584,0,0,0,0,0,0,0,16.79679330151114,45.01239877801829,-3.375315808147525,-21.90064592902654,28.694770924867587,46.70993363152909,-1.115750308013016,-20.74957531695972,11.276944825338353,45.3496534871415,-22.266128084191674,-15.99746809205432,21.989727906895034,44.37059114270082,-5.7267866195013815,-6.5650774881992024,15.261945285226005,40.775627962422355,-10.086337805823273,-21.40650172474382,4.6553022161017426,43.04267335220342,-4.1012389288150635,-7.262641992909018,2.034567851734034,43.833441603276,-6.798410223541243,-12.193553848232666,1.5027268218695922,43.90632328680146,-4.0094936863903765,-10.11551094475816,-13.322352168306509,-21.385124639078555,-1.9718232980038857,-15.19240992264162,-18.375769538894176,-5.6250181371269505,-30.705762601184006,-19.197398412970895,-19.877821132787435,-7.307512387962329,4.866650291242099,-19.76003833817892,-15.676973741796935,-43.31698491958606,-3.4503411683235146,-18.74442901023726,-14.033224929491961,-13.699622029314515,-5.550673189129955,-15.26161542308609,-6.231190563155896,-6.509083284999754,-6.341095633049846,-10.674943513456814,-10.284785351606345,-14.342165250762907,-37.49127324616615,-14.010811405567784,-3.6759077249652936,-4.9135955529530255,-3.489824298694518,-22.35041221597959,10.058704268856633,38.61399783768896,2.6546122851668734,-25.245561637801536,-13.808793828850309,-7.932813308294363,0.6832957416771173,-31.248246343025443,-10.423095740915338,32.96115834291729,-10.773425921178186,-25.530902150218736,-16.290055080018195,-7.021610154576003,-11.683517868027515,-24.180504823230592,-7.76971244771033,6.766976689263739,-14.445299375029242,-25.967964820833934,-9.928058557390626,-8.73583122037083,-2.4911380872422093,-9.8686683099629,-8.768942830707832,-7.476220486096398,-12.946302807042883,-17.710695635224678,-8.773008524692074,-8.025165095605317,-12.378479151463731,-33.177061087286326,-14.476165368979986,-14.296378646660823,-20.596917940764573,-14.323094956994293,-9.42280229865565,-53.55467026842497,2.166562953393837,-9.693933287378865,-9.765258378776815,-11.811707556866462,-2.9982176131913496,-11.385089669690146,-1.4686307901454398,-5.101242878254993,-1.1152488958495144,-2.6721301922325122,-5.9851479643450824,-5.101249355315382,-3.6613598546861374,-5.1000000000000005,-13.260507103163956,-13.895339856299818,-13.613101423337664,-15.843620849921175,-0.50371152235092,-5.171159916680393,0,0,-1.0233727718091385,-5.1000000000000005,-2.884610684257647,0,15.11555470461874,37.3812559717563,0.6661075535126728,-30.939182759853335,1.6204911474464412,35.52309582281495,-3.2068626587412923,-11.084237469368025,-23.328836366030018,16.24557270408246,-21.47177279389013,-24.13727502991653,8.37806093754262,-6.79513382889408,-6.514954994111154,-8.176430281674465,1.4117943506737067,7.456445349173882,-3.957282109179716,-26.022668440803148,-2.0349655026072577,18.407040627724342,-4.235684341589561,-12.624198206268787,1.2289184380121552,15.843552525282043,-10.485400283866156,-28.453432102010506,-6.607808138004813,-2.716808184493649,-8.791880356601137,-9.414514702563682,-12.514852835424044,-14.589665603771639,-10.245071022833626,-16.340477477369625,-16.631252956249988,-14.877749246128994,-41.00215611401948,-46.088324720512595,-11.847164439007575,-16.903643529064176,5.215380820628165,-17.54298309031598,-6.871406227841635,-9.612217341448478,-9.36468428624753,-9.947761490698914,-6.1734947803940186,-6.020444904655639,-0.8194081819621659,-28.99877801229982,-1.714976207990432,-3.5539812720118578,-0.7533668369054596,-9.690160818306422,-4.260011109885066,-5.1000000000000005,-3.3864562795966116,-4.779122129859977,-1.0692416785652925,-5.1000000000000005,-4.101418550300177,0,-3.375638597769687,25.564147054733468,-5.144199372070857,0,-46.54756983321449,-11.355046451518566,-8.171438678701877,-21.21549056484983,-12.088309385148287,-8.066296464964317,-13.454958673098734,-16.11224842078483,-9.188013351988463,-11.880019763881776,-16.392996937961446,-19.279689289931053,-4.199763098626182,4.682426911767131,-7.929736073874431,-14.496442119215045,1.9004400480996868,-5.353291690561166,-6.463400278707326,-6.883099060527131,-7.444646294146432,-4.394551109485242,-19.218957338299255,-14.258448698255178,-7.282721095220342,-4.801195435072754,-7.791244126467915,-47.82478563483186,-8.735241710877077,-17.292271216590464,-13.260547160012333,-15.711719931182264,-8.500490329152292,-9.82442922737076,-5.622403458191177,-7.809030040065173,-8.634682844197533,-17.625276811518724,-6.917695560200175,-6.806486006570739,0.7987892999735269,-5.117229211716155,-1.4520589053686348,-5.015299468044088,-0.15925076026748958,-3.6893058340593967,-2.808841104956178,0,-0.963738552385089,-5.1000000000000005,-4.101719357872408,-4.542738547010495,-8.056869978466084,-5.1000000000000005,-6.55541061889789,-5.106422621933863,-9.7266035346711,-10.219177963474642,-9.434466907486312,-9.691575132740411,-0.8319373577872708,45.24899688425347,-2.8487808888180313,-5.1012375,-2.143264048974215,40.36257184454266,-2.723112484888445,-5.1350751652822115,-7.899390219104318,41.81656170329819,0,0,-0.9085165352369977,27.569337688788778,0,0,0.7240281672478244,37.02546699287347,0,0,-6.111602828125001,29.38009595755839,0,0,-19.072351813606524,0,-2.82845846249756,0,0,0,0,0,-3.112559562042879,-6.641399446688365,-2.0828039125622833,-9.703639951399262,-10.213625,-8.963727896768315,-1.8667269230310046,-9.711043427793914,-1.1,-4.6256650474428875,-33.473569004383116,0,-19.354940244947038,-4.633101386400848,-0.6896146683904113,-3.6444598754752366,-6.10119491490849,-4.629666660918853,-0.20148441457878408,0,-1.3602020916699689,-4.772190715647976,-1.0822234211332613,0,-1.558110974300615,-4.610605925640799,0,0,-10.213625,-4.644917951183647,0,0,-6.101019644371673,28.17622272254549,-3.3279506446975304,-5.1000000000000005,-10.640822573469503,-3.128814958799021,-4.106864032839895,-5.148425565621557,-10.213625,6.049578764160728,0,0,-6.1000000000000005,0.3892449898314337,-14.289061776502535,-4.271542558554441,-10.213625,18.339300945432065,0,-2.8709198774195652,-1.1118078343842117,-0.7603373312940507,0.10347835502593768,0,-10.213625,3.62194784002985,0,0,-10.213625,-0.602627052190476,-3.7398035860657304,0,0.7301899214878402,-5.100658095922997,-2.314703221515228,-4.171331901629016,-1.1053568265567364,-5.376540835427715,-4.039719400582064,0,-1.1600102849550595,-5.151948421760949,0.6267071215331669,-5.1000000000000005,-1.9103660060981094,-5.1000000000000005,0.4015952618852694,0,-10.213625,-5.1000000000000005,0.43676874319110226,0,-10.213625,-5.1000000000000005,-4.106621725489398,-5.108292356479463,0,0,0,0,0,0,0,0,-0.9026400706193297,32.05945262825272,-4.558975181254238,0,-10.213625,22.701097983623814,0,0,-2.4055487006188327,9.542731825347339,-3.0091108900944628,0,0,0,0,0,-9.577641673520596,9.220478415775617,0,0,4.722337318069201,0,-0.3167253118676541,0,-1.1219386371843838,2.6715502724297684,-1.3286156267606128,-5.077223687755077,0,0,0,0,-7.458339894812989,-8.37654160958725,-12.836465407827328,-9.707248538949631,-10.213625,-5.117227828125,-1.2310291920823069,-2.1109057754971103,0,0,0,0,-1.110494059294374,-5.1128553611085215,0,0,-1.545838999213813,-4.823142841656562,1.6053926459430679,0,-1.1116018677847508,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-1.0728577888124764,12.571856971438885,0,0,-1.1012883296291636,-0.1,-9.352471397526916,-5.1000000000000005,-5.945232569521153,-0.28011394323751504,-1.0419517045860034,-3.8957964984680737,-1.1109368083395592,-0.10630773106465737,-1.57292499960063,-3.3615991480318543,-10.213625,0.9562134368565384,0,0,-1.493224392410118,0,0,0,0.49261768424052144,0,0,0,-1.1050478655087201,-0.16609487882488627,0,0,-10.697902477408118,-49.505988552165334,-2.764919957735853,0,0,0,0,0,-6.10667233328735,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.148527633591454,0,0,0,27.074510844593764,41.664707386360355,24.0994897135307,-26.185364691391495,24.49953487909264,43.40064829535033,36.32596541962737,-23.520105856594604,18.15566138839099,38.281926488997165,26.926106801235925,-36.237458598402554,4.395480170904889,18.264150842982847,32.72639164438493,-14.442569640119086,37.375534034589,30.338473647104724,27.141602526367866,-22.73507333496845,26.67218652571333,18.89792322096904,22.951159830178256,-21.692127567164206,13.358865956975444,31.89317295822251,13.933430417324821,-25.64725408562458,-1.8494590225310636,2.941008648062566,17.28254950480705,-10.357395425803018,28.845834463950453,-14.459863315105801,43.97732819426497,-25.940456611233987,9.508032582603164,-11.837725608761936,46.233624061625996,-14.289608739583564,18.171257191803928,-31.160676718547627,45.63018651320235,-13.934199287324926,6.215825188066054,-5.610143910319993,45.94003249159313,-2.8372567541834828,16.023396258221034,-15.439340092909136,45.33932949888717,-18.820731765813743,0.8010398399377153,-3.2981294751471157,41.84391338327936,-9.387014438111636,-0.9321837038535241,-13.964014480584648,44.23426226619706,-18.547379006277204,1.413291123295192,-4.670755440653802,44.86994580556313,0,9.669247798789605,36.471776176099745,5.042057185574787,-31.723203355185806,-14.532289846195448,0.46429189490401307,4.493272614669015,-20.136743760402016,-5.203425975105818,12.460863718965035,-0.904407517674644,-32.41145099645528,-18.88033680645902,-3.9584633993378255,5.061803289415059,-40.6581119854259,1.6331009375937175,16.009579712352068,1.8752071919974882,-22.023169025071663,-4.785660018926438,-2.4722844247798728,4.881366303849713,-36.312897163142864,-3.4997958521772414,-0.3481482257291262,4.148067508071857,-13.054325471549493,-4.60735513945644,-0.3372614738957238,6.515589064823944,-2.2402224011294787,-5.191238086910995,-18.662096474128575,-3.0055768494098727,-30.492368452397724,-2.622371985580436,-25.615813529582493,3.1023086258399912,-9.828688587806433,-1.15644127469502,-49.883675900523635,3.966746629506996,-13.10748408826563,-5.831977865436352,-20.905841436836127,2.6080829388432227,-15.631491211555492,-2.331546420895185,-6.243226680815172,-1.5968347227842563,-12.24494149232129,12.238017966056644,-5.1000000000000005,-3.2363547828982964,-15.589077784449822,-0.21003212772739932,-5.1000000000000005,2.1347036442204677,-11.087081039149433,-51.638305941830346,-9.690000000000001,2.892499385634018,0,16.000622279670036,34.50490973641361,16.064713062204742,-29.472373813817242,6.646590763777998,26.926467634985695,21.797297643918,-13.482210790363116,-17.568138188191426,18.03419924160034,-1.4009544518749868,-29.173311456795975,1.8228036629614004,2.325647695916263,6.453157187079394,-28.80849546696623,-2.744891387502636,20.863307016545917,18.627227964231654,-24.896315743895123,-4.45332872841065,3.752319749920067,4.979697843878623,-13.747442170077402,-17.375026952437782,1.945640724032379,4.65984361282385,-15.931412930382448,3.2582320149454134,-0.36128077707307626,1.2405667915511422,-19.289881539454353,-41.144811304350696,-14.885886803074124,33.24793946422148,-25.94475748160472,-1.0997044689260798,-11.540349186443414,32.88970478465686,-4.960748890670917,28.787614589832813,-44.95039473287181,5.157101143730998,-40.874898255320815,0.38662680843803565,-34.64817243214578,2.510524796235609,-28.940269538430567,1.276697324555312,-33.002785703704774,11.885715498090557,-48.61317039444679,0.8224876756689325,-8.239873576351764,6.145557983859184,-3.468720572827699,-6.1000000000000005,-9.670009655780326,4.416839788731919,-4.901423074206741,20.40727369789503,-9.409269100858669,-0.04816284245489211,-3.0354853265651656,10.623909821475337,27.407754755421752,-0.2711372802902119,-9.483064216523312,-5.541847420239963,-5.685474691942781,-2.825421967153713,-35.063799589912506,3.4801476225491417,6.377770733225676,7.466173203975342,-29.46222113421751,-4.681949070690796,-2.8342376243180785,2.1729484551965546,-7.557386000858086,1.8384853121509814,2.376436360912573,4.683550306577898,-30.437446717386894,0.9173983798400076,-0.3459524420217749,4.777818228086847,0,-5.046348849092794,-0.5756701914989695,2.280098320249014,-4.839396585190004,-4.794433413045283,-0.16481083409510433,7.1250583923349735,-5.096603514098463,-1.5493200273996712,-29.508590396366834,3.6150849134311045,-4.775586524166477,-5.555157622826021,-12.522893640559245,-2.4974755652884797,-7.531706339094639,-4.070738947753686,-13.017399454003654,2.8272003605879954,-25.024717298757356,-1.8077631842817081,-5.1000000000000005,3.796554491533773,-3.441453194511535,4.486964946347491,-5.1000000000000005,6.967302271149274,-3.9049700344579237,-5.566777390331418,-9.638052383457328,3.8894774998803743,0,15.128941300561431,0,1.3943611936507219,-8.922614078385717,-9.350118935128691,-9.980647570633536,-3.3022306546182767,-50.71238979867515,-6.160878103085905,40.23317939909458,9.445969459677224,-9.957009735155955,-1.1,43.083062023559634,0,-2.498950491176021,-7.715195105557529,38.98098582288129,0,0,-1.0964561461837559,16.20048725234861,0,0,-15.251218982694525,26.66924008107361,0,-9.019924520076659,-10.213625,18.3983882294347,1.5752222846349484,0,-10.213625,17.792881589200764,0,-5.1065192180894865,-0.9871812263519723,5.397413667149592,0,0,-6.960340282389549,-3.7032081286485936,35.33457371067386,-4.902391553411164,-0.6379938703454214,-8.800689197935583,46.8086883925895,0,-1.5673159652969866,-4.3408727558978315,22.62137864252758,0,0,0,0,0,-10.213625,-5.236850026677653,13.234354584577858,0,-1.7965888500904876,-5.106172720599061,9.28412335144991,0,-1.0355312986589078,-4.694860179712506,0,0,-10.213625,-5.1000000000000005,0,0,-9.381371323136918,30.35626178607452,0,-4.189705232011362,-1.1046125,-0.3012366295188601,-6.263041207252922,0,-1.489472574896598,-0.0016460201452320857,2.9753480701357935,0,-1.0415529051677428,-0.6913403845742736,0.8864487485304042,0,-0.7402720288951891,8.544080942561202,0,0,-1.2377507647231343,-0.818521489909421,0.1758482917526687,0,0,0,2.00743356032191,0,-10.213625,-0.8577793378618346,0,0,-10.213625,-5.1000000000000005,3.0573013603257233,0,-1.4815309518966862,-5.1901231822548395,0.8475946293362919,0,-1.1108157838886747,-5.101249509140161,0.5711152365565725,0,0,0,0,0,-6.111009244696377,-5.076057912756084,-0.12215683143879126,0,-10.213625,-51.17227828093478,0,0,-1.3003004305327708,0,0,0,0,0,0,0,-7.326182678749346,30.07923785272122,0,-1.746208376236556,-1.113794894131201,16.229816585280126,0,0,2.2378365186694245,-0.08080067995768885,2.9769251122013674,-4.777368947370589,-0.6387580217800082,-0.11310110160446141,-0.11960034684796064,-2.3399882087107238,1.400376577686428,5.008812387128339,0.05621814408317452,0,-6.1016799014599705,2.209223663878996,0,0,-0.8543641205357814,4.713243443254273,0.9809866199390007,0,-10.213625,0.28434618035055975,0,0,-6.012463981215644,-5.1000000000000005,22.898875556267175,0,-1.47542094799534,-3.9869116212589306,7.287524150253921,0,-0.7963220721139654,0,0,0,0,0,0,0,3.7256194416860993,0,0,0,0,0,0,0,-10.213625,-4.831494624343579,0,0,-10.213625,-5.1000000000000005,0,0,-1.3116307807810443,13.503646102578529,0,0,-0.7054209082089274,-0.8672090715750853,-0.9760890798622615,-4.56560855305436,15.388316136697428,0,0,0,-6.110234712135362,-0.11972641833189793,0.846296919867005,0,-10.213625,2.7142627989772397,0,0,-1.0817189783293022,-0.7416599837263164,0,0,-0.5101841329201291,-0.1,0.19721203634367657,0,0,0,0,0,-10.213625,-8.604363176602554,0.5647795379763635,0,-10.213625,-5.119552823583839,-0.28034999548766326,-5.1000000000000005,0,0,0,0,0,0,0,0,-10.213625,-2.8082554528579213,0,0,0,0,0,0,-0.0735214654968626,0,0,0,-1.01470357690185,0,0,0,21.43753033040532,42.69768560686907,-4.63048088305382,-27.533755898219585,0.3044635339101498,41.72027164668555,-8.500983107813642,-5.032318848364325,12.190312828667702,42.72295577285266,-11.041736355141392,-15.081864303867908,-0.6910934533105855,42.84782294157635,-2.8541968164116254,-2.299382257908367,13.734141908231166,32.694880400113796,-4.0189389778241,-15.036776015846595,-27.220632939062362,42.31673022032394,-3.4668434683152713,-6.9115074781906864,-5.672388566372279,39.95211500685764,-10.932986860547832,-4.882429300856266,-0.2295309169127716,38.8638130790213,-7.7912505359375,-8.278178411550297,-19.959901059473204,-12.887817986701888,-29.912059827547225,-20.099205964648974,-16.0657552620334,-49.618992832317325,-20.00973424481791,-15.847165233191312,-16.736486084104996,-14.693932899354524,-9.525952458588648,-14.146927110697966,-3.3099262878704394,-5.1012811035285495,-2.793127627647743,-3.15629338548889,-15.00280798047179,-10.850132619769564,-8.604680595283527,-10.933310269681323,-12.603535239752183,-6.413135338862192,-6.897821220062351,-9.453873984302533,-10.226072442683256,-12.360538241993568,-11.143867180034114,-13.360839624434313,-0.8226941437631707,-4.587574139409103,0,0,-0.2053735518938291,36.151716512605276,-17.013489298061018,-7.479291171585754,-13.01889840644799,1.8735535424179206,-41.04981240608595,-20.2619886072818,-8.236783684459645,-2.1926059465129795,-17.514668367878837,-8.282076883434854,-11.353254474239666,-10.867005836359496,-43.94066089123571,-12.105867854910262,-1.8344719639466565,12.050204413554777,-43.11151603622727,-21.773328521361186,-12.272852490040886,-12.358979462617558,-14.547602706532766,-40.289745232148775,-8.163297689159998,0.4110852953877253,-7.796994753944607,-28.89291171584812,-7.0386250539930195,-6.818314386131111,-41.01668009018695,-8.20975327198242,-20.32742299222881,-21.038446554735057,-41.875639914307264,-20.69154365903707,-14.125430996500924,-52.32205241157352,-14.83768181045264,-14.95282119022511,-4.794588078032023,-7.980364414726632,-8.094571445898621,-7.725475335193144,-1.392835273114703,-5.457862030904799,-4.159356520148685,-4.499115549567247,-5.636509901303891,-16.68950548500829,-7.796987940438578,-9.692522780907305,-4.165772558666796,-5.251344070485034,-7.8541693391296565,-8.064115589953882,-11.05465992025332,-13.843947573467677,-11.228690112183207,-12.98888497340829,-0.7538769573675552,-5.101240057894229,-4.370833091237489,0,-5.579040166182862,20.10128764190113,-18.544660822610016,-19.504064889912208,0.2030177474393584,29.178030858623615,-10.515400386810027,0,20.304300175190715,-4.791227029344377,-14.187981745109015,-16.293145104774453,-2.7802704161755463,-5.897281978514445,-4.425237519275811,-4.878752323880841,18.601898094066133,8.727234137205762,-22.881190647901978,-19.94268368212533,-50.252534012776636,20.835235954765867,-7.7693971361680125,-4.294364416703149,-1.8955800410451211,11.09431581365677,-11.096142643861716,-5.106971114015479,-3.1506493269121485,4.377123344224723,-7.746438253342625,0,0.9106413241232805,-16.240768396632475,-15.310462402063347,-22.827697550685127,-8.255000694041005,-51.06856189942804,-9.443089371391908,-9.559891692034192,-3.983583771563677,-7.3839157221307,-10.729881491434298,-9.20812187817175,-4.202203941525035,-5.100916501952961,-7.8751008511510125,-8.448506628778537,-9.116096050856807,-7.382830995332794,-7.599880870627486,-35.80346914883281,0,0,0,0,-0.9228974469096877,-5.106870222490896,-4.101243184929266,0,-0.6082592158041095,-5.1000000000000005,0,0,-0.236370756168928,30.923256027140116,-4.205539370994407,0,-11.26203288204082,-11.448977876203575,-41.243898093275504,-13.598597093997398,-9.782367751238874,-1.7639759476969599,-41.01495638612457,-9.408626258739403,1.3937653899023168,-1.2989292713699905,-4.1000000000000005,-5.1000000000000005,12.232605766193448,2.3490622329474524,-11.552776748107465,-3.8790071714272063,-0.6007932555959046,-0.11563102961583481,-4.101627030350033,0,-0.2535550217090332,-0.6289774748587862,-4.1000000000000005,-3.775284841821261,0.7665637610521046,0,0,0,-10.26546221880264,-13.421961457659046,-11.129365536563919,-51.12021685649984,-5.088157553531609,-9.703026438656,-7.586336539453123,-4.88172672705445,-0.1611973406698649,0,0,0,-4.315646721599597,-9.69751188234012,-7.843204627158693,-5.114051540799633,-9.712479404397117,-12.815298954804595,-45.22352857770229,-13.834516569812893,-7.044380972059343,-9.690000000000001,-4.112601398025196,-5.1000000000000005,0,0,0,0,0,0,0,0,-1.0689660169506627,34.121312313935235,0,0,-11.40791167734573,18.847694850424904,0,0,-6.049999835408148,43.08870092355466,0,0,-10.213625,-0.1,-3.063839609670736,0,-7.387397998046108,11.356963611463724,0,0,-6.332165110551518,7.989246496509241,0,0,-1.1,5.1511008171282775,-4.104558988047381,0,-1.1059625000000002,0,0,0,-10.213625,-24.928514217575614,-7.714594415424567,-9.093364625893045,-10.213625,-5.101244124253589,-2.4824997279088663,-4.2735615161893845,-11.205317492270883,-9.690000000000001,-2.4462638324602453,-5.112616559386241,-6.104612500000001,-5.1000000000000005,0,0,-6.111544914908489,-4.940800926903747,-0.45555560765566344,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,6.995384415455997,0,0,-5.984881088963455,-0.3053590880063417,-4.420765714568738,0,-1.0365590167391492,-0.41311110770048903,-4.362986364213367,-5.1000000000000005,-0.9700685732077127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.105914546875,-9.695861857612565,-4.357726069194182,-5.11263791577975,0,0,0,0,0,0,0,0,0,-5.106987026702787,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-2.0041867916425007,11.707684946734918,0,0,2.189401655086731,0,0,0,-10.213625,3.242340663862861,0,0,-10.213625,-0.1,0,0,-5.900883685650707,-0.1,-41.11927653164095,-5.128294218113617,0,0,0,0,-3.849376609389794,0.5893154850715658,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-3.8065582307500954,-51.20875567724236,-1.207818678585533,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,0.006634241326086254,0,0,0,0,0,0,1.904189415235871,0,0,0,0,0,0,0,-9.56944959158895,1.9660772790169245,0,0,0.25420507524943403,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28.772047099146288,37.59246087751675,43.986401261421506,34.7512845250272,26.844854422406733,41.78300473629218,55.591743940352245,41.33252498133701,25.974878691107428,43.57021406582915,48.66976646802055,33.59001440530426,22.662339269019146,36.922628992571745,41.274924742624606,34.44283693569982,34.225667222326365,31.040642638031816,44.75583182776396,30.680925524370465,22.676084593501006,34.249180657275495,30.490107276185118,34.30017491253895,29.955391951866005,27.43111862253399,58.788650089996146,36.475916133225944,33.514635668289394,33.92902174875192,22.639214937456412,31.22084703772464,27.925627574173923,-10.656910454699636,21.69984569112796,38.964534812723514,29.27826223717595,-10.28744837404832,50.94306024248355,36.395754416163975,26.03756958725511,-9.807457420825958,48.034970750581664,28.385812680227353,30.507078008421,-8.805372967519185,50.10234826866534,33.73318335357636,26.408747195247653,-17.52205473210016,29.749589862827175,35.6178691738335,28.92814700484766,-14.545777212407854,32.188173460231255,31.49255551757809,24.959909997747012,-7.955393201309227,32.68036827683996,27.422223590243,33.5485407983116,-19.583590449340523,52.90468423573592,26.95948676826591,30.756435805370742,38.92339007155987,53.68679269154731,30.51891592134589,25.79122732889096,37.073361093610615,53.331130416949534,35.76015622633203,30.130205407359664,41.01158860429004,56.02305856373288,31.15205697731009,31.042215391435104,38.72205826357918,53.10352736819822,36.767524808842914,26.85555172774905,30.015856878552512,24.753547073250623,35.96720600096635,17.20624108637348,28.471686153604807,49.358275184112564,29.16013911128773,9.993652577525635,26.52664432374437,52.96622107943206,34.686460230390836,15.711934839678731,23.795751141683503,20.923551441490662,40.19423405245173,27.11042159288463,-13.181426266784689,55.82360142999471,24.615305436016566,24.680640659982977,-17.38516194521297,49.607854672567946,27.051029766369744,16.563020063195978,-14.738280388076207,17.79903674174515,30.776033652359054,6.2236526958621585,-10.848827419246335,53.06378341686014,24.593414433636518,33.08567385675754,-15.139751973324778,52.21575388858339,24.432386885525247,4.244436079728083,-27.349083876282496,51.28807559119108,25.111219534106475,17.324409955371813,-16.442178786518525,13.458635173030487,31.918255817037434,1.8986936406456278,-13.749859517089087,51.54003750276128,10.924093563860032,17.98085871879897,32.91027466804336,27.075399623333077,24.466342342492155,22.132154771589075,29.770859023394973,16.152480625340026,25.562987807051734,-16.69804379531356,24.101743971936884,13.635827975845974,33.704730548223665,14.419027569632965,21.365120917869667,33.17569494438303,35.531072794809205,36.22667831443203,29.84333471398289,53.204556012968666,28.674359532587378,37.371090872132285,25.090424111778546,46.63898047681457,27.46677040689594,21.434644670405806,24.903235711800882,17.285369539303503,20.012996302336237,13.68927124725235,24.41018110130545,17.689684509359967,35.53523246965203,12.040110882345415,-14.142390077637153,40.66324699404203,29.85196143312772,22.02441921673127,-13.508934288649764,52.18847043412883,26.819744005305513,13.01277256855522,-20.85308434799228,12.406684533396524,23.419804508990367,10.790089820063228,-21.339447861224908,53.94178444768026,15.209817710718841,-3.154096845084868,-17.560831240903838,31.006400377963033,26.246866697274974,21.73966202996255,-19.529114410279245,49.404243371927194,22.312607524746937,15.086584657073212,-23.265151451839458,10.213557470202232,25.650125025240314,3.3358575013218132,-10.521814995107391,15.851492928607113,26.686667407366393,-17.44240173274345,28.407606628811006,43.45745913480133,25.634482833866993,19.85371722751268,21.527375363070085,12.408787881536483,30.783090773832452,30.486818162483196,21.148995758251562,25.73579910989948,31.805208402834598,21.322032757690966,14.933401625812932,48.21273311322983,18.445440731705368,29.217051006193838,22.851174751733183,36.57608730516125,17.118028590222057,14.095680357300058,22.106372997751517,52.538129675916124,19.522694391006127,15.21081217955518,19.75878774272035,39.6682445357967,16.310776344112586,15.486991292481687,16.654063579345305,15.067169752978014,23.03919013471373,27.243582032725882,-23.48617834154837,36.16460568877096,19.604804648397554,10.311131050907942,-20.18169518359226,56.33339571081983,6.50820196110483,27.11467420137369,-22.698092677921817,55.74997926779153,15.229272672600151,4.381391156471743,-22.727580941084884,48.99336213230435,7.473970215009551,22.251881875111575,-28.095534659493982,56.18990510169889,16.078174791212675,8.268433920185483,-7.676076189327972,54.59691517920005,6.5509658726667785,1.2955511655225993,-43.81311788197042,50.284504296616944,9.321146613174669,-20.7019836176865,-20.96830604994421,46.513274008999716,6.358385915550048,-9.57233373335574,40.42838369557526,55.31200344622312,37.99778863865786,6.237621423351339,37.703946270601904,45.25963051371252,28.540152047042394,-14.569157444315842,21.58937426914808,55.32960906088227,25.40422187396307,-50.622825221311786,21.560459143190947,47.78462684567256,27.81733188728181,3.397398559600743,45.258735652719636,52.55594519307774,15.407816577326745,5.31952467778321,8.514004541420803,41.769504910195636,35.058665359222786,-0.13609406208659047,40.936573410278555,6.640113286341036,20.287760818220473,0.38896645814619024,34.254189742653196,0,3.1092370218883385,19.38780083110218,-12.29396685381251,51.55115359045117,22.163048140468142,-6.25734277351481,-6.773211670223503,50.75567250851837,11.690965562744688,-4.770067285265846,-5.643359046750296,52.24431126558962,3.890074370523083,-1.1171340536919563,-5.1000000000000005,42.92160150772035,2.3477360117449115,-3.386983254140702,-5.1000000000000005,49.59617941410146,37.52191033598074,-7.229553957845208,-7.02243101626898,49.191854184666646,0,-10.213625,-5.106965633360787,40.780409435618175,0,-12.998632177031357,-42.83371031429944,30.17012701364616,0,1.502369589599994,35.87577324751035,29.649857697557024,19.774808667951422,-14.894311241890112,-1.3369302870762094,45.697155390693815,11.857992044828082,-19.669133073099744,4.586551674121388,55.13682667047621,11.526628427292009,-1.1059424046738684,-1.9069584925302767,54.19317634764893,0,-0.6062855326208658,5.260072396812658,46.719011040733946,11.550337462889127,-10.213625,-11.948316430911696,29.473514379706003,5.078482923394531,-0.8667644326794823,-0.44369855348920473,44.99895872281037,0,-0.8291331143547777,-2.276130172169089,43.38902784728443,0,4.0538720666183945,-9.030851245265396,46.76978745449139,7.250388277182379,-10.213625,-22.024303662346746,48.35087188346939,7.375208953588272,-0.9080523146985318,-6.498861126554332,48.01035079281552,0,-5.853935654087836,-5.212139941282408,17.759501943443237,3.878692785513257,-10.213625,-6.61956423920466,49.08804210982639,2.314263590005636,-1.0599621658281142,-5.1000000000000005,30.40660477331545,3.8822578713534805,-0.6465203733891085,-7.44861240733495,39.11830140553944,0,-6.104612500000001,-5.101256937796346,15.153669132105144,0,-13.727935742575292,37.61024029871433,21.56690662708113,15.379681935781067,13.540908545051911,13.546390873224954,46.16120627173947,4.147531843079869,2.49633559638856,18.954072327032584,40.76846407356944,10.50989899591236,-8.607034496445351,31.614044699832426,0,2.169414450515953,5.766278536718537,12.089372968371109,35.941940670271535,10.814105210933159,-7.203860754895321,31.875267471764424,10.681518705728692,0,-6.91490668549078,27.031022611798992,7.7008780486437,0,-9.882745970258805,31.547233414122392,0,0,-1.24843540521853,-7.8375129334156854,57.96825226408963,8.477121179119793,-48.77837486627831,-4.03531987103658,39.90136307985634,3.776102531584442,30.15375381490447,-9.232747710415353,29.427304572171447,3.7933034073555647,-0.8510728414875797,-6.596166325747921,1.824420307248299,28.0995418713366,0.695535126257703,-5.017085466859271,30.12326780822807,0,-1.4726261851695963,-5.837759551955749,38.638542093589294,4.648944884885752,-2.7639252521910023,-3.7218286911463467,45.24657239063079,0,-6.111593358483434,-3.9954920701654952,0,0,-41.73365810165238,30.774038041195134,5.3072152523593425,7.575543971887155,-0.9424059543212068,-0.10688888482537724,47.737178217713165,1.4642901350934059,-0.6963857658105517,1.9959779865226903,40.316605038892185,5.154998484016812,-0.9501440900954377,-0.9915740889951231,51.48798752414777,0,-3.044936803428986,4.17614912753767,41.26713351040219,0,-6.101242217300432,-0.6613992408523214,54.48982755788711,1.5625843911193806,-5.212919071222055,-0.6397776212067217,33.68909768162244,0,-1.111354583793476,-0.1,22.20862215469795,0,-6.115308809148906,-9.922018983649044,56.01890472880784,3.6633457639416918,-1.1060923535368754,-5.1000000000000005,50.91296271474091,0,-14.899436276500321,-5.02215643858332,52.562933736128485,0,-1.159565114166445,-5.545913612710352,0,29.697887639592256,-3.243443778316609,-1.8765257487005067,15.117335112319719,0,6.491228011595261,0,0,0,-5.907482711622861,-5.101424366620931,5.535016752542094,0,-1.1522293427020518,0,15.169985224037104,-0.2578406482170903,22.66942125785285,44.55541323215396,2.395357860010386,31.05351192903746,16.62191603053614,45.53548980063566,-0.19479805970505915,28.14737268190841,23.921370804314304,43.931536409619355,-2.300665812925711,27.963310435683766,-23.198288543100904,44.43396134093679,-5.846597400009834,29.416092937105464,23.625816684022595,39.90069936267403,-5.57810453272071,29.90991339855109,20.73703519265365,25.472122070957795,-2.6444334606511775,32.5313032793066,9.939986636468227,35.77254445959758,-9.929917787259392,25.489793256865223,25.057558030121136,43.58768997598502,-4.653361706228148,24.381991266366917,23.72723735279988,-11.442076704019325,-4.969683888264442,36.90176502766846,8.963976619716382,-5.174778453187638,-1.2114889417113623,15.873815685146027,4.951617827912269,-6.252410297125817,-2.6355587349456475,19.535885646620052,0.12484222094127695,-9.869818730712161,-4.984878023512469,3.695912808571972,22.713091370313315,-16.794419913777016,2.046154283730792,26.025995334947748,-45.407119537856495,-11.27077563929564,-1.6333917356910557,16.035440791569656,3.9501475204523224,-23.415706208382392,-8.920780902952204,3.695909130678719,1.5977026012950608,-5.225430587459428,-6.381346052541886,11.68686845589618,29.304160518549704,27.508612476656825,-2.537244887477226,21.781517646788863,4.370351537368298,4.2346446565197935,1.1110001914280958,7.428131821388336,21.698940077480028,14.772143596106428,-2.089877751874071,11.679962991958787,-7.554762226480836,3.3065891886047556,0.8851903163199631,18.30923816981971,-7.124346255850826,11.653637914064493,-4.312903500490214,14.807342591777546,-18.35134021332683,4.437818369203737,-27.374782050493856,21.479292091501055,-6.870830054868014,-0.8079418855149821,-10.235453362225709,21.226400124546352,7.245506727232798,-0.028556009520934584,-4.526681167686169,24.35289072886435,13.36102801968721,-15.234757382142373,-0.33962597773381886,16.212519264825502,-3.221962693457872,-36.62000031321768,1.3283016449637124,8.05206727628144,-25.490629881771696,-28.036263200902763,-3.3508580212480847,7.6521620411550675,-2.9072586264782023,-18.913307375318446,-8.387399952522896,16.035907824132543,1.4069150753951052,-29.788652126399914,-2.3010445872917256,13.025074799648973,3.651069463087963,-21.131296060140492,-2.0946250003158347,13.319041287398363,1.3101105306169438,-17.130693054208592,-10.83667375528319,18.531143360936454,-0.06703699427024574,-5.1000000000000005,-10.968706885507164,13.918838768602049,12.873300684044183,33.114414752656806,-0.07506550699961984,15.993275064854412,6.988707728536592,34.56464642839339,-6.805888765119167,7.482046166550306,20.261083561103113,10.044804655165299,-10.16800533033302,15.213817953980362,30.862817787753283,6.633838579762118,-9.29610653343325,7.9840749814413146,-1.4404887418640633,10.895081242570713,-2.4890416507570916,13.524680756274618,24.47686492330694,6.421539138512435,-5.770619990999751,12.636576499932644,3.60472736603704,6.739470609764652,-7.392415548890959,8.120487900627815,5.246457789143507,6.414112577609901,-8.005978407770158,11.079386711511292,3.154680926606881,-16.24301272591956,-9.391407914625562,18.0460979339577,3.1249326948746923,-16.034806039099976,-7.338923930337327,19.13051514153366,-6.489947405322713,-26.107647868670654,-8.638311900329853,31.081249968301226,-9.999513040182418,-20.53501642913337,-13.247784471878155,10.7609392151675,0.8742398918339735,-35.08699230541949,0.968488095677845,26.436170946426035,4.177354619186793,-7.868416959701738,-6.051528595732278,17.161373883510493,1.3865558570997376,-46.46484619746308,-7.343627773024197,29.034512870969134,3.208899417989249,-9.50767302501417,-1.0192994783710962,31.868416373466996,24.230228649907353,26.325467497366688,-3.842545020567077,16.086986363471425,8.466344511108394,4.912862522363731,-12.474372637127205,22.163224456610987,18.67861773324148,2.7135096749552305,-11.444555910811756,1.968579218975196,3.405942945086565,8.747801585766974,-9.427003996292846,12.441731641177839,7.188346473946451,6.174253078197497,-32.597833358641786,18.08463313559619,-32.42482565636242,1.3469083477948955,-18.55833478756931,9.241589926893349,9.633235307412328,8.661279179298477,-17.247876371759514,14.523278630619053,21.170901688657118,0.04107393356043651,-14.70265716394948,1.5848848396603434,4.988590849962446,-25.1100915548382,-9.157190756871845,18.478972081365782,9.216242802438934,-20.392355783825053,-7.806396627031823,16.486162489194832,11.44219007442279,-24.00395856893702,-12.865994080198396,16.975957215620344,2.1734605785167087,0,0.4266943934174701,13.531306589632223,-0.6279783414636704,-16.603568458208162,-12.415466466689079,20.605889241865693,-26.756466533950295,-9.416685262552816,-29.705303375852374,19.988543856014715,2.156030932651831,-8.56990910304059,-5.992377556209996,16.381116544208,-2.6209985774810116,-12.303901575119333,-8.79239179557179,11.216474734368655,2.16725238399186,42.50014674513639,-2.2489980321292515,24.263718739377946,-9.51780545242458,42.958009969202735,-6.668374767076111,4.413028892140039,-61.73153053853056,42.6962255310581,-5.045730374647724,4.596165424701649,-10.213625,42.02835528749807,-0.47803489472820787,2.2480285758703054,-2.976222814698515,19.19300341427804,-0.14223500868012806,11.59910960038088,-10.213625,43.14677918354301,0,0,-2.115134435205011,8.202567516790124,-4.10686530352952,25.174059559911264,-16.258299070316845,43.0983247489724,-0.13798305648561923,0,-12.332410511996862,-10.56984867786475,-3.950608005482656,25.80086840799782,-1.1055183831409783,-8.036559209060856,-2.0284083806745103,12.57304873889434,1.7592966209554008,-6.940015331361032,-6.127992694738307,12.819231662261718,-1.8505369750685148,-4.425879753016257,-0.8588405954601449,10.704970605967741,-0.3736506433559509,-5.034275445750786,-3.937315212332834,19.700576363809162,-17.129717952463018,-26.103314926913527,-3.4770349019256828,17.411375568954092,-2.0611899052006857,-4.732960065354639,-3.8831076335481685,9.170335240917412,-0.1648430242035259,-4.20371047282398,0,0,-13.620948971417263,39.941137164512654,-3.0151693743832797,2.3057438828795136,-1.3567842855668242,-0.5927055788888861,-1.778729571397214,13.694069274308262,-6.1000000000000005,0.9362180825233989,-6.470355866307331,17.85837232533597,-10.095410973806908,-0.10660157953797994,-4.106174594370645,7.503944106442326,-0.8162285486796409,-0.10573853303925694,-3.6725442173547544,21.311809395644943,-2.6723467289812897,-0.5539873717388647,-2.723385599993498,7.111848835983947,-8.304182613916984,-0.12009549255899495,-2.143693422170074,12.928300309026904,-1.1319822843740217,-0.471528132100799,-4.1054868580697566,22.98972212101158,-2.490814629457247,-9.52385555125427,-6.5212818758005024,18.412874841603493,-1.1062443987442687,-5.101284644505069,-2.4010812366485164,14.234783805567792,-1.1105940570647685,-5.174805500351841,-2.0568451177086797,10.322782974713391,-1.0723616265717613,-5.1057375,-0.08505996518533082,15.309539620271394,-0.5889481460812495,-5.10562935758886,-0.22643398300631717,3.2496703559115234,-5.937836272395575,-5.106988469799042,-2.2997479318166785,2.816124479145476,-5.65494177396312,-4.249418444336334,0,0,-1.1046125,-5.1000000000000005,-4.1000000000000005,-0.11170413405200515,7.097675991876038,5.917374826975085,-30.17620024234979,13.828316150864481,2.088249833608704,-0.045648031961078986,-3.8949159555641075,20.492797563073847,-8.770863194957698,0.20231325003969894,-3.813820162652759,19.929047628224993,-10.213625,-0.03664015596245917,-3.9111662847334148,17.40025691382634,-5.787957862575096,14.549129752536864,-5.85024511181589,0,-0.38499440119118056,-0.09890982372741189,-0.37947512407882944,15.58362690896224,-0.18852822525989607,-0.11642829329741192,-2.2047413220873366,19.331221937986886,-0.09160593074961838,-7.909543367254988,0,5.69516503522774,-10.213625,-4.95449846553289,-3.255812770886783,12.66406708856851,-7.797222499514982,-5.1000000000000005,-0.5905551851741089,11.29570793775217,-0.9468150710449298,-5.011167543424373,-2.639873998582698,12.711618682919891,1.4337740212810954,0,0,0,-3.556939034437533,-5.1000000000000005,-37.49479709037884,6.814714915694029,-10.213625,-4.7944157498346875,0.8984098526554654,0,-2.9141414826074525,-5.1000000000000005,0,0,0.004251314782246052,0,0,0,-3.198162611134915,-0.1,-3.78202042315671,17.65253303988545,-0.9492991577263251,-0.1,-0.09816192856511777,34.20939525410157,-5.629580498938818,8.687897261261005,0,0,-0.03274963171962497,-0.5692074990237125,0,0,-10.213750481990235,-0.22974032898912003,-4.1000000000000005,30.846192569727393,-2.615171487507813,-0.5132916908336338,-2.998001768355516,7.998340502272773,-1.7655655820299807,0,0,0,1.8405576739374219,0,0,0,-25.00862305280818,-3.97352064646443,0.7653813495754487,0,-10.213625,-5.1000000000000005,0.522865831933359,0,5.240854454197293,0,0,0,-1.105914546875,-5.1000000000000005,-4.106870354360598,3.3613281469661356,6.782433120279033,0,0,0,2.8533916727113913,0,0,0,-0.576690724385238,-5.1068625,-3.3881598851508024,0,-5.91470621831254,-10.220279044495603,-4.106869985800058,2.308445537210093,26.063274557457667,46.30540480061594,33.77004018611103,30.179516719507735,24.726463068248158,29.74790265963919,43.78140819886417,23.182183996018146,25.844552971661887,38.86947521607342,41.74794174897569,23.47497807164611,-0.8503108889509345,24.74133666417237,41.18408661287452,24.173216124983927,11.613441365325622,21.22404076056475,19.105676928422824,23.769764407123922,17.242550940680154,25.344892253486627,28.227409677721116,22.930847471443474,28.059412325579014,24.617102752424234,25.895249245065138,28.987689450978557,20.442041417626296,41.56808860638846,34.65745605530741,21.554439508504096,35.04642656844509,-9.050353636229984,26.36200126848316,26.052395173024426,26.76872200086759,-7.004252074268369,46.13749393200096,26.4804951780532,34.059953851623526,-16.87080656836129,42.139324626451234,24.235440341736673,18.732028637181138,-13.48712187998588,44.617802711061394,19.385239577248793,32.94923910070352,-19.543397433905177,45.21419787784037,23.862693986670273,16.700290859823852,-21.23264752692268,35.613135945394966,18.824344657805852,34.60583217510822,-16.368323235656792,49.67732797819152,20.426743230277662,1.631971005634297,-12.896443006455078,38.21471432022947,4.630285525637649,23.919049661729854,38.99399319718905,12.244074842877245,11.126136999401336,4.29275909028038,15.855059669353029,11.848032051308156,11.47658585311648,33.03394120469078,11.652537174704378,10.585315664718491,9.520040152348734,36.29681013016513,9.58245182841243,7.8850870547380385,24.91209424155094,6.584863210067304,5.405383411252505,5.6675144142585205,16.963305275371226,5.235496756260099,14.839863915374792,6.67723105391414,17.25086138386837,-4.405173388954507,6.032650768053531,8.226201032747282,17.39009594014709,-11.925910686858385,8.197838053664901,14.582128393626682,5.497992427337137,-0.23333814215755133,-20.510193747675707,9.860700824020231,5.914521529111115,-20.361177903508835,-36.23185594682967,6.398160572338154,5.992601809870221,4.033764286827257,-33.73554173008859,5.426379778048108,16.72094586787656,-20.699531362129285,-13.669891431641478,1.8924861073179295,26.373111715138524,-4.2956303952965875,-36.44365956834964,7.8841227946274355,3.575877819447405,5.569377357287576,-22.37817090948341,4.074816226676283,25.65209706163752,10.052287244201338,-36.32537366359403,8.119785928786474,15.084521568821867,9.43728926718641,-9.697914728828966,8.092299698605693,17.956744333214345,18.864085286419567,26.773663148940084,13.044622112220855,23.773911468113873,15.652474754126533,29.640009421070143,14.529662230852457,11.781644992080253,9.341117696709272,9.208051436663315,8.787118596929071,11.58504073527626,9.616400549564867,11.021603141561005,7.990350447853058,31.028545212983566,5.638475402942717,20.20522368075524,8.77102028732241,16.801886937091332,-10.363466799110068,4.664419386977324,6.580130539685012,16.946229333592136,29.942015483918716,17.383246129909363,16.98806299093775,9.474711682075728,2.3033883499083716,7.309123291816324,14.619809361677685,7.428078839884985,13.419874827201609,-19.153498106616755,37.34990050598029,12.286577016816022,13.529061308848263,-18.65192974038097,40.07200435972326,10.24343724764491,5.065712135188237,-33.63942020234359,5.115892401670007,25.49811739155149,7.637731265319289,-35.57664708077405,8.592644961989578,28.424035930986346,9.042233496998332,-28.073499229070137,8.475884717048519,19.611054891659336,9.95415903639967,-22.97284780470404,10.4982310299455,20.168232556273914,-31.230829242751973,-43.95377480792163,8.281491638883987,20.29557229583102,-4.266477575163079,-19.08882933732469,9.386584929846016,4.326396009210982,13.145586742342473,33.388068517699125,11.813649814413884,13.077647551088521,-17.18197432345999,0.574071393309926,3.108342955216413,19.620515611504736,-17.142296271057617,2.5623169292104,7.431535705099641,4.266829449498379,-11.166367272848884,3.6711276558198014,10.292813248123021,6.538097928206671,-16.801505615759304,13.207059591741656,14.660266941078362,23.198725006907747,7.282914351332318,8.598328260756247,9.187066940554928,5.3842262468108615,7.218714888181244,10.050065183233698,9.149394310110939,14.407565402816298,-0.8968692292383085,0.2012265524784063,9.241455529486494,3.9726796989203574,1.9237047742466822,-25.428911801480726,9.417010318760234,19.52075411789819,-0.91956935031891,-21.84250041007979,10.029093642398436,3.889960285351285,5.018485024850901,-35.40002274609365,10.641605939659186,20.120607942157342,-4.034516656717371,-5.1054434464200344,0.10972259390684402,13.773587442694966,6.729246316921003,-19.840182039289907,3.909923810881068,20.747744786572387,3.1631791594803076,-22.057901836436287,-0.13513092757056833,17.133738799802423,-0.703557990070991,-9.502296788424381,1.9421154824314355,17.069421914907753,5.734547611010852,-14.844323235764755,10.197241634022982,-0.0076944330610280165,10.542122790183639,37.75026078474858,28.49655732564986,28.799083301207524,3.1492250232825505,10.74449566088321,46.02252149898504,2.158000746899123,-2.72388415717597,17.98726229314682,41.37360994441574,16.787267382653052,-3.167524800478546,42.03224988322337,35.29616796168015,0,9.48430929062022,11.098054614093336,33.237171944759055,15.876957360690751,2.216365395225116,36.1273909755025,4.906235732955304,0,7.461159728005431,35.69142943234387,2.9339692073587442,3.1675520186033577,-0.1877356647798143,32.80485695983385,0,0,4.483302035259048,-2.627542985025304,39.469266738950665,5.002496667963396,-6.1000000000000005,-6.403335026155692,44.59095502544783,3.377005420462088,-1.1,-5.101256095280456,40.86834201495523,3.338435048171858,-3.333210216922817,-5.10701671044157,30.3541964309522,3.534101136217688,-1.3556244088877394,-3.49081398960559,37.75336302082472,0,-5.406306485636197,-3.530875926498333,29.10602668384534,0,-9.278347154496148,-3.471003454607373,14.813596663828328,0,-7.8548138113127735,-5.1000000000000005,7.965956807406084,0,-6.8327347621485774,35.49641934737413,4.066362088636414,19.361337362929497,-0.9142785486473004,-1.330773117379772,4.155775216094925,17.462439617649196,-3.0216024167692788,-0.06666179727437405,8.828891115046325,0.5973741307357701,-10.213625,-0.10689526198796673,9.010988473380255,0,-6.054277121705706,19.559965953015123,2.1515883419152764,0,0.7917746905626164,-1.2386333382743837,34.389675734554956,0.529579076187359,-10.213625,-0.1069715315672981,7.358194036511371,0,-6.101819209482123,-0.15860625689327068,3.0436908418788327,0,-1.1017300351145818,-5.1000000000000005,3.5043938006473345,1.2267457835408875,-0.6580540428866118,-10.112550204178214,30.40462140805139,0,-2.795279028477268,-4.872884504424954,10.859616833180318,0,-4.937611002112586,-4.836818416789284,1.2121732510376295,0,-0.07357588194736966,-6.472860730787207,10.50008640743702,0.6770444980796624,-1.5679111125910001,-5.5716546950052015,2.744080140791162,0,-10.213625,-51.01193545794487,3.1515640846477977,0,-1.6307400957895837,-5.105840834021341,0,0,-12.583322053256746,11.771036157560662,32.9758303814927,9.389518520733604,-23.834341448879243,35.426353313055685,0,0,3.0327526927563433,14.376523059933653,0.3564833548432169,2.9683829118970895,-6.5603767868435146,-0.005444516148196333,8.77150695273762,0,-14.373475258096335,23.79820664791478,1.5758235842745536,0.5526109737395555,2.631575347592582,2.2968029746656837,0,20.193794333830365,1.455098738927986,10.668480274616911,0,0,-6.023798095157788,6.534228027047302,0,0,-0.9836850016317197,-5.1000000000000005,37.32411021967158,2.7077064981024037,-1.4818974320380849,-5.101244250565114,27.464526772328682,0,1.9857484203148001,-5.100908218176166,7.543162306375108,0,-6.843596686106688,-5.1000000000000005,7.341893628460499,0,13.909814183389823,0,0,0,-6.521043246044172,-4.938323179358102,8.912711972261363,0,-1.0891811730950216,-5.1012375,3.037080373719494,0,-1.844301787604038,-5.1000000000000005,1.376745361123127,0,-1.1,0.2538511321164686,9.36343999439787,0,-4.232642970561125,-0.111539546875,7.587435467537962,0,-5.952396636814327,-0.1180075757426084,8.594674657641463,1.1857700171597327,0.891141951163678,-0.6605510828120785,5.496505424189776,0,-0.4931247194686852,14.430689231674492,0,0.26618192324346246,-7.0549260862144285,-0.39349358460790895,2.0253852961185577,0,13.148582545366628,0,0,0.23832436728775766,-1.0057769583069172,-0.2552026531911806,-0.026123243234611595,0,-3.1511589828842177,-4.837584474865121,30.37391225606054,0,-2.6495720067432225,-5.1000000000000005,2.6208034123102726,7.717785145157805,-8.603608541267992,-4.896125804522553,1.7184091684299663,0,-0.3977601037034715,-5.38640675752281,0,0,-10.213625,-4.971787610093168,4.167647849825198,1.5191849878611994,0,0,0,0,-10.213625,-5.1068625,1.5485760885083137,0,-1.0754254040020346,-10.214834853579504,7.267603051602066,0,24.186199912694864,48.22967546403796,-8.700111987688398,24.55690619423057,15.284517743024809,40.680981123660295,-13.964725565503102,19.601709683076766,21.382792322443734,43.20791460711008,-5.010996065993373,23.596656067911823,12.618566802551168,43.45495252692796,-5.401001480674667,23.88943218884718,22.428701612207803,36.01648704223577,-4.266565749920059,23.87011657634718,-0.15358891316344891,29.74516959952147,-14.05494108049429,11.406395786425449,-9.1139668054916,28.286970124928406,-30.159008432017117,11.977302070978437,-24.4570091950921,39.01183986022018,-25.231336457622497,12.46819295487068,-0.4850070986827477,-17.756272351703686,-7.986899690461549,24.487340668146174,2.5702540740713635,-12.966952368733931,-15.427020079621562,19.478587002881316,7.079250155931873,-17.796442485333785,-9.32260281999592,14.317256962641542,-1.3434471750794845,-35.38907734948837,-9.967795404905178,15.659144068136472,28.67427666654572,-13.891333307944027,-22.161974994462142,7.229366794410934,-7.661470805702082,-12.738237000927278,-3.913045011311557,22.753980826668876,2.1767545881650436,-17.095189609771282,-37.20150471673307,16.88473026678456,-2.7745682229097763,-51.012517609062336,-7.84444677905966,8.161333178376939,19.557050342497078,37.33306293328826,-39.20618190737018,4.755644826850114,-7.865691153657845,3.6498927312973324,-33.389043881250416,6.0129233763106935,-4.808860583083101,4.250537057595251,-41.421567941708005,20.44502835032182,3.558154295083596,1.949325615566415,-26.981980094743275,18.789215873023963,-17.89537925823374,17.026329162418442,-38.3952998519286,2.0500766279518916,-27.880647799453406,1.0496207986690078,-36.918542216943564,20.13530822666498,-24.49799062215178,2.4525969590665255,-26.7933282577846,19.62995796626496,-0.19982298017333466,0.5942446691564862,-8.990979659893968,23.92160684927189,-1.5825027904262936,-16.15975799384357,-34.9535993112072,31.11776930773378,1.5766460178663708,-48.011411317185015,-17.12070751024818,4.123563581030054,3.0617592651534875,-18.262247913881662,-40.766064849572,13.507295534568808,2.811909471962761,-5.116436352723922,-8.259108069308251,23.578308905642192,3.2125843222428228,-49.94642595194624,-24.594700075704612,14.917746946900184,-5.379477112367003,-9.605895953594814,-4.1000000000000005,17.98797640535929,-0.9181096333173333,-13.155569462542736,-4.100248374578802,7.905381632268445,-3.2453862254472226,-9.641518845234101,-3.5852112923487534,14.053770493244844,16.484797834670363,30.64671659449951,-15.4615707845722,15.818453404415509,12.836104387177217,35.95417514459148,-9.900051569238173,0.14275868589954852,-37.74591152771475,13.6092041390764,-33.43572434689558,17.684201001145404,-17.044090963769733,1.8376959417804786,-40.613550448855456,17.181094271777972,29.89650089313216,24.398361452409393,-32.27097505379883,8.396593905548201,8.217307442460164,6.936915377256559,-37.897812994821926,13.309947995559481,-0.16054545103471973,2.312935521687599,-38.47006397465489,18.857432427964888,7.745069753473803,7.77708339210305,-22.374754738142755,12.31688490477755,6.519021666822171,-15.412869652553589,-14.88499846777187,29.0896295875957,-27.844898979564743,-18.626426237922605,-33.42112512555347,22.176719509480368,-0.7638004718460971,-8.843697912423831,-40.87330239621096,4.164895290454649,-6.252944647243029,-22.82990055857619,-13.905070958421359,9.79023279059606,-2.1986752517861037,-11.588319801089636,-17.860291326671764,8.873742019272452,-0.42085714327438595,-13.61012334730098,-7.79538441810816,8.517414456358523,-44.84493362872616,-9.690447096459074,-3.849732673064532,7.061957265209539,-3.2811509217440893,-5.1000000000000005,-4.160374260040851,8.093533363267913,12.83954731256603,30.19793271721278,-37.66933130631394,13.296972516459814,-23.810411981766375,2.4591941773476207,-41.691442218383585,10.504253259919794,-4.346003700599211,7.559280322349511,-22.844039118003245,12.488767934859386,-4.565593400708105,6.898764695841179,-40.957589008843684,0.21468130154424617,-42.346990149781966,1.9057676811323538,-7.791125848243131,16.071108332487437,-2.083298869871654,-0.04028586746326265,-7.79094413500837,16.932597571173773,3.5302214312174938,2.1357274058744298,-41.0112403919575,13.928981146020636,-0.6780915853716454,-0.10115129561026043,-7.746278323028581,4.915240722202155,0.2270297084148054,-12.655848820350993,-41.23928332258319,16.306413985595494,-0.6075969279026652,-20.861441195869638,-4.1000000000000005,14.927149703561813,-0.04967361701777051,-5.1000000000000005,-11.292284954237974,13.082628327613993,-0.3394017737554335,-5.1000000000000005,-7.798100079072315,12.042017429591203,-4.120024353800999,-6.726851080548314,-41.05752532095064,24.04646317014583,0.21804229920327867,-9.690000000000001,-4.1000000000000005,8.51986002987291,11.339453839382122,0,0,0.845634021479598,0.5648576250314211,-9.380516309429954,-4.1000000000000005,4.90138423161379,-7.698019843771148,43.1822718029064,0,8.858656355783424,-0.777713961330452,42.07263902368368,-3.2677173272120985,4.519823583683932,-3.4318293541304343,-0.1,-4.1000000000000005,9.550950722142407,-10.213625,29.509692982851917,0,1.5326593287907824,-1.2220896160139012,-0.1,-5.211331674646807,17.88123150544428,-26.509561199260375,29.1983469828606,0,0,-0.8859347401710713,13.713783030993111,0,0,-5.194466511624657,43.31481682843445,0,0,-5.933045835317483,-4.812708791102565,-3.3332470585693836,16.4300732486559,-8.446073457031812,0,0,9.175461445785418,-5.91041883167693,-4.329365390297755,-1.0422451410368627,9.679206527110086,-1.1293021522319682,-5.101243509225728,-4.1000000000000005,2.0850052247020856,-10.213625,-9.701602828125,-4.106881881306641,7.752382753488002,-6.617357798299046,-5.116912914335524,-3.430463651594677,1.1043836229475723,-23.08120906890882,-4.848449712660091,0,0,-6.106752857278453,-4.970828183854631,-4.10124520084854,2.0825654749346745,-1.1168943500238082,-1.0123890087285146,-7.538220637847976,15.443911792252708,-5.399516327007971,-1.037121227243039,-4.106870646369405,20.0393739169785,-7.149649263593535,-0.1,-4.103207676194088,14.451042469047813,-1.291419178159936,-0.1068625,-4.110566501071534,13.420402752679337,-1.0476422212337746,-0.1,-3.910082585006005,13.716831895169717,-4.446076997636135,-0.7596580476579811,-4.1000000000000005,9.880499789894968,-0.34774433219772444,-0.18862503554475485,-4.1068625,25.41705276313722,0,0,0,8.154845193548919,-9.880258445010927,-5.1068625,-4.020003111750059,14.919538158286956,-1.483806007920022,-5.115045222336146,-4.138300806370802,0,2.1190554866475453,-4.9958479652927785,-4.103317346348864,4.163321366475194,0,0,0,0,-0.21275611055624255,-4.625862929474221,-4.0657201466645345,4.9340619604004585,-1.0636397972990141,0,0,0,0,0,0,0,0,0,0,0,-4.335366432945743,31.68465434284619,0,0,-14.402248682093225,36.15797201579261,0,0,-5.7819804900770535,-0.10959200986085488,-7.79617625,17.01185002932713,3.7138741230121486,0,0,0,-18.248767906420348,21.07279622111592,0,0,24.949415562629156,0,0,0,-2.758788630974365,6.2610905258399425,0,0,-4.299514920270254,0,0,0,-20.15370983027915,-4.41192624837311,-3.372918463648828,15.467395941934335,-3.2415805410781453,-5.1000000000000005,-3.535868943221167,2.3497614298120935,-1.4246138181976353,-5.168630524966258,-4.1000000000000005,4.659839353405079,3.042212133680946,0,0,0,-1.9253151242303015,-5.106965428388613,-3.90313584345503,4.295523979889179,0,0,0,0,0,0,0,0,-10.213625,-5.141178502539897,0,0,1.4154976658605483,32.800671729137406,0,0,-0.39063656452220635,-0.5652706063683158,-3.8459285555698894,5.3261049063753765,-3.930780779766394,-0.12405831802676426,-4.100845388046531,0.1780922432664126,0,0,0,0,-22.361926094326925,5.390059587006748,0,0,0,0,0,0,-10.213625,-0.1,-3.8269275225483472,1.5856348519686927,-10.213625,-0.10024705228838655,0,0,2.510558626849231,0,0,0,-6.392635090899505,-5.1000000000000005,0,0,-0.02341017257631588,-4.687055523824436,0,0,0,0,0,0,0.6210918826678498,0,0,-0.10024052400221994,0,0,0,0,0,0,0,0,-1.0939799059014066,-10.21485572739414,-42.483962075213924,0.5550517577082654,-9.65591599856172,39.02071820336263,51.27021499671912,-15.486792035099137,32.09216870360084,35.15202034864766,52.97085623252356,-15.938136778453291,29.990530702692062,28.756764570513784,45.77727829404995,-16.35164964169588,13.731498111849795,35.43304907952913,25.938678653932474,-16.851144029603475,10.571507776559905,27.011315471723847,30.76131596299972,-16.331769599272384,30.47280560928654,28.368666071484615,39.27042926911958,-17.837124954463402,26.00189052498626,24.582241591066005,26.02673469659103,-15.761072134532185,10.21312477932851,42.83916785776677,14.967479272885207,-14.650027374667502,34.437594330448604,-10.766597365347248,49.03212074767026,-14.165148919132054,29.200618534087123,-6.412949353941861,52.947623240275036,-14.796562785190837,24.3730013640461,-6.919897029116748,53.35157338876493,-17.09544601560933,6.460592537064004,-9.237985588016961,53.908611135361035,-9.684920869074018,29.83751142582185,-17.010536873693553,36.405085094074344,-14.44406613155728,30.59060805882949,-14.97093844873688,49.218580996206896,-10.734213630984401,23.783525421490836,-14.610213573923385,53.25434138523004,-22.946226507735812,9.640683740306883,-12.27467118402717,45.97519274193917,-5.645350961176443,29.176051795558788,30.251294132946953,51.09429796246588,-15.223164756237237,12.017485458581426,21.71026691326033,51.862435296979335,-7.389636712502157,29.7572834809313,23.623358447607913,55.0162644370567,-13.813974486616809,-0.7087144292626291,22.93885703429664,54.321005668684386,-14.019235760038814,14.123212191851445,11.616130462404012,12.028963177311407,-14.1574105796967,17.5470224848642,17.7455712383169,17.465709470535927,-12.933014589652503,8.893717266365089,21.26704478681339,50.87549668095311,-13.59947011337409,2.3013415785897955,6.44582686840401,33.8713309152375,-4.390409039378491,14.405765343985014,-13.236006581319042,51.67004061028526,-14.92203883796292,12.010522050522859,-17.829245867453146,37.04491428250264,-20.537927981376484,25.901216896505012,-23.851272844093412,48.89514725960253,-13.402748469269316,6.15255691510156,-5.1000000000000005,55.81892475813574,-12.20624011981319,8.010624772773907,-16.41433031245487,53.93084941678402,-7.942158494122812,23.43529710158488,-11.944394154852834,42.53816121813443,-4.259707598599175,10.0637247799786,-13.82786889468301,51.05219086409661,-7.400784354007493,5.584139666366574,-5.151627827185712,55.133478711894654,-1.5869478827201633,17.78520230699263,36.57142256484288,21.40897531544369,-25.39714914987501,32.20119255566448,22.316071359545962,53.16335275901964,-22.63343625795694,33.239245273395404,21.533929423942755,49.533524865622596,-25.973055878536833,16.674846994124174,12.772639168664321,39.198814769185184,-22.292576768165787,14.702482018724602,22.9028828437958,56.23066457613851,-22.394343517783902,4.669128511980077,19.784829823141738,55.60326473045059,-21.12435447497795,18.40371430006939,20.68890358072324,40.147892567494594,-16.112364852207495,3.2878676709657078,29.033421823138706,2.0295742317822145,-5.2967415803974465,32.700158922726025,-16.429361754680315,49.47426909958588,-21.472047278796722,32.25602731400775,-16.238330566759437,51.371445336531025,-25.124391244124237,7.331209644702411,-26.269776700992036,55.64985109524681,-20.093110354869356,9.670032813462162,-19.93791446141248,48.17691800857016,-11.421384514558273,36.564457212543395,-23.174648104342634,47.59688015328796,-20.660675092152765,1.0418212155941577,-19.131352915846627,13.02510132070098,-47.04683817180427,-0.11956387618169106,-10.565847609810502,48.59834075615957,-5.367900260278365,-0.8611685858969989,-9.69127457582426,42.439145252475484,-2.9036378640911393,33.56253961096991,17.8188553104715,14.80187195452115,-24.823780176614896,13.091252982096213,13.149403744824923,35.477008987585094,-27.297554788637257,9.967355443898624,12.339928957836237,52.764200308835434,-20.000461807387396,11.921667694340089,10.858490941039683,55.35606231028327,-15.429218379487237,8.461177603753708,23.13131237999791,45.693814803862686,-20.08195216536222,-29.40747312791799,11.993156747244862,44.615873100256024,-17.168058106133802,7.007599608993173,6.225153361847903,48.978132182843346,-12.703631633519812,2.0868614841452375,4.2178875705580605,36.044900962534555,-5.090283474707283,8.479265657267835,-13.850008903706073,39.715897742548044,-19.512327599964205,22.159849353580547,-8.51848967833979,20.980305051289633,-7.461531113522403,8.513988377065974,-12.4905116602271,31.21785610108844,-19.734617071116713,3.173554986367319,-23.40149222218358,45.238748101452025,-9.51399760866233,3.502827981531311,-7.85173553075593,44.457415340885376,-9.968833549914423,7.370225525521404,-11.32881100518392,35.092397942138504,-12.028537428383832,5.355894121133867,-13.486256571873504,10.620800825787743,-9.779089393457618,-0.11545361993262145,-47.3886711299577,27.857273862338438,0,-4.465885901571532,23.586415181009578,50.24030757837627,-7.099462261574775,-2.529389833378411,43.566087599162465,13.093474993476438,-3.965614189902327,-8.098080167815967,-0.028955417716222443,49.779150989639795,-12.397735721079277,-10.213625,41.09171152682611,0,-0.9862460404901179,-5.6326723749960665,7.981431787353725,47.53605614368863,-2.6212788124765223,-1.9443749681271152,42.002041323331845,0,-3.0304639501116206,-9.995344327194081,40.52447149310906,0,-1.4322853170966958,-5.8346367404349255,17.187270422581914,0,0,-6.59493048000248,-5.616732204382209,52.19225620417426,-2.2469527380473138,-10.213625,-4.998955065742876,52.25345506684451,-7.597307376635138,-6.015226583465913,-5.045999382719844,58.23103112122717,-4.094092177319678,-1.1,-5.106239100759934,49.48350469247446,0,-0.7646993879135048,-4.53939926438463,51.79250280472117,0,-10.52112717514661,-4.354028233833519,53.22953494928566,0,-1.966205738366828,-9.26111175121715,26.163887067742824,0,-0.974131063274027,-5.164168396467513,0,0,-2.1261088333327445,37.12446433207098,14.093853186870081,-1.1715619509440154,-48.20432606088166,-1.260582853776024,47.24279761865002,-1.6907524514979053,-10.213625,2.2497704024619027,53.08698409063472,0,-1.5443226357060535,-0.9117171303007249,47.997012617196944,0,-1.1055705100512603,0.46961876678502407,50.58827303250109,-5.106917167810979,-10.213625,-1.5114306470026557,21.05936879551703,0,-1.5090507666871955,-0.2757720677886426,31.796834672271384,0,4.342706251037694,0,0,0,-1.3865519178382784,-6.296694361284315,51.20303532501738,0,-3.4023382378872453,-5.142785770389377,48.88871752888189,0,-10.213625,-5.101266992653591,53.09470027597022,0,-10.213625,-5.605810072824719,14.669590569908834,0,-10.213625,-8.598221272239133,37.626106266227524,0,-0.5939719340825451,-5.241153250293287,0,0,-1.111507070879003,-5.125568877183633,51.1764538872739,0,0,0,0,0,-2.966382848719488,38.20500471600665,7.719813434655263,-7.105026401068145,-2.2116377854728007,35.832735824895614,0,0,-3.201065022167067,28.226101686063043,2.058444126425369,-2.7521412109838934,-6.1000000000000005,25.46706453679221,5.230189735266164,-5.301015081612411,-5.9317037683381635,30.396843364885235,5.84440966935194,-2.98123150473165,-9.180208784507617,34.14778792284981,0,0,-2.0922437213202123,27.48178810225719,0,-4.463147081029385,-7.3906683446908215,10.103334053840985,0,0,-11.277425951947173,-6.97948076403571,47.109982549264664,-3.926255019906051,-0.8871304551724596,-5.110323939872238,54.35501953977615,0,-7.86994190797088,-5.1000000000000005,28.118922637033418,0,-2.034976217371329,-4.703224740104417,10.975942146961282,0,-10.213625,-4.618933552131191,51.34480118661386,-1.2671138689692634,-1.5593707073561227,-5.148367446383643,10.660660543179791,0,-10.213625,-5.100945569083173,11.635944897209871,0,0,0,0,0,-2.5711858374721395,30.920252746192446,10.380920162384424,-14.030581210060186,-10.213625,-8.238634240773452,20.96211192477057,0,-1.1052740417834603,-0.1,27.877377227182166,0,-1.9260402128718332,-0.5661419052121661,25.463852031152836,0,-0.8028826755034182,-0.003739644647997309,45.934093647879195,0,-0.8848044500920752,-0.9913156943918626,0,0,0,0,0,0,-10.213625,-0.1,10.651859203611913,0,-10.213625,-5.1000000000000005,48.43867624916707,0,-1.1660509325100539,-5.102851031979883,1.7302868161466165,0,-8.455362728417747,-5.196176418602669,2.9574951490297803,0,-6.1000000000000005,0,0,0,-6.633318964102997,-3.987167280366954,0,0,-6.106055685262357,0,0,0,0,0,0,0,-6.568723025058282,-10.221014813403192,5.791815954591357,0,24.99312446260667,43.87414470492879,-1.9353948873794387,-23.20483319384387,9.941201828534908,45.05846257411585,-0.6982435700095129,-26.082555433479246,8.494750527644248,42.640415723696485,-6.366066587086805,-21.368753756052186,5.281414571328744,45.03740370335828,-3.5110770795856876,-8.964688615013284,21.685800864046485,32.71182477165992,-4.132230238069272,-18.976583725432054,21.109963900166772,41.948534051330036,-3.7212647320810497,-19.07498978646721,4.094485950969778,43.84318265107611,-6.613979677126917,-15.316922603793312,-3.0965450144917415,43.689399292966705,-0.1687895335905587,0,-20.671444616073924,-16.04604520674912,-2.4090522692674985,-41.181327583948544,-7.975184598432312,-9.469285910576586,1.476874470147253,-14.66250513107345,-9.768107885656685,-11.904325796734106,-2.4871748520440535,-11.776668609244464,-10.659616920129645,-10.812026916699528,-3.6756638082453685,-11.69572148786775,-22.34093194138408,-14.386264574645839,-3.2963080761475334,-46.776338117778224,-7.288982687605289,-8.43273560804854,-5.388726059128202,-10.52881793137941,-6.231879125558983,-23.540232126274002,-22.826438891529595,-12.138329820088835,-10.586645105174455,-9.63247303830478,-8.184443017786595,-9.703029153861408,11.36343562931303,37.56181603953286,2.6742283080638978,-16.849989773114046,-29.449967007905705,-13.22786063794781,-0.5118288976743789,-30.068225903069557,-10.785151579069892,33.6318290881784,-2.846613134853504,-23.59296352318754,-53.11925389286159,-11.369066444192384,-22.710952541511652,-19.417003703135546,-2.012414867471035,7.5573124532708675,-12.139746374162446,-15.385452993513082,-10.453268251186978,-9.637432839082129,-3.6435195861836704,-21.643683154108622,-11.082526594962765,2.604820274208142,-27.47569666847473,-10.187733023901187,-12.274568860855938,-10.842619858152108,-10.702472532905071,-18.555373604757403,-7.125357059649472,-13.731858309407638,0.6340940354498746,-8.788463883263145,-6.040692040869298,-9.706927712757821,-4.226395222398576,-13.077747400732083,-7.808785294123814,-9.051003201000501,-2.096395634860732,-9.597482603342716,-5.783175997087402,-5.129946045164267,-3.724925839363101,-4.43717376773605,-7.039517222332358,-8.557488602524955,-1.4325950340154334,-11.517064589867855,-5.157375,-9.77288874868771,-2.814682523246018,-2.764215936870861,-7.508244340798587,-9.147208490748469,-41.01980955136825,-9.055924727117173,-0.9204918782083577,-5.100810899235013,0,0,13.25249926684312,32.78659289729764,-19.783554093369045,-26.129954708166018,10.144794204781526,33.49178882758206,-0.19628803733613218,-11.718101987290126,-0.05787184610056269,0.1617881609453875,-4.763188724154771,-27.66817572872065,-10.33367918281624,0.9389095290490447,-6.180394038575285,-21.372501646389647,1.6720618499179056,14.558437817160291,-16.26565717193256,-29.52565875470044,2.53568284686871,25.750460229426984,-10.386411541559884,-9.497680327530936,-4.667917661581476,5.91553686957909,-4.325458587517105,-16.67135903186281,9.724867996464225,1.312678896999236,-4.038190654734848,-6.255739310707645,-16.136450612156896,-43.48365402716259,3.6686408631739162,-14.86672856225171,-14.825501497438427,-17.277666599786418,-3.0184199866661703,-22.443107410866695,-11.456601695926173,-13.129869094330695,-3.3907048535614406,-13.284650548388184,-0.030284137581881754,-5.159378975202607,-2.8964576810702947,-5.102488582434518,-11.717606730158542,-10.65239483738795,3.933050963097593,-12.451080968731098,1.6626128637309656,-3.970039546817953,-40.237231007892234,-4.32533096736434,-0.20681815471942677,-4.346577747261831,-3.663845554152657,-2.9641021042492124,-2.146032502232981,-51.00649328849143,-3.063030879651141,-2.717463169371841,-2.826836991894117,30.608666510550787,-3.4852931172300945,-9.264453459984331,-2.719456086563116,-11.876519967109738,-41.96594474216854,-13.329346813463749,-17.937082793773165,-5.727475451886086,-15.618030673446562,-16.028402399287906,-10.000390094826852,-9.986333683291086,-11.182582621166102,-14.067737574694906,-3.1003039029664268,27.133201855758465,-10.488771030843784,-32.00791591254662,-10.172944356408177,-7.562491726173966,-38.56337908959985,-9.155718323035897,-4.840007244554192,-2.0650282182439765,-10.291113456962146,-8.876268620162811,-5.207246509288881,-1.3259743795128451,-1.7978547743136428,-4.870026912662836,-12.781115192786771,-45.66734669028591,-12.67932759722244,-15.544528837208787,-7.157189884352777,-14.320931653296789,-11.733967891421798,-46.70970007171669,-0.022435686009365685,-43.545917765794435,-3.395719965203021,0,-1.0282227937478197,-51.06622777804834,-4.071848411406901,-5.107042978649673,-5.157375,-4.773123532727678,-5.442048260578236,-5.387793771055081,-0.4750522404955153,-5.100712848904067,0.20821220260205991,0,-5.909089028109905,-5.1000000000000005,-4.683463944685393,-5.1000000000000005,-7.049238778371748,-5.158725542465202,-3.7774493445677026,0,-7.399037607953126,41.10008371431617,0.6203706636206712,-1.6388135721318287,-57.262633942520075,45.32245018044344,0,-4.61372466919905,-13.368936534191839,46.42620162471452,0,0,-4.597289736552066,18.914383305358438,0,0,1.6483065042553857,36.15912597916121,0,-2.129980066878157,-1.1057492775551891,23.10448329349649,0,0,-0.2852415435647602,41.72523030228664,0,0,0,0,0,0,-6.25241911699489,-4.473572905026979,-2.034706742516613,-7.523225340701792,-10.213625,-51.172278281207426,-2.34544767042599,-4.642083062993112,-6.1162153281250005,-9.147358304317564,-2.722699015900249,-21.675664439992087,-1.1109029464173994,-4.233138677330643,-0.18092596483659307,0,-12.509027381169224,-5.1000000000000005,-4.448553558627395,-7.075620802115422,-1.4937789420938916,-3.773002746763236,0,0,-7.021208541779686,-5.102307768852338,-0.07244196233126488,0,0,0,0,0,-1.1106567948417962,31.61021043366689,-3.2994327463633173,-8.934851182785314,-10.400243081542813,-7.754352887305639,-5.541724832312887,-7.57567957259336,-1.4634868251283688,-1.9988528812442632,-2.23552780826496,-4.754925190340252,-1.104990217119686,-0.3363741777068672,-0.5932072660854889,-3.269595678834703,-1.1203702327804954,9.390791300994472,-4.1058072528792,-4.58928644791203,-10.213625,-1.1584645772157631,-4.10137101731612,-7.8217716570286155,-9.343396642723665,-0.008368517111825707,-4.112601621159022,0,-1.1,-0.2051801131018572,-4.100362407899404,0,-1.1055064032076503,-5.1000000000000005,3.437664621696618,0,-1.4782438167001035,-5.168844761666313,0,0,-1.105725527188549,-5.1000000000000005,-1.4008395776035056,0,0,0,0,0,-10.213625,-49.697545721148316,0.5050611849250836,0,0,0,0,0,-10.213625,-5.130612574489871,-4.101250270269126,0,0,0,0,0,-0.14068029868750218,29.817554986168627,-4.1000000000000005,-5.105820577478195,-10.77788093500171,37.198108130279714,-1.0723909278112147,-6.152306537964515,-1.1,9.04076681668004,-3.008101919765961,-1.7826460618589757,-101.91057034031586,1.7630118303673847,0,0,-4.659370866964051,11.671837185859806,0,0,-1.5838297601874016,4.5564817191025995,0,0,-10.213625,-0.351486943484692,-1.2766862007423534,-2.5673754279209255,1.7295759167689324,0,0,0,-10.213625,-9.697168971333614,-5.913428442701128,-9.634468216759512,-102.19985581544654,-4.453994512191389,0.29232536649656854,0,0,0,0,0,0,0,0,0,-10.213625,-4.878759903911455,0.5177989949523955,0,0,0,0,0,1.3441250923786727,0,0,0,0,0,0,0,-0.9609296334000554,12.679770018090734,-4.109067798602292,-5.1000000000000005,-6.036208768766657,-1.5451600744851284,-3.41326822264613,-4.4669258095869955,-4.361991519752235,-0.6288250334857564,-3.8921722517484856,-3.587755381224692,0,0,0,0,2.0403007189634748,0,0,0,-0.5619093447856368,-0.40621484631199156,0,0,1.5529162868327888,0,0,0,-10.213625,-0.1,-2.0116133731984456,0,-4.913328922230413,-4.928029053083121,1.1292586284294721,0,-1.5054980087021481,0,0,0,-10.213625,-5.111644407732029,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0.3738941532937524,0,0,0,0,0,0,0,0,0,0,0,0,0,36.23184020497402,29.431155538528643,44.997487326778895,-20.03141571904533,30.134805639298296,29.647449984569278,42.466010033425,-20.192673174257628,34.9703051639226,24.769629619990152,46.535117688000255,-16.819180344242795,18.43320917011744,27.45480568908288,41.497600639612095,-18.511238648182307,19.7106485240493,29.162491929203476,16.532094075635452,-17.436479418519372,17.595445974178144,17.319405895170725,46.191876021446575,-28.87091190051902,-13.822828161522246,29.840839899299866,13.157566232905884,-17.98184862210106,7.772534287817344,39.226221108843184,6.0064452287645675,-26.378478629963492,-6.625800888979566,-15.719533647944798,46.2138585635948,-21.852940984033776,20.157898307694648,-14.024723902367342,37.30064669066912,-17.182436913229203,21.904735436498424,-27.918373002941834,30.368269728729715,-23.54033419692932,22.752833536636743,-9.383752065054644,43.72297325631183,-7.523925630124553,20.284890685345182,-22.97444969151998,40.68597392208338,-17.38101162219224,8.68383154043438,-43.200043153419095,44.652385749133,-21.92897320600202,9.965761787019893,-10.635096876110968,40.75589747351649,-21.413753812406583,-0.21248209385875969,-4.783047527813109,40.08018884938954,-2.325019061739591,21.154896987047145,38.16542407905946,12.52545288114303,-36.77527387560178,-18.92128018629586,-2.637438534377536,6.763327523594463,-38.62793812650022,-18.53261834893398,12.060794266164432,18.951913727833773,-37.78479297150364,4.914679738013022,7.920140858603492,23.024606703985118,-27.168953531167784,1.337255260226445,6.479403737439843,8.061480399953279,-37.90468107584469,-11.093834060798834,1.796209093419255,14.925267743055915,-39.8767829664296,0.9837232964773235,2.731971201086375,13.454720872342355,-16.84118956857791,-7.15871999204016,2.2028597213358525,2.2806095681440413,-4.403674863402423,-19.81625781815778,-27.703945702113426,10.829516116197865,-30.64678342858741,5.962218498003364,-12.56869368563813,12.012249983572667,-7.643634504125707,-1.6270015922361103,-36.49141343669107,1.3176240233505052,-13.179533984507419,16.880928670058584,-12.926244576782146,5.561609940144858,-6.258316827729161,8.894671754108877,-38.73856954571963,2.7408073590702986,-11.354948734847973,-6.101243104236708,-5.1000000000000005,11.646447582707776,0,3.4668569152956463,-8.13123798895393,10.20875917079427,-9.375700268167957,-0.6202550409041656,-9.617812115787954,7.035765684601236,0,1.7904975168259734,34.347864172983535,20.76998937445579,-30.331963738553874,19.657950608280345,29.71976971408976,22.049278861963113,-20.816878545903545,-28.641911622103457,13.006185525342808,3.623618960258554,-29.004958469151592,3.276443998853213,7.003735604087919,3.62966153089534,-19.37991829327724,36.68125742979188,19.30490118398484,8.368516260820316,-26.706911159267644,4.793895443009843,6.741235074426099,9.839685358200946,-10.223968356006573,7.298062777661233,22.801221454349683,5.377481451854848,-21.492443498149918,28.47301253100878,1.7166750154766326,9.104688292682873,-9.498960079048835,13.613654045560569,-14.739062311596975,24.07716296439507,-20.807234265033273,6.905714980314105,-11.061974505700803,37.31054025426235,-9.606401701206622,24.71941387860044,-25.959589598374887,7.111911358590558,-24.90210471789139,2.1030856659408594,0,7.845697680739193,-4.358506009772952,-49.503356939419305,-42.117510028981606,7.698789224707957,-4.876986224029491,-1.7956654248385804,-14.954540250033958,11.754833126661353,-4.4086027111793,-2.8385970206185447,-49.83907748116492,8.693209388350557,-4.4732267661449105,-50.46188045802703,-5.1000000000000005,1.730697181647739,-4.879743823238474,9.601917499504655,35.201693026691565,8.856186313973406,-38.26713324751709,14.421158175598574,1.6277020361817587,20.954940631597125,-43.08536216530373,3.1358954428590264,-0.3236631157142317,10.784024748726685,-38.64471042157789,-0.34629901693480214,-1.1762773170488954,7.3171113621748365,-46.40331876915906,-46.73818354674939,0.4648109628988886,4.037937496446584,-43.54845587415292,-48.26863284247294,0.0362046737187061,6.81464317580194,-4.896694422392948,-3.9402319077496117,-0.7304052998520105,10.043471788502433,-4.896579648062364,-2.3488692954244175,-0.02714898255743319,8.192724355866215,0,5.763844685217645,-6.712541789142586,11.933961413307307,-4.954109957653785,0.5234488776356714,0,10.377751835319586,-4.786325582668068,15.442569114764375,-5.1000000000000005,7.863763130332462,-19.666123646022303,-3.4183142215159967,-5.1000000000000005,7.366808353149139,0,-3.431622540154999,-9.691324049310253,8.228512608758553,-48.85342740266406,-0.4001566035854615,-5.1000000000000005,5.598581123941429,0,-1.3659148017276288,-5.1000000000000005,5.794231134874786,-5.101237863392885,0.5939610946971956,-5.157381696519067,6.623760531087403,0,-6.134945614630699,36.51453490936916,8.528427273833355,-7.682123391860496,-8.116143390713496,4.063252658500331,47.27576385093561,0,-10.213625,-0.1,44.641753236104755,-9.105194767303779,-1.1115001741945312,-0.09351271009508724,21.686890542583033,0,-3.147369941451527,32.54120253530796,0,0,-1.3902561360239305,10.074007886465814,0,0,-6.426001089383247,24.01222702629636,0,0,5.365760446903007,0,0,0,-0.0250336554407653,-5.101256865631175,42.066371544842895,-1.425418076648898,-1.4654324297263293,-4.674011883726664,48.14553463996182,0,-1.0480040446143393,-5.652874840563775,19.93197717514304,0,-10.213625,-4.769602177077011,0,0,-1.4487908037966148,-5.064391371837626,47.94054015433849,0,-10.213625,-2.830456892276999,4.792803466525191,0,-2.234414660788821,-0.7807409248341565,0,0,0,0,0,0,1.3556125217162838,36.47141950654199,0.8661194995163193,0,-1.2571901010569044,-0.7196216856159131,6.863588188160073,0,-0.8073050454806922,5.776056329126588,0,0,-5.214617711868273,-0.42845578711654575,6.218749822060917,0,-6.146890656013322,13.625982098734434,0.4990225838050572,0,-0.41686328281526147,-0.1546155169554584,2.3648464240208735,0,15.726037496383919,0,0,0,-5.087240543901652,0,0,0,-60.28416883744312,-4.568472490963311,6.05798232734218,0,-1.4044026830463379,-5.1000000000000005,1.639156627902254,0,-1.496440936720082,-5.111602828125001,1.2969434597686127,0,-1.818584811498778,0,0,0,-10.213625,-5.1000000000000005,0,0,0.8825727923575605,0,0,0,0.057438808712317706,0,0,0,0,0,0,0,-0.38404254026714035,33.28835782361309,5.388302566871316,-5.1000000000000005,-5.804943960067034,26.410234368979435,0,-1.9031783938147626,-0.952715422486263,13.030471476140447,0,-10.782532029218782,11.330998032688782,0,0,0,-0.3957686633948293,18.419399971000153,3.6435590925262122,0,5.210335609991479,0,0,0,0.3972161441972324,0,2.250687604964125,0,-7.517125685393575,-0.02242890432991104,0.34431913498925165,-2.8626253340747567,-1.9932202017570348,-4.803808715722205,25.87723396086104,0,-0.5290642548302736,-3.1559418406763093,10.76996857897882,0,-6.1162153281250005,-5.10100134688179,2.1387262782599734,0,-0.03678340948486447,-5.1000000000000005,4.209511311424009,-5.116868941765145,1.0913991197999395,0,0,0,-1.2248099118072595,-3.6546948398075827,0,0,-8.258564003857865,-5.1000000000000005,0.2457823440658946,0,0,0,0,0,-6.310994502326202,0,6.423048123754469,0,-1.1,-0.1,4.946189993006809,0,-1.3418053973601771,3.127969246464927,0,0,0,0,0,0,-7.6164320704087505,4.922299722994444,0,0,-10.213625,-0.1,0,0,-0.8092990246406542,0,0,0,0,0,0,0,-6.1202901970329275,-5.1000000000000005,3.9215277086472557,0,0,0,0,0,-1.497415479805646,-5.105745360499228,0.9097771641933765,0,0,0,0,0,0,0,0,0,-6.5689618747057175,0,0,0,0,0,0,0,-6.143638972381197,-10.22053659384393,1.2539040306441378,0,16.03933735455829,39.80176233730585,-16.979084715471714,-24.971027778874575,-14.535331634867804,42.97584738309276,-4.699245388760008,-17.626790862119982,14.494223035478866,41.92420913067694,-4.198504067893611,-12.880380162403231,1.3947364615354043,43.50865578227125,-3.960744523125122,-6.659037467456984,1.940723125534448,36.27274214807984,-7.110424483106773,-21.72584134182737,2.4775301990683025,41.33119587135447,0,-5.1000000000000005,-0.9350942328366053,38.69445307722646,-2.2451235470564654,0,-7.894734849209169,26.214335083988523,-4.1000000000000005,-5.1000000000000005,-13.572443765043808,-13.048019619595474,-8.302438000440635,-16.618165307938725,-7.599927733607911,-32.041804591732756,-22.54076822393425,-26.86790002222936,-15.462038555840678,-16.47689804841921,-36.52243247854049,-15.99657920460227,-6.697649396535611,-9.633547815387551,-6.818705331791182,-8.147360836902694,-8.752901755135607,-8.430869183944248,-9.009473752815834,-11.394152536729969,-11.712189761851004,-12.64049712677378,-7.506643180161812,-10.90452394263917,-8.896371430550976,-5.10479653178162,-3.7259211403621326,-5.325799832292466,-4.686563052151037,-5.1000000000000005,-7.510800855848533,-8.87424204130998,4.152510342497281,37.68432402217107,-9.621552243471712,-27.464327369228325,-22.390018402581433,-10.890908668142263,-45.56358443119918,-19.953858959291,-14.87529712270037,6.163946216877698,-32.502838271851274,-12.65905280868832,-10.572939337130268,-7.246140323670259,-10.213530533977943,-10.762284611409079,-3.0270612682275275,11.135391329704573,-4.1000000000000005,-5.106696446216416,-6.597949767487152,-7.513518969099147,-9.068879599665154,-13.73222038289897,-9.893770486663561,-4.627481120350985,-7.795797707744777,-8.280961267171621,-5.157375,-0.5107317071214234,-4.101249876190536,-1.4880134040919346,-18.618167469139966,-15.46239567906047,-15.268748196753982,-16.809394535086685,-5.582521110747799,-9.696080570718918,-39.91502165761802,-13.432263830622677,-8.67407367080266,-9.690000000000001,-13.6732087212492,-13.508143626033025,-0.5027515305904535,-5.1068178063208824,0,0,-13.686443454902161,-12.409723688783048,-14.579595272263518,-17.08207562012118,-1.4045883512105821,-5.1134325988262175,-3.3788320537779644,-3.451059720149545,-5.168626594473696,-9.32666284104271,-7.799654611774235,-9.04573917645537,0,0,0,0,13.057462042352718,34.285565086270694,-0.8296206124645565,-13.821737199577342,-1.4683068240865662,34.05873649779052,-8.205943757326223,-5.1000000000000005,-3.8746921744299647,16.871371757592524,-41.16274631550487,-25.40686421067791,3.05747584204825,-6.722934214148193,-13.315132021377014,-6.352187930511024,1.7157918611089613,13.654206192268925,-20.06664371383946,-27.09065969438355,21.015964041948234,1.5911479644710562,-3.137802638778217,-6.815387521642887,-0.852539227017775,-1.0449235075445944,-7.79042312019153,-13.06460100601549,1.4212452426752273,-0.36539349115073566,-3.590850795620538,-9.006492006681567,-11.70484075557846,-11.40122652982924,-13.341391528476183,-15.272044714289704,-11.556513031012463,-14.034029258067918,-13.302352406317603,-20.079994522582805,-6.492912309146672,-13.736089132370614,-10.213374287852538,-9.077623534180201,-0.8983141878603021,-5.125310293331132,-4.19682989040666,0,-5.157375,-8.528948290823,-7.132114669727309,-9.313993519894709,-1.7448862745431009,-5.1000000000000005,-2.075277096965465,-3.4044039007318565,-0.29416812389886754,0,0,0,0,0,0,0,-3.1394132504216774,31.609944371707538,-4.1000000000000005,-5.1006186545929015,-8.247454520804062,-7.758994317381926,-10.527844706185475,-7.729756197335268,-4.8184027281162445,-9.969964137325618,-7.786493982944684,-6.018800499062378,-60.30068328451611,-3.744332435559392,-6.881484365009903,-5.014388413860783,-11.464779378965197,7.262759170803264,-4.1000000000000005,-5.101017715651128,-5.576541898067558,-3.9002706992143525,-4.107011975729345,-7.153534241838807,-2.4958704133474834,-0.26300565328317366,-4.10698258101933,0,-0.7620633837783821,-0.11688493386504861,-4.1108550568338265,0,0,0,0,0,-6.8568427161625864,-5.106778543240656,-6.2672728793536105,-46.258561824148984,-0.30110303499890767,-5.100741762244324,0,0,-5.941914037041368,-5.1000000000000005,0,0,-1.3028132521781615,-4.7612267786422615,0,-5.101220926344677,0,0,0,0,-0.7363241651971261,-5.100937194961231,-4.1000000000000005,0,-5.279315122752279,-5.158389294561512,-7.8409694619535975,-8.926568440601102,-3.4965897914103143,34.1155116747499,0,0,-1.111070375912173,42.16145647721892,0,0,-7.758559830829963,18.971162646836483,0,0,0.92875241874841,0,0,0,-1.1697583417370108,18.61597914782341,0,0,-0.43478151115907715,0.5291127200486778,0,0,-5.490898006139617,2.305333952798376,0,0,0,0,0,0,-3.3076592440547037,-4.452202156540057,-2.9600435371282607,-5.113987321351942,-9.70391931904523,-1.8527892796298262,0,0,-1.9986336538360305,-5.1000000000000005,-1.4733486721515918,0,2.060537084267086,0,0,0,-2.0481373539450667,-5.1000000000000005,-0.13848265362263276,0,-6.106020564602083,0,0,0,0,0,0,0,0,0,0,0,-1.1012375,35.42049356255079,0,0,-1.158387306097539,-0.9211530096725222,-3.6427987976540375,-3.12336612012399,-0.2292173675535952,-0.14895684352809235,-3.0783265784340483,0,0,0,0,0,-2.2456444582791586,0.2654439751810465,0,0,0,0,0,0,-3.1568226403229223,0,0,0,0,0,0,0,-7.573158931160502,-4.8168503474127,-5.860698946581136,-5.10575707804735,0,0,0,0,0,0,0,0,-6.10518892471116,0,0,0,0.9012703389874407,0,0,0,-1.0630161688857191,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-10.213625,16.339580616681992,0,-4.563564277621995,-8.639710831840361,10.243897884615938,0,0,-0.6617130225082173,0,0,0,-10.213625,2.3611359715198574,0,0,-9.42101944009863,3.9292558001428657,0,0,-10.213625,2.398758009963741,0,0,0,0,0,0,0,0,0,0,-4.54408088817498,-4.092587592783163,-0.9790478936220475,-5.1081134177346526,-2.0765973935960043,0,0,0,-10.213625,-5.012165962554321,-3.738688175092778,0,0,0,0,0,-6.106731517578108,0,0,0,-1.4218367659027153,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,3.2890074385019297,0,0,-0.6470498158298975,-0.2957829397974872,0,0,2.075482323245471,0,0,0,-0.13281897332780732,-0.10414337082128085,0,0,2.6169412074420206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4998104734827264,-5.1000000000000005,-4.101008972634665,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.729010475251266,42.425809837601875,55.07562321096573,36.55515506536254,35.08447312416639,42.59761406341977,52.31099039598961,37.19859546498769,25.989793469813605,30.716772455626913,50.81421184814105,29.688199787408582,21.822451925141646,31.926975308681257,39.06793236639871,28.83204625266112,29.305885250051723,40.26558617095948,54.37511928214983,36.907035063435494,36.32669637605569,28.801714549603933,53.75534237571748,30.93680325637879,-9.982815887079955,27.333571799647437,52.46860529520784,30.392139312955436,-25.67114352810661,26.79143705376831,17.581587053680693,19.15329971136433,25.16348824569301,-11.183451777300549,48.58189549360786,33.417291997071914,34.58149910452065,-10.469470273681871,49.87135173787882,32.95762949973596,13.026477919258731,-14.016145466788632,49.57570984357904,29.05166408428058,21.548041646986928,-11.478437515951725,49.82546916190287,40.92490108649916,1.8638940454578847,-16.666560192964237,53.76416982654239,32.01895546910391,9.932970066336813,-12.115419618422578,50.22746378702708,14.072689354356552,18.020620909503993,-12.51898113788811,50.996019557053,23.165054482286514,11.02019760342146,-10.977912399150048,49.064970221088984,3.352103846864852,21.20597966894916,35.90136008820757,40.34097797441123,34.10868785911744,19.494733175979434,24.58061126142245,53.1730534800386,30.625046335394202,-15.841396136557815,37.15427548085662,54.24109971404653,37.71550657058927,18.539005521303096,26.19261209077147,51.28362907234198,37.782280764868894,28.014269750921645,21.070562381009815,50.64181715641794,42.3539832268143,-9.852647802187054,23.4303124603234,54.81308020799659,25.073690866208466,16.044672001022654,25.14611649477663,15.185625910090586,34.085206012290485,4.922425433927648,14.773359161761656,44.88179809435446,6.374377011773065,18.467123094575435,-12.202618904926133,51.100365911509805,21.120316657971113,23.304658921913173,-19.53352589181461,55.56751511736776,22.296521311823444,0.6923032854674493,-17.86242523649212,51.86003780840326,37.17849027052853,-0.2864850992082575,-13.146529448581157,49.09524181318932,0,11.887686232423343,-23.066317089264977,50.524777249881446,24.58853509691733,21.477513600365818,-5.1111951435334895,14.97622501328191,14.894465336979069,10.23936221242598,-28.510229961691635,48.78494942614903,23.437974277643253,-43.046782299671605,-9.763959208107647,51.433917376826045,12.359538436415427,33.97542189509026,32.28999307359064,56.50158134275985,25.89530397970693,21.613677563955267,26.349538083113135,48.058997893308636,25.656978014676376,9.14315332429221,23.841072295509008,49.16402132685567,26.771576880590732,25.042511285535937,19.074885637533065,20.828521263670297,20.586962575600552,21.653554417970724,21.57012724631351,55.001343674142795,24.936421535926435,23.81241457720264,21.823387106520535,46.77920302248257,21.06402244419373,3.2632133551111693,19.179390607327907,50.869224011597666,20.094884758926487,9.018674390988929,10.589498327202264,20.092796170577248,21.245323087084326,38.31581621474342,-15.28221505472839,54.30206289062878,19.994365620278764,16.338700752056194,-15.388862399677233,52.40903847442494,14.787813318851207,14.458064593605618,-21.504705915338032,48.431948453966164,17.90246164824503,-8.421363433120327,-22.466375734535237,30.48414008002522,10.466089899748825,24.467722056842273,-23.37328875022451,21.403639397642458,17.811319748764024,15.102787886022941,-20.353071974971183,50.65034579365435,17.403179707567716,5.731561480521643,-44.03623577869367,20.952965958158952,14.176768144242281,-0.1749501071303161,-6.203069873565944,24.262302674924538,3.7655924422165628,16.43069124304567,25.062643801725116,24.405688647794136,20.087857344746364,13.032992075559545,16.84006561394541,52.00130188518385,11.169425091215553,19.94198065928861,17.446936818805806,15.209603902939323,17.959233187139052,3.892798732200219,17.880802188118615,50.303472589729054,8.896759900823536,1.76772747582288,15.329527785177433,46.117294451717605,18.044977829014627,8.256525148304648,13.75028870279687,31.143636395003178,13.339869110276872,8.001008760817086,8.114983015679321,47.92062774391955,11.740326515380936,-1.0497935763546273,0.9351600706237011,15.902260692794023,4.471493101152715,21.550826435604872,-17.164206838147894,55.45635644123901,16.83299076688951,-17.730542577333487,-16.843311260452392,44.810117180039605,9.42543254564143,1.625084363349322,-37.720305851205715,44.5386550246904,7.089966878655273,-0.12402631887845048,-20.76918786316069,46.00358630461477,2.6945112468485397,6.46578961887421,-16.252049961460504,47.29847319297416,4.221228676341176,1.9694824674394198,-10.879547724436353,47.51425603508593,5.053624718812792,1.4371706177010797,-5.102058015304005,47.19058186969344,3.402795012612696,2.065059769964214,-43.8122381551624,34.36995687445197,4.2510140817117765,-20.259958190379038,38.68503597417088,47.441100960647816,12.93452031533755,0.974793431078871,42.7639078543557,9.704188961969987,0,-11.524051024403615,46.63999395048527,20.220782201555537,7.7451536659407765,1.5130540045426832,43.459609775261924,0,0,-2.9998760771989534,39.49624601079597,7.573130389439587,2.9564806063996207,-1.6129414101756705,44.52266499578167,5.1251475856100175,0,-6.500001559913325,8.501386959796383,37.77386287566193,0,-0.8787888907650026,27.628011475543435,4.971556878027613,0,-1.11525246397685,-7.063317279825571,57.94642524293294,4.884623631183814,-1.1221589835573809,-5.1000000000000005,53.218763009784055,0,-0.22262015929053316,-9.484699048147895,50.40871849961128,0,-5.508849638933491,-0.254909624238703,10.305054720728373,0,-3.5959497393299413,-3.480500186971877,48.22726721638551,0,-0.47835174272192194,-0.7114687072668517,37.363493002570166,0,-10.213625,-3.507374474625607,25.547119673308693,0,0.8382366280840039,-4.678642001201864,16.013966720966202,0,-4.591234584056832,10.425009003935722,54.956806847439566,0,-61.10962474469579,0,0,15.98006763384282,-6.067295354497591,1.5783380306569788,49.56507182557913,0,-10.213625,-0.940257187169115,42.59317431300659,3.1673621553609097,2.8053847228968523,-0.10111806581152315,49.46281527862809,1.5553404859198374,-1.1,-1.276454351996492,46.68371613681731,0,-1.5606653642639214,-0.14146655870417024,43.56381712445065,2.5671937876785247,-1.0663027573092438,-0.47741965700112793,5.348895089787063,0,-6.724306889285213,-9.427554041711952,45.005978598891446,0,-1.5073612153591414,-5.197800407759493,27.35260458941883,0,-1.0786241196665374,-5.1000000000000005,30.005079186755538,0,-0.8735284681166129,-5.106981011654636,0,0,-5.601527928853783,-2.2582242360030125,48.79194339281581,0,3.5404663342861635,0,0,0,-0.9264949195583245,-5.101236817965881,9.462803708620457,0,-0.8958671394487623,0,0,0,-1.1,3.903008436031175,47.29596906582042,6.783984486213836,-8.950057602268032,7.364730709997392,54.56667152425149,0,3.376032265017577,3.140727740839683,41.496142429926955,9.917491722209826,-1.51113804990998,19.941688872830905,0,0,-99.89925469556519,33.735266626922545,5.291753843866998,0,2.0935734532230126,0,21.74737340570524,0,-0.6583861523036396,2.4107177198827774,0,14.242974273460367,-0.9536204119325984,3.676716607233464,5.205316235144077,0,-6.101279013252338,-5.571393846091034,54.85238523803259,-0.1117572121208623,-1.1344807743809462,-4.969877811712698,29.027810230075087,0,-5.718070324341554,-2.4765247645613764,11.453535970058805,0,-8.558869339496722,-5.001133828273798,15.080047848652892,0,-3.3725014155699116,-4.6636644999939865,17.280262343643884,-0.3237475436456317,-0.9449016517036872,-5.101149399152905,16.57174596334234,0,-6.110884397827152,-47.85618144540876,9.30403667590193,0,0.5790994749065902,0,0,0,-11.546917171936983,-0.1,48.490404792485236,0,-0.9221691181442253,-1.2574999303913907,41.9619374875088,2.0495663930490053,-1.0773283820343733,0,0,12.24790547120834,-1.103239575474992,-0.1,24.85366235987972,0,-1.1071248772693136,-0.10674828024047552,38.37228188812852,-0.4780162833365769,-35.566757353178346,-0.6110385887566587,19.059562266803077,0,-8.416137892383492,0.3669215243140594,0,0,-6.088921981233306,-1.1038049326190278,5.353202102646324,0,-0.9760160936781084,-5.1000000000000005,18.508774896788502,2.6243720682416254,0,0,15.704280899458272,0,3.522218912239151,0,0,0,0,0,0,0,1.404432749919657,0,51.64818397700361,0,0,0,0,0,-1.1126776005596597,0,0,0,-6.580006164956259,-10.221027506935577,5.4162012439352845,0,26.121574587774116,41.01320422493682,-6.931997070823959,30.42106681128391,20.779826506306197,42.33188374067953,-1.9079696275109963,24.55251789790538,15.942935553552989,46.46771931659665,-8.87049251339066,30.79446852762596,12.907092377809002,44.380608100860925,-12.86770357766049,24.35848949818475,-1.6903751807448457,43.89109965504627,-14.507059199854103,25.715406209816592,8.285148228568934,44.54315769738054,-12.155365721029213,19.509246314456878,15.783465174318808,42.49443967211779,-17.302036363121893,18.55132119146298,-10.542108505416,43.367540147646466,0.27610578895992577,0,-7.13596096827572,-12.926170665467064,-9.88523527684333,18.70337054783733,1.8384615919050826,-10.266690441886928,-5.33197314898104,5.449803771743823,22.62868208655179,-10.576897781939884,-9.57540455934098,5.038888360864165,0.0475245780683633,-13.44767859539165,-7.3978045506647545,13.685308601566364,-3.22234234613786,-13.92056363158977,-10.644871367717267,7.2802524001205065,4.29132400576493,-9.181932710580348,-11.58209270297955,9.73713034810314,-0.3982363550430046,-32.783001801563806,-7.138113781914955,18.539228130807707,-0.7133319936035707,-5.1000000000000005,-4.1000000000000005,3.455858315923445,17.190926353617787,38.160025699205946,-1.902036012003329,22.58253493823649,12.24187724329817,-3.9298049023360564,-6.784236964512385,3.9221483540407296,0.9465385908626238,0.14160196603971087,-13.678554268979905,18.80198208925168,-4.011456517112969,-4.799704347264698,-11.201623626090928,17.417801524190835,12.541316111278999,4.517305546844394,-25.644431313755803,19.579047017996956,-2.0164358048982045,-3.068603211812392,0.2655288459799747,2.446707246105027,19.885830140336385,0.36277563790665074,-18.234829101220516,4.351277203309631,-4.435780340496566,-2.274568887394792,-4.379640733857682,8.487695969405161,2.402443325740979,-15.895158168054719,-2.9667661925401907,14.784148471817414,-2.0950153549728183,-16.123215591493484,-6.590797355219408,19.608648518112638,3.6035512738563154,-8.44627363123308,-9.09859742603717,21.386391045594447,0.1317830185380059,-5.1000000000000005,-9.391567599597108,11.355708516913728,4.438345737210835,-20.42700924682388,4.933100037257475,0.9687164530320128,1.1249593686017418,-47.36527541358326,-4.101242910212654,24.925082417417695,-0.19175446766827897,-4.15350843954646,-3.3522104898921876,19.514560971939623,-0.5448547726607287,-5.101243631911146,-3.031619213397015,13.791043338864265,7.581116730643323,35.343561937368236,-7.741537833981559,3.295682544883877,9.39135944449181,34.9799358919812,-7.47644152244174,6.595445252977566,-8.10057842513027,23.478861860313646,-15.86402205636381,1.7912384824714884,20.392123812449007,-0.6339673006922775,-9.595841833904425,4.263101216446813,-17.57531858269448,19.34196333700198,-26.875536585834205,6.835446566452764,0.09368172010995557,10.94102108827583,-3.2591076334511144,3.8787456057825827,-27.656408134943604,8.50976441520283,-23.27349914071546,2.0837222866189684,3.170305975338742,6.243908973545691,-7.7923589173031065,12.522421030478123,-43.068077948010284,-19.414849798551668,-6.794743614734598,9.397162805741242,-4.205494411564596,-9.690000000000001,-12.810179154746045,20.217330470071456,3.502043465471664,-13.387926582962947,-6.5949326047123025,24.555334279568566,2.930787733779999,-5.1000000000000005,-4.100975500006442,13.629602399248647,2.0276727065470728,-5.101250198264071,-5.008374541291782,24.2188172800229,-2.4737256115322097,-9.530296109718734,-2.4539142405887944,14.638601418895362,-6.147133391859042,-13.263508302296017,-7.79246375,12.112407732523067,15.872691922165787,-5.127827455953906,-6.465851437492445,3.877983149831066,7.60298693994616,34.22689770842569,-30.971103252135595,7.886841223173825,-2.4762730045175565,18.699736095487072,-12.030578212234541,19.365640898066847,0.35222413748254944,1.496172617245289,-36.544969930760075,14.242200522808627,-3.7968550133018546,-3.976048820180182,-8.593299553423472,3.2982994737288998,-20.731463079356317,12.600652094814393,-4.1000000000000005,-1.7253672150871275,-0.04815469002392603,-0.18797847157569458,-7.790000000000001,27.186538320720828,0.9966767927027127,-1.25893751952088,-2.457436366584694,29.19201422862735,-0.2591268856106371,-0.10621215907722147,-4.1000000000000005,6.086995663068368,-0.6003308283370338,-4.237728304510184,-7.236221853654898,23.021010009853413,-5.157375,-9.807594212584018,-2.619743273151265,22.802195081775153,-1.3392174832587873,-9.186024511245027,-7.790000000000001,15.324830561503292,-0.00312850752207975,-9.690832848324192,-7.796924696829896,11.051505241321983,-2.3173350669889814,-5.1000000000000005,-4.1000000000000005,7.699674801274814,0.07991641269987748,-17.44520359091633,-4.1000000000000005,7.999622643385279,21.331584515056672,-5.1000000000000005,-3.9080553123195423,22.1375420534888,-2.0401737967358673,-9.43065184007854,-6.447643396008516,-1.6815673387882928,-1.2961902819469682,43.961720479869996,-4.297655471476007,16.60032448642063,-6.1000000000000005,-0.1,-2.667701005532993,16.360595662570454,1.1595502744932682,43.89419240764849,0,1.1425707843621575,-1.005688422075391,25.224027255119534,0,0,-5.698667504580584,32.922193641035264,-3.1608057703857915,0,-6.10135977257202,46.24849965673434,0,0,-9.41608373189371,20.330974297521266,-3.342199331716031,0,-1.0127950678294562,4.272166088191521,0,0,-3.924070690126927,-38.754078777162434,-3.100316250023452,18.28662737548849,-1.1116210406134017,-5.1012426890625004,-2.573472765954012,10.682285777562466,-0.9697123873423596,-4.7107324714255885,-1.6083229132381751,9.079644932468744,-6.111838553976814,-0.6813165463769565,0,0,-0.14351586754426313,-6.57043151251616,-1.0664199046662521,10.706731450388906,2.1853018675581874,0,0,0,-10.213625,-34.49146475040387,0,0,-2.954340951464907,0,0,0,-0.3506518596772398,37.98996214146395,-4.1000000000000005,-0.10611128018900028,-10.49980810490705,-1.2975085992987987,-4.10125264714788,4.747115483684806,-6.116184974882032,-0.0655279905882749,-3.0691681216621056,25.937744436755644,-6.101244413924579,-0.46325067804168757,-4.1000000000000005,4.260642135780501,-1.078744619841348,-0.16507585760402232,-4.1000000000000005,9.886258506116649,-6.1000000000000005,-0.1,-4.1000000000000005,10.099221541995144,-6.1000000000000005,-0.594917547319824,-4.1000000000000005,2.35189599181793,2.8474914909524305,0,0,0,-6.111570159259214,-4.381293322768513,-4.117227828125,2.3000468644304686,-1.117252748411803,-5.106875842481115,-4.106870377412748,2.6128154476965975,0,0,0,0,1.711156371320225,0,0,0,-1.0729198347216993,-5.1000000000000005,0,0,0,0,0,0,-4.008333499562607,0,0,0,0,0,0,0,-0.19854842996160846,31.73449024868186,0,4.198725912650389,-1.1,20.602830225853747,0,0,-1.1017830345825887,2.0913267645882248,-4.1000000000000005,-1.2820830321318306,-0.9607453145247558,0.1736715829548362,0,0,0.665232921604586,0,0,11.655137348180213,26.34019956113818,0,0,0,-3.4979017661870526,-0.24569211472659822,0,0,-10.213625,0.580115562095783,0,0,-2.913227724853758,-4.885767531822113,-4.106872370603372,5.480778140977338,-0.8407264927376326,-4.698373473366519,0.5788484643473971,0,-0.7390151565878244,-4.869636557936207,-4.009700013885322,2.1112825382831364,-1.1806203145293597,0,0,0,-6.086288460952714,-5.1000000000000005,-2.9307105296231395,2.4141884141140824,0,0,0,0,0,0,0,0,0,0,0,0,-5.5065078194150825,14.321718708849003,0,2.4704916351243074,-0.8539385389513043,-0.1930382705657182,-4.1000000000000005,7.963157978699423,2.5330255448379893,-0.10674541527034927,0,0,-0.8350399174997734,-0.31326638530133133,-4.1000000000000005,5.664337967546812,-6.104345194679956,5.611142872368251,0,0,0,0,0,0,0,0,0,0,-6.102081883295462,-0.6071919455080046,-2.1198953972952013,0,-0.54688531673953,0,0,3.1816819812868413,-10.213625,-5.174517108584835,0,0,-1.1068625,0,0,0,0.47605782222433785,0,0,0,3.421789622086788,0,0,0,0,0,0,0,0.5596670102845558,0,0,0.6603865019850063,-1.0857086691453028,-10.214846422252789,-2.591565638054032,0,21.94611014100336,32.04913393721964,41.36765119253579,24.95222831955892,25.989833952270118,41.53696021654069,20.55497471216333,20.453208416026165,21.571196904305758,22.231551159830676,23.398371236915267,18.77706642105444,10.046573440956012,28.368596930321573,19.443656030449624,21.40812655158398,-19.908939624028683,23.066714214147375,22.41844954111305,22.35363814774713,10.71094591024812,16.85518444100031,43.84789411544429,18.84718665781802,1.928776940357725,31.42781373221269,8.818774040275544,14.729504325058343,27.134517413234654,17.793344532037867,17.20912190546928,18.816123494767993,21.00839363550807,-14.831591865446097,46.04378448889479,26.157032760575518,15.11955471422847,-14.67691516256276,45.45060962196641,14.070744263584961,1.8238386843450254,-10.429297528965677,42.46715722886741,22.559143712526875,2.0553570707257625,-6.502033006513295,40.686314594841534,8.029966401815507,4.4511263749853835,-16.307895224444596,44.21599996726163,12.743010940805751,21.619583075271308,-9.20995647700354,44.26172659908075,12.63172783191596,7.7138255005016,-20.536531830632036,38.17208153901909,11.171331414799365,6.654232717994581,-5.041381185368294,36.85495966451789,4.474907303965777,32.66429031437643,25.593194073612686,3.907293943710193,13.028591620827523,27.039826794483353,2.667801255218243,0.10138380078797271,2.65889762393888,-9.38011316479476,7.419571780942016,10.091896890506986,15.328855820395205,-17.023324152637493,-0.1337686346428163,3.3341517575142814,-1.2335758910874972,-32.166308958550985,13.131840906973181,4.517045929625046,7.290905760416906,-33.91327941416515,0.6322561324354219,4.388507438099422,1.787387864045205,-0.6378629301278922,4.218827597029897,2.0662107086838795,26.588432678068834,33.52039218790197,5.793672331757912,3.210124745885315,8.700671040923792,8.685158775591976,-20.790652588404544,-1.975235735360937,19.428966860178164,-24.358886420964748,-41.8966180462394,-0.9787658093976039,4.566983284571335,7.724605304673542,-39.112012995590256,7.6946961292499525,17.26525536534611,2.4996044231880212,-9.705589941509999,4.641472125928546,3.0492131415040715,-27.458031093241665,-18.01876185779555,-0.8149522480908683,17.8075107371308,-2.290055427092657,-13.780938446160896,3.297245725425676,-1.4176365120748384,2.31420919135361,0,1.3314022578038156,3.2398957340638765,-1.657705143178588,-5.1316521320642074,0.3898809080007533,12.538710664778893,6.8422979479139165,33.14629188010941,24.992554914760873,19.46628943294136,3.727888671499079,36.92080609890345,14.389886239176215,15.45554639644989,31.55417629039067,14.3814748677091,5.138163070333032,8.208683583771105,-2.1858007548888567,4.723344852516259,4.3728485292931145,24.904273428808704,34.26471178676322,6.256007520330528,6.274473345897562,23.570561409652314,30.582977633378494,8.564879965465234,3.9996664701873264,12.55539447565578,9.236375491252996,21.203548019650935,7.198555749026861,9.634369249174775,1.436101475191645,3.3272932817907686,1.7288379892924417,21.69959753544678,10.667966501048102,-24.832784191072793,22.40235706712229,9.648436451937997,6.888797179091885,-7.5796446860122995,31.68344416437289,8.506855022108368,-13.58498363423746,-48.364257416280466,4.786974710370521,2.8874414904098615,-0.5430009300647325,-22.68562767472345,1.4979540080803069,19.575727011705826,-3.986146493045664,-20.691977052174053,18.896510303102957,2.142131234085773,-25.82006889433806,-17.306095305035992,3.8765018381489624,6.021516976421297,-4.552503619489081,-4.912864385137845,5.6388145300369565,13.007579630645761,-0.11040026178645501,-36.862792696130484,0.9861284379139634,0,16.816301584787944,37.001750986359035,2.7088032644161877,14.664022718617865,29.95860434682757,3.289770624299466,4.092230310265249,9.436550425877076,2.5239555092415618,2.6326038502521385,-0.6026755610283901,-0.11843175477992443,-12.336361744571697,-0.7522742039093722,1.0444763338632652,11.358226483973231,-14.873549154367831,2.465363218315951,3.3191341023333347,26.099732575017818,-25.978849921642716,2.60207203822229,5.7901648178122045,3.7178720933097895,0.8978049466964444,1.2694007754491585,2.601925387928545,-0.11997694515528125,4.119240063117836,0,0,13.08354143572379,2.477551132054545,-15.666165499561162,1.3110276331100834,-0.49653233013171505,-6.034553757902533,-20.955590717139508,1.2025036687731079,19.930721630689614,2.6896963570309236,-50.97395723248534,-0.23926172732785667,10.4916833109347,-49.38296333320085,-9.701138573041586,2.40004872635033,-0.3791212638227141,-2.4780889152188834,-10.430044763105226,3.158051963549064,12.202342607742654,17.35427650091887,-4.995317194975723,0.3267299754944979,0,-0.770637624616743,-5.106710601693239,6.714318108144267,0,-0.5633318701526617,-17.28271425738285,0.3163206835052442,11.860734913059915,-1.0851119111418226,-0.1,49.98089241292666,3.445979982032773,1.6593122578063557,0,44.17567553117605,0,-77.8225280235284,44.987865684796056,0,0.6015551738741491,-10.002299634364599,20.79859828815663,0,0,-6.105942860119032,-0.1,45.35644075046691,0,-1.9247826677937099,41.24797059026399,0,0,-6.106994206006857,-0.002342176441825894,21.25557379619139,0,-2.7992362946738885,10.946740838134131,2.4749771671669976,0,-5.103831418469552,-5.846731076000639,45.55552831267945,0.7015742729788453,0.4365762666955677,-8.190836273784823,26.474276029519405,0,-9.35613030282676,-4.358495604432175,23.7539541462764,0,-102.2072060678109,-5.1000000000000005,8.62592146666325,0,-0.5981210489011568,-5.057968116624593,30.130077194387308,0,-10.213625,-3.9214102771898385,18.302910716458257,0,1.495077895325977,0,0,0,5.084650738997397,0,0,0,-1.0987721943553421,35.39074336768526,-0.7807580758226292,-0.1463411722011957,0.4649086684080841,-1.0790692468144845,-7.555197542821647,23.99611834397835,-1.4944694379376722,5.001216244684251,-1.5587210676044871,0,-0.34195121682965524,-0.10638104012215366,0.1976141431783221,0,-10.213625,23.96747599418237,0,0,2.1876019320678664,-0.6880453365093994,0,0,0,0,0,10.349014431098935,-102.15031605562157,-0.1,1.015847365621237,0,-5.956628835088833,-5.105731425906326,-0.22779624943042265,3.7241639864612197,-1.1125888103822408,-5.261651763467513,0.30163817975319385,0,-1.1,-5.1000000000000005,0.5339601379080394,0,0,0,0,0,-1.1695724611147627,-5.1000000000000005,2.065935455222153,0,-0.20497652276979075,-5.1000000000000005,0,0,0,0,0,0,3.151950495307694,0,0,0,-9.489391887822029,4.03975791502952,29.124894236216548,0,0,22.0564107871355,0,0,-0.5163219608383258,-1.654564182680062,0,12.683008039301884,-18.56200098509276,0,0,0,-7.987157033639292,13.033095139626207,0,0,2.806723923443254,0,0,0,-3.0042788361030164,14.071030501813153,0,3.0345461575222443,-3.8229119842147155,0.9348892909882648,0,0,-0.8419171282877524,-5.1000000000000005,18.582385524120053,0,-6.125064838248055,-8.542465339356536,13.287823760544821,0,-0.9541313642252955,-5.1000000000000005,0.9472574364708948,0,1.2664346327348328,0,0,0,0,0,0,0,-10.213625,-5.1067614204339185,0,0,-10.213625,-48.99990713106802,1.1511805193628062,0,0,0,0,0,-10.213744403525629,6.63977368603547,-3.4594507492818867,-0.10613646722483375,-8.616731385130304,-0.3364013205827927,-0.23634008444244747,2.8790425425429884,-0.31614021569601036,-0.731702166352247,-0.3815652048529128,28.98100881443964,-1.6304950906469422,-5.407737841402894,0,0,-8.654695046745115,-0.10121782053865108,0.5269106594023695,0,0,0,0,0,0,0,0,0,-1.1,0,0,0,-102.20720606808581,-5.1000000000000005,-0.20193249247886824,1.221833192617198,-6.1000000000000005,-5.1000000000000005,6.277795264409502,0,-1.1059379153694893,-5.1000000000000005,0.9947130554540267,0,0,0,0,0,-6.1012375,0,0,0,-1.105914546875,-5.1057375,1.7032173461903781,0,-6.101871292011268,-5.1000000000000005,0,0,-0.8722954949167083,0,0,0,15.047379466274023,24.161645292666577,-13.812303360527988,24.251972849432143,11.894971736655943,41.40004072635133,-7.715652656343169,7.343432565812703,10.295829527254481,43.897455020475675,-17.85485311147277,14.873164338348408,2.3032345540339816,43.65959090989516,0,5.554619456759691,9.11538617426601,44.497976792217976,-28.905138158470972,5.866859994784164,-25.567465961646292,13.437725411703811,-16.174815929872757,23.34593895379711,1.7394481900816854,30.77038471379447,-36.49843489494729,4.035969304399913,-3.4464615724084933,36.550136752293504,0,3.6241104107505766,-1.967020894390421,-14.757602480034969,-10.807975360633321,19.454457983224618,-4.349451792256885,-17.65204459088838,-6.558234589909747,6.544941305939325,-3.483569575567303,-9.99433301973485,-7.366359892518085,2.916459559680048,-3.2645001244601737,-5.106549630434497,-39.73973716530922,15.684093443768953,-4.853321554433289,-10.577616787687091,-4.1000000000000005,12.669035342862038,1.2086123031004854,-13.771976858511852,-3.8897709350921392,16.327347937977365,-2.464892688643041,-5.101036176290162,-7.790000000000001,22.395281681005454,-12.174220447582409,0,-4.106658233381177,6.661205050406626,-24.431859925368126,36.61665949793565,-22.80091213465267,6.992079554715964,-45.7509279695747,-2.165156156390924,-12.137132555546366,17.820873735262712,1.3115974758429076,-1.0612602967803415,-11.58400807958621,4.361567439532844,-3.0563913418045923,-0.4834869488140262,-4.1000000000000005,18.3113333335217,2.6764869581361643,4.913423626192519,-17.123600843238854,3.1494332793289783,0.6207639840311576,-0.17735544376738277,-14.108221157037772,16.551903974700473,12.398800661696221,-0.5944647931079694,-14.099900000000002,-1.5136171302190407,-0.6582299657003691,-0.1,-7.7956454087617235,11.270508344399765,-1.9388270319471195,-14.89002606684878,-12.215370123083618,17.354849822879707,-2.7541354418254906,-51.114187184738725,-17.625897556963032,15.468660767618324,0.579920674586416,-14.556346057453656,-7.904246054495106,8.337127800946869,0.14256014695090222,0,0,0,-6.101580415920064,-9.18700404983377,-45.26514196901864,8.771037130912868,-0.952806959788667,-5.1000000000000005,-4.1012375,11.692573394502785,-3.1878272420272995,-4.977827951512732,-4.1000000000000005,4.9222612919766995,0,0,0,0,12.685777968124226,35.06260451594182,-18.739221726436067,10.725218347206546,33.10043855724024,39.97648461245182,-7.808174616215313,2.7186844460640383,-35.06913649644042,2.8028072301474536,-43.31088050542765,17.81982109674916,-7.910408305733345,-3.677612236912969,-13.8300146567878,1.1527902882982268,-47.493100992043416,8.05873288711865,-24.195711515695436,3.4501483975788805,21.527336586389595,2.780260985287789,-3.355826908782545,-0.9268765548324757,-0.07757578226993453,10.472426261012245,-4.1000000000000005,-0.05518517602509561,21.959798838374205,-0.11178154232536365,-7.79235885917088,22.962950700886637,1.4534396145069781,-11.84280513481252,-10.332375634917287,23.284426426544982,0.48243307858621165,-11.35826756047029,-7.790000000000001,7.182547943004211,0.8629968060088178,-5.1000000000000005,-7.791147507660053,30.701226163897903,-3.268452445353439,-5.106504376040276,-4.101255671052734,12.603667894054658,-0.12804495438324404,-5.1005973875292945,-4.100112500000001,11.856852985872477,-1.5552492126916124,0,-4.1012375,-0.03379331191623993,-0.6294331301143641,-5.1000000000000005,-4.1000000000000005,3.7316869291879873,0,0,0,0,-0.49160391195133846,32.23366848454935,-14.21121284797696,2.3018788842522873,4.515002621084437,-2.73910732771738,-42.73967574309921,15.644777318077374,-36.351995903518926,1.0719736493963457,0,23.63678212462569,-2.365784421276869,-1.1311901863683855,-4.1000000000000005,0.6094591795727183,-0.9202240697756023,-0.1229469716595778,-11.112012047475615,28.824995535961147,0,0,-4.1000000000000005,11.034115711720471,14.251356207133215,0,0,10.0564634492628,-3.2182756382574773,-0.13429075260572904,-4.1000000000000005,2.7757451846794092,-45.30725950863278,-5.101066234030114,-11.113382473756966,18.785648666213,-2.9592045713709143,-9.69581726313789,-4.1000000000000005,6.168563363607026,-0.3096153427154028,-5.1000000000000005,-4.1000000000000005,13.047591890031608,-5.157375,-5.1000000000000005,0,0,4.277464600741706,-9.690000000000001,-41.01249440845355,-0.2454773931444082,-3.5965989062733623,0,0,0,0,0,0,0,-1.023373875787028,-5.101249342927734,-4.1000000000000005,-0.1681597303868177,-13.670531614320815,37.90884505087225,0,0,-0.398741554317378,45.69356151336474,0,0,-2.8772971260900766,3.109365451137153,0,0,-9.805043684251043,8.743694854806108,0,1.7629502780615862,-0.8539825679189654,17.637065682447805,0,0,-0.28407607269518304,-0.1,-41.068681751489805,6.916201368874347,5.418699960019861,0,0,0,-10.056889782283218,-0.1,-4.1000000000000005,0.8493861865089614,-0.43306429665601015,-4.447667465338459,-39.716590173991705,3.5795114433372026,-5.332372110583666,-5.1000000000000005,0,0,-0.9919130763688705,-5.1000000000000005,-3.864715685299812,0,0,0,0,8.599091378633444,-0.4373219597641054,-51.01245220284228,-4.1000000000000005,3.2313223002439364,-6.100112500000001,-5.1000000000000005,-0.21455337243070505,0,0,0,0,0,0,0,0,0,-5.821199877835013,17.102205006241846,0,0,-6.1000000000000005,0,0,7.745902010480169,-0.8279265604220836,1.0811125251405411,0,0,-1.114190247702587,0,0,0,-7.786697368890462,5.251428541162609,0,0,2.0765052457926543,0,0,0,1.695135611783178,0,0,0,-0.7792717017361156,0,0,0,-1.0068335682270562,-4.783194691328495,-4.688093672872731,2.6002493264199296,-6.101249590726072,-5.101209353579437,-4.1000000000000005,1.5185569223897535,-0.1835985339121411,0,0,0,0,0,0,0,-10.213625,-4.842793289345341,0,0,0,0,0,0,0,0,0,0,-1.1290416665151364,-5.313165633657193,-4.1000000000000005,-0.2898234466930532,-9.770363504304736,32.63109540386556,-7.034189103062991,0,-5.745949466626311,7.916208914805258,0,0,6.082747205491307,0,0,0,-5.737908721187986,-0.30710826700380256,0,0,-2.4089925753285586,6.596605298173335,-4.1000000000000005,0,-4.924856579894453,0.8958509818922316,0,0,1.9226846047412942,0,0,0,-4.7709542015985145,0,0,0,-5.431489667927053,-9.678828332950124,-4.113587935178175,1.08594972212386,0,0,0,0,-1.106975,-5.1000000000000005,-4.407904416027121,0,-10.213625,-5.1000000000000005,0,0.39150310363596064,-5.2911685038858955,0,0,0,1.9644770802764433,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-5.3699165397679804,16.469433930425563,0,1.4044066743961154,-0.17830874200997507,-1.1558721067606106,-4.106587707331358,3.062101884693649,-1.1171263257497615,-0.1,-4.220702329452576,-0.02958481829100046,0,0,0,1.4033012945355188,-2.9417260050191336,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.8922845722296673,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29.370819298660468,36.53700916712877,37.8183187319099,-16.680908554064295,29.82170705532451,42.983625552022666,12.340072036394497,-16.703367452236623,24.006624802984526,34.19216769687278,27.718748970549793,-19.208523392321307,5.025727362598014,42.2372250107611,26.702798701079427,-10.867945853125471,27.038651361269267,35.17743488877741,56.9174456762083,-21.46752663469191,-30.548195086857127,44.06569023462814,18.288156072442263,-9.121217037230943,18.47738230212786,36.38930874210182,54.4671490013193,-12.19676696761329,-6.101233841173332,41.2520647131276,16.979400283140567,-3.8340134597475126,32.78009837271859,-11.33592137321015,49.83932538943876,-18.642321272852357,14.03727586754412,-13.446105742624713,52.86381206731372,-9.410019157740615,13.209206598262513,-8.514068728727741,45.304433207968614,-16.23123696730865,4.985612040131028,-6.0724517936551825,49.06982672856274,-14.531521788164467,7.591256884122018,-13.46992097227626,52.501812113984684,-9.011199373619402,5.557293381520125,-17.209539097313378,52.76282445005474,-15.952408225748199,10.78779906821108,-10.148282176785614,49.383785067574976,-2.771036851324087,0.9005677729628556,-9.618683564995514,45.13674926606731,-1.5329027247599776,15.1253966982581,34.92246064858671,21.41402001142708,-20.821177307805325,11.078570540278497,21.9660372834658,42.63403690992729,-18.5621064318493,7.74520782947354,37.00787912529317,51.80031206484307,-8.307384422113929,4.98068854890207,10.643054809465987,49.825165597933015,-7.957694342506759,8.648509792594352,21.88989274196388,46.58743961215457,-21.93009267410609,1.525636300015683,3.3257924953056683,48.85106831070545,-3.5999170142890637,6.467465712094822,1.6404779032077395,50.64876045329625,-9.41559876996172,-1.105220513378177,2.9370680703352234,52.94899051353887,0,-0.6257228615433243,-10.64098962520126,51.75527954850418,-7.3289371233305,-0.44265593763360384,-5.1000000000000005,52.309185809687186,-6.233639077422389,2.1632659869212088,-9.889964921980258,52.05467724438896,-3.0176811846416243,-0.3707464134184394,-5.13632958344808,49.59286847226255,0,-0.5584710714804108,-5.1012375,51.548569758722714,-5.10135,-0.3616269913283068,-5.1000000000000005,49.988657400987,-8.50631484095088,10.959848455346528,-5.100910672761127,47.36514281947098,-5.106626025833484,-0.6973490318144854,-5.1000000000000005,28.273153485665173,0,19.944871839968112,34.26921634138526,53.84907862275908,-28.924769252343584,13.56165124541741,36.952668683055144,47.813837820613095,-16.40673886781081,10.633734922037366,10.005835674837192,41.43256717880576,-25.661150888410265,9.948931240733677,4.811946509346631,37.86938760642373,-10.633576489551317,-13.598937347092267,22.370205764873617,52.87593411184467,-18.77108701846506,-8.67788040831814,-1.1154094576463778,50.83560656168147,-6.7549136013114754,2.657321435801239,38.58067789182064,11.437802317622682,-5.455262671080973,-4.64226238560269,27.82275571983821,0,0,13.45281785673178,-10.333989404948639,56.7053512079724,-26.97658665520635,12.546121937110843,-10.38274173873222,18.73122818144061,-14.562813460118038,13.099725856666407,-16.46507457731012,13.738916143870648,-24.452542322049684,6.159455388907726,-49.482488989464315,35.72224127456154,0,15.382088256217791,-14.496980552779744,52.59775026811181,-22.336378674731147,4.1193129116639975,-18.598440332736317,36.488736126347504,-2.8956300937215986,4.878683021923418,-5.097581271483087,15.196498500020823,0,-0.009031668211996101,-5.104246735513818,30.697589777015878,-3.0994847101933156,9.70440517294173,3.489868196321452,31.68300463690417,-17.858745518146623,4.9532520042133275,6.594926485975435,45.43714492231666,0,1.976474231664536,17.995959719421244,36.364608353337985,-13.898976693633026,2.4874010505750306,4.103516045823849,45.35188133192238,0,2.576308906532035,1.3780375088201735,51.7371050477094,-4.464974382940614,-0.11474719841091119,1.9170706779632205,48.10611112592608,0,1.3586114052538578,19.387391291527884,31.738312019641576,0,-1.80043014171589,0,16.47441566178142,-4.720797238517962,1.7530836086336994,-12.779223431918016,47.4668347704239,-3.9261746742110475,-0.5056291310364975,-6.934879248645061,41.833724282654,-4.568604573752957,0.8032478870528493,0,52.93266387247546,-9.690000000000001,-1.0289313000975802,-5.1000000000000005,17.17132958398633,0,1.3049165118059352,-5.1000089572244764,28.898898788643564,-5.1000000000000005,-5.157375,-5.1000000000000005,5.4618720921948976,0,-0.04764946755844261,-5.101388922668996,24.72601674938361,0,-0.4080527549460591,-5.157834059349315,23.82063430031959,0,-0.7126243859735235,44.31660131358002,4.700242674465573,0,-2.136349030991766,40.5634762883448,0,0,-7.24978322289086,-0.029621136795973925,50.76879977973457,0,-10.213625,16.983066174387787,0,0,-1.0573810318756853,22.64484085259199,0,0,0,0,22.379635522912608,0,-10.213625,24.55358615165971,0,0,-1.1058822945728215,-0.1,15.434045699492604,0,-5.762293882617776,-5.652144696123097,40.26129349976351,0,-10.213625,-40.56681447113274,27.269856241071743,0,-1.1113820905441691,-4.705765304890643,22.037813571174045,0,-1.4948016990864685,-3.310407298744883,9.730279179707006,-5.106830375062018,-10.213625,-4.687302436477338,49.95818769718072,0,-102.20725266153832,-5.104095091683252,52.58734132580417,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-5.860405717704799,30.94521389753343,0,0,-0.9416346578921657,-0.5051098827811992,23.253952662906613,0,-10.213625,2.858938530771785,26.429212187759685,0,-1.1160827882670663,-0.1058939129551346,21.53656145401634,0,-9.49905164372794,2.692357856356219,51.6279187696018,0,-1.2819161970556858,-0.5797102252878595,5.2277536971421785,0,-6.106445489682179,-2.4581243555214685,16.16906418414254,0,-6.100460286049056,-0.16555363513299248,1.293763739357771,0,-6.1000000000000005,-1.9691464055829162,13.806348423774395,0,-1.1053415339794144,-5.117227828125,10.475229885410142,-5.10700936386914,-1.449103657412963,0,0,-5.106515265381738,-1.1056470797531204,0,0,0,-10.213625,-5.1000000000000005,11.7760047276734,0,-10.213625,-5.241425556582112,0,0,0,0,0,0,0,0,0,0,-6.9046448863300975,-0.1,41.00845917810806,-5.1059138190135975,-25.16445452127464,19.591161702753936,0,-2.570664321986232,0.2754279335827159,-0.10691037397476276,24.693676306767802,0,-10.213625,-0.15838808718121694,20.088104178965207,0,-6.10597543896017,-0.1,26.604908517060064,-2.547502196593928,-0.17863774478839378,7.5489940880727024,0,0,-10.213625,2.8461721657552865,0,0,2.2445630100059577,0,0,0,-9.693276031525205,-7.61842294850655,34.64592340377314,0,-1.1093391328250901,-5.1126573392299415,10.192460056906057,0,-6.104799068266545,0,0,0,-1.881818732329013,0,0,0,-10.213625,-4.8200766315763985,5.640264079811287,0,0,0,0,0,-1.4027038950970334,0,0,0,-10.213625,-46.8651614851298,0,0,-10.213625,-0.1,18.999460668941325,0,2.87073373738098,0,0,0,-10.213625,-0.7530341949314485,13.025851251621198,0,-5.99542819393766,-0.15196436988007186,5.584919590354309,0,-4.093499382770443,2.9675311275096354,0,0,-0.45909760525074045,0,0,0,-8.338215367569806,1.2474764339200926,0,0,-10.213625,-0.1,0,0,-1.1092905751144646,-5.101249606663966,13.820821959726139,0,-1.5633465650307732,0,0,0,0,0,0,0,0,0,0,0,-1.1066751190482937,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-6.1068625,-10.2204952203125,5.389857293186209,0,15.502387294727834,44.7733449005689,-8.27873196673579,-23.644418268882863,12.13234374883161,44.46005516199392,-5.197606170753584,-2.596302612366531,1.229687122891416,45.16302515332578,-4.710395316678412,-6.914377747207224,-3.9235242104686363,44.67209608171765,-5.284074038493755,-9.019221173736645,18.56746702811326,42.53702442432432,-8.478030406831486,-13.587369756344502,5.2368312673960435,41.369048495303495,0,-5.842946760181473,-0.43330635618532454,41.7402285461484,-3.9073143142812654,-3.625333139682541,-0.7766023892488305,32.23000489897445,0,-2.825047034815028,-71.11718700852747,-25.166020066016234,-20.797157654043907,-24.087700323918412,-11.272574412722687,-9.927360584695823,-4.632103777750083,-22.4301393160765,-13.62160600930049,-10.794580684665043,-17.07779201498236,-15.242120343738673,-9.04067189536323,-8.961583897329703,-8.17451586800534,-13.705072070273555,-7.468046336205703,-5.422482763682648,-1.5552312839736848,-4.333333496731008,-8.026014419658681,-8.552588541309264,-6.266040795182358,-7.888294998118477,-13.60588876796983,-9.301436905483381,-11.112619827749066,-8.538808518859742,-5.157375,-6.0616758597150895,0.6966851330896479,0,23.025158055620807,35.692365010639854,-6.577311982432812,-43.83798678850042,-44.58758199623946,-5.163081319252861,-14.320403293177524,-17.317204546870162,-59.22029069529481,9.760016459397129,-9.674628475640255,-13.891432006325518,-15.525345317483296,-8.134429229791195,-9.78325608533704,-10.07179857605196,-1.1247926378703434,3.9970114409454585,-3.824655122146128,-8.20658846490494,-10.853595360115321,-3.687664603684576,-15.446103068124245,-10.681325204001908,-11.497650115573055,-7.58666753217951,-14.175507966176347,-50.561157011320674,-0.21104188527659817,-0.5118182574920606,-4.101244113647444,-5.048649226471306,-14.723271336814424,-11.826138190552625,-7.7734474691585085,-13.574644407738363,-6.19560947259213,-10.044252556066528,-5.895755038666666,-7.099057107809843,-6.841891317530127,-6.896626515964928,-10.338273304365385,-9.402885280853718,-1.0434965829314424,-5.1068625,-4.112652561541672,0,-1.0385116916770702,-4.830201249707018,0.4665979807598702,0,-0.8892989129712161,-5.119179475487156,-1.6489117961334938,-4.9733463452985776,-5.157375,-4.089773984220133,0,0,0,0,0,0,29.615958612794895,34.579298789124636,-5.824553941004943,-11.252592894069723,-6.1000000000000005,34.93444872766624,-3.1881971238988944,-2.225925390056108,-2.1170087565341165,8.943051483251514,-7.130357993810313,-12.36589248017552,-0.605401458043458,1.164027811476754,-2.670182954754953,-2.3955363775410192,0.3627399198472352,15.756785027978413,-3.404245327127705,-15.97539211888975,-4.9888999900043665,16.091932108544594,0,-1.920718363514142,-4.776159715775083,27.349574597545,-31.684397065338228,-5.060513605032971,-16.41461606433861,-0.8429127415744182,-41.0287011430972,-9.427075936923854,-16.044375012266762,-38.02794033233787,-13.714870613993707,-41.18062273455745,-8.089257691748609,-9.696267059452992,-5.380550917049236,-8.399255982901426,-6.438199479256839,-9.702554926717319,-5.498893963256734,-9.706798286638996,-5.4238238791857185,-5.101138671763326,-2.7227761511030786,-4.7259766761863355,0,0,0,0,-1.0669953524938143,-4.910785402772701,-4.100961570636779,0,-0.9000053888389946,-5.07230501258621,0,0,-0.7413059619838963,0,0,-4.557747352277054,1.285964424978793,30.576790539766797,0,-2.5504838796513534,-4.129190962576208,-6.557773674424231,-10.888967442941793,-21.808779256087142,-12.200082699009066,-4.166825189098098,-18.328405731281865,-13.076003975990732,-6.508280224802442,-4.093140190540781,-7.613994485392101,-5.100645254992148,-3.7834185018437783,15.284477185602789,-4.1000000000000005,-3.001078427266939,-0.6948092765318582,-0.7077942242524358,-3.610928233503654,0,-5.410170429743963,-0.1,-4.1000000000000005,0,-4.091598453229152,-4.82952876360383,-7.791243764991824,-5.1000000000000005,-9.379158693639638,-10.06271651871599,-10.556522906221746,-9.691232719639551,-56.19529290479604,-9.759834911906038,-12.335188560492178,-13.564022584689411,-1.7532048410677779,-5.124669772251905,-41.01250384486243,-4.601809760689686,-0.8372234027260442,-5.103792195183849,-0.35284156036438863,0,-1.0695509448008966,-5.1014073443960575,0,0,-0.8162748511743738,-5.1000000000000005,0,0,-0.8889937661339418,-5.1000000000000005,-4.101243151444729,0,-1.0275182063401473,-5.1585309579821335,-4.04099679781173,0,-1.077514335137044,45.751511710901624,0,0,-1.105883618916863,11.40753058551519,0,0,-6.1000000000000005,24.02960793152528,0,0,-1.1103874117985075,0,0,0,-10.213625,15.256930590924771,-0.28406637649605315,0,-0.1621411293732905,3.6379181988548677,0,0,-1.1280278542619087,33.48484005109262,0,0,0,0,0,0,-9.040398218681048,-2.5102882154515647,-1.232681786762467,-5.107423707634038,-1.1109326041308687,-5.1000000000000005,-1.0209921977878726,-5.109747768867159,1.2276673345808764,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.644592793378987,0,0,-10.81165560659504,37.23305549692615,0,-9.235866555866032,0.43082713685830853,0,0,0,-0.2985776110871166,-0.17203424719413174,0.1980668209174347,0,1.9758386126942282,0,0,0,-0.7376247661646895,1.3480924689197407,0,0,-1.110873818026892,0,0,0,1.9646472745062535,0,0,0,0,0,0,0,-1.1960686790918196,-4.814980546984295,-2.8996229709501438,-5.114277420001454,-1.1049499353577528,0,0,0,-10.213625,-5.1000000000000005,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-15.173696057513071,0,0,0,0,0,0,0,-0.5747926945832462,36.24134524313703,0,0,-10.213625,2.5673593930218743,0,0,-10.213625,1.5417464093507087,-0.42165941208067254,-5.1137626875721125,-0.7238908845429515,0.12696086290505254,0,0,-10.213625,1.413765037722265,0,0,2.3455130379609166,0,0,0,0,0,0,0,11.482310356660802,0,0,0,-5.183550373960443,-4.851723662333011,-3.43484103229073,-4.864806237154758,-1.1804131315857258,-5.106981610569521,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.101949961642081,0,0,0,0,0,0,-1.1115239730755904,-5.1115964316456965,0,0,0,0,0,0,-10.213625,2.6240594646301654,-2.0275756208785047,-9.374615447967983,-6.1000000000000005,-0.5533527095020245,-1.0848342186926072,0,0,0,0,0,1.898036217207839,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31.016192202262353,28.419637414300784,48.15675127922059,-20.68162372800981,4.98605865257748,17.710840140878048,43.35795592084358,-2.5697415667875942,7.09310916408513,19.211600259864635,38.43842904974702,-25.211430174903303,6.106009947206922,45.09010545393312,4.278145748750598,-3.856477160215199,18.648529238720517,20.788340281006565,40.83420127376336,-21.76548604495924,31.18221777687944,5.618591044740595,48.51706301915341,-2.740749614893589,2.5362813897335017,35.86919499022631,1.091150365296332,-15.701661470251532,12.455693166799046,7.666645263183217,20.52795481587055,-6.342636006040593,18.16930582333488,-13.66423437877985,44.43863996359106,-20.068291177466477,0.9872458217326905,-5.1000000000000005,43.58400621352958,-7.037068184272595,5.754442026902934,-5.101249188739864,47.24508330026791,-14.550825295079646,3.7908989833747837,-5.106677131550046,43.28953802431242,0,10.652850040937215,-13.244401391198574,42.8748420733195,-3.5381821667476703,-2.5391988105089913,-5.101743147638579,38.333176369524544,-12.839690208364923,-0.5449001803799262,-6.365511959238678,23.286898011384785,-2.9920111472026427,-3.4399976922615894,-5.116909946541511,21.37515571902184,-9.242053796595428,14.434664494322824,35.941117191322604,5.8667927181413395,-26.7769676701865,-17.048824526829097,-2.9296121535631077,-5.641225241962107,-41.314802937503956,17.591097565740732,19.509975636241244,5.59139522876176,-31.134400411651402,-2.401432784297962,-1.8210158389833069,3.2293553676221807,-15.21229772054298,-3.388119806110391,9.016117103509847,0.09771278692518492,-20.974960495358175,-3.932657512724706,-2.4680665137147297,1.607018116763708,-12.108020182126854,0.7729366358936285,-0.2905124929092598,2.9444653703545844,-36.001423551749696,-4.3994776861380105,-2.191056264681453,0.7213024664429724,-8.029741425841296,-3.9260261131488905,-14.874378217531847,3.4518626665023406,-20.798488164761654,-3.505283045154202,-5.100444160313001,3.5535874411805297,-9.214148342993486,-7.80901642570891,-8.443963525516892,4.33885250462764,0,-0.17420578365590877,-5.1000000000000005,3.7923374606331235,0,-6.195072524494125,-9.691188907632739,-1.698843539835482,-13.721953437090619,-5.963418124823951,-20.92800795157992,-0.38503865069058074,-13.838455993092872,0,0,4.1350460636459,0,8.718911896702588,-9.695806771482498,0,0,19.614298475109365,37.12351353384088,23.65896885642921,-16.614497910321916,3.172813772787117,3.166391554215928,32.592579147681015,-14.429466112634797,-1.9051992963911282,7.109738340103339,-0.19510242788968268,-26.57863121108436,-5.507339048737072,-1.5318591392014236,4.7321474708547555,-7.730850678550343,12.156788436622026,17.204192209617467,10.554673540913294,-23.246282668804433,0.030941383618269036,1.837173390760508,7.057636367363221,-7.700289463159088,-34.92089969836927,15.525067262543217,1.518257446315192,-4.741661467393515,-37.031309437562655,8.921576724121458,0.16111549828493743,-6.481740733495529,2.5147445563382504,-10.973814672770573,33.05443048143351,-4.303297446347105,0.27256244792200457,-9.690732820945476,40.73315999636637,-9.201492867340605,0.8758976476468554,-17.377781216573474,5.228152546707601,-16.734878626655824,-3.953473266620571,-47.996147527016355,2.848539140471879,-51.01917409634939,-1.9245253018937274,-6.38413353966068,6.855020317834534,-13.786878871088902,21.010914264621093,-40.41848251672569,0,-9.5180329034715,20.26472304054839,-5.1000000000000005,7.299511391929604,-5.1000000000000005,-0.40359397993634816,-5.101244141956069,11.37778723003176,-5.117902082225633,-0.32088356446855687,35.210052048718254,-0.9207948626076717,-48.63455440611827,8.5034204628055,-5.55222210058024,-4.6132644300866374,-39.22310222422417,-47.71008805278939,7.531130015923916,3.3515367791750204,-18.49176185688172,-6.8875771134702495,-8.123634865986675,11.721423071373462,-46.364038288957694,21.54583181836128,2.126376623579236,1.8111029214948609,-46.140928727503656,-2.7775825195961574,-0.06808654863785199,4.4362647462102744,0,-0.7258105348106079,0,6.424665221320095,-13.5264221622134,7.1673513222170335,0.009565503745414185,0,0,-8.387885504143467,-15.1992937882319,11.153340520624507,-13.837946228286778,-2.0355981878102645,-9.737996150525262,5.087622751016323,-5.1000000000000005,-3.2927875900847825,-9.403550709094372,7.599858594355389,-9.696028139760825,-2.5024675818793787,0,0.03324387363934521,-4.849444181979435,18.195938164021324,-12.487817201470655,0,0,-0.6225545267954323,0,3.411661409145742,0,0,0,0,0,-6.046586287175973,-9.748453036311338,0.5953585515390398,-5.10245554756602,-1.6654412339206175,39.82329442766285,4.74864626317793,0,-0.6091031785195158,21.024071156778497,0,-1.9091577248122389,-18.661885629184077,-0.1,31.321629541487226,-1.9319244394343962,-2.426614867273596,0,0,0,-0.9815800963518566,28.04015745493099,0,0,-6.101250277379196,16.22907019019116,0,0,0.6520187195301322,0,15.001824091871622,0,1.0910597410689757,0,0,0,-10.213625,-3.919815491856192,23.796287932454685,-5.116773919068603,-10.213625,-5.104481526297974,7.586366689768051,0,-1.1172125,-4.679716969208259,11.963493138082223,0,-1.1431019577573018,-5.105738946738416,0,0,-8.516296563626423,-4.907470760213357,5.911288351939854,0,0.10199438749884636,0,0,0,-10.213625,-43.89971222669021,0,0,-10.213625,-5.1000000000000005,0,0,-61.00491108111816,32.82738529569357,0,0,-2.0956374287829678,-0.4175224620650541,0.270245610610586,0,-1.5545366411249282,-0.39527823988403465,0.7180016230052767,0,-0.09791249384520846,-0.5408786261786259,0.436304111836199,0,-3.13345557219839,0.6017455203717482,0,0,-5.963789858834609,0,0,0,-1.1,0,0,0,0.8846861908498813,0,0,0,-7.434672533829569,-5.1000000000000005,0,0,0,0,0,0,-6.101124374370961,-5.1000000000000005,0.6176416287323676,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4287169770183664,0,0,0,0,0,0,0,-21.879219196507606,11.392335391226329,0,0,-10.213625,12.017345063082189,0,0,-5.5303434272090595,-0.6611484737805688,0.17830497797787792,-5.108030341861185,0,0,0,0,7.484136446581822,0.7966597264670983,0,0,5.140548341187941,0,0,0,4.2202255455137205,1.2665249638806733,0,0,0,0,0,0,-1.795028985070481,-1.4789462964693685,10.296665586947649,0,-1.2411399617258871,-5.106875173977189,7.547218307365512,0,-10.213625,-5.1000000000000005,0,0,1.299349063583649,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.5963730703203538,-0.1,0.4489395344794271,0,-10.213625,-0.5644456771649868,0.795647272843339,-5.072460087963108,-1.6699964268925447,1.3679872753257136,0,0,-0.31558777325736104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-1.8597306871740846,0.970904012831326,0,-10.213625,-5.1000000000000005,0.6803434866959513,-5.117247209431641,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16.152127537644187,46.34079052607358,-8.371088729370182,-8.206918788242824,1.8678462658921533,36.57178424827478,-7.076406230728019,-14.571346617655198,0.18715651072600403,42.925069971273516,-4.574802183128681,-5.227483885173715,1.3280781288059031,30.77766673075571,0,0,-0.6311444501000132,40.96535252915074,-7.79686285953378,-25.1684668517097,-4.469556021346754,23.541010928501677,-3.9555003911931936,-27.642621179873117,-1.924414789212353,22.055569743065682,0,-4.5868487336338335,-1.1,17.953863861574924,-3.744259245985946,0,-19.697599641099604,-20.120253665754653,-18.79951626690323,-19.22061251887767,-9.815255070004053,-10.692111571034706,-29.309541366566776,-12.88716901797553,-14.465131886355561,-14.02557843307094,-12.293424349651502,-12.089036399868526,-0.26103715263132865,-5.1008924415043575,-3.013628174371979,-3.4786517597835527,-6.023670531208079,-12.539735871071972,-10.309497803923726,-9.696955510497125,-0.9981007066834983,-5.10124092876044,0,0,-5.157375,-5.101045297533609,0,0,-0.30938357051382814,-5.106862701416148,-4.035657295563875,0,-3.1631168800575744,35.45095266139959,0,-9.634784245003425,-10.11347740531788,-8.755402405666404,-14.43632651845339,-20.758379971171607,-6.91157877234475,-4.370845997332704,-7.79120698258471,-50.384868765776076,-2.524973153653595,-1.8681776311145672,-4.1000000000000005,-2.0808833873517862,-6.0290191491250305,20.309587887554052,-4.1000000000000005,-5.1000000000000005,-7.481455388506913,-5.12595480059892,-8.651397067550853,-8.894955969353171,-0.7757085050620578,-0.1,-4.101242878098448,-4.808450959604337,0,0,0,0,-6.2270068637339895,-9.701691983341759,-7.791251094805274,-9.69136268095239,-5.157375,-5.106007846329803,-7.983966846809295,-4.779597532779817,-0.40262426936889356,-5.1000000000000005,0,0,0,0,0,0,-5.162830463802336,-4.8493011576311895,-4.20897647388179,-5.116216326243198,0,0,0,0,0,0,0,0,0,0,0,0,4.010609083278531,25.786785239334495,-13.74767577638806,-17.228476569356772,-4.443005197762304,36.748165577643725,0,0,-1.9987191338883799,0.2408748443584841,-8.01149162534378,-5.113215557562233,-3.1991323543264105,3.9301744250106183,-4.200762926264383,-5.09697371174445,-0.3573753331741527,10.231506400224157,-4.1000000000000005,-5.106740488371507,17.153350384014118,2.0317390965675,0,-5.070013791950135,-49.232970408754724,2.9035736934100327,-7.791113750000001,-9.481793255954333,-5.36348768269721,0,0,0,-12.014410572747641,-12.532430844870662,-10.673453431517945,-13.452354664314099,-0.061493769911390994,-5.1000000000000005,-4.100412287952404,0,0,0,0,0,0,0,0,0,-0.7214231173830403,-4.681277750204115,0,-5.009683158163275,-0.9691968365644918,-5.1005169240205355,0,0,0,0,0,0,0,0,0,0,-0.40310112493065725,-0.24945539241794598,-4.1000000000000005,-9.701602828125,0,0,0,0,-5.157375,4.1318094559891065,-4.1000000000000005,-5.115908121587868,0,0,0,0,3.8611571802227758,1.875307253876856,0,-4.878675252323634,-0.3614609823532668,-0.10376092733359055,0,0,0,0,0,0,0,0,0,0,-1.1246471538390495,-4.310624793681862,-4.168818813066336,0,-0.21960203412137141,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,1.57261966395364,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-17.85019047441321,25.522073040223432,0,0,-1.4886639997158624,2.565337985367463,-4.073020845623982,-5.117038661147143,0.5665327682407402,0,0,0,-0.48598702881053424,1.1197293275995692,0,0,-10.213625,2.656035885514871,0,0,25.924744114807527,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1058955378489554,-4.316838685780356,-0.45455669248750186,0,0,0,0,0,0,0,0,0,-10.213625,-4.877385662788482,-2.0934922434480963,0,0,0,0,0,1.5508888852209115,0,0,0,0,0,0,0,-10.213625,5.6594935798360675,0,0,-10.213625,-0.14492299313945323,-4.118094263911271,-5.1009745879817645,1.0881399896617456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.886781146349732,-0.4071194418052242,0,0,0,0,0,0,-0.1814111171075357,-4.240125789943436,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.3156448850952409,2.7388384132622607,0,0,-2.5087239357378706,0,0,0,-99.63924123362213,2.8648775946558764,0,0,0,0,0,0,-10.213625,0.3653636622144849,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.37876754796825385,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30.838527494669037,44.727341019699224,52.827300458142155,38.42308682863656,31.24455980089649,42.028659501052516,53.57861566253151,42.09054715236856,27.985251631095956,45.02460493305069,53.68952218996796,42.7001523183411,25.234120008317863,44.23752051233584,31.067503780381617,39.97893355178266,31.1861607557609,41.903890836057684,32.2005534168757,42.48407273474243,23.0635860943649,33.58820086896142,49.14495587898003,43.73276509124431,28.735077152212888,38.62972068767567,29.10021953717232,32.978293831712406,28.27961879393234,31.98526245528659,32.125802769270855,36.559707887743286,36.26470726113267,-7.634289962026834,55.308644247360384,35.085607180486846,36.47174365345846,-10.84784367564111,51.53578733075401,37.66279782672555,36.20789080539886,-5.565623349326457,51.2340580043443,33.17048759551228,30.68005538679286,-6.639792861211937,58.83194292249245,30.143011873125932,35.89420577544095,-11.90747607647359,57.55905380142785,36.32903743574863,-9.626511702744033,-7.518579393003403,48.22091720930183,28.47435802916706,25.394537833485266,-11.66913273320601,50.45426930654162,28.913463681420232,25.429400408578182,-7.428958180390402,49.81372358710462,23.355951778750367,28.714119381718028,38.91740888072697,39.65215603371868,35.50583065273648,22.268401704542327,36.98585711660966,54.39460582534555,37.22273818351273,26.552736353323404,33.41680605539642,46.85296965497835,36.44478388887089,36.21984793959918,36.995973209935094,53.901053891649546,31.374895211776128,28.793065474321253,35.654741424300234,45.689291493984136,37.39513927333816,-0.5659484937233676,29.44454847701666,55.38791177468925,35.925425037514785,26.244323814440754,30.254786296034254,58.11110759536511,29.399196141024586,17.74684164162162,34.006457252964104,51.00959768190971,20.61806986513332,22.713808717274773,-10.839341346387588,40.645327171738174,30.49660854333676,11.15730555820622,-12.425034130361475,48.684823407876834,39.29133035787749,22.68671776485236,-12.786830326923994,58.07925950294462,36.448567300082686,12.138819866685342,-11.182791612414432,50.99207091268207,31.386365090808678,23.7381515378019,-12.485141657618428,52.22982956234969,34.79823954193581,28.24756877755205,-14.785968854027898,50.61185987324498,29.897407985558516,15.644240147504716,-8.964823761311528,52.92194949429204,20.24540460849266,7.081912321738415,-7.51493005796726,50.9521689823074,23.71977721351278,35.30115011938447,36.11871481588727,20.44425379045414,44.69396344295088,30.733232696622046,27.39856728898527,27.18634010487931,25.745150269055614,19.77443367620934,31.01478534614522,40.876483093433926,27.988678220600384,20.906673533597004,33.09902512685588,21.91799831048493,38.68180700110394,-14.988070791310298,34.36535012384212,50.98200486360496,31.154692774258947,19.424524717857985,30.563690779212827,32.27018898091425,29.34808058985704,19.880822786376683,30.947409733407255,46.012077249621036,43.78881748521692,30.002272971156607,26.960574259002122,48.685854205265365,36.340834740840634,30.501834671530276,-12.296787144724155,25.338832154452,36.58627304130111,26.97146567791277,-10.87849231880359,58.67892330944695,31.510935091896904,31.455834313422137,-16.80895900242608,58.77055925559303,35.00150153176788,24.055369610027565,-16.599779972043837,54.51678334298437,27.804475254958597,19.462331008036973,-14.056480660934746,51.18620395852966,19.55587782458892,23.48244212056759,-23.548903629572024,48.511516422090466,25.976739844673574,27.63820384918105,-15.264858344807628,53.11039249370054,23.920330590756908,30.86836782717814,-9.898019039502774,53.07844187789168,7.349852463137181,26.705509274585637,35.97091252893477,49.22589934546191,30.90230006337117,30.050811075327672,28.226567119666974,52.07111020476854,37.33113461452694,16.38450800009486,25.904912568492485,40.4375249117041,22.32580953660906,22.19033668121452,20.839834351809497,44.91693302283182,26.453264402497847,33.55074655534374,26.991281965407218,51.15291699680839,25.80991698265398,11.23474022903994,27.730766383260526,53.560551385062844,27.03612960398298,-6.436365906986264,21.615719258501066,49.86907902172285,17.07409412976287,2.832020018768694,4.052912198268892,49.675647026791324,8.466604820219652,27.652596034535655,-16.006707797449074,56.040267098301676,20.142223634947484,16.289215836969596,-18.29938460057229,49.25469104443631,22.79010480532259,21.17201816779572,-14.303841109490538,36.741070815047344,18.397084707824476,4.636757330495494,-15.744578822323009,50.992134875283675,18.8927941224432,13.454474066358118,-17.824921182712295,51.199094440168935,41.58796444132736,11.133463336233572,-17.043957231871286,51.12018238671021,14.362605322334096,7.357157774045383,-7.3994014708561595,50.47594683468725,10.208046854155855,1.6095278144196428,-13.806592027237613,51.214212989974534,15.23314734396344,-6.289720056967202,44.794017458302136,44.7425554078795,40.22784797721573,-11.089423991964583,44.62527181779847,19.474315149686262,12.62052050605152,-7.102792654009964,45.562077937706555,51.022453229424514,41.67679825218483,-5.209573843710322,45.13985960238152,5.064618934780155,3.901395924623813,3.3560556655656586,42.23711137945551,21.05848095349569,32.973629025762044,12.65708415052334,46.05633266537754,19.532202526277864,2.9684470709685473,3.654930677784009,4.3408065521507675,0,44.48528858706123,-6.1000000000000005,40.66737314073626,50.13703734521744,4.3600168007509685,0.3205995881504031,-10.018695818692288,53.94238039018585,36.07558473428463,-0.060513275630876384,-5.429140635517225,56.7646010298525,14.763036748591901,-3.0628416750953606,-3.572200772313554,53.577285508240806,8.859427755735783,-9.05743828241804,-1.655970164392599,53.03716893423761,0,1.1487852667946612,-7.5339169275344355,52.80354071913005,8.228813869424906,-9.360979309723138,-5.064019218305787,51.88715894162317,0,-6.606490835414297,-2.4407600568519507,50.74799438747119,0,-1.1060862154704132,-2.816843810494339,46.047592422792604,4.779942405215947,-5.25042829917384,10.014168982731631,54.272373484519605,32.702101674316445,-6.44802093481519,-0.015199776672511406,44.79528740406147,12.714948749800026,-6.824138239707643,2.4155756292253177,49.77195000521988,38.40311356355907,0.9544797590704515,-0.7611991271276741,56.78135793698802,0,-8.12891259471648,-0.18998060446164733,49.860889270354335,46.68921027952303,-1.10135,-0.2052279926021785,45.451597331571826,0,-102.06890884526159,8.947979075351665,42.03096192097276,4.760211628534377,-6.1012440298452715,-0.9868197706115984,53.8465995884892,4.494462905857779,-6.082998734817837,-5.136489438211837,47.83757785544893,12.01270270151948,1.3242109541814029,0,50.52052500045455,0,-1.1050182836026725,-5.1000000000000005,47.37728288854243,0,-0.8312416478958682,-5.251679047031445,0,28.496117441113704,-2.380673193430571,-3.236827828461071,50.46675702934689,0,-6.105992046274393,-5.106869232167182,40.302908095896804,0,1.8879877706212722,-3.725284327245043,35.14278762840504,0,-102.2095748129208,-5.308186343190433,5.313450336241129,0,-7.771138405252269,39.31080657069779,18.673266378622984,22.015751998367563,-1.5207273015638614,14.835301300969864,44.69015023067914,11.424767606614417,-0.7436148388504593,9.405561592485954,0,39.11792324330834,2.2309132357862858,38.91749550009458,5.674075258429339,6.629997544855233,1.8975942898333809,15.654717286586145,56.90857043168576,13.59833007820479,-2.075074678974739,39.46153960098382,9.563976934555445,0,-10.213625,34.639098720622854,0,0,-1.11130271383645,30.20009830749704,5.828449523925026,3.811025323921022,-1.0839929486166382,-5.378345506805408,46.257298898745006,3.6225034839589143,-1.0528604739675131,-5.1012375,33.2609887750424,4.5076171924317086,1.3999818313318555,-5.1000000000000005,48.904771979768086,0,-1.587158766815466,-3.0089313246461504,33.30602421674463,0,-12.882140368072065,-1.0843223554476844,4.029782457135028,42.32868293169402,-5.922136676001994,-1.183770462048004,36.95393112642559,0,-6.968102047085084,-4.141516640693005,29.09433436349094,0,2.9154110372320376,0,0,0,-3.7933246331649833,7.162597224269397,38.89280582613428,4.260189101170711,-25.622317708289597,-1.8986042251799957,53.055223203148195,4.391800403422564,-9.663288644014,-0.4741888619853185,53.91622803465428,4.3390456349844255,-10.043362087614373,-0.47832059728266274,37.16189009607314,4.635880321840811,0.42333814794172886,25.59150145772827,0,0,-6.407043159565774,-1.8299028963232644,37.783989761656706,0,-23.16192884621836,0,27.884513737897876,0,-1.1115734888423126,-0.48217318166022083,8.871247134912227,0,-3.7571340056964972,-9.71211469506384,54.025652064934434,0,-9.593390688055877,-5.483451697610821,46.29357926326777,0,-1.5831453949015761,-2.1029585418724333,26.890219844036224,0,-1.2698732558106174,-5.602126397017719,4.937951191242835,0,0.8991242683307692,-4.763000610244242,17.866864230009895,0,-10.213625,-5.1984896335524375,5.6664274924807785,11.27124505103393,-2.1123848007323502,-2.6450195771700824,0,0,-1.0824561725582311,-10.214842763194127,7.8397560675116,-0.1051217576494014,26.965914509459783,44.459254170636264,-0.7932286599713212,34.93380501698694,30.1748687149118,41.53863050848863,3.12861975723951,33.09331703490154,27.992567372129223,47.74916835284578,-1.5070799029859097,31.264515291407797,25.451922502687953,35.582997986344026,-1.6528515538835824,25.078327865528315,18.739555826239428,42.01707164274466,-2.9114984532628947,34.3993502175605,23.846085620621942,22.603832355516637,-0.3598955640154238,37.30537822418824,22.239698677852616,35.38260814040249,-1.7940873189740014,32.98646209655426,6.990254930319156,15.289359660627918,-4.1303102189450325,46.996535891949115,20.479155886746618,-4.69525365528634,0.05564186404478755,25.26588271263088,18.623782733623703,-4.199604122978473,-0.7213571656698936,20.59692062003811,26.51829389672578,-5.671690612267038,-3.1453439716839653,25.4481274138479,19.86595358193715,-6.343915002604975,-6.436667497779168,23.731103986805778,18.490612970417768,-11.212596876373844,-5.193664321332973,27.96402924095089,9.814010942550555,-6.558480837290938,-13.804238894337825,42.312907804646365,21.03486969578233,-7.801610274552922,-3.672264806382146,25.817455278063427,-60.273324627245756,-6.406477524801426,-3.2430653669414755,44.06733421434925,20.24542377058657,31.0244132150851,-2.463322162305518,31.784650487694588,19.262043557894458,24.450921608192992,2.206712476600369,43.014242811521534,17.45895860905098,26.589236200932508,0.060011432272984166,42.63351668904573,4.480540405460063,21.28722465348614,-1.3480265294667726,45.108341100122544,28.276341536608367,25.155679196338028,-5.942832831771051,40.89138716393844,4.928191232384803,14.227290724965302,-2.6224979563200073,42.94259860960158,14.265369245915442,14.8541096265412,-4.44190388520686,45.84984797012476,1.557165078754344,10.914203678884917,-4.1000000000000005,43.575142772401215,22.068416031428708,-12.988964877277517,7.680354844681149,42.6296766747688,15.937615157721593,-14.616904816827908,1.3967674090184041,46.147943841847905,16.254347220467892,-15.226344045574264,-2.2945386521214726,42.250931395695844,-0.9253437912251048,-10.727830192003445,-4.0456893568834245,44.61769655868597,30.07760162840168,-8.41068103776119,-4.263662765676494,42.027119452312185,4.416720392086878,-5.10686919216122,-6.505306057090435,42.9492375686718,-0.2373288861855909,-6.340664845270662,-0.20352661674409067,44.17246226392758,1.7788649437808846,-9.446584102489082,0.24127175378764043,44.05738084546949,-4.829397845388867,32.6307146273422,-1.9115340389893731,24.77407123517903,23.402713926491536,28.856694039226756,-1.3964785246899138,22.68173300852994,25.533578481243996,23.598011125930693,3.5462507840451436,37.43364537938213,14.736195206132992,18.748505048527942,-6.863690575415059,38.81315936264681,2.003494404876761,23.85255118612586,-0.8703592115018757,38.5171748157211,21.166014831489793,17.602300656912472,-0.08447116284911954,41.439102888431414,-27.4444438126572,9.581774455510121,-8.572641325061973,30.809159218723696,-0.8755775762217262,13.1183885085539,-17.304758403718733,23.910728912348294,-0.5918251312889398,-18.477631126502345,-0.7389964975866812,42.12045590031844,6.164276972250292,-27.562647048054455,-4.22549430508402,44.365533050731365,15.866047996410755,-21.7171888055557,-6.3093595033819945,41.57832532745366,5.818272017674435,-8.46585647432374,-0.7159385445819856,39.54196898577467,13.345443958521395,-17.96373748630879,-4.5980830481742085,21.451809875652735,-0.8385092053579926,-9.696869769601495,-5.3968807691707825,43.13980314333752,1.1423163353924457,-11.259266674506055,-3.9799877547682505,34.30945487539684,1.3804575971168775,-9.66342199979445,-7.281237734777589,44.20154071528243,19.119855222501975,30.763962112373658,-0.35983971342250154,44.56333431653847,9.07124931158667,13.044415364641614,3.570856853071796,44.348487289133196,-17.882064102939232,30.358992176726126,-4.749878667717042,47.899209324456514,6.075110671586132,17.71751659051526,-4.935769194893173,42.88938845226506,17.431476858075076,14.195247882693966,0.5250139027365799,44.63178653849412,0.5869299493841349,3.1802051847128987,-2.9755160270513317,44.32460323071932,2.7541574703554224,11.972254668937582,-6.33202237526264,46.24759044043951,-0.9614457227304545,-0.17654583576843957,-38.33838411368871,44.543548487036375,12.500718452356432,-14.689809471328683,-25.068084619509293,43.69399747352806,5.013426427862103,-8.559052748657397,-1.2665927065146014,42.81876645221472,-2.6363560043276197,-8.786392565257598,-4.1000000000000005,38.117029536882356,-0.3388140670355728,-8.991079184213385,-9.262589977131952,39.25034589466178,-0.004378462633929808,-51.00931619309731,-4.9475093932136796,43.03719077723134,-3.202886195299624,-4.90474105074603,-4.681042825159889,41.493289128742845,3.9229857326677955,0,0.5459129149433608,36.48196170600187,1.9469512680448926,-6.595801265113598,-6.813466640980936,39.02752548151115,-1.0159522659901539,44.20517418320616,-1.4059433734288138,4.406343897800955,4.51083019829114,44.82818387274803,0,10.11660624847494,-10.918211402595041,44.2017892848279,-0.8932234334024397,8.418119354572646,-10.213625,43.28130357044664,0,0,-2.892988907104449,42.44716230806853,-1.17863087261067,7.3983640871983765,-2.0560503523004243,44.18161141057192,-0.38608961755531523,3.8327491628471884,-0.05521006249982002,40.42991560032985,0,0,-8.081800225734451,25.943430903404114,0,0,4.358708582681686,-4.5791601034501905,-2.0034213302756267,40.2287274489712,-1.1116182246507547,-1.8068962297127549,-3.5979435815705765,41.07981495285581,-1.1049726021047535,-5.882120062451562,-3.8920740186645055,41.3710538949429,-10.052161813786759,-4.027124827599763,-0.47445554055264555,15.91108973330001,-3.7003545615744415,-1.691029587117975,-4.07240153528387,43.20785782207765,-12.82993675932042,-5.1000000000000005,-0.4734698304719685,4.180070620837673,-10.213625,-1.9943904524255283,-0.055765115654315967,42.92417532137254,-102.16813239970622,-1.6658588115128738,0,0,-1.1113533588585847,37.47662469891737,0,8.117175446265577,-1.0811004440785126,-1.134499600028218,-0.04177672436879831,41.34822592806044,-14.201351135125972,0.2461165289570597,0.5976895189482468,43.05965175915549,-1.0582172457349983,-0.02972816702384097,0.8922177133696799,8.462641145992048,-2.0694154101930824,20.397181485293203,0,4.463164588785556,-1.0868733477683217,-0.9823277127865023,-0.7300758797797038,41.04337357860043,-1.1161520468750001,-0.6471923883254376,-0.04375126943361467,34.41489868680771,-6.042403341299921,-0.3769920399445552,0,0,-1.0851594450337536,-5.12022808866098,-2.082444698052789,40.1664622551701,-1.1059863519710922,-5.101243396473507,-2.784158405037459,47.100564829775614,-2.7294430528532576,-4.5567515131343335,0,38.78590735515798,-9.802348601610612,-5.101242893382694,-3.22481674980467,3.8339791129987777,-8.11058688677646,-4.854250766585692,-1.1625009820811891,20.209140482049936,-6.100785522790159,-52.07808637184017,-1.0198781061121955,0,-10.213625,-4.461342691876121,0.860725449142192,0,0,0,0,0,-6.862821656924519,33.09111828958522,0.8390709696947264,11.91170008427651,-10.213625,28.827756980664258,0.6389025961046024,10.030270156278078,-6.1012375,15.954206759301815,0.5610350944045032,8.550230256950687,-58.041743432822464,3.2559693803553738,-1.7588220800846983,0,-6.5413305142887825,17.488414510815605,0,0,-2.970878616124407,15.071911306508639,0,0,-3.52328056663022,2.291048528813474,-0.937057691033386,15.36242360373696,-10.213625,1.8788966839024839,0,0,-0.7577038385495218,-5.920008289715891,-1.2648590183769781,36.67633901628076,-1.139926658859739,-4.978936877954788,-1.0518649490247893,24.30659093485674,-2.3774322746113477,-5.036688217197036,0.7508321272030005,0,-1.0286692919731848,-5.106982978870455,-0.6993516583355586,8.597224593012966,-9.89238960291074,-5.0963666680550075,-2.5902416238198223,46.72765338122911,-1.4742060687364962,-2.441320401619023,-0.8844999814658081,0,-4.2154381634089715,-5.052328295497291,0.7785430024472206,0,-1.1110259499637556,0,0,0,-10.213625,29.060956633353168,0.17825653292161123,0,-1.0043704107895548,-0.9884874789327267,-0.8266888958840675,19.485247651497012,2.410018496802018,5.689876453561384,0,0,-6.100660830926081,-0.6955298916337171,-3.8337668210499816,3.538500020328554,-0.2833973093232995,24.87348447542973,0,0,1.013878743858525,0,0,0,-6.10568416267413,2.0629756870251312,0,0,-5.242045465734649,-0.8941763229326686,-4.106766306394344,11.78933909611294,-1.1172441825752897,-5.073126160526631,-2.44197261740665,31.548403709925715,-0.9841833520569729,0,0,0,2.6082697818583642,0,-0.5551965694544023,0,-1.105743169608672,-5.106694829914897,-3.415763501606709,0,-1.1113869518099924,-5.070028512370761,0,0,0,0,0,0,0,0,0,0,-6.1012567159592095,-10.220488913805454,-1.381343168825443,5.373296144445804,35.15903546611384,44.71698357823943,49.32194931054751,35.067527628113645,21.053290202852207,31.532180953491334,47.52435328924727,29.232920376078688,31.948441953954756,35.37362427668853,44.942029330131355,34.25976247408916,29.887349547943995,31.394720037316926,48.045042548866775,29.74363381645712,30.707742890409826,40.55609865881009,22.748473436977818,35.90750817836622,24.9979152017338,28.51828051427826,44.79760735942074,29.62415377385814,19.801718716505718,33.84559049710227,16.659504433073096,24.960149611617794,19.76125563263967,35.73023388639583,46.212515342540165,35.84265296481291,32.37334030395852,-10.14637313616368,47.42402112309603,31.221235397022202,26.995184614376345,-8.033241601691817,48.920273727987414,27.69996245090207,28.013213636442018,-9.823531292628616,46.59201125374534,32.69167809730258,23.417850191075587,-7.704303222440769,47.19043900559139,29.5056152240733,17.61053626099434,-14.529222997617214,44.5420085028251,26.836755977125527,35.0303405094522,-9.269361368822404,28.84629423059917,22.768333286382926,33.62012985524494,-10.25161414920443,43.76223484501454,27.407274008339193,23.386649222262818,-8.50947499314466,18.571876035324202,16.039554441938858,12.728902787173041,26.319627999049853,31.982287070297566,23.15173108065529,29.335542928171424,26.39597123815988,39.59807602081257,26.362788249335196,12.080340768998926,24.067356133806005,51.495705226743006,19.718607577928648,16.45637284106655,14.271356052858879,47.02470276066139,18.97978656367239,12.397447802203441,20.27596810023333,14.294985738217356,23.826918296747603,11.789740834814882,19.99710567335037,45.88159546650175,16.41482197666911,18.111798257001425,19.47977541661429,14.15223137500087,25.371562272944438,-19.67021552189644,10.47508209806183,38.027898156291734,14.2283913823489,22.88772218114281,-16.409546457798633,34.56631118679756,23.338001096946236,8.928351486143363,-21.15693539334354,40.493606444704284,15.579384767533039,16.227665767284943,-24.48863148062481,46.622857933668996,21.803913761884775,3.4068477757250943,-12.904214302606793,38.456401222792785,0,15.180863153052197,-20.09941095876064,15.958915705365676,33.39229393501143,15.94032037364797,-26.983954530621006,32.64123800337949,14.822659013965605,15.439571800462936,-14.005238569511038,22.06175253671127,36.25882883613461,2.4564316144637885,-9.7184260029576,35.83097048303625,0.4341441473311347,35.43850195900416,31.639029084659068,48.534822618546826,30.809508209211213,20.63634049235595,26.437680412224132,41.05696063568391,25.75927769528786,21.11531739027997,22.288482683015204,12.10654068925341,22.983787849273742,20.600231701682105,22.36100690012875,35.56119463195045,17.44228997051504,18.173754286675354,25.788282121312275,18.06999971209349,19.6073460449588,20.40663752167539,24.250268379556587,21.64402126037057,19.62080048958581,19.26057235176658,25.245873257596827,21.822798837058215,30.005407283834632,5.6185943200379,14.586018305525911,23.95895800282636,10.637787900796845,20.572275778172855,-14.938642708482854,42.030786956407574,30.523334554165597,30.636236048856983,-20.19896056184147,46.22182755293755,29.625603575555818,8.697428683874008,-23.915320462102954,47.24475139944887,12.103543276692994,12.08802674527567,-14.140616149043483,42.83852760867055,4.149273195880396,-10.603847946674637,-22.01910762924281,16.302731795828947,40.57689229255662,-21.263229431668464,-14.70232685119394,19.087932376538678,33.45581393685864,6.33497381624235,-18.271449073452786,40.711734554657255,3.8665487511218375,8.443542714250277,-7.778203978777454,39.79041008284233,6.988416460146924,34.73215736230537,25.48719961424171,38.579332574824186,22.475201735972664,16.31644001950127,17.94661721800079,40.7010212815393,19.879398116201866,19.972942456824946,22.824248719365013,44.58819623401495,22.82645031153872,11.4692858424464,12.558498258152,42.948788501164955,12.956767217223305,16.284622743157787,17.742596907792535,27.491563120409264,16.837641572579113,-2.6817627436769005,10.568258882156146,28.385159690783734,9.709749772220704,1.4383094075995424,14.582100267935425,40.90425133780039,9.884819345567827,3.5894795547668705,-0.3735878508915778,42.65319966587046,-0.1,1.6462956094219674,-16.613208668674233,32.37290571595124,7.333148674318267,3.1959070822070865,-9.679502439405502,41.24055639406527,9.052127393638967,3.1892159692306548,-18.02997492306091,44.72812104125911,9.300153472955504,1.644654157643592,-20.178498371954532,41.211307421105175,0,12.37853202069959,-18.660761736164034,41.89025198170618,7.980903616400331,3.009440297077541,-5.1000000000000005,35.64524617288089,-0.1068625,6.527215756213241,-5.109562846029324,47.681102843920634,0.23208236271278856,9.09620136815432,-25.53902258144742,18.619024841829486,8.09713610811933,-2.5390373626256295,43.179116784672495,45.499804235365644,27.8413941526366,-66.21098793793428,41.86696882370538,19.702718811592298,4.598274866827913,-15.194459904017496,48.34253815026986,9.38602642919234,8.160931822902137,-10.213625,41.19057455197443,0,9.620573276546846,-11.054076019853412,42.91141338634436,7.473429035051792,10.26949603639798,4.435715689069426,33.63280948090786,0,4.835876608663289,-2.4206940340326177,40.859916842561816,0,0,0.8010298797965945,33.57714067160634,0,0,-0.9941155603705506,-8.563878287915566,42.084130621106816,12.348625129565542,27.746768451949265,-0.5439784992043756,46.94005925629805,0,-1.1206052619126734,-4.248854389000731,47.41194482248765,0,-1.1126615024060234,-5.101250543365926,47.81321201293491,0,-1.7985217382829544,0,41.04133864756473,0,-3.243194848909761,-5.106867285951516,26.74758951228702,0,-5.3618984922170165,-2.490885392597751,48.365318802278075,0,-10.213625,-4.181495620896642,4.815075249969798,0,8.14894714256968,34.25653366650546,6.194479076866653,29.4218510405194,1.518382487066316,-0.20398951789510358,43.793487022546365,0,-0.7989716965051696,2.3778225691395027,27.78413009405855,3.9563287224980543,-2.8113527515874104,-0.9763640171018605,36.89814016756235,3.5813275383047336,-1.0144839978947318,16.758092740639906,0,0,-0.8949918868573139,-0.2909572838883543,14.699100793454464,0,18.746456504578923,0,0,6.317173606626382,-1.1039558862618857,-1.18338386409712,18.666440591524424,0,-13.437523105000617,-4.019869042120891,48.58013319604209,7.8389629149160065,-6.173688568594843,-5.688767695366125,25.946786262885034,0,0,0,0,23.497276294620356,-102.20717487011274,-5.097258051430439,0,0,-1.164193210490477,-49.748595960491244,42.65260022581675,0,-2.1530395150861477,-5.575804571879726,13.006302915301191,0,-1.0823559802717708,-3.398384609363424,0,0,0,0,0,0,-12.420650387962501,33.73392883025676,6.366134460936463,16.715582131508043,-14.432562397473689,38.335657901914175,9.509826001943289,0,8.356537788252641,27.26767199170968,3.950056924085651,5.018102643224051,2.7815834875597196,20.426263857836442,0,0,-6.686697356722088,14.738712735908791,6.589062663828958,0,-3.9429524013391366,26.793600592647504,0,0,8.62829598877154,2.4197177750231105,31.793637968480635,0,-0.250878967568696,2.0251288785425103,0,0,-0.37499068752948084,-4.549984550277904,45.97253061952232,0,-1.0487078966965815,-5.101249342927734,27.405411996826405,0,-0.988282073628631,-5.1000000000000005,40.40602103636989,0,-10.213625,-4.83622578533288,9.542075751141107,0,-10.213625,-1.8624142903252747,13.38554093852992,0,-0.9666299119235797,0,11.73798491031013,0,7.417276340537983,-3.075258616702482,0,0,-0.9084252536858911,0,0,0,-0.6364360788283023,6.819537811522899,44.22370470155113,0,-19.303752828125,-0.7401081919980618,44.7172155808578,0,-10.213625,1.3617160533735675,47.070711285480414,0,-1.1,-0.7984593295808634,9.243041690880537,0,-0.5961016958929437,2.755039662270263,22.44147295949064,0,14.064248609867871,0,0,0,-1.0943416141728992,2.2929806131245085,0,0,-6.101466951750038,-0.34234385024714986,4.837715702115339,0,-1.1169526222036217,-4.280633739356101,15.415989176356295,0,-6.115888617157521,-5.351922547127537,0,0,-10.213625,-5.101364827244424,51.3603435366565,0,0,0,0,0,-0.6611781920209269,-5.0496449533111365,0,0,0,0,0,0,0,0,0,0,-0.1459476414207348,-10.21489957582426,3.0147883319574107,0,20.9270907700559,35.11103895354576,-15.592764034007088,24.505840628493612,23.6411544487158,40.896990725576174,-5.847675807242746,25.31163084905063,-8.582423795326712,38.85552023256307,-7.721396606581224,37.62710919318247,14.085619336556308,42.289992781911856,-2.7824039189950933,18.425799250117628,22.293347975786233,26.96247091610783,-3.189413237439808,23.061658506307577,12.694935872913122,21.40022307008541,-4.00635735245804,16.28667891147515,20.13123807380549,21.50007823786855,-12.96767312605057,25.25547346217793,5.200993169763148,12.743894093540357,-10.43422557728064,23.80746492870323,19.659424897885454,-10.638583676206807,-2.2329397566464735,35.830218706120846,4.669542467821783,-5.57834208826464,-5.830765979662654,36.043035352769515,11.803087203448138,-9.575920742213354,-5.91988857412359,33.24003609296474,3.982401055729828,-4.657397949415727,-1.6061830719391177,43.359485693057685,19.44875673058199,-10.404452022940731,-1.8685165398082555,33.47216572105542,16.292071772866876,-6.751219040855868,-1.6217632649151277,37.4494148907992,3.6561006266665297,-6.58170804482598,-7.002001639494126,41.81251717591395,16.77831313693915,-5.1000000000000005,-4.1068625,36.622596636781246,16.306090114071228,33.695317739665015,-13.579246225174174,19.68589773057527,0.6731753042892326,10.782138708935626,-6.223391697289687,42.662543429251585,5.197292653393654,15.929749175583597,-10.487309558379621,37.832132175806684,7.176324591973016,5.15235765137036,-3.843601311141414,34.31515677386273,-22.58093494917971,13.669400084835866,-15.183009937142597,43.89297424885462,-8.429826212444086,4.8744123144808285,-9.736703568326702,15.269496493252237,-14.370663896261819,9.39939444249446,-17.27981908557677,33.374029900529756,-6.1000000000000005,2.3566580812122866,-11.976173148889632,17.05522612337661,5.449918608875375,-10.430584458431136,-5.736492599608988,35.53329277998881,0.3035568883979147,-9.340579881016904,-7.67024762154036,31.140713473500366,9.851282669558778,-6.373019115435199,-1.5676400514085231,37.5511665261263,2.5313374033050002,-51.1151391361757,-4.10628268784595,38.325424553496944,-3.238691788157977,-7.671962808249899,-9.025163295880171,38.57115554995629,-0.31520565390970345,-5.101295838983848,-3.2309287770760964,37.77166361283543,-3.184425743647389,-9.697392663749808,-3.768758354701055,38.35975494135441,-3.0349608324695496,-5.006323037069507,-1.8443268093523948,40.21716092060563,19.15806954395035,14.539212277252897,-10.853390755638252,46.70659583992833,3.6043446833784216,20.431299547240048,-10.988163618218511,39.906536646591654,10.379582905827398,21.93281665077557,-14.385636764137681,41.67324192463773,6.150313201765344,10.682084405229059,-9.039423190700052,30.13652289938932,-34.204245108380036,13.446068866183854,-7.201002366566602,44.57870865676621,1.1611479454934233,7.1155606059898995,-0.6535547391711821,40.00151715833414,0.2922250975952996,6.935156532020811,-5.724512077347137,38.75129995988868,18.84320169734658,5.498573480706563,-7.8814586639813475,36.675580505087844,11.068493317419064,-19.08925552932019,-11.56151400078572,41.28867966729986,19.923851035945482,-4.891078289601914,-3.900510115672643,41.87173591075467,4.641722143173023,-5.10186266829303,-7.222980120981282,40.2727757381919,2.109230520132543,-5.1069347670215555,-4.108104536090622,42.371972753765334,17.697741535408912,-20.090209511745734,-36.33293028996538,39.96554275956814,-0.6247747504154839,-5.1000000000000005,-7.248563093956919,38.88783920800731,14.482272970509944,-5.027438256511866,-11.33158330381342,32.271439837268446,-0.11490207743259666,-5.11134250461355,-41.03239620865252,26.49476658051407,6.544116464409399,29.653773994161497,-24.294285077561348,18.927933379173005,5.34205109934689,-0.021404925515653872,-15.147888719309389,41.075304987732,11.17248660077069,2.9504799891078606,-12.239641886551853,38.85559887681166,-0.6563741425056486,-0.17222914815634918,-4.1000000000000005,40.30068324339625,7.27493393788766,8.217277484401235,-14.738951302867935,42.84038912004769,-0.5636181125730753,0.921916227100867,0,21.161376120871076,10.154411383894624,2.7685611780301733,-7.79069696819577,42.234284335539286,-0.8731938853314283,0.1513377426387643,-4.1000000000000005,47.1590207601314,2.3038392894590825,-7.062287432918048,-7.175603111640047,39.354378371388584,-5.597644400878749,-13.280328340563894,-4.142744127316862,37.51800874263594,3.580461691132334,-6.115841749838752,-3.842050534637278,11.754121077828325,-1.0923540617248544,-5.1000000000000005,-4.106986775425777,15.619713761868553,-0.0812234215668487,-8.928128207231603,-4.366289935175336,37.41837573835307,-0.364829659123749,-5.1000000000000005,-4.1012426890625004,23.74996109992781,-0.22907421253255295,-5.1000000000000005,-4.1000000000000005,23.0848845452024,-3.2327186683941393,-5.164238957939161,-4.1000000000000005,19.423903371486873,-0.6583354632008322,42.328456073241384,-0.2331932296967338,12.476289865758304,-1.110527046875,4.0851608701434365,-2.5672239384574596,40.648550247856114,-1.0478750039061882,43.991665750816075,-2.6778005061147603,0,-6.106940785443726,20.3460764688221,0,0,-8.654434645251904,35.640820925217696,-0.22556118670591233,3.6800296130306087,-10.213625,21.695250314085925,0,0,-10.213625,39.57539732585181,0,0,-8.7447373927394,3.501771033044664,0,0,-1.4184811384344305,-5.039197048308068,-1.0230978547903031,41.76143326079706,-1.1114999861337074,-5.106976382447209,-2.735817870096093,16.5060787266952,-1.4257863960547617,-4.630087599690342,-3.4638434893773224,40.48313193019959,-0.9440063528504892,-5.101244116550288,-0.17934530955347583,0,0.8622829362266131,-3.782864542207547,-0.3328194362059897,11.960174018596154,5.679564928323245,0,0,0,-5.74663283121685,-3.593128573556502,-2.8108850592865284,3.7811928826744072,-1.1205089829995722,-4.744483740316382,-4.1000000000000005,-0.10652783266053245,-1.0563396674897816,34.561621566715104,0,4.109088046090573,-61.00032241371221,-0.19053363878129048,-0.720326304790413,19.33250488634998,-0.9245250720119169,-0.5401788063215975,-3.800335973934654,39.682134303431575,-1.1,-0.1172784390625,-2.4404390150195745,3.5481931990487086,-0.25857912582480264,14.318784771641209,0,0,-0.7289093045356071,-0.1,-0.21344289283425086,6.92116709436346,-0.5707266847791622,0.36599576291482433,0,0,-1.104929313510384,0,0,0,-1.4168322234492776,-12.993460676903984,-5.3297824665084095,15.68130002581333,-0.9434626894812317,-5.571931973592428,-4.149358931041229,13.939052226883309,-19.30821783784085,-3.9688975251981717,-1.1977969971729407,7.085155248350121,0,0,0,0,-5.974668122884951,-4.688327302408279,-4.111800540971784,12.28394264520965,-10.213625,-5.301253239927953,0,0,0,0,0,0,0,0,0,0,-1.0693607727089887,33.47084039694245,-0.20571862731265825,0.18010893029942313,-3.7894296014963276,14.910018251800494,-4.760447361844893,0,-3.455280070641903,13.49180039646778,0,0,3.652581839935963,0,0,0,-1.755881943286776,19.60172657268698,0,0,13.195087313274618,0,0,0,-8.307274620813677,-1.5654007210628123,-0.9064781014752648,6.639387620993998,-0.9689278881112696,1.2869660121257325,0,0,18.016043364766674,-4.1654476725874945,-1.1378367318148261,29.88456791276639,-2.1482817268879515,-3.1573714780492494,-1.2650145943545223,25.824297422062624,-10.213625,-5.1000000000000005,-3.5455387281080633,4.996401098916743,-102.2056136481402,-4.960044004498121,-0.30956479499756284,3.4739575420201785,-1.1064804062998912,-5.1069816491250295,-4.106870363912914,0.790514524379761,0,0,0,0,0,0,0,0,0,0,0,0,-4.488728877821341,16.934414681505306,0,0,-1.4054764807728672,-1.1793719907060052,-4.108448164685014,6.3986588486400935,-0.5298914075586029,4.569412336744026,0,0,3.129724416878263,0,0,0,-5.818666831742092,2.686993507067334,0,0,-0.2523068800487927,0,0,0,-10.213625,-8.257214949852422,-4.1000000000000005,4.0231594119208065,-10.213625,-0.5773636334974598,0,0,-3.053269628839667,-2.511870460720295,0,0,-0.14027888190548252,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-2.355215341305953,0,0,-10.213625,-5.106875192694978,0,0,0,0,0,0,0,0,0,0,31.48525095594209,42.255720641805404,47.72836076155328,-6.493556796558222,33.60641117287681,42.855530961021884,55.21415638409819,-10.211116253998963,34.71018958278245,39.9870039314121,52.283152965563126,-10.771201154187489,17.55324375381125,45.10105594107248,43.625768364634254,-12.34101325038062,31.994033866604383,42.48242102149229,53.18107035459863,-11.0923469596272,19.8393650007172,41.950224301077256,40.769332900294685,-13.871338498513573,30.298994459820925,30.948609214534116,50.20736181685011,-6.71529021439979,15.55858258463205,22.174923542672634,41.919061381953746,-11.306028745939875,32.793318797185975,-9.241933768533835,55.47462827480828,-13.544928467025652,35.53481113035439,-7.557540726924891,52.636283471119995,-10.894168659419677,33.593930456852966,-5.236744791089473,51.112475255895596,-12.165089778825246,21.90433193588924,-5.252522163039329,52.93349718228031,-8.738660017201449,36.91326654360679,-15.914997989204906,51.4257150946821,-12.20066900216613,25.810522943692387,-7.560568803281557,45.611559931519196,-17.767063870215296,12.858828974618872,-21.841433205441486,51.60229374564489,-9.455791964775727,6.283862199883422,-22.250419479427833,24.391218152514632,-4.506030797837534,-5.484226721152011,37.611096639821284,52.64289463185669,-14.572682873294044,23.884529983438988,29.280084912722266,54.73305339560069,-10.297135793396182,21.01650387349399,27.055305547594827,54.68644157032073,-11.330548396573088,0.034239250500213814,39.02507335546474,54.345275579329325,-12.413666851312945,-26.64087253166221,30.935353978921245,51.99673314778646,-12.698499679240104,4.774202820983255,26.311255477011834,52.24527861849053,-13.068452473671039,18.50181581900602,29.157163562768993,52.50996496557331,-7.335240972783786,8.867042157245276,11.882946974630745,51.64525208143756,-2.43739383425509,28.732654564102152,-12.863340902556029,29.51284599326513,-11.109318889242326,19.185352065181675,-11.146874199009313,54.00924306712247,-16.47213480630412,33.596906233433984,-10.808762018564686,44.50376792844061,-13.752708043886678,5.713442002923889,-4.628044603697003,55.17333043031457,-6.413187907310052,9.734374837597873,-17.10302273368762,46.0692706784499,-17.587160337166562,8.767436290592363,-8.706079231905825,47.32100849787153,-9.972864466642323,5.782593914737882,-8.632902203730058,53.66444952482391,-7.824682858008233,-0.9077374203890728,-4.3263505748814275,52.16850250809606,0,35.643933933633704,38.39868536973451,47.14812820996609,-9.913760666086961,33.29126251376454,32.891055707041495,55.49856879371931,-14.517719237139962,24.825683591644083,36.9091019140824,49.88365227788487,-11.740180723998604,14.796479845653195,25.892998457335402,52.38699160347562,-12.577136439229367,24.525197350170398,26.156144853110177,51.53452782267173,-16.823526024172114,-17.437672099456115,21.695801648222787,52.75391381897071,-9.448913441581526,25.205910536843813,36.585523418097964,50.02010980814598,-11.927634303534527,9.021811084381,38.30449356038417,9.305226530795414,-5.591676924265873,-13.774170379772743,-15.608359472324427,53.34395459746704,-15.719817020742092,37.33522018494821,-10.551924461150561,53.35432717325349,-18.81217138650313,25.513230207611322,-16.28426997191316,50.925649794497986,-18.507017143459382,1.986608488850906,-7.266128122541395,55.13418466344224,-4.048002198887068,-5.523290315510147,-16.624372228734934,50.31505606271794,-13.494322154756189,21.66003105789785,-9.63078789918349,31.161681145653073,-7.6573021938052666,2.1850835946896843,-16.316087836206545,42.36311382608805,-14.58023207792134,8.574596549927403,-5.117227828125,51.75614006700529,-8.85430607964624,26.266532603690138,25.8407149746802,47.81245708444101,-15.478955759742561,0.16323220890673507,9.734050858173374,18.21022796521909,-18.80129617591974,13.873921466560098,23.03320022813293,49.6017064714277,-15.61727290675029,18.66342814009471,31.244337785070908,50.25870681615271,-7.582052525042311,20.4697134856124,22.879696754827936,56.61981484495016,-17.62141642987163,-9.313575578460508,14.702503860699748,54.345331915195494,-10.94575775760987,10.31533571425649,23.740893813163254,41.49746371059971,-13.659763356589837,2.4938664438787215,-0.1055597343613899,52.33871541684395,-3.479070055331697,27.364588713137746,-11.705892997113233,56.091533131084525,-9.516850759742928,37.20068544154674,-8.500861199015802,43.39285311283048,-4.782488225497717,-7.931808688534863,-10.388431072268624,45.43965415278721,-12.187411029399774,-0.8294754924860455,-8.55290769863237,49.19122168580492,-3.6790122097085667,5.214071332765389,-12.467371796909498,50.33238624820854,-10.368073114004956,-3.238916310887587,-13.741717434213179,15.469418293523354,-6.809175826329877,-0.07502913371835618,-8.885573791934194,44.290759186423955,-3.2268819137899025,0.6955680900225545,-9.087455123284293,46.93373882348682,-7.712495370472938,-9.336645057727875,25.997703932613582,51.463660921553725,-4.465033077783438,-6.879358594826837,45.62410636351653,14.467781367309668,-1.5035372718845235,1.7441066096154725,43.32898990869081,12.55462081622096,-0.5517444123475393,-6.1012375,42.620996332869,0,0,4.065122137594805,41.579750110696594,13.251087826621163,-0.6326256029959872,-6.163954083758029,43.493037505398966,0,-0.7667393918945997,-10.213625,42.50736169421803,0,-0.8924082010004618,-0.3280519909616717,24.13539219544203,0,-0.399142845481164,-7.39604822015546,-0.5959702751732557,53.75919104677044,0,-1.7221520382176745,-4.6062230121875976,51.79151408815232,-0.5858824801452563,-3.6251065949646613,-2.450741869602459,52.443814544166386,-1.2975457344898365,-10.213625,-4.0015435063806235,39.74151686207618,0,-14.350313324220917,-42.59346058090795,52.373882455212225,-1.6160317503572714,-2.5133554207644084,-0.8510993364119287,45.75631623145256,-3.3439412438397214,-10.213625,-2.500626682363084,22.857964940612987,-1.0428197532279115,-1.1059942204335447,-2.902367935293677,17.465944260304084,0,-7.089488805675886,38.71819175825314,5.249616624497039,0,-5.767459473606357,-2.3722659314066687,54.07030400211258,-0.543641011535437,-7.683969799262361,-0.9334674224812655,51.061766093069394,0,-1.132678468098513,-0.43903019255004044,50.98904034434145,-3.2089872935244226,-1.1161599007193197,5.7472805944342245,51.72459850624672,-0.633683982548358,-1.036194585629882,-0.6253531827699077,39.221294514409536,0,-10.213625,-0.4228029173707178,50.91116960633608,0,-6.17251237444331,-1.0258705255465275,16.8363959338213,0,-7.1126514077756395,-5.1000000000000005,54.46212667153475,0,-2.604012052318037,-5.191854861423174,53.13673630383615,-3.3638072817696507,-10.213625,-4.974581845259113,17.213604063042105,0,-1.1064556759902167,-5.057003453855342,18.907405825538696,0,-1.1050874479167991,-4.440779894246485,18.063804017912062,0,-1.4824859064821496,-5.047775330121432,18.009018041814763,0,-0.9632528082319451,-5.1000000000000005,10.008359078945727,0,-1.0242060115622917,0,0,0,-5.483311410971504,39.35185632901091,22.168953652572977,-0.9837419984209348,0,0,40.73687428012943,0,6.137401676639676,33.063448589946724,5.7524936307134205,0,-5.768501985461061,20.73228925700149,0,0,-27.43307902205561,40.334939458729274,8.754961739420827,0,-1.5699279134686455,38.26555571994915,0,0,-0.34969020897743086,0.8143942227178296,48.52551590631291,0,-6.120290890316843,0,0,0,-10.21870163553274,-4.512564917990883,52.19744115613576,-5.116388609888062,-0.20670969652294674,-4.928338110739617,49.50132334193492,0,-0.1925697629801455,-1.5997347552446102,57.193766227823986,-3.5574216605982394,-1.1115889057303292,-5.850284217669856,19.98396939093796,0,-0.24640205796153358,-3.8691195208019966,39.01964320135752,-5.10118535419069,-1.3792007494037293,-4.9367904420386814,35.5212487521518,0,-10.213625,-2.4325859789181887,5.474804664646566,0,0,0,9.456299275660271,0,-0.3696485369874911,30.748122367230824,0,0,-15.421227812385958,-1.3317997740006566,43.778546792214705,0,-10.213625,-0.9426732625603345,43.48333204967839,0,-6.069777730087426,-1.0063865773138694,13.62428393685099,0,-0.3569076954573979,24.88678960929869,0,0,-1.4729133656172122,-0.9421576016354263,52.33119020178991,0,-5.8462945982611485,-0.32523271119042685,15.410518222124619,0,-5.127438046052117,-4.050180972940958,5.693063940429005,0,-11.92043623255133,-3.7972646740295444,29.05448140851532,0,-1.4763127151215998,-55.56226192266695,15.29542664064777,0,-1.3900964751751412,-5.101143210758281,3.8781053311687517,0,-6.105975557123243,-5.452775564423263,0,0,-1.7484447026398549,-2.467094807841557,4.912071582841556,0,0,0,0,0,-1.0723713750834858,-5.101363857238115,11.13642361254841,0,-2.3896103742623604,-10.214958095821894,16.13624144252989,0,24.87853424000843,45.85003732462551,-0.03294693413651173,-14.616865274691722,22.997412160257763,44.87530986990763,0.2167150652536134,-12.060484084139953,11.721023399160073,45.936358697159356,-2.4511661615035187,-8.280916359623294,-1.0820695164126926,44.93818260816162,-0.25354923217882974,-4.373932272480721,7.035368778715339,42.364126590560566,-0.03752837325448932,-13.28178662921519,18.77774743921966,36.1405374391595,-1.4460891099404143,-1.095406551596783,4.724520865888845,43.24813213191857,-0.5797399678112426,-7.313946843676779,4.403259894758687,44.14371594110365,-0.06168014814492884,-0.8228715831146076,-55.58015280851201,-10.301070455545931,3.3875377799145805,-14.018899041065497,-9.541076171564134,-8.697174683432449,4.697007042626891,-9.033354783784183,-13.589466201449905,-6.86542798112792,-13.207710514444681,-14.555703176326691,-9.145713389751585,-9.395771984020008,-0.4808411092204037,-9.602943972438496,-9.931944371264686,-11.074448553621174,-4.798166233358989,-8.786579007552684,-10.549497472240338,-13.544851017573956,-1.3067037347198562,-14.502091078796093,-7.011780073760943,-6.037864499388655,-2.79072861843743,-6.776145677495735,-7.219538107950389,-8.800882832622897,-10.295954812258916,-7.245913464795996,15.170597265865158,40.333004588695104,4.707135362783909,-5.400320978294665,-11.275179766427629,-3.5990251976048393,-8.896627591992445,-23.178060743586673,-5.111258541276317,-2.326328004720387,2.6839497464851676,-13.861073977441805,-8.046600777371431,-6.954096724939035,-1.6986470414721184,-9.950333130636238,-0.08475510292514743,2.279255668114012,-2.252875683726082,-10.389156469405853,-51.45285401705278,0.9170811372427875,-17.562900743577202,-10.20747137354732,-7.642307757911972,28.249600113711608,-10.303429658214835,-9.750451491271978,-7.403505678495363,-5.246489677884755,-5.6563313135863105,-8.039611826021599,-7.835676092080534,-8.45474750583484,-0.5475389777664579,-14.994100887591939,-15.28810651995024,-30.001252529956545,-1.0245809582645418,-45.525052820208565,-7.638842078360736,-9.281182445241544,-0.03361801795819347,-46.61029342954564,-3.7492789903427193,-9.666041505692611,1.874638095349123,-8.340289874810667,-9.859735351052878,-9.415275316192307,0.32709166019774494,-13.394032599046312,-13.483267004904786,-51.28625200795632,2.5232341556190265,-14.96509871840726,-5.889114207421418,-9.828891656819017,-6.565312935249882,-5.819193922116645,-5.23387354604568,-9.919303108075706,-31.742320374824985,-4.41000720373553,16.665621044912207,33.9665486025451,-5.911003068387914,-11.433603741602807,13.012096743229717,22.55642852620156,0.23381473723978385,-8.889272397918175,19.18300237453007,1.5547704843030796,-5.809346818123305,-16.972491987291114,-5.495229481309198,-0.2313736551067219,0.3302100696463566,-11.784868716571697,2.1330351169036876,18.065813874639773,-0.5888317507457004,-14.938348270463432,0.07099010712157161,4.23732887101928,0.9369330900601891,-1.3964130768443939,-19.029823213292637,6.568470410831555,-14.022406128239147,-2.9803339907195765,-2.3319559297672416,1.1790325642159292,-2.472730452515693,-3.7336657614599185,-9.23330307923004,-19.140903161926595,-6.552038163138427,-26.536698084206183,-8.714148164305062,-15.434041027494096,-0.4408317815793384,-12.513023368398912,-7.09694026486916,-8.765424761745898,0.46614907582685877,-11.156824255742654,-7.548170660118863,-12.80708617767986,-4.373838168669073,-9.070722769463865,-5.856676360640703,-6.135908122397905,-1.6583024416222645,-5.511978041700435,-8.748470449017312,-41.80302153608107,-6.016718396246999,-8.738867955737101,-9.560160144503989,-12.331115047261772,-11.623106771942808,-5.755914502775686,-0.6118173310142512,-5.106827169755636,-1.5253453539300925,-8.75743941825163,7.886081554891188,31.463177535205904,-3.9338119360873423,-8.296687428700645,-17.122079747541296,-11.23883852882504,1.1978735860770693,-19.819358207558654,-11.774960454825978,-9.414045527663955,-9.021677717127751,-19.334510138604514,-38.16216162795187,-10.613378901756395,-1.7063090885597445,-12.932436437907544,-8.215007526966772,15.441950289152937,2.676965958149323,-3.188313658379709,-16.961169961351697,-8.771096005913833,-10.109737852486665,-11.728019813832026,-4.228712827245273,-3.5492305710284926,-3.803730759213201,-5.100981350703146,-61.596052164315445,-11.990161425597613,-11.112552935592694,-12.618514105788378,-6.452295758803792,-35.36471899746669,0.7501483584102706,-12.428993177792591,-2.702681266775464,-10.040984168043458,-0.7404408452361482,-12.93138662890092,-10.329211741649308,-48.03336124318509,-19.74701310948821,-17.519771128601676,-5.868861156803496,-9.852486143434668,-3.6806100872572785,-43.47956618497564,-0.6250873847786231,-5.10124381256688,-0.07565148303752178,-0.7775547185244861,-8.108108108906436,-5.1000000000000005,-1.6874558523117686,-3.950216341859943,-5.157375,-4.997428240214311,-0.6014761899615375,-1.0065923613153416,-11.563895714882356,-51.07009151445811,-11.826200705028718,-13.82789231111951,-6.1068625,45.00021115523739,0,-1.6930084806840553,-8.105722626556393,45.27088768447582,0,0,-6.1001201185908975,41.183248280942315,0,0,-5.288841364064076,18.186164344216266,0,0,-10.937726124085591,41.04391959571182,0,-3.2220965570031903,-3.6191669633650285,4.425019390799584,0,0,-1.1123593441975597,19.993093308314684,0,0,-1.1012264425360214,8.379524588602788,0,0,-11.29603667431551,-4.014877788311927,1.8526633103908885,-4.07177485147829,-2.2477495522224675,-5.101243867371898,1.966936182473394,-5.1000000000000005,-1.6552436313306416,-1.670785864411191,-2.7858815266485237,-1.28049957937512,-11.240811544882233,-4.716531289403034,0,0,-4.97366026489218,-37.23028585838162,-4.324757931141176,-4.732061935965617,-1.8777539895723896,-3.93335990303848,-0.2931563616042645,-1.2923639915280405,-1.1644304139372277,-3.6124515582072863,0.4975267738802175,0,0,0,0,0,-3.4080332723254374,39.58799890564513,0,-3.5751529685590393,-10.213625,-0.7747116893038397,0.8120202168926767,-5.599980939025166,-1.1,-0.46260896226871084,3.391141652371521,-2.728720082636227,-10.213625,0.13728936956181653,0,0,-1.1262156920807243,13.303777528208482,0,0,-9.562953464939195,-0.3511175059415804,-0.4564612768353804,-1.7992169475409054,-1.0049875573531717,-0.1,-4.115126304914371,-0.7255361271777918,-1.1931159870274672,-0.386327434254165,2.042026483280361,0,-10.213625,-21.658581068717506,-1.7328728798620348,-9.304353555601647,0,0,0,0,-10.213625,-3.9673465983439726,1.3749966138120762,0,-6.1000000000000005,-5.048497698245813,0.05343695683656194,0,-1.1002090760884795,-5.1305043601982945,0.8135214729096684,0,-1.382122596255762,0,0,0,-1.1106151392026116,-4.825419367669157,0,0,0,0,0,0,-102.15031605562572,28.53293667541753,-2.233607979981876,-4.47687692299021,-0.5769816259995636,15.267764035933908,0,0,-10.213625,5.770235551199349,-3.8189407390323744,0,-8.992763858804258,2.871525796909395,0,0,-10.213625,15.467431607692466,0,0,0.445256459205274,0,0,0,-6.760882426881439,1.0764875808783856,0,0,0,0,0,0,-10.54122257766393,-6.240932734621959,-22.889902286588036,-9.704309706050307,-6.110980700454536,-4.506461053106141,-0.5815128207963526,-5.1000000000000005,-1.1207176314557603,0,0,0,-1.4752782819080346,-48.62263983259063,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9749672753143037,-5.1000000000000005,0,0,-15.541704300622662,12.424932684564364,0,0,-6.105878999607054,-1.0253323951011681,0.5043889161143438,-5.10162165639378,-10.213625,-0.7517576456407584,0.813442919925941,-5.101250445454739,-1.6873629774407295,-1.2274524259833286,-1.788352407616917,-3.7255399598499213,10.261847775216832,0,0,0,-1.1367165181775785,-1.195217753486332,0,0,-0.26791232719555486,0,0,0,0,0,0,0,-10.819409623502809,-5.070611017554217,-0.8831325798366749,-5.106863534345774,-2.1482094192683796,-5.413680384127452,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-1.4792690307639285,0,0,0,0,0,0,0,-1.1097019972642934,0,0,0,-5.494015925135326,-10.214875202718513,-5.346596511088073,-5.1000000000000005,33.12576167958023,39.882191260426346,45.99825248963367,-13.252906005420012,35.11913388365775,32.36045097696313,47.63024577550839,-15.7459348519531,23.651454593980723,32.22030804737531,50.466944255061236,-15.60503915090297,7.824651561006348,42.470698288794246,27.67848278703421,-13.370631838533257,22.07534228625126,30.32314207214299,44.897367642331155,-9.797465211210023,15.373418499943325,32.85493620029001,44.70194427455743,-11.149642898545157,24.960109762120148,21.931164598639235,43.450155020212634,-17.146545973144818,6.819344348250781,13.419305063938548,22.79704529932115,-6.984192285838134,25.945213575571085,-9.100673632210563,47.220093545350615,-19.40789134298262,35.27205253835384,-8.539331427833655,45.95831256108686,-17.749907296059686,20.68367749286207,-10.96458975184164,47.62706746868668,-21.243646192278533,2.0528963760613914,-8.164998809604162,48.274003626416,-1.8960621377598508,15.122331493668415,-13.210147532728197,45.686950423229604,-18.44320741528707,9.38055858777443,-2.9043147076266567,36.10763978450761,-9.121646425273049,5.44637040072198,-9.857672980114588,43.49802681439927,0,-0.15901722320867911,-5.4433112129521435,28.455048052254654,-1.9857794856558642,14.28659829294051,36.69351691822677,48.905451638346925,-23.792761752839336,5.537047215120401,6.386642232575942,35.016018701365326,-25.95427834899605,27.345899997009084,23.340209137426513,41.1580266743944,-24.511404720114808,3.9943248826931517,13.686995290921725,39.45208246466296,-25.109686729002814,6.627881682221004,9.134221005617706,39.964460265386954,-24.483080781760563,12.623473268744853,5.432792759786956,38.376960115806554,-9.424285687501907,1.3958415015364194,13.055079510101875,21.93177026055763,-8.166154010006021,0.4526071867185979,-0.15991032874870573,43.4277758467891,0,6.990879947610137,-14.052885600467787,43.60303764299452,-20.90971627768885,3.6076431133163007,-13.758282105527508,38.03907589647335,-44.80187189859032,2.263803027514363,-11.689205651032466,30.548259457078185,-7.994841890040597,5.68799323843038,-5.1000000000000005,30.56544041618783,-5.42703877702802,14.059620732901752,-6.561220889409257,45.02411214832585,-6.0161714740982815,2.8291177164017185,-11.596425462630311,30.430700129996417,-5.51739334453335,8.019794714235836,-9.0865148449199,22.65656172229795,-16.16727071293478,-3.757573514640167,-51.209136231058665,32.45579023121396,-7.022639617386945,27.560473468188484,34.844643771677276,26.979828550350184,-10.541265780670328,17.475664515122624,23.324575493607323,43.64044874466733,-13.41505688391319,19.280136439273722,26.54055530966114,9.262887472888263,-17.69861335550487,-3.368735416094419,8.617725286855986,44.61626821185978,-9.55260427854881,-21.94960898741179,25.004550848796836,42.63060468465876,-22.183874735833918,3.2184783983445184,33.37862300711847,33.829458378128585,-6.219244689313335,23.109922883599793,15.395281639623304,19.90139596684772,-10.055905865243753,-0.4272197719800323,11.624649057805666,22.023337594423644,-6.123003961476098,-8.899510466209588,-14.888741457317554,44.02491939531171,-40.16275542445609,12.835214449663912,-4.084799905602926,45.96377614181223,-10.08548857400934,7.3624095774582266,-14.362181609491465,44.95409757074377,-28.696422982692788,-1.9244645989204643,-8.410987776029206,44.54058068497177,0,9.62303721615651,-11.517995643065849,47.988933019084136,-7.293538396183402,6.111560960814844,-9.320700149492026,33.04830962873839,-18.558628601239764,5.830251588212796,-4.889811739524621,46.182708218344565,-6.753291521914086,-0.8806512702287117,0,14.438806155624675,-3.9663294264249274,16.55035592452152,32.40801301949354,17.60759275764948,-39.271122053417905,-2.649992504000993,7.796781025368137,36.49717121387401,-2.856977155738527,21.689837216649032,8.62157787622701,37.90043539370909,-12.289439813547588,1.5233782627647963,2.6901868332734007,46.557169352941116,-4.856031165304933,2.0841851264177444,10.30180518754205,14.529029564097153,-43.152234586146484,3.063062795115985,5.3169697192217225,22.277017450763758,-11.3389933169366,4.835631385084432,-0.11094151122829109,37.72893210145948,-5.639040239298524,-54.36136562662131,0.5812031740220073,30.078573071457868,-13.569389706407817,9.0460863902564,-10.387584088330591,46.5158624445934,-17.509063666961655,0.12489300546948628,-9.126976080778203,33.349826056479635,-12.468619947276643,3.3131683257789497,-10.914722217180227,49.03316679735923,0,5.815641269746653,0,29.609409593272183,-4.446532438593254,3.6628048228592895,0,42.980931028145044,0,-3.7507179900830017,-38.36099007160037,19.9924795248082,-9.691058126069523,-2.983731762429873,-5.100398762860518,34.751091088427266,0,-0.7962755130353618,-5.164008309952165,25.998678123197323,-48.622824932659114,-3.003831005082483,38.60312443050754,2.677111002726775,-6.140143650161363,-9.743204405685637,42.0469550892032,0,-0.16955333048618115,0,42.075751307096226,4.801185726876469,-0.7507537868104075,-10.213625,25.97428990755634,0,0,-10.213625,40.98186766790049,0,0,-7.851725355886105,12.58332105568118,0,0,-0.8003192728607793,21.845818860866753,0,0,0,0,0,0,-1.8593129638630834,-5.10125045187095,48.29066259825393,0,-4.076835441988822,-5.1000000000000005,46.545628204927475,0,-13.505387116530354,-5.107637261302253,45.181460429341534,0,-1.5614993082915902,-3.332728827316868,8.97735521041907,0,-8.782968486175136,-2.60733167676004,49.1839621758329,0,-1.4751653675076637,-2.7667076968204913,20.955289510132136,0,-1.9809493135760379,0,0,0,0,0,0,0,-2.5042178120668157,35.88285292774298,0,0,-2.86024399884373,-1.151768202851808,31.365019085728417,0,-6.1000000000000005,-0.13557803074605435,21.729170255022,0,-6.109413113219473,-0.4650678474172256,0,0,-1.9043490512659969,12.29086657040636,0,0,-1.0696889916365981,-0.44890261997752534,15.038863040691602,0,-1.1064380335768929,-0.14236664658553397,18.650630199946,-5.1000000000000005,-0.4517372502147165,-0.11668604037658524,5.758402375880907,0,-1.6093188206977604,-2.68218223990905,19.70626911144027,0,-16.68025745124602,-9.795175311667832,31.259196249341013,0,-1.110872679617992,-4.477400977157119,11.228350279233775,0,-1.1055983840275168,-5.117227828125,6.390756036064748,0,-1.6287840390247892,-3.953478248351628,3.848047363158679,0,-11.105464109186226,-5.2168047962006785,0.9805251266299776,0,-0.8604739315734069,0,0,0,0,0,0,0,-5.641924005496431,37.59973151731152,0,-5.1000000000000005,-10.213625,-0.1,10.934417457921503,0,-6.7584594635549795,23.505426834589123,4.800628219130421,0,9.374773648456184,0,0,0,-6.861538624721289,25.43666828435369,2.713384270916205,0,5.975607921959304,0,0,0,-1.4060553444677368,7.861830464130118,0,0,-10.213625,2.793275167838714,0,0,-19.39173209757302,-4.703030206533853,33.495509330798726,0,-0.994508962589452,-41.66303299400488,27.61447597269651,-4.610991655410827,-1.4930424195501097,-1.613185736493859,0,0,-5.870122802838442,0,0,0,-1.2422749440004575,0,0,-2.9600255291315034,-1.453559644731304,0,0,0,-5.568333564873779,-5.100733953743664,0,0,0,0,0,0,-1.2881979816557163,11.411666111444992,0,0,-15.287292475362259,-0.34056161634986915,28.084787241594466,0,-0.7395029903926953,-0.10100286131601773,18.26910389783184,0,-1.1916929696893328,-0.42609382493321474,0,0,-10.213625,5.665840805152827,0,0,-1.0273340430171771,-0.17135549358584515,4.439958182792263,0,-1.0636691916319314,8.446677640958857,0,0,0.3147471063578726,0,0,0,-10.213625,-3.8341807931538905,4.917983626219974,0,-1.1056463862478072,-5.1000000000000005,13.345489043229032,0,-1.5643231826322035,-5.106967450412891,4.817496198288784,0,-1.5846643213773455,-5.1000000000000005,0,0,0,0,0,0,0,0,0,-4.341674446444196,0,0,0,0,0,0,0,0,12.919751769016907,44.008372502100784,-3.752740210316822,-24.872020221070915,4.296737136934402,46.892100586491836,-9.8641312011068,-15.893533561102677,3.5681609898053175,37.73781447156076,-2.214239298806561,-11.06735846752456,4.905560742459663,37.5490816633066,0,-2.0786650382292633,11.148576425373506,48.40917916145434,-9.696217913037545,-23.46305718665891,-2.7933307368802804,28.87885259281422,-1.672360536468063,-7.671578677438191,7.75306504783341,21.995626340969356,-2.0221726650360066,0,-1.0289264652173125,28.851780931749364,0,0,-12.973634246533031,-12.167960595910605,-4.68271733710612,-15.04583297378571,-12.20992774808317,-10.185056217037644,-5.648610313204331,-9.375810161456208,-17.466738507243065,-16.385826436774412,-7.102449375224994,-15.85578570779429,-8.42367110065893,-8.862460875467551,-4.194582057875322,-7.238236316289695,-13.085890696716362,-14.730909212082036,-7.8606005576474285,-31.243372594809323,-4.426546113658832,-6.484722725056572,-6.080574851217783,-27.585500472544865,-7.613085768252929,-10.231393910046394,-7.101644798679509,-8.642875879201688,-2.0232837102776022,-3.493930027902157,-2.9247000698181935,-3.3254232167065325,5.494302931214485,35.19353705913417,-0.0629812993601739,-8.621132793130997,-12.960552477174653,-11.029298515926385,-12.912187714050948,-19.489978459913573,-7.024068256533443,1.04474001184616,-22.806560646897648,-13.915878622986785,-10.309359924925452,-9.989646256790346,-8.034188250389693,-15.257298272562917,6.231720079173704,15.459544487473217,-11.525822764647932,-12.292136625468164,-10.56522682554847,-10.813095070318415,-30.126397783777094,-12.943936372923584,-4.305156321109154,1.3307557008391893,-41.26298553433003,-4.023642006931564,-3.8696272396753106,-10.501872985816108,-15.424558373086306,-11.903753993702237,-13.645113774165477,-16.03608637350105,-10.559399755728618,-27.72120071827366,-12.492317788234812,-14.155243666433568,-7.549151907332065,-8.370385667367719,-19.68658803697958,-51.274709192231846,-13.064231769360473,-15.421178224193275,-0.36993555078598384,-5.10125035272187,-2.1421867368298577,-5.091342382268171,-3.754048820858434,-5.842276207083133,-6.081964726997459,-8.807912566335965,-9.821406930405104,-17.817530233473008,-8.958164466971683,-15.395734494560891,-0.8425049218200874,-4.724204567373697,-1.2409195996652915,-1.8212835113264056,-0.8851104499628843,-5.050913556928976,-4.79440067355784,-1.9795260975505728,10.29606401853254,34.84845168014025,-4.892122384992644,-19.129779784755197,1.7031485832331406,34.66543723035465,-1.052322805516585,-11.75207653702629,13.792087306902657,-2.7591142763170198,-1.4134872326593784,-40.87751296525642,-0.9356580855888317,1.9185323072573557,-3.6691866824522146,-11.983808512889816,4.0949393982984965,19.890855172335975,-8.321922521300886,-18.301975499458127,-0.2640581287635218,6.712366015607703,-0.28086335033006904,0,-1.9039107149324717,2.90362091756831,-1.0034421840964591,-5.530233449857652,-7.65458611214151,-1.3488496768839904,-7.796586665300071,-7.955677441676011,-17.30930527075908,-14.514218301949452,-7.518290168113174,-43.33933704149651,-10.525188384837385,-10.392008007608364,-9.359595974001477,-13.482729989059356,-7.35817561407265,-7.044887758825855,-7.643170856276503,-8.055242364773875,-6.96263261805642,-9.544538510014414,-7.900231336504457,-7.334590266262128,-5.425305291610836,-8.377398078943974,-5.362304354711576,-9.466680001916256,-10.26710083592413,-9.300704840530202,-9.028825046808986,-11.622234590636818,-2.4484114175819753,-4.781929171968968,-1.5216142851758283,0,-0.6013308003235854,-4.859835878838191,-38.479946577348336,-2.5461925862829973,-3.388925633842741,30.511409482530865,-4.187935593444426,0,-8.043300227296188,-10.917231747072735,-9.864643921755015,-18.934288574071736,-6.3104134181125,16.23318337169647,-7.6836271508288085,-8.208374629224068,-8.530583594519523,-9.248629433482852,-10.385805488688565,-9.577435088301357,0.5828875824527824,19.518799397864306,-41.11534839426501,0,-6.529812619210592,-3.293818842991022,-9.516323093059896,-9.690000000000001,-1.499130442362449,4.852173550222875,-41.069607360761665,-5.095530948184937,-4.297617100657553,-4.934614797193438,-7.860369607228925,-9.690422048052723,-3.4900919565979285,-3.2887285958011634,-37.46906887697171,-9.567574579319118,-9.6121382989914,-17.89960038261716,-15.489419332669966,-13.753540065355047,-0.5723647850906448,-5.101082134105822,0,0,-9.09717664836926,-9.794412140229095,-10.802209082261005,-9.665076795795416,-5.157375,-4.940451161934108,-21.93799946484239,0,-8.026631404925483,-5.129351269192825,-5.648602718554413,-9.246773174480289,0,0,0,0,-14.181666819646562,-15.210503378121485,-16.83489594603831,-46.510438404191554,-0.13199783587564015,36.465856141797595,-0.6017890950634489,0,-10.213625,13.588899306771108,0,0,-10.213625,23.659343683429224,0,0,-10.213625,6.7818679210591295,0,0,-6.1162153281250005,30.778771918610285,0,0,-10.213625,7.0509338641841595,0,0,-10.213625,42.83085803969492,0,0,-58.04843727495885,0,0,0,-11.237784952640306,-5.097726944085466,-3.852533328831388,-5.106872656505742,-1.58513131905641,-4.9801905786733265,0,0,-1.4664019882827137,-1.0678486605020907,-0.24355756301129575,0,-1.1055283001432261,0,0,0,-1.8487102173008538,-4.235867026940788,-0.21221991689645492,0,-1.4235381029612473,0,0,0,-10.213625,-5.101249858870069,0,0,0,0,-7.709351724535861,0,-0.218119293764787,34.26708648497967,0,0,-11.109173461696525,-1.6454368418054237,-2.4524415611688557,-5.1000000000000005,-6.105098806553421,1.9046286816023763,0,0,-0.7789918327487836,0,0,0,-5.269495378233167,2.2845839109630166,0,0,-0.06765533837780016,0,0,0,-0.005822969688453839,-0.4865958772854757,-4.1000000000000005,-3.5156253941024604,-0.5399262520907557,0,0,0,-1.498575066793708,-1.802152158236737,-0.26569574172952387,0,-1.0924919998926466,-5.1000000000000005,-0.5736348934690725,-5.1000000000000005,-10.213625,-5.166904301627014,0,0,0,0,0,0,1.5372832504268665,0,0,0,-1.4107133287808367,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,-2.675955822366906,20.37386608704427,-0.7147816541747141,0,2.148430821884412,0,0,0,4.1299113335229976,0,0,0,-1.1,-0.1680630466325022,0,0,-9.013356616911686,2.668993934929574,0,0,3.9691664532962445,0,0,0,-1.7839218021187173,0,0,0,-0.8076500889827041,-0.554919823376118,-3.7238730470608874,0,-6.1059625,-5.106990574633377,-0.8782461398382524,-5.12643451633463,-6.10559214853892,0,0,0,0.22232835243647422,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-51.17227827685915,0,0,-8.455144723217735,5.173188203446211,0,0,-6.106976121261155,-0.21753682645123346,0,0,0,0,0,0,-1.1104461947451691,-0.5807368717893578,-0.09301177195722943,0,1.6231604043938288,0,0,0,0,0,0,0,-10.213625,-0.1,0,0,0,0,0,0,-10.213625,-5.060463234413252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.143574019602745,30.571115842826554,55.77644157696939,34.61585657568541,31.37273613741105,44.05666684515279,37.02231970170159,35.28118108201468,25.400006378364537,38.79304992011088,53.96110387571733,34.62644037987852,16.400292107015517,45.62901747991489,29.023189672227403,33.67939177714654,16.06299013495819,36.81637194893125,44.07387335584864,29.95188109992498,18.87853032484021,33.52821486123715,51.194859580160944,36.72029598274286,21.457885168332208,43.996766525893506,22.423771577227136,30.508550468557097,7.0466210710377375,25.23039661279722,52.182880461155584,28.637040789750014,27.7822832864728,-8.06605971362162,51.17630846511674,36.34174041007954,23.42163552629923,-5.564121748811783,50.962881779480014,32.69528540113092,29.85624027026867,-4.522982962566386,53.90610059480545,31.90712813435344,9.4737608078977,-8.026724388155808,55.46733559056369,35.68450103044819,21.63219435097744,-0.1212210533586462,51.117491022403655,25.359350453398875,23.597537368723103,-7.892040208587662,51.812273022637626,25.571219724650437,23.53194606585834,-17.313003089520265,49.19763768718812,25.009611973550417,-9.262817657830242,-7.928529148795177,48.709028835804155,38.31157481462082,16.18407922396409,32.245987145281404,43.00923060070895,32.65965813580475,16.178475672611306,34.0747040232578,53.43277401371125,30.51028154874536,23.387175289886695,32.69516966160244,31.810243677917903,22.435964667350362,7.203398994775062,28.693314213900372,52.52015988058991,30.61111397950025,19.244363321206517,27.07913892979802,44.74943005363849,26.300588546488708,-4.114991034708827,27.89880542834882,48.86784488155498,19.4525558858576,-1.7590687254748123,37.78683544893569,53.70291722817776,24.97138562012151,3.1458674050618116,7.141127517771986,54.524204773095676,13.099591156414501,13.86420357012815,-12.52641617021551,52.63588087981683,33.47770108015766,9.887471436674836,-12.124462874802122,52.15776584765009,22.490002791358627,7.987764062335944,-11.258357665566963,32.775333369903265,17.2276521760072,1.5823625423230891,0,52.26761503594002,32.24955244964164,0.5294384305888267,-15.03911034242846,51.84197272079702,17.009637254888162,24.048441058507397,-8.923688100068116,52.09104230300583,21.8187075702057,9.34034797791282,-8.600947655225811,52.09188911351805,0,-0.39459494910314363,-6.946327860605017,53.484184870808484,7.243170184528823,18.8183091259095,40.97138824380515,55.9430432884547,28.5695730695713,18.988232086246647,32.91853333710629,47.19889540154233,26.707410556559363,28.41730216718777,25.123205980981556,32.02641244204372,23.363813351421754,7.452001350166408,21.721098592749975,26.78567415588531,25.927030571585167,21.754884160049635,30.975571101801894,27.61703021649575,25.11657368199465,32.811011609839106,21.29440587691124,48.124641511099554,18.57125126065325,5.301047410670513,21.294692862082496,40.16784771988821,23.29028575394853,2.2812756486981547,40.63051852437039,18.367655643415283,12.679152168308772,-0.725488157399699,-11.486600400368252,50.008942740424324,26.265031819515112,5.055525471317795,-12.918587318389381,54.79166112065265,19.056743461028272,25.263429587236008,-14.505834078556948,50.851089032563024,19.96598926846305,0.06645757127652452,-38.49432698621503,51.69880268353972,16.09514263463903,14.351356936708587,-13.18714254351111,48.49439547396456,34.81459383108014,14.417265536751257,-9.311451205631181,53.27246576649305,12.670899466793646,25.936484476614634,-16.650860695889467,21.508289527207435,13.476969521075965,-1.0234209190937769,-9.23201988231746,49.043604691804106,3.4721280791568163,22.042890987301945,30.08327300709716,52.33557048056173,29.687736107533166,15.723668060909658,17.538434664064333,50.142458878233285,36.37622207249398,2.1749760607595805,22.844335874871618,51.14626341775375,22.35726094929096,6.530163975238967,36.32494089138927,49.99706315208569,6.210598258412214,16.790485691377572,24.246168338900503,52.923486354239934,24.979553550856906,4.571340807497833,3.5878692064661566,51.87801679510756,6.830464151937518,5.496852120875802,10.192526484880926,48.87927873805867,6.0217191824342216,0.4208633559873497,-0.1,49.83336989062686,3.439137241209793,12.700094969842224,-24.92392584779714,52.43268364969691,25.656498463539315,6.563854276402255,-6.057205474915357,54.592962952934435,12.06318775572608,2.5294466901181236,-15.954687098487872,50.116266845161554,35.33104203697485,5.028163526186915,-5.1000000000000005,53.43086640033225,0,13.504556683382235,-45.90127948195707,51.646543854911314,11.563433810532015,-0.9527511570362259,-6.331766331251602,52.71657347072582,3.4473180569341846,3.3660415673789132,-5.101464509187278,53.00620244776935,0,-0.399016787730836,-5.078129203565869,55.29895380738671,0.006168033717718547,10.08137037309412,47.03722374290949,28.74598473892654,-10.057938332208447,-1.6088304952872798,4.301669865275581,48.43955281628917,-1.1442664853654483,-7.896759416978794,45.29104324890653,5.690475591561031,-0.6836220249075073,-1.1011193394141061,45.020962961288326,0,0,-6.136607662663237,38.899536201902784,17.668310749180975,-0.7422604860560715,0.018042477774641297,43.42037470204846,0,0,-10.213625,37.418385057781215,0,-0.29515519896292625,3.726494921204188,0,18.749299144979112,0,-6.398237255613028,-7.33557993674588,50.54200376708704,-1.1054642949680415,-0.8341409787006804,-3.2432702793322457,47.783671534500535,0.14849621720873724,-6.734751324759387,-5.103917219249104,58.04807834133834,0,-1.1114516237180054,-4.259696760701078,54.33177361814427,0,-1.318623064923284,-5.1000000000000005,60.13146223485139,-0.7777165078695321,-1.1319026584753515,-5.1000000000000005,48.089857640405896,0,-1.104854733087428,-46.95856414423997,47.16169763506655,0,-0.22898362544656126,-4.832724689233787,17.196991293410772,0,-12.277918399022676,23.904144879775668,52.86706097242082,-1.7784168704422747,-10.58580228626392,-1.749590595020516,53.21321513851241,-3.940684142874594,-1.6089985965074058,-0.6147517143276673,51.955842490713046,-0.7434925238352679,-1.7038807428941638,-2.009828370364911,51.845922595576226,0,-3.7401743274619634,1.335435951701855,52.98048769856217,-0.7665428325442247,-1.420024891382024,-1.3097672401605485,53.99369875205427,-0.6460916707585221,-0.5762758107955207,-1.0587809924898182,52.56210207810672,-1.0103577119334017,-0.8329202545200091,-0.5153025733726926,35.37385696161744,0,-6.1000000000000005,-4.199643367561956,49.931668489339664,-0.18816707617724868,-7.056179412996411,-5.51594399635948,54.67089989965477,0,-1.1205727890191006,-5.3305854392018555,41.80089747506657,0,-1.1,-5.1000000000000005,13.739029089060764,0,-0.6987419150930223,-4.831442278346108,28.80940399244519,0,-2.0114629361077494,-5.2128401073287565,11.622629206484218,0,-0.3998063119164481,-5.111954577871822,5.6911089587619195,0,-1.111502751408345,-5.123706175771353,6.429439318238332,0,0.6024883062858937,37.53050432300668,10.694660232013245,-5.9455112800410825,-6.264812273538272,39.7947807671532,4.789931251914406,-1.9360067433972008,-10.213625,36.43451530660167,4.91970891675258,-0.7103179427249298,-6.112306038063654,37.44957295752175,0,0,-7.973317165004851,3.730348572884314,46.83196451797717,-2.483291780409454,-1.037153200619988,29.48525890411654,0,0,-10.213625,37.99315874386811,5.511050589459432,-0.6729703539419165,-3.1164593610528604,3.4374049695483886,0,0,-2.80676125252454,-6.952062473730038,50.722467949946406,-0.6583899657579556,-1.1006262123849972,-2.0146865270346943,51.66383176361221,-0.8590460160928001,-10.122946848036984,-3.8227282222982426,52.91822286303713,0,-1.1113896833067254,-4.021465181774285,11.657165011722995,0,-8.839980920307987,-6.765979754176763,41.65806861992292,0,-1.0923921909984864,-5.112614586942671,21.058052098823776,0,0,0,56.46872797348655,0,-1.0092504702191982,-5.1000000000000005,15.615409252363516,0,-9.529969363291396,31.17565499687222,5.616806942672863,-1.0770397643258995,-0.39469022800506315,-0.1,52.763700706505006,0,-6.508355618819355,29.178070062436046,54.4403615340342,0,-0.11445670634399843,-1.089149694376,7.079875786000991,0,-6.101242509822821,-0.18393145663581706,53.91189650859232,0,-0.7071622498223434,-0.9820242749531429,36.52574111061208,0,-0.895653449731978,-0.6482807462010775,30.04525677604643,0,-6.1000000000000005,0,0,0,-1.11070974327319,-5.1000000000000005,30.59133117333112,0,-0.6798042287668467,-5.101244063207002,49.55308681447517,-0.8423344414521353,-10.213625,-5.176807153725706,8.71510759585023,0,-1.1054742389153664,0,0,0,2.719056244404046,0,0,0,0,0,0,0,-1.1051813043425383,-5.1000000000000005,5.331425341587836,-0.6486253623274797,-6.117361189183331,-10.220507031337831,28.36391178391377,-0.1068081221974489,15.074764593901492,44.54931878521272,-2.948221831126809,30.805896991076267,17.834689857279542,45.61629513565504,1.6610520026064421,21.04548257959033,7.800164903127959,46.750400339959285,-2.9407610093631065,31.184826881636603,-0.3867655970444499,43.143820262311266,-4.5974625785911645,11.227253492784264,16.306216980878492,45.59950066254657,-5.06601670513902,21.995542339137607,15.848843698696776,42.261624530463756,-3.9138239408079105,20.54078857008763,-2.72523638781141,44.88871829894915,-7.9674198782182835,18.887950413549028,-1.0716137807392627,38.04552641635393,-4.357655789310409,3.0064442643373197,-11.861776726564548,-12.717883429753154,-4.207535407683674,-9.23823754274804,-15.225965496028271,-11.071336001179397,-1.7401169843600712,-7.707531002672674,-14.685987338298728,-14.114161985164605,-2.2531920891491573,-11.383060292669073,-47.33776265808658,-34.60549429936245,-15.763892343343542,-14.300616478868129,-21.88145986865523,-29.425994313533696,-4.645067662594522,-11.885344256787338,-12.737771361356716,-10.738472037581818,-24.67657655062899,-8.974463471152896,-11.778478865493687,-19.806868480515433,-10.456415319179753,-8.716070541918766,-12.077041313767939,-11.39496696579386,-13.509932422982354,-8.5286894275971,16.301363540824475,39.66424793934883,3.0872076140424336,0.8910569350202412,-7.838761811916325,-8.834184562443502,3.833624940243643,-3.677255329786197,-12.20742160351673,1.0290845506579311,-12.377163072707557,-4.946588298584291,-4.829176001247246,-4.9492551006677346,-0.5113775514248071,-4.478049048508998,-11.474699046587734,2.9820567393611457,-4.968802298899701,0.08545315468322423,-8.275665643451568,-5.532976839870987,-10.212987008774354,-1.2757498022497662,-22.88446668412961,-6.503563852210286,-12.302786711150425,0.6778724947152494,-11.390823344767416,-1.9069288934670647,-19.220311363635034,-6.761772697951794,-32.01341762549686,-13.656424908316026,2.1734337155042747,-9.083461752955268,-12.95235647226608,-14.295649769610296,4.869182689611032,-9.246226747538051,-18.615204055293955,-50.209384796703105,-5.500556234051951,-14.52915307840646,-34.70785346195508,-9.574644214835088,-5.422289776110048,-8.652727969597125,-15.111672004141056,-17.30751802696743,-22.843434208067055,-5.473648347196987,-59.21178192340625,-14.09774195460713,2.8837164617283126,-9.764340923247142,-12.831364301356615,-13.74291685889067,-13.012099524216701,-7.952117346827861,-2.149493618557277,-9.701604891153394,-2.8910451856344617,-2.2132058769600995,1.955673251427922,32.95393470891911,-7.642014008683602,8.387618700168572,9.224031133697995,31.9996355936744,-4.795709845618269,5.21152445748506,-10.092740424688516,6.508068593679463,0.2873054340323203,-1.4069919207217336,30.597032641934465,3.4169127088629803,0.19700732448754554,0.3546406156742995,7.166868775313091,17.229410897737935,-0.41534102451953125,1.5211711038796354,3.638816986996777,7.982063625317586,5.451834315887345,0.216689700957936,-0.7561314674664228,3.687046706077211,-7.617674285574285,-0.8322252821481333,-15.38331284585042,4.339100404267958,-9.47125770257074,-2.7074223623445453,-11.122589951809205,-18.47990343515408,-12.196214451890095,-6.4400348184219665,-13.548523764336625,-14.46874282094889,-19.03553921680174,-2.0772710951029096,-8.571174510105863,-11.810683081202779,6.545468464131893,-9.178574697018307,-10.69090982446988,-13.191498498762527,-33.02463963327955,-8.184371186494875,-19.74028470740835,-38.719652521483475,-21.605001173362943,-10.264251413041613,-13.70312194237677,-9.238332006821873,-3.213990256338706,-8.864342723521835,-13.98889642185264,-15.825851741675404,-15.010095741143864,-11.168913345233266,-5.948864614446667,-9.721160959843468,-41.003265189971124,-6.729799437298457,9.350839599913524,35.88899774645281,-3.1095800952048,-0.7916975423065787,0.784332418009319,-8.128134500654593,-5.595540319279906,-6.552535712184574,-23.507249784955594,9.335248483758471,-16.788911971150952,-9.669396763484965,-13.37866764582455,-8.536572520324432,-8.630649480579379,-9.605915170049062,13.163293885199039,6.7617411075095175,-30.819610861667446,-1.8358331075710739,-10.927519547154812,-5.036316935527639,-8.991626347549646,-9.669427956432783,-7.47390824905284,-6.26129220247655,-20.565467952102793,-5.1660076442571095,-44.77470447208253,-9.912858486983197,-13.22500554057205,-4.582856895876244,-19.483334298699067,-17.014651332903465,-11.434404290235333,-10.739833157648894,-13.439084656588083,-56.56312169996533,-10.883565440093312,-12.36579064909924,-23.803152234389557,-26.17602632799732,-5.654523750156557,-12.219192728027156,-5.444492561658199,-52.15137992340394,-4.478356862401061,-10.750591305561253,-14.392605243073117,-42.315437500395525,-12.9808948761181,-10.93728569930185,-15.073758862413568,-17.78827895106051,-15.614919987296972,-10.36726292863649,-12.28194358694283,-13.770818682703608,-11.645757099621884,-8.949678756948611,-31.16927839984313,-51.01591862816993,-37.81472067705843,-8.712149602786427,-14.50616220775397,43.399632093351535,-0.641500171280212,-1.5399757503399483,-1.1,47.48336239641657,0,0.19717162593054316,-7.631702528097683,45.260644777090064,-4.1000000000000005,-0.5687274474902664,-10.217891480411536,45.47024194412963,-3.7924270324756835,0,-60.837364285246885,40.14426915911294,0,0,-0.5407588730907403,22.34045890588695,0,-0.11257619724449748,-9.510996330441444,43.44678000912397,0,0,-1.1068637494012397,14.206791364023307,0,0,-11.550907273999766,-6.834972331275219,-5.021882864658598,-1.288243236180055,-2.0211832082023156,-5.101253770026594,-3.771082632595707,-1.5306747323988172,-2.442416902588599,-3.63100325050316,-2.9761546561725356,-0.8034382133326283,-1.1346995707300045,-3.1733575220576893,-0.6953127354133304,-0.3797756745696728,-10.213625,-5.075457820363995,-4.4054918343506415,-1.7985466492493283,-2.1771452683828736,-5.1000000000000005,-7.18035581026198,-1.8252180419085067,-6.312057360510098,-5.1100107561198085,-1.2808771489024189,-1.2766453308877455,-1.106863817965058,0,0,0,-1.1414304481921305,36.390400269585854,0,0,-2.8707211802429504,-3.2806111722299667,-37.37696741619962,-14.632853589375541,-6.885819193431379,12.334633659399096,-1.2350859281647328,-1.9257467684704652,-1.101700422094482,-1.69004635738918,-2.238652721886019,0,-11.091237500000002,24.23910250847106,0,0,-0.49433052411296097,-0.676578084780016,-1.0681880102514114,0,-11.193302562650755,-1.798772974335252,-4.106879031327756,-1.8878236507180493,-1.1714328100165234,-0.7150894567839342,-3.1453581915143745,-0.9169008609434002,-1.7699939913643756,-5.1000000000000005,-4.342366792570087,-1.6200732752672033,-6.111609575640275,-5.117227828125,-2.620717669116448,0.3676379634686766,-1.1107883079597929,-5.304527851784798,-0.21065672675444347,0,0,0,0,0,-1.1,-5.1068625,-3.7933010394756694,-0.10690142429135185,-1.5325683987492815,-5.254998642166581,0,0,-10.213625,-4.903554608625373,0,0,0,0,0,0,-10.213625,34.094729944680964,-4.311334926312575,-0.3873750560670616,-0.05338578419073521,27.757860697957604,0,0,-0.6883170069277011,5.599146639882278,0,0,-0.7277836096040918,1.179853122702545,0,0,-1.1494334577388887,10.946455861261212,0,-1.2693015407642152,-10.213625,5.350646041855453,0,0,-6.808862582049581,5.81379192673054,0,0,-0.8782249749034965,1.5684989331237529,0,0,-1.0603495043706552,-5.1000000000000005,-3.414896697911647,-0.9658968412614601,-10.213625,-3.898124055209307,-1.0087436573987905,-0.7345419475520547,-6.1000000000000005,-3.048039146759763,0.9642359535508332,0,-0.420670689162461,0,0,0,-0.7158466593453797,-3.5899800334884846,-0.46388259612845034,0,-1.1645945552038612,-5.106875997251601,0,0,-0.9688910505780598,-5.107044449006031,-0.5054971049508936,-0.4642182126795662,-1.1148089404484347,0,0,0,0.7318472642057181,30.021752467413616,0.48813103167035055,0,-6.685227275312286,-2.9014235791318086,-4.1068625,-1.8228510095947978,-1.1973025870525265,-8.764437264852702,-1.6086282595308163,0,-0.2778335688246969,0,0,0,-1.0362598917908385,8.235687116788705,0,0,-1.0919856447235146,-0.3295004527956037,0,0,-6.087793232308119,-0.8442835934576888,-3.148892486942411,0,0,0,0,-0.2954984210140223,-6.105825934227838,-4.624938954472301,-2.69510728327943,0,-102.22784855855767,-5.108138470296371,-1.8061070701719846,0,-0.7207993200111416,-4.268299956102012,0,0,0,0,0,0,0.012236131982641396,0,0,0,0,0,0,0,0.9154934545861835,0,0,0,0,0,0,0,25.865170624404993,45.91565424033038,24.57013405700545,24.3136195052351,22.835820777823454,23.471563335723253,44.696950315243754,21.620812117827164,14.724320836999716,46.00994030893902,26.46693399519356,22.024867780700042,16.637597338933514,32.07306037908666,38.90318427064787,26.22173378520458,25.597654189797947,48.40289984805337,24.16042589693466,19.150477289503556,11.866867804851918,19.20274391273885,36.68398558243702,16.64424405089413,16.236287721625587,22.462982908791307,40.89664630440692,18.02316946992585,2.754751380143724,6.435787252627991,44.81920960111634,4.7665224936528885,25.521615367723296,-14.580809188319199,49.80270961184867,25.655052272763108,29.003737087237084,-10.082389572317789,41.55910293061902,27.606245449188748,3.3872427723719376,-7.921847488621496,33.01904542044105,22.652998358987304,3.109023303620312,-9.135085023129118,45.24689528756701,0,29.934646234659223,-28.25452745179588,18.91247777173719,16.980266131657693,8.946994155495466,-28.90310105531005,34.585404929889144,8.449523203881963,3.9417384328751206,-8.318110850045692,39.299310101690345,2.9298661605599996,3.262814771051235,-5.006949397225891,42.8954428416859,2.6092768445190173,11.46298471885958,36.15775020010258,6.427846221527853,9.710502141352393,-20.40381410335232,-1.2921858820859358,1.6387006383620881,-1.218520935063312,-12.492508366014022,-0.5801516263536036,3.3836927538213333,-0.8011808567187029,-4.531538880394864,0.4698298421241702,5.580376327045514,-0.37975719507389205,-26.35883610196951,0.4378612958582522,1.2338620997656928,-0.5792194413000492,-1.1461175193515656,4.706143306271375,5.442893844436179,-0.7323892198606176,-45.08987870255263,3.9929598402584845,5.805783833585267,3.873343135062249,-34.78051993764596,-0.1669479292358399,4.339486495463303,1.062626393623599,-5.331231709025063,-14.725287446489427,4.560316473179214,-1.0994740442104112,-10.942839652655984,-47.77919674490668,2.6892843875818313,-3.382835125680574,-3.8207644626375066,-16.56714464927444,4.447642558181899,-3.335886624619019,-3.475486090907239,-25.145967237429304,4.021697452786388,-4.8607412106280155,-7.744536224408846,-23.94447778003161,2.1735817999193583,-4.091257274015906,-4.858559145734312,-15.749912251034143,4.277186890263335,-3.8814843017701612,-0.7419422091913552,-9.464881464761575,6.929194820462693,-3.6158542586007703,-1.1803764742123475,-5.123796322260339,-1.3463021309726892,-0.3351227643090451,-9.276604253860226,17.730294325735233,35.823008193727325,14.272881299677524,12.921728396006364,37.815391048532156,19.93757520771516,12.763014343801085,-28.44043598961369,17.16893638781114,3.3150595409084067,2.8847044561886506,-8.058232584343145,0.049896157727808976,11.021762248869177,2.902338908300511,8.028100096142179,15.834046710447677,5.019159243731337,6.846382359865028,13.328708746527052,32.614006318889274,7.116826749165854,7.6259772494342695,30.91028248368433,15.645192510297296,2.282981083702774,15.40018923487029,14.836170806431705,-0.6455755713983143,0.8691558310400189,-1.1504751265875088,12.220616307389896,-17.217662602621548,36.8551949171661,10.275430953109344,9.585230226691841,-12.487401295403362,36.502245113393066,3.205182734033923,-0.8919003693785852,-24.68967513303487,5.398342525222782,1.6428564024350572,-2.0744759146701828,-47.59189069862437,4.249793269236698,0.4651266173413947,-12.415196506246918,-20.753650512646168,7.279636381154402,2.355719937129093,-0.773430271370873,-11.051597058191476,9.135836323187299,-0.022134908191549743,-2.61984669436768,-23.063957956880294,5.894151336192816,-1.628920266527361,-0.376379060325499,-17.143736133209128,1.859218206283148,-2.015553491645174,19.523362465556623,38.117051140582404,-0.7198058079849776,4.993951855635258,-2.221735645749451,-1.0887428164299826,-6.529007779036738,0.09190077227673055,-18.013842221953787,3.1939604543327462,-0.19810914929873746,3.9685291812413563,-11.6284800481836,-5.202363516036227,1.2256271791001858,-4.732890640806517,38.423815048534195,6.006311071965808,2.9279003215448665,1.6781266354385187,-3.7130789369233748,-0.0857438994695513,3.859062053506682,0.8652246025794454,-31.23639669034697,3.146319651552595,2.596813695440069,5.85861531010661,-6.434488903022408,-3.9753670777862204,2.57166480006113,-4.04424376386182,-5.305666268742522,-22.322094871229055,3.9392037676731135,-3.6974760354731866,-8.25480570985351,-25.932091257427484,-0.504024935561425,-4.9411422756469605,-2.960750658121567,-41.401488364841036,4.766712896357809,-3.9415898918340155,3.248021537814182,-9.701613680345297,9.265334468419448,4.6057097639616185,-31.65237837627611,-22.367570833405406,3.2139093195844093,-4.003908159899801,-5.06411462034721,-23.300949690311164,-0.9512936827114702,-4.578384909051909,19.88708990635124,-5.102631546907385,4.943221152087647,1.3063119931652662,-20.515637306524603,-32.82478599038503,-7.054729133517572,-3.2484168176155266,-6.508668063859988,3.7770504661182622,41.02008205896082,-0.10121231162667216,-0.11555557220535491,40.63405724162258,3.296219926402762,0,-7.349767312848218,43.70828127490562,0,0,-1.733096049627275,22.943715869279696,0,0,-0.006828561459036875,3.0504488031828334,29.99520613948983,-0.759528518550069,-6.280001453661265,23.11713108081055,0,0,-0.5050339711645745,24.687845188240342,0.8547140157240682,0,-10.213625,19.638124762161116,0,-0.4927798188072323,-6.1000000000000005,-6.361595365333677,43.04797986347663,0,-0.46793553623242695,-1.785115000557127,39.11863789400253,0.1393351836165934,-1.7579078020933807,-3.4415071832859505,45.889048528426244,0,-0.9786176631245489,-0.7138737675199579,4.847008216732119,0,-1.31873760221661,-5.102458011908524,33.62954309544585,0,-0.8760667044139068,-3.8292863717590357,14.468857076818766,0,-1.4711557953842735,0,0,-0.6280834635570801,-0.5605118343797493,-4.222957724214019,0,0,-0.976623457296022,36.235374563730105,-0.8658536268483938,-0.14489467148989263,-0.19521306687393594,-0.5221180057212409,6.533527760336885,0.20508973993628943,-1.122249406170741,-0.11970066881492272,0.17694055997232241,0,-1.0859746456484247,-0.6069056731841984,1.4439977219631421,0,-1.1692823149172182,16.0038962627847,0,0,-0.9908349331169245,-1.5459120922527643,1.0458229016521852,-0.10315455506196146,-1.1,-1.250883909719204,5.786685721637334,0,0,0,0,0,-1.0680847584074422,-51.59600769014447,4.396144820535391,-0.20794572893400692,-6.1000000000000005,-5.2123855980092815,2.3313232747580708,0,-1.5620935761361754,-5.063589606989073,0,0,-1.1050362167635714,0,0,0,3.4296817471396683,0,0,0,0,0,0,0,-1.0895348967424503,0,0,0,0,0,0,0,-8.337381412840653,28.224928984256557,3.676810527581094,-0.2045227389336005,-5.156536651075258,24.197644710960468,0,0,-5.663954718752511,7.150702095654677,0,0,16.4545534479473,0,-0.004002904183592371,0,-1.1124229215446089,-0.057807444668127664,3.713658918625134,0,-9.966937420687605,5.430294453434617,0,0,-0.19296466171904714,3.066337615741369,0,0,-6.867824521456946,0.28573159592331765,0,0,-1.0768465921163584,-1.5854983996664345,28.30733043488359,0,-0.9235596282535625,-5.1103544557186,13.90804669539452,0,-6.1000000000000005,-4.603456659148968,1.4212647453865501,0,-5.851353407146486,-5.090139470938475,1.2845988017431191,0,-1.1111087678022054,-5.1068625,3.2697164513409067,0,0,0,0,0,-0.775679658624298,-4.907920874691894,0.2310107158164405,0,0,0,0,0,-6.111592509822821,-0.12830765996926036,-3.2992413640513027,-0.10924439663815066,-0.9412154434147428,-1.1423278337358713,-1.3243043453969583,-1.0597476096980591,-0.8950872290767062,-0.5472778340078501,2.3183032430644497,-0.1,0.8457512613051327,0,0,0,-10.735274667732899,12.833054808172577,0,0,0.06766565081669818,0,0,0,-0.1519560818840926,-0.1,1.2730360093115183,0,0,0,0,0,-1.1603180859701758,-3.4600442384054633,-0.1409988057675344,-0.05936235911276778,-0.5771811994809468,-5.1069135085531885,-0.28632264333480556,0.003736175889693372,0,0,0,0,-1.1057173436295036,-51.074038975917304,0,0,0,0,0,0,0,0,0,0,-1.4777246518495413,0,0,0,-1.1111536721745223,-10.214875047881197,-1.7960057043465807,0,7.945203947004398,35.801776972054526,-1.1571400086606731,23.283679930760783,6.589584844926287,41.7501750283042,-12.37988966163453,15.24230280135837,2.5954752126222624,30.085486445886865,-4.9339143651895805,9.861198550023838,-10.37764964541563,43.01947496788837,-3.1011269210424786,8.575815426451605,11.19593460282438,20.219482300768135,-18.768575367849486,13.288423177344406,-2.3768966325339065,39.38614352189145,-16.791687617048417,3.4027851573376875,-1.8782717732555574,26.255599020886315,-7.400208702229595,9.18311583964142,0.6440323961570515,37.95395402183332,-14.102302671273137,3.5601340762010487,-21.61537157491533,-21.392446166354663,-8.172013497623363,-13.396804960782498,-12.124145974154288,-12.328503833634443,-4.960088167996912,-10.84362154522714,-17.745628605785825,-7.702676949003461,-26.95767080557391,-13.211508573089281,-8.63212080610705,-12.502357924276671,-11.597764539602755,-11.69527695966117,-12.84287810745807,-21.051210871307863,-18.842769467090914,-10.360207731072364,-10.372765387146217,-9.379382832991165,-2.4513601778953267,-9.346451787082538,-13.707335281090037,-29.548839146288305,-15.196250262232999,-13.810970341834144,-0.694872524599238,-5.013550366553718,-4.128234777106721,-0.7878133018330332,1.3269990106813474,29.040142278404495,-43.713904203948715,2.0470607393245595,-22.12744418340481,-8.002174803314462,-43.122854499556865,-8.745580791545123,-4.006824380741687,-5.980310904209594,-32.27301722256328,-8.158613056058517,-8.663220963683687,-5.489736670799986,-41.73918146757758,-8.68321440453403,21.879387141145827,-0.7787072148581287,-26.009323762181538,-1.2959154787797393,-27.371108249135762,-5.804676212620657,-24.057159476419496,-10.573159476304355,-10.061546818176772,-1.303883296248244,-21.453747300565766,-4.96705049696274,-5.996182735814992,-5.102053883737891,-11.187955684624786,-6.582498998076569,-25.319552663129727,-14.144847633424911,-43.63788219631223,12.723564067808372,-15.009429093496237,-20.8347922515949,-14.727089066464352,-5.573351862664294,-9.063822532241295,-13.67136676580559,-11.236854997889184,-8.927065996781554,-4.368571439507686,-9.691196347492882,-8.697712445594934,-4.559376392303069,-9.159382383034446,-9.691309181060305,-16.86097315664077,-9.741202406287556,-8.71266452093045,-9.869716232867319,-7.791250075509322,-6.829954035598045,-6.629859439762531,-8.377877186879116,-7.723017376309201,-4.54241946069963,0,0,0,0,16.499754953818844,39.46453739841351,-11.33611117742415,5.456194906408749,11.111178340911575,36.93573610182461,-3.223626324573316,17.34223124967912,-21.16601584836655,28.33887824075563,-34.22484102561401,-1.062597456955058,-10.102001091627994,-0.6189243148944273,-11.357928668264574,-4.258323088937503,-19.750352906387363,12.072665420493506,-22.82958323742827,3.441926500916513,-1.3388168416432522,12.15758920950794,-17.079889722106433,0.31497603398674245,-3.6965443109374676,30.10611393312493,-40.71396798411837,6.023612120740066,-6.100987341550599,0.7975850860100252,0,0,2.644437454342021,-12.258503221025588,-13.820679760078939,-0.8699615526253098,2.1639839603620814,-12.935186699648712,-32.31081780883466,-9.965910463343308,-10.861054505464526,-19.954907739343902,-14.289693505831552,-9.797798150797803,-2.6741639035900837,-5.026219926715446,-7.595589599549017,-2.4264255209965557,-11.28915455527135,-16.495274300923064,-13.154435814989395,-11.218557776000637,-10.814744880180335,-3.007590759519652,0,-0.9179149102263222,-6.057519756630462,-9.096999935337298,-7.792195727214483,-4.11013106738277,-0.7952274278963479,-5.1000000000000005,-4.1000000000000005,-0.10598416950270462,14.77481706220632,32.82619575957679,-4.101298238451236,-2.2284826429301163,-10.214234872729072,-1.9548136005915153,-17.231264381432805,-7.653487505209056,-8.854688618965746,-7.147217385415148,-42.15122418328285,-7.257154920082219,-4.904835819353706,-5.292316990087781,-7.773842897163847,-4.526401445887249,-0.9749324580200516,7.318305799321717,-4.1000000000000005,-0.1,-11.634765420746902,-7.735397006506364,-11.471669479551672,-3.0589138239219924,-4.685212337657396,-0.7422506284746495,-4.112601516188596,-2.398257434186979,4.205699108171424,-0.2563173072792329,-4.065835579692016,0,-9.212671486886682,-17.373266493768085,-41.6551010109004,-8.056619834795736,-5.950993803146799,-5.238143137761828,-7.8021607788607055,-6.2353736907218735,-11.720489823241442,-9.6912375,-7.790000000000001,-4.996160571606147,0,0,0,0,-7.690963245355948,-7.464952335113701,-8.14245389843046,-5.4854916257932524,0,0,0,0,0,0,0,0,-9.39781625765719,-5.100951127673742,0,0,-10.15520486840625,37.70305406733938,-0.6219739420430337,0,-0.30546211639286425,22.011607121623808,0,0,-10.213625,23.790772422124224,0,0,-5.3095830556960575,0,0,0,-4.924160099958392,24.24491361104046,-0.19226733698191367,0,-1.8988524844534476,6.925420026444346,0,0,1.0094319843779547,0,0,0,-1.1,0,0,0,-6.121374306600774,-5.069810279875648,-4.802663221050449,-4.92271976062681,-0.8185786615378089,-4.38584646821746,-0.748290825566118,0,-6.100544408702252,-2.03127457984851,-1.3551654799888673,-2.2121003228353286,-1.4310734695074943,-4.48501404028816,0,0,-6.1000000000000005,-2.5557102094751634,0,0,0,0,0,0,1.2517857335781728,0,0,0,0,0,0,0,-1.1114289215542315,19.858831630661868,-4.521080313905567,-0.1,-5.686358318669699,-1.816231420720577,-4.408650208949138,-2.0450417192592516,-10.213625,3.568869066341616,-4.106982305955921,-0.6626180992926183,-11.23855565783862,-0.5948085562068254,-4.337603104427382,0,9.947200731708218,0,0,0,0.820979144625995,0,-4.323121510573156,0,-1.1,-0.8890654799092212,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-4.1000000000000005,-5.366407702149141,-0.777431938396858,0,0,0,-0.7452005516126937,0,0,0,0,0,0,0,-5.8869136246760485,-4.792315807941384,0,0,-6.121460308669732,0,0,0,0,0,0,0,0,0,0,0,-1.0666531759622837,18.70785953081701,0,0,-10.213625,11.686953070367897,0,0,-10.213625,1.1076433210679992,-3.699801594430774,0,-0.7437603275739533,0,0,0,-3.266359030185206,0,0,0,-0.5004018895792116,0,0,0,1.2979667434076112,0,0,0,-6.021010089668807,0,0,0,-1.052092885625358,-3.7312438151712537,-0.9051861328442993,-1.2337423758050678,-5.873963517019252,0,0,0,-0.63364347028108,-4.866208736539427,-3.926806142490046,0,-10.213625,-5.169322256134003,-4.112327313034661,-1.050025455578234,-10.213625,-4.733466070349145,0,0,-1.1,-5.1000000000000005,0,0,-1.1115012198106997,-5.1000000000000005,0,0,0,0,0,0,-5.316896493189414,2.4138825481078694,0,0,-5.269367260822782,-1.7888876144176686,0,0,-0.19395824306342535,-0.11923653821293573,-4.10698249978472,-0.37115413997119456,-0.055932671279091475,0,0,0,-5.970654507799045,2.0312519354098013,0,0,0,0,0,0,1.389706760927593,0,0,0,0,0,0,0,-0.14261745400474252,0,0,0,-0.5167557626472151,0,0,-1.0252908207536142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,31.678807654102975,37.62564404622135,51.36980137925174,-15.980081334296823,29.741648070920146,37.84937598547897,53.59758988112293,-15.512806669244496,30.941277827979626,34.46276984371842,50.93306507893669,-15.570164696971005,12.913885013266064,30.5965709058677,14.270784706064784,-6.662390488945332,25.609186433974976,29.96216713472328,48.87686151081349,-16.3588193831625,18.775372514588636,18.56006447702057,52.086471761834005,-10.96848418132843,12.9728433441179,36.15114252775308,20.759283740268092,-14.117584126760667,-6.179312257104163,8.486072274638193,49.06786644672227,-4.1079645452060305,31.667931474903703,-10.6942923399596,57.389555871462115,-14.888145286354964,22.037592291978783,-6.348044440279911,50.97132500181302,-14.484542987025668,13.155419825958498,-12.399156086033031,53.39747170754737,-16.216499031245053,28.78164805031,-3.5538148936800935,53.407459961698954,-1.340853900121195,19.76553040664634,-8.324719214450987,51.38866011436986,-12.241414967367694,34.6601909932761,-6.521727247468103,51.27354548164881,-4.256301133560932,12.680339193076016,-12.121235316319513,51.876241428798004,-8.58613174202006,5.912339357054211,-5.1000000000000005,25.115197715490588,0,35.09237700784915,36.69297049920756,51.835750792720866,-18.842925846056588,23.88242217690629,33.939150563535215,53.435271622166624,-14.467140511520581,13.389854180800075,34.73617380722476,53.16432756001494,-15.962326362550984,1.3107136616034034,0.39446361247526524,42.52052851444671,-12.63728167919541,21.401184694474466,27.834285118323606,51.405272630927826,-21.402022338784022,7.208562472327874,26.813753515898732,54.39641805645367,-6.440324399917674,31.045307732608244,9.84239875276238,51.52423135803393,-6.68383279651766,-0.9689243361033262,12.59717745528549,49.880611334303005,-4.506417455527832,12.768819768667246,-11.088994231229734,52.46404001612571,-20.636457590283705,6.12946620696397,-11.026860910892438,50.74826837887594,-8.806526309870588,2.3631017152609166,-6.955195503362764,54.72528819162545,-37.41541924201698,1.8093529016595424,-5.6605134818111145,53.22842458859395,-3.8351411067437073,-0.33301283076988225,-6.709558766740968,52.79177985966626,-9.6962775,-0.3796833039242151,-9.707172001534467,50.95233082810066,0,-1.9587201357121795,-33.87077170683316,51.759857106748065,0,-1.0233092896779021,-5.126613995623817,27.581487198496127,0,27.460700735761833,40.61790541181575,53.52263318454379,-23.458125348464886,13.510231961989698,36.0276343157442,20.861090281162486,-10.341798029820998,24.087385187817098,33.38598126421697,23.9376454140151,-20.869264921041264,1.3251129679209463,32.8443329779964,51.121221514441594,-3.748305852738145,12.909184830187309,38.87528077001099,19.221485356892707,-18.17642752010812,3.390803650461898,31.40924222585346,5.006593487897785,-4.268423439816733,7.000084019381061,29.07907140584549,15.628371865254586,-11.21197541920431,0.23687188126429415,38.23588488859873,0,-1.88993554037001,17.060500614843114,-10.514362390879803,53.81036328262639,-27.270279979537044,9.55084977563114,-5.8572416529667946,53.48531010310487,-1.5593302600865764,2.7366350139633306,-8.448109775243523,33.025704216004854,-32.98701877460191,-0.35020459286012884,-9.679618654223155,47.373497199665195,-10.090062327885246,6.736045127634654,-15.129638990319938,52.60899816037513,-9.691299709036848,-0.1296840070272472,-4.919541656715367,52.30445928639349,-4.770443849319611,-3.3733991211566288,-5.101672533011836,55.99846972470717,-9.726425382466854,-0.5120546062814604,-5.1000000000000005,57.0948024352865,0,8.883680647226406,18.97996043397619,55.48863125209926,-28.196612029232995,-0.6208491092270517,3.5084511093608035,49.74615540484032,-5.861620109799963,7.265572331037305,11.85574550581233,49.36342024903642,-11.10739315390564,-0.9699356085285716,-0.012196090180999836,53.02636981513585,0,-34.88898096588939,34.52120675210893,51.60304036583739,-4.575510430769625,-0.175513775508488,3.549327300684665,52.8331062796811,-3.8039967474971514,2.5262644343945677,8.206655944773736,48.37567349001537,-5.1000000000000005,-0.2853515768521966,-0.1,44.39350654916628,0,4.248464611953461,-7.873874424236012,48.72742330489212,-4.691014035696273,0.6238804175395803,-2.122762939445474,54.803966598997405,0,-5.157375,-5.1000000000000005,52.66663735363018,-50.809812962255506,0.9001651472276713,-5.101248806532735,36.22831831826098,0,0.9601278115489963,-3.958750053899666,46.813898819242226,-4.978430794973981,-0.690241475542107,-5.1000000000000005,43.51034369003237,0,2.5857653193781407,-5.1000000000000005,34.98396702248979,0,-0.8806654584508126,-5.158365748640758,35.235378785245416,0,-5.366609010265107,11.926634709428384,50.28965146146588,-14.208772383883995,-12.448818215503382,45.031638951118694,12.063013621840856,-4.808601247145601,-7.197331077882193,45.78321252880467,4.835093813556345,-9.979281005345268,-1.1022112505548274,35.41965033650638,0,0,-0.1557399581227733,41.49512399356912,2.810062318291673,-5.195707301751916,-1.267311982355241,33.347965455580585,4.902205127759314,0,-1.6379585331984388,25.545618855448037,0,0,-1.1161520468750001,8.498401862195585,0,0,-1.110752745270223,-4.753450113845912,42.87330312595128,0,-0.9603223179768245,-1.783106061907696,38.54875110784252,0,-1.1109115716106677,-0.7089968436718096,30.140349401314857,0,-1.1115577497538716,-4.281818450967767,47.373836553800125,-5.32628921686874,-0.22973797109657434,-5.1000000000000005,27.55474466954263,0,-10.219742846343003,-4.504412961893542,14.804586758686927,0,-1.1115009729814689,-5.1000000000000005,4.369161467037632,0,-10.213625,-5.1000000000000005,0,0,-99.79986982771229,29.868092477851025,0,-5.13909605306522,-7.913114223205257,-6.659746504356922,53.983290991416865,-5.107000930619944,-5.180087095524126,-12.602556184727822,27.76010993309025,-5.101250418302153,-0.6617821518890705,-0.1088756080694141,9.000506014721582,0,-6.1000000000000005,14.844168183437901,0,0,-10.213625,-0.38967414767883,0,0,-1.7777637565105984,-0.4926169084599519,5.031719740158689,0,-1.1050112937769512,0,0,0,-1.1110314047950856,-5.108125622112808,50.05683277757248,-5.102240363732571,-1.11148556128279,-5.690608169235746,9.845451245074045,0,-1.2138835025277703,-50.076276640220975,27.357361932204622,0,-2.1117449970791156,-5.106427630650497,9.924056302744425,0,-97.77253363909475,-4.213076700283604,18.13378559751338,0,-1.1060264526610246,-5.144270990660964,13.874933272723549,0,0,0,0,0,0,0,0,0,-10.213625,37.05897189265908,2.98995748198565,-5.1796546055773405,-6.33670482252151,37.80229002814128,4.888257126365652,0,-6.101108322982503,27.201535615945375,0,0,-10.213625,13.078516232235653,0,0,-6.101034756073917,25.16321768464575,2.7041282503279462,0,2.709833732682348,0,0,0,22.059035794965382,0,0,0,0,0,0,0,-5.745158226506802,-6.823598988533534,34.54558527472217,0,-1.5647637551954583,0,0,0,-18.704411324792027,-2.4937942048280584,3.0860586842587523,0,0.10627219868044052,0,0,0,-10.213625,-5.106663970609465,29.007152113362885,0,-1.3967075038254977,-5.1000000000000005,10.325266169380118,0,-10.213625,-2.120725363709601,4.1519724404041325,0,0,0,0,-5.118502663665581,-1.0819095855640968,16.66655243136898,0,0,-0.6267228019095437,-1.424627289057038,5.538685083644503,0,-0.7715877011595198,2.5926032681127458,0,0,-0.0860587552440709,0,0,0,-1.5202088612681317,8.175156462025628,0,0,-10.213625,-0.1,0,0,-1.1115027166744118,0,0,0,0,0,0,0,-10.213625,-4.765005657050755,9.59908649720759,0,-10.213625,-5.211895966691319,0,0,0,0,0,0,-0.897866039034274,-5.105738636361706,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.731085027785184,45.246175793128586,0.38449963641550466,-20.89824397926732,8.698087241106574,45.73527048887288,0.3176288326595298,-24.818539850576165,5.9377119977070985,45.52983582229771,-5.957873144168578,-12.707263986016214,19.60158702278013,45.045226445384394,-0.6066157925584804,-10.811813173562083,9.250921917477319,40.349418577768965,-5.989436599493652,-10.545053506425825,8.82987791746017,40.50422570114489,0,0,1.6757898253403702,45.0391207008443,-3.538356025859617,-9.370640249633638,-1.02870533197753,45.65021423160931,-40.12152446988421,-9.655192050496003,-13.308983116605006,-7.087103898701717,-11.005899648974664,-51.13005076655419,-6.387541848803342,-5.853750509405487,-6.71003304053147,-9.737638705635106,-14.005379104253873,-17.73207664454162,-4.319038155469995,-51.54629792922126,-18.78732341897785,-10.24901735862657,-37.583281755681156,-17.982011209242685,-8.891574463455932,-9.330438960780512,-7.588687023786021,-13.96251933682652,-7.929708316465819,-8.441450241117854,-4.019570509985828,-9.696470740695416,-1.942189310916934,-3.440232656317102,-2.287525656714112,-5.239246500635224,-7.730109150346484,-6.839281438275071,-36.132095004317385,-9.98840179711371,6.248743245393722,38.54982014637992,1.1423265491834829,-16.869204122065295,-8.858655797792057,-5.087339102294858,-11.219148338555724,-26.6082989584934,-8.243051207758521,-2.4350323681483736,2.0993224833054547,-28.326831253696472,-10.68132428567861,-9.140337882018843,-2.7041282072844357,-22.602061535343342,1.7106272181098363,16.27981173215258,-3.157208952024525,-20.514884974079322,-12.234198699017155,-8.768271325437391,-9.631793186199905,-26.25189540288583,-12.511350563221033,-3.029670004968222,-8.30017184486378,-5.181142322983426,-9.748173104946321,-7.276560079764051,-9.995232223695636,-9.618252537279973,-13.457132299403453,-22.918681294681267,1.3084014492689826,-13.670355579359313,-4.212017113034117,-9.84498144448358,-0.5372281099227989,-5.1012431139942604,-5.507619504258371,-13.655682988641566,7.102203649464215,-50.99764474279092,-0.8404293731066517,-5.1067762016105895,-0.036716020334294136,0,-13.210371943812117,-12.657593356094758,-7.893870629059373,-13.855529176958047,-2.261558700205453,-5.101244267622448,-2.148512898464631,-5.133533155453203,-3.4449955622249258,-4.638377736494202,-7.121931531341143,-5.121684292803747,-3.5136502290684266,-13.822500156821633,-4.1000000000000005,-5.100162788931113,10.99614516570871,37.4233150060495,-4.328950712339231,-28.322818912441623,2.073961885918718,33.32830893248768,-0.8465202874813471,0,1.3503037338825254,9.335637065733746,-2.2821222257717335,-18.83347167196418,-2.9759304634721313,2.425155185217106,-6.127217226348975,-4.298905220828739,-25.841261400415675,9.64598843171802,-6.437268071856103,-23.674921164077745,2.549087851161984,12.756146043980854,0.2265251321095569,0,-0.1287105251235186,11.277468543340746,0,-6.829331097878414,-0.11317970750091746,-0.18096987166867792,-4.1000000000000005,-5.097298247580359,-10.40670876348104,-15.626644581292616,-30.59129185730114,-17.800822935295095,-10.16777514178288,-9.820998633382509,-7.476058813071049,-51.13106395637391,-7.589370323609441,-8.15753232159738,-4.72526869779818,-9.612322716626625,-5.157375,-5.119051992423572,-2.0306588016423257,-5.1000000000000005,-11.66164350449154,-9.231469342653558,-4.116390220380623,-9.670791067802538,-0.8087577198663278,-5.08094104429034,-0.23709020047847673,0,-0.46724882110218835,-5.125419565653989,0.8603357097086215,0,-1.0535138094088985,-5.087607071769125,-1.54252597793231,0,-0.9091543640270487,34.36914727332805,-3.974934867515154,-13.824793715290607,-5.665136276388356,-5.162731916575337,-0.5262228629867414,-5.100689634024185,-14.160885718998912,-8.782390651309507,-11.28276474711814,-13.834298885018733,-9.22391079992201,-11.471119364035927,-3.1825803694786368,-9.69164940754208,-6.052032635957646,14.668922498598937,0,0,-2.992595617508215,-10.623286042614371,-9.015230742272568,-50.25827029003574,-0.8674307281611409,-0.5602047096315604,0.9840756749350569,0,0,0,0,0,-1.648121605258077,-20.48693762839858,-21.452052165164403,-5.111655381848593,-5.5586255756068566,-5.422725688063977,-5.888920366024923,-13.831154109862997,-6.672485855926403,-8.573528350291557,-11.113301449436552,-9.69146832762724,0,0,0,0,-0.8210802955594574,-4.538116564652401,-3.4824394941167984,0,-0.007406593965144737,-5.1074978778206175,-4.144192081247563,0,0,0,0,0,-11.83289929480495,-14.99315581858065,-10.417630369450665,-9.69288362075994,-6.1068625,42.55119393420296,-0.8689020443099083,0,-10.213625,15.675234538461076,0,0,-9.82644066525889,17.8964192587678,0,0,-10.213625,9.064542292919112,0,0,-10.213625,19.774381374844076,0,0,-10.213625,4.474287681681412,0,0,-10.213625,6.940417353034356,0,0,0,0,-3.6047459003523055,0,-11.224347599076868,-4.658602672028706,-0.3002201540249255,-5.117237829000512,-10.213625,-4.697769319225877,0.037971950384426384,0,-1.1001277488100756,-6.546025840931188,-1.6015743129030289,-5.101321701698932,-10.213625,-2.3468907501920597,0,0,-0.6438722991000935,-33.09567622727293,0,0,-1.1065949264817807,-5.112866860660814,-1.0384416692321965,-4.943483284533993,0,0,0,0,0,0,0,0,-0.6014258183226119,20.098298599056253,0.013052941429963029,0,-1.1125357585646283,-1.1886922935272286,-0.17953764454167043,-5.118998873883098,-1.1049595764888311,5.495759040237923,0,0,-10.213625,-0.5645814017390122,0,0,-10.213625,2.728893403964714,0,0,-0.5340416843738995,-0.6931634952854813,0,0,-1.032277865941347,0,0,0,-11.05883480462279,-0.2057561398338022,0,0,-10.213625,-3.633918960261535,-4.1000000000000005,-5.1000000000000005,-1.1903078499539836,-5.1012426890625004,-0.1668484865614726,-5.1069763850280125,-1.1329000872645787,-4.964856555514714,0,0,0,0,0,0,-1.1054950874212324,0,0,0,0,0,0,0,0,0,0,0,-1.1054758314172544,0,0,0,-10.213625,16.463615401955316,0,0,-0.5245118399754403,7.0812932399407735,0,0,1.9706994472266635,0,0,0,0,0,0,0,9.2764000994357,0,0,0,-2.498904664849392,2.7341004596826326,0,0,0,0,0,0,0,0,0,0,-10.213625,-3.1428808468136893,-0.6002874596658785,0,-1.459221906362566,0,0,0,-10.213625,-5.113710461083975,-0.8656263521068261,0,-1.4758202181632492,0,0,0,-0.6604482811754971,0,0,0,-1.656674999197884,0,0,0,-0.12088393643343612,-5.1000000000000005,0,0,-1.10547986551661,0,0,0,-10.213625,0,0.43225034003151486,0,0.15274399687914253,0,0,0,-19.303752828125,-1.2282949694218288,-7.796892260267034,-5.117262267271301,-0.9968314850470508,-0.5802146189072896,-2.273474149813863,0,0,0,0,0,-6.1000000000000005,0,0,0,-0.0436371143185486,0,0,0,0,0,0,0,-6.1000000000000005,0,0,0,-10.213625,-5.105332797237885,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1110489516683772,-10.214874930070629,-4.0062068395957064,0,29.146645832714757,22.33449992233918,43.76960255205241,-23.79614559544783,15.148182913718012,25.089356974118733,44.9201488367366,-26.170142862160795,24.27694400448693,18.3757108553638,38.72456635177726,-28.44766135900729,7.607624222810744,14.870863613320786,4.865083008834027,-2.2365894300918545,11.272505536865213,25.219363148960273,12.471889495133652,-26.85247279303677,2.9152481653920264,12.164213220346356,46.61885374302503,-13.086925044004616,2.7874012980228224,-0.023950910744020216,44.54255473886116,-6.8626473080476735,-0.8327925285395867,3.1280421395004883,23.622489227211247,-3.716304764217096,25.45835225907407,-10.537663047367612,43.49140913381638,-22.367362433839514,3.195604944102118,-5.863510703478038,42.868944992287055,-7.584689914296624,3.9666387565401573,-5.240843576392556,42.657085297498305,-12.43964225878702,-0.35599923531628835,-0.6792328293879095,46.84911545831201,-6.8945757702290456,2.282087962119234,-5.096539058075452,34.24811287552103,-16.876578242900504,13.070889851834446,-2.460231878547691,41.74126372584612,0,-5.739087266463313,-8.066471359181858,46.55240800772934,-3.014584565499011,0.44072331454787717,-4.991544120417313,41.99732237965733,-3.8690911480026706,5.404827366005259,36.79522341685984,1.6294662716544401,-50.52896574246765,-4.3649113918404945,-3.1124452903912716,1.1929862609515576,-46.92798828444203,-0.6328125859151221,1.1067957595519202,4.557184088270165,-13.320853205096,-0.3475329000012051,0.01322509398137088,4.885878129640083,0,5.76366814285767,0.3945870602366111,7.057684549187697,-4.986757229429063,10.218168298754518,11.050763284037208,-8.682050853787588,-51.157954218103164,1.969245485398658,-0.19246942005675874,5.521704947348352,0,-1.2021844381712832,-0.2792642680108618,3.2125323894193674,-5.08614848922539,4.6380090979397455,-16.53298349106499,-2.979374468062447,-49.23567888918279,-3.0667780348063634,-13.661116986511502,4.172822732161443,0,-4.057408729106124,-14.61981928822016,2.5326409179716323,-13.335534325390087,-0.5813148616143489,-5.106983918089359,4.473583593256617,0,-4.409175496028792,-16.463693097384375,1.97927689060286,-20.55850883413587,-5.149847482273532,-9.655276375498268,1.5757551280886328,-5.1000000000000005,-6.1000000000000005,-5.1000000000000005,2.685173197437083,0,0,0,0,0,19.773273093383978,18.390756893035896,38.88072196323192,-35.557876708372206,2.55883637259568,27.130450094374154,2.062662185612675,-4.130163645453789,1.8343891981225386,9.8666804501287,1.8850124508807402,-30.125410913066872,-26.561819066149656,0.29031482950304965,0.6483365131863695,-26.808296351153494,5.3063293791034045,2.6864686040704004,11.950612179917144,-4.336461938238017,1.8182540685938642,17.833108712691182,3.5581922792090754,-12.772406046910996,-0.10599460137884442,1.0686293423044664,0.24819926200253964,-4.911111827299279,8.552617594196908,0.2959400165588199,0.31147587163826274,-7.848555164883534,26.838929517998192,-28.245342153365065,35.205394451279474,-2.346227350008943,32.61548301940685,-5.101178268573302,37.00025304139224,-5.036302857306714,-5.157375,-5.08703424462451,8.213992187320217,0,-2.1795096231739506,-9.491177437081468,5.158400273298567,-2.3736797742538647,4.1266625636693535,-1.5193671672157785,10.292377802655386,-11.247831611329861,-2.6389898110077947,-11.07058590388577,7.497508313790147,0,-2.9624575633733263,-7.298506893684678,3.1739170181664047,-9.630904259299697,-1.0233114429709829,-5.1000000000000005,0.7934736130280458,-5.106857374109164,3.2595774692014876,33.72917777981414,0.25812676414666447,-50.33748601905313,-56.4663707784609,-4.402601541296679,3.444036940335616,-23.594045226120844,-2.714319496337641,-2.6321924338639127,11.35718766059639,-9.437882098430276,7.359639950321796,0.30659871086811613,4.657150765239228,-13.514030680680172,2.6644913427444745,2.4001882366904175,0.32643980702878644,-19.368482825660067,0.8034367638724311,-1.7037880544515611,3.917306793541348,-9.338928882926487,-5.598897475604611,0,2.9530212940940963,0,-4.167491538117948,-0.26897583628397953,0.04822964826257159,-4.809414769961045,-0.3717737402050274,-5.1000000000000005,5.3046933830273675,-5.11161105150922,-3.281550682277752,-5.101245026028498,0.6861681089251772,0,-2.503088387025164,-26.260055418436036,4.622056039055245,-5.239147886505301,-5.157375,-4.0716280872490165,-0.09456268612746488,0,-6.399346841161726,-5.092648836060775,1.8785573830639277,-51.02800327999632,0,0,0,0,-0.22373630781301765,-5.056194615627589,0.42492835946855506,0,-1.9646386069948898,-4.991644731127593,-0.4739942208934164,-5.216484126746041,-10.213625,7.525161644048229,41.459381414598866,0,-7.157054862093962,21.483300489008524,0,0,-1.1104789769842653,21.20249313629527,0,0,-6.111550650421464,42.58254003443053,0,0,-4.719989775325455,29.600107094219457,0,0,-6.0995955678360545,14.96674130168072,0,0,-6.117247209431641,6.195158162205772,0,0,-1.1109300788535357,1.6193019909088555,0,0,-6.101205285922113,-28.38282985422868,41.38215052075188,0,-10.213625,-2.1456917038351047,17.08829166088008,0,-16.997078400876536,-51.06861202330878,15.588880406534809,0,0,0,0,0,-10.213625,-4.144894817035604,24.497449475012818,0,0,0,0,0,0,0,0,0,-1.3387989513998322,-5.1000000000000005,0,0,-18.99787684637628,14.644878824071405,-0.7178091114381584,-5.10693803614498,-0.2361969722811031,-0.4544927613201404,0,0,-10.213625,5.792496901777524,0,0,-1.110527046875,-0.2184401762421028,0.41090325927791,0,-4.509381406436449,5.077478561342897,0,-5.1000000000000005,-1.7182845580034642,0,0,0,-10.092311612185316,-0.7201786681592419,0,0,0.19247455145881728,0,0,0,-0.8185107512816615,-3.0434450083663656,1.2631748792138202,0,-1.1886825502879694,0,0,0,-1.1174586814645986,-4.082349799378031,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4994465107057492,38.19951966728214,0,0,-10.213625,0,14.381210060757077,0,-0.3407471686195324,2.326028897482528,0,0,-1.6500030578955585,0,0,0,-1.5681146241206725,13.712755351517842,0,0,-2.227592136520478,0.03368642994727207,0,0,22.36208274997404,0,0,0,-0.0755806519808477,0,0,0,-1.286533157023249,-5.1000000000000005,10.283399263584528,0,-1.2856699634211735,-3.2610105385213766,0,0,-2.107202428203692,-3.946691026266288,0,0,-16.909246636869618,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,8.290658714344332,0,0,-0.7772496938104578,-1.316967272539274,-2.556056962958841,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-6.106857784435556,-0.210404894611675,0,0,0,0,0,0,-0.9003981649222251,-0.16008231337850598,0.31071155003467227,0,-10.213625,-4.458054384893509,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.931295076418474,38.89210366411665,-4.160717212329562,-13.55251592945663,1.073063129628928,42.375003260845155,-1.556768798224346,0,-4.4543982364422225,43.837611964158725,0,-9.301178228258294,2.172611606909133,42.29731396433736,0,-2.4004216229819306,4.885699684157345,39.98845459259112,-3.9632625093550224,-4.501734323950047,-0.6431760749502774,31.072004833035198,-3.384006560353197,-10.501385983429843,-0.41214528389299504,33.633730410912165,-8.565930464257962,-5.1000000000000005,-3.106840079890696,1.2599528014435368,-8.023663335513803,0,-13.791168183045595,-11.762322467748872,-9.803475101107075,-27.134946301949956,-16.130710083526047,-14.32935488362315,-9.602495655318611,-13.829329578158642,-12.331779510081361,-24.544906285575863,-10.434337190844037,-14.441599262735618,-6.382507358191048,-5.105525382872063,-3.096998429188816,-5.105346256374936,-5.985238286082653,-6.9322809696777785,-4.587999820645504,-5.10150632962446,2.2416953067065264,-10.67425966086935,-9.94559911930616,-18.021674209563454,-0.6179059287143303,-5.1000000000000005,-3.5814021264840137,-5.0953141476482475,-8.016293131387368,0,-4.1000000000000005,0,1.7313949219545464,27.91114353877888,-7.693504481140097,-5.103821960555083,-15.51486466981364,-7.376870762079946,-14.636719003952736,-53.39286574398156,-6.286616352500243,-6.085438380409954,-4.505787264296404,-20.77677559872734,-10.60372422706874,-9.329076812662457,-11.12067941572549,-27.002032371266473,-0.28491478244087665,15.11551506432203,-41.09039184169558,-9.697572073659906,-12.085893470591362,-9.223724115984258,-11.245507619040602,-17.70106867947106,-11.408510664033273,-0.3656032756373855,-7.790000000000001,-9.884911351800952,0,0,0,0,-12.23531960576422,-11.64218507810844,-11.930688467954077,-13.828654540667603,-6.1000000000000005,-5.147433798089016,-4.308681411001964,-5.107650699110568,-4.351085896121327,-5.115155184609156,-7.797119830863137,-9.703241598781531,-5.410876314738394,-10.023238009719105,-7.886141878549406,-9.69084145149509,-1.2541486248661275,-5.115311447709598,-3.963757138344204,-5.01936418023579,-8.988059926354927,-5.091285724696424,-8.128068257175704,-5.1000000000000005,0,0,0,0,0,0,0,0,-0.29551651083072716,35.89956197224986,-4.952456305610775,-5.1000000000000005,-0.40913210083423324,29.607111449880303,-2.79271921832978,-9.690253225731347,-6.187229281092891,7.83476675192183,-7.805429042135598,-9.685825757910434,-0.6978286056952746,0.8219097664663827,-4.361721651707,-5.099806531782942,-0.8660427364913424,13.606980216613032,-33.413073951382735,0,-5.157375,1.1264997996968789,0,0,13.759941010241654,2.627340528790293,-4.1000000000000005,-5.103565631260298,-0.8575764878096499,0.07596102568250054,-4.1000000000000005,-5.1000000000000005,-9.019886158214021,-6.1912768355241585,-6.471079985133976,-9.69121086253173,-10.673448425999034,-9.585442817314208,-10.437645561874913,-9.690000000000001,-5.203057648999465,-9.095749339960104,-7.63360831374373,-5.10258873506676,-1.015317101038543,-5.106277704568219,0,0,-9.601568228354301,-35.84816273043166,-11.01514654833629,-9.702167773465224,-0.8988681833485069,-5.100415229039057,0,0,-0.6429190936862189,-5.106863048760622,-4.0831342508858475,0,0,0,0,0,-1.0279585695973512,17.248118356051233,-4.163269545158721,0,-3.7086598452029955,-4.518545059547905,-7.8470155267500115,-8.968449064574845,-0.2519647854103608,-0.10964063763796145,-3.9849606124548744,0,-0.19812096201467594,-0.34904736144331205,-4.069147285410357,0,2.167196572994853,7.981689026018113,-8.23723110480889,0,-0.9166770326110456,-0.1,-4.4826587238965425,-4.565885139997097,-7.026001921412339,-2.5501165726835247,-4.1000000000000005,-5.1000000000000005,0,0,0,0,-0.8862804996567459,-5.100836773869886,-4.106542724982826,-5.101084955844531,-0.7560417584503942,-5.197635072747277,0,-5.111602828125001,-0.9594880221665149,-5.101249181174561,-4.100725985946681,0,0,0,0,0,-5.157375,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-15.798550712045966,22.80417877605757,0,0,6.881761496388474,0,0,0,-1.0896210552616101,0,0,0,-10.213625,1.797550633036396,0,0,-8.141317916284372,4.757944578668882,0,0,0,0,0,0,1.405253917483149,0,0,0,0,0,0,0,-1.1,-5.1000000000000005,-4.101280068381025,-5.109938395272671,-10.213625,-3.9837846716191843,0,0,0.47922191317566104,0,0,0,0,0,0,0,-1.4020826475891779,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,11.903600000864628,0,0,-10.213625,-0.13695965069139845,-4.512299538561525,0,-10.213625,5.389751888617017,0,0,0,0,0,0,-1.1,1.698458539955259,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.113698224038224,-4.8453214009480545,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.82702238023651,2.6247403720306135,0,0,-1.1058761309252725,3.5844030153790962,0,0,3.7502730701919087,0,0,0,-10.213625,-0.15089220214966026,0,0,1.9611835769135775,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.5632630413530695,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,-1.1105494338527828,0,0,0,0,0,0,0,-1.257765737618012,3.739531920097627,0,0,-1.480230407712659,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29.671411236553652,37.603125099320586,54.332061302580016,35.59755553603475,4.855684730960489,40.931158479347424,28.907957453438815,36.07484788452792,37.03114671752654,39.53381456157248,55.38927521045901,36.62518613462674,33.226761367284716,32.4070017537127,52.041036031683284,32.43072347299132,15.652847292663502,30.046210727009687,55.3110855975837,32.427683368341654,21.29527909318345,24.078307017634916,53.36091077714238,28.93241249185615,23.64310960045715,24.912907678625842,50.329363701198524,21.63634423157574,-15.647506063322085,25.363815468046404,32.417233739544784,31.432961074359948,32.71116456894716,-10.009651301057541,50.75372611624154,31.78227030566366,21.2805045943355,-9.500861700801238,32.17553391158415,36.83007523760616,26.695697711313308,-11.289912102243273,50.84168124077796,30.713517250716475,26.534087869306,-8.621241221746496,52.6284029429123,30.673945953443997,27.490682198809782,-17.9752248542034,31.192657284568394,37.03373640735997,0.6060418629467872,-9.683849630748973,39.529427979533054,20.42324309632495,24.254264760963906,-8.798504464120219,40.31721660281486,27.655522320272407,2.8804434046840006,-7.966712741493588,28.77706707412202,12.584103853283235,27.952365109473327,34.05793153796699,54.20509945922235,33.79830086991711,-12.273670474360426,35.947106718568435,55.99031014470124,25.73307850486979,25.228489582767526,38.234354000819025,54.157856445273886,36.67366627567525,15.356482360718324,32.69638521428705,55.77922237619761,19.97361929648041,24.140766730225415,23.6260248178844,23.472089431663143,38.97467935228168,28.259971720546286,18.71156315241901,11.593643397157308,32.11847463650299,18.27905463030823,18.95706693879577,18.965003795604705,38.865772137826475,9.08105654573816,9.096569483413813,49.54202559304297,8.79205886368122,22.87167947416069,-18.086460608483744,51.85991328741481,23.762159116195875,15.850212790764378,-13.667133500955824,53.18843643497139,19.51609742393475,19.382320899633193,-17.039703978556204,49.69926276576681,25.33414641449447,3.9804877537644283,-9.633612038485765,51.64696379157141,12.990546313027703,-8.76202670979804,-17.677695013355592,49.664265627173,17.190563750564785,4.722807905551193,-12.409168546996364,45.29258944998798,3.757035452099661,14.437657871444307,-6.103995758469369,15.571515492378682,23.395640986592284,-0.07455549121019212,-47.296745923564785,47.86114801784229,0,20.03478814710211,30.53966699852252,53.14366097900636,26.471521601379244,22.14370973689913,33.57968538514476,21.934427057765156,28.84940055606396,12.49277094691784,28.364759586040368,13.803342628959355,24.468893298260394,16.193235331930502,17.64505668377225,14.007892844259414,37.49153223553355,15.039914170013128,21.168274952420752,20.41062755616689,37.96755824482656,-3.8124712274777397,39.523054283851934,17.404664258030554,17.139625829597815,9.633189794515596,23.298032581304852,55.41273382038127,18.70808414634548,3.1647431378076107,6.334154338558539,46.73985898765801,0,30.650595812941095,-15.507123267896937,53.68211703990752,30.918747476399854,11.9653322318544,-11.78431229293286,52.891040441684424,21.552542274657135,28.10784047783261,-23.653041531041072,12.875965884105122,33.79264447535207,7.862056367367067,-11.96083479227196,45.33680206880449,11.61222326792054,-1.7589368812387756,-15.274276043236881,27.841316254885825,11.730951794598635,16.692820435886187,-16.241540186953277,41.925495412596284,12.277477179211216,15.34420106863336,-10.71673046083762,49.848772720115555,3.735783900359566,-6.101254981473545,-13.04255070583795,41.3439178054237,0,13.331011324816032,16.288089595577535,41.6358930370738,16.527304034031438,28.577780333693326,16.866670283118655,20.927264387085255,13.57984737721534,-27.510777619072815,16.375479410724235,40.45691170835769,14.831671634546218,2.5908308214334688,14.453673389503365,53.001891508298954,11.814206007853082,13.566134161178221,12.35029633023102,44.49189857231675,10.914416408575406,-16.16405683189772,1.543781132608514,50.22012326344459,6.215153737936852,5.258360877016772,34.70575509009592,54.59862962779898,10.83022679466422,-0.6226892372545776,2.2749820642840572,45.17349688776391,4.105361434018934,24.250953998343828,-20.736144875664596,46.160624494462695,17.78120336693129,20.632042397862293,-33.31886579173141,42.327044086935516,10.444537656452212,14.050092660519963,0,25.967622046316443,0,-5.157375,-5.111441812342398,51.541114389119166,2.5985905760611665,12.854732616614111,-20.943746117628965,51.5130108735598,4.723521293985903,0.640403172082523,-5.163593608063842,55.16590962254162,0,-10.00517311287998,-7.464990038409467,39.39286711538808,3.6550293538152854,-0.05134833965528732,-5.1574327668821125,20.19878042180272,5.237849314257183,0.4687113316464906,45.33547206368198,31.954730311480347,17.15760791752594,11.391717833654072,42.93786845840295,0,9.230916736576834,-1.1078762182334239,45.32343159387515,5.444169326057355,13.4150484730504,-10.936607658063295,41.099269043761026,0,2.6632933282402766,-7.2880055510928905,39.303909470951254,5.7120134575762656,30.944981426903738,-4.979611063263324,36.40933841939118,0,4.069366356681521,-0.6041497188938729,18.900660532754145,4.859394243682751,33.79553291094965,-6.457571408539961,31.939558222013357,0,0,0.5305596466352178,-5.6366283517957845,51.48913038516661,9.275517717826851,-6.106175704999597,-4.277056478649162,48.80943443174655,0,2.0787316580785897,-4.930920150224493,48.228203757905824,0,4.618488337945925,-1.3578673711630822,27.603954176389067,0,-1.1423079051630929,-5.204203176635426,42.95424482182239,0,1.3047231749903392,-2.2838392564225534,28.670402349761957,0,-6.1000000000000005,-4.299890957625752,31.834332052537384,0,-10.213625,-2.277965350859007,14.71097047920329,0,-6.427587399132701,37.85488034681372,3.713648139842155,3.6383825731830295,0.1847968965569109,-0.9678020952001213,49.73910674451052,0,-1.111502886474386,-0.15193492880510712,44.82092977475877,5.939690131426715,-1.9467242083221716,-0.43328642883893065,39.78883344938309,0,-96.95844131221781,2.9118039681054304,49.206106857952776,5.7258812892770985,-6.445108392011884,-1.2232147831876488,22.233509771440424,0,-1.1,-0.42348708788090494,31.302181558556576,0,-0.9848102809185421,-0.24527646761683708,50.786539910956954,0,2.212168464488107,-5.1000000000000005,43.34290569990441,2.186005913238298,3.994674147358606,0,44.93269462788771,0,-1.1056563713364296,-4.933335611843322,32.76048331878552,-0.10697639934634498,-1.2080676655583475,-4.580652389430916,17.71125517462599,0,-2.0999413643476537,-3.2499551857863107,22.311131069526816,0,-1.4128677654220252,-4.940220511671823,9.848416603742555,0,-9.198390460235581,-4.117269118074621,10.812338941964253,0,-10.213625,-5.1197541804357485,4.7209518419967464,0,0.04646014040052071,11.091060534511627,50.810815671882544,9.446716081314207,-0.16148434968908348,38.56404041389749,0,0,-5.493416993486653,26.247126155212747,4.8634890346854425,2.613959886957953,-4.6182690191658775,25.46510119849146,0,0,-7.015181091531443,30.04831315577853,8.513403724737053,2.360545054640113,1.7211164276296875,34.06431776818934,0,0,-29.3667757862198,21.023563403325195,0,0,-1.11088734755462,9.987029594202008,0,0,-5.7358418070497095,-8.02937654815199,0,31.37124237031239,-0.939178751343789,-5.106986277370467,41.682869353399894,0,-10.213625,-4.959454129661275,30.315934406759894,0,-6.106333732433111,-3.1304892899253627,21.437201973812147,0,-27.015560176428927,0,19.206625879446737,1.9564489717206854,-1.3730376594360578,-4.685293419417462,0,0,-10.213625,-4.747691395743146,12.681339635550126,0,3.87762576095172,-5.1169409279276925,0,0,-7.8472401127380405,29.08011253963374,6.663408295334571,0,-1.0805309061897128,-0.5678516940317361,32.453719771695,0,-0.8711263150276214,-0.07365083106410353,24.934385744743675,0,-0.14738553384505906,-0.17156046416672002,14.165701407574602,0,0,0,30.603585153361372,0,-5.786023549025421,-1.4175383778099064,7.573393732660556,0,-7.17032892510402,10.976379405324261,0,0,0.9688254705354109,0,0,0,2.686902936875674,-3.089233425242776,32.080675035058405,0,-2.277392171572375,-12.533114862291967,6.181492648357016,0,-6.102357078812391,-3.1940792029798994,21.760756930577532,0,-10.213625,-5.118036980320492,0,0,-16.40605543096687,-4.689646584989367,0,0,-1.0663287618584014,-5.211892484884167,1.398362959608198,0,2.290325140115058,0,0,0,0,0,3.68390115911822,0,29.00734513478303,44.63432420379433,1.7457299675527997,29.195409740652952,10.639688368426892,44.77793559495073,-3.460922690095988,27.82091915899458,21.49862511193225,43.098284261877154,-2.2734849866185476,30.70439992827011,4.917272886126869,41.3557541543075,-3.074666706668446,23.93053300399075,12.770811560873263,41.82793862465876,-3.3974468881056232,21.77543338473959,-10.70234195260184,42.45569438393759,-3.085938852303044,29.703524490151015,15.230791263845967,38.84172021052251,-11.767018836009587,19.810136229972592,4.035313308016876,40.90834707153353,-1.5581172998453106,10.56530638263694,-9.361494896603357,-10.608393243663976,-2.753032000089102,1.225938879181268,2.3022722084338816,-7.811947509731035,-4.218910548558564,12.085182297268188,-24.46097080545815,-5.8337349934763205,-4.687743344063714,22.830571744105782,0.16743516603488473,-10.454150132398748,-6.977166461051486,15.528533816085147,4.198755903342466,-15.113171998039524,-6.051587042254726,11.154822065566227,5.0496047308874115,-9.398699314791324,-6.537388109978761,26.27599074563812,-1.9873928597713308,-14.98835023516129,-7.068325744458941,-0.7445609740260063,-3.167695078291506,-3.8295776206864964,-4.055332664493779,19.34403201942922,22.363373557109206,38.35142164515495,1.0850212365448708,18.647335872500374,8.305609156165955,6.337876163021544,0.6469043762307018,14.919206516079493,8.484545743576081,2.398507427774808,-1.2124497361556241,20.354625028748284,2.035868625923178,-1.0619294948110711,-2.398384690846984,26.80299655700014,22.74849175282236,6.185855333914549,1.4316028964671363,4.758539471479128,-11.242229328995244,2.9857476808043195,-4.533734386492091,23.228530490943477,4.033487996374148,3.037595117515684,-12.626379201563019,12.470282026201282,-10.0131697320617,2.483993237740232,-8.819277343726519,19.977722797040826,4.321579895523689,-14.530733547137114,-1.110481845338105,19.73866181736112,4.839913750650958,-17.562691387906888,-1.7952920280777787,18.75310974025622,-7.399198192993671,-15.648628938518074,-25.725665373327864,33.34806571778782,0.5723649217482296,-9.169207830039667,-1.0358399863055363,14.41050277932069,-1.904028612410979,-28.192154440584197,-14.033619610355675,15.762093908854592,-3.3074367879307323,-13.849515455901603,-2.5479465569684834,21.182889482666255,-2.2957704511531727,-5.101045326690692,-4.86535953599669,25.83674041991742,-0.04080791033066422,-5.1000000000000005,-3.2393118247528636,8.539850332421,23.34938986949927,35.73031303541053,-10.11755646434122,16.979170383316387,15.475507464660005,37.73206593009505,-3.6007895897855593,10.979987633717275,5.546495356680039,9.166953585953552,-13.948504877480552,25.251101099405773,20.442147354970743,2.2669587458268254,-1.1436977748530595,19.55650952027659,-19.360657883024942,18.90269296065583,-20.416596746963535,8.075025522619475,24.41120135024334,21.020216637278775,4.73636144720864,2.666930452374837,-28.27417921174469,5.296533837736413,-10.688171802356123,13.747145322429086,-38.11162973038993,2.8966282111469077,-11.482574097931431,2.446646942489913,11.724400803738117,-17.599872094107486,-17.042300622390027,8.570040578130394,8.496364691483159,-27.76368832611856,-4.199427855307972,16.56128422580839,-6.921002652851249,-13.986167518461736,-6.099367449875653,29.36925089495618,-6.689716353594475,-8.418672103212526,-4.1012375,12.133941871307336,-31.74744831569137,-21.153851355265054,-2.8190176731292578,17.434545648447603,-2.8145187028457554,-4.60420882994472,-0.09257230793304246,23.964827848764106,-4.713518609087872,0,0.38354804839670964,30.199389027552247,14.880916893046843,-5.1000000000000005,-7.378827234592759,8.736606784943277,14.84525668430668,28.97098895554508,-15.29583193467533,10.096381368446977,-32.99641265436459,-0.7931492828469286,-5.340921658398194,16.90327460508532,-0.8767538460717867,6.741112085244013,-9.069652263448948,20.075184648036426,15.617551474075642,2.4787147244536056,-12.31082655744654,7.1861553680114785,-30.452232456655263,-1.858360393515659,-6.894631042710897,1.2693198799945602,-2.509009199597595,-1.1254427131272782,-26.93498961416053,16.92467191215575,-0.02763318497814229,-0.22225832804673668,-7.797321195578009,22.31400295455232,-0.8796758308585684,0.7798024581638505,-3.6179185166509407,17.661198491259732,1.3110791233787178,-14.711278700218358,-7.673521025798701,12.305454843557191,0.13024789242810786,-5.106869214138779,-6.437780703777218,31.858814701886757,-3.9172662389471187,-16.843134366560818,-6.516301865779889,9.036847310969398,7.391422250112193,-15.780064361213737,-4.734408667870395,14.698599729636847,4.4887783326263255,-5.041260162741413,-4.705789528461349,12.477759936983452,-0.3371597871880962,-5.1000000000000005,-4.106929892425802,29.08389748618417,-2.7675406241213603,-5.1000000000000005,-4.1126077203125,9.117629196747846,-5.853118742463515,-9.785907378657907,-4.1000000000000005,14.824502550773497,-2.9103683142906815,37.576189557669316,-4.555435027702005,2.0975123578845127,-3.9055610365359072,42.40391779366323,0,0,-6.1000000000000005,46.99388364087893,0,0,-10.213625,45.22211008680593,0,0,-2.1230471781412414,37.57159639691601,-3.0946521665360756,0.32650412602372836,-7.535841478121212,40.89366023695677,0,0,-8.835463078709676,36.5261278576749,0,1.2514307145283694,0,11.227530253627705,0,2.7575774221517078,-15.395283591824192,-5.095283468474431,-3.549967334560643,14.70234539280614,-9.47622637422094,-1.2171082356557328,2.500494928094281,6.018952164428738,-1.0982157671743387,-1.7271910814148321,-0.11931606075928657,10.448520061562562,-4.114357425439037,-1.1595082538546329,-0.039714425059094796,0,-0.42679506014114854,-5.1000000000000005,-0.4669371219315231,15.795661083289875,-1.1058049223993387,-5.1000000000000005,-4.106870354221855,6.45144905866923,-10.213625,-0.8897993426537604,0,0,0.7139753916591578,0,0,0,-8.83949057188229,39.858854083272576,0,0,-1.0229765809589224,-2.618767573003245,-2.761441372305281,14.102794257966355,-6.1000000000000005,-0.12588541917235566,-3.404444033693353,0.8345290652994799,-1.0067283234952642,-0.801410037385384,-2.0330955206264796,3.3656364105506578,-99.47880403631235,11.847996769888795,0,0,-0.03906516575225538,-0.5765293196755202,1.4283481185520936,0,0,0,0,0,-0.8334495999255138,-0.5666683915509128,-3.7225169745538835,4.095072247286062,-6.1000000000000005,-5.0839282326178195,-15.169541540034679,10.973289032642313,-6.105969236456718,-5.6514252815626875,-0.4257221612971101,4.850911669502952,-1.0308224180945798,-5.105982746388177,-36.90814205467897,3.3820372261560303,0,0,0,0,-5.737663853055306,-4.161628904979684,0,0,-10.213625,-4.998077957860751,0,0,-0.9670498487446377,-5.1000000000000005,0,0,0,0,0,0,-0.09724632440281944,32.49832623560405,0,0,-1.1332986956846332,23.19743083368754,0,0,-10.213625,-0.5197204768483206,-2.3011505482253662,15.033074995721762,4.671528179203662,0,0,0,-0.7598950531444801,27.57588002728444,0,0,-0.870884852759657,3.4321836155689036,0,0,3.6775973292992594,0,0,0,0,0,0,0,-6.969424165752739,0,0,17.379923442539045,-1.1648773476847232,-5.1000000000000005,0.6996975291214798,2.7753391438955406,-6.106074400595468,0,0,0,-1.1731749410672372,-49.61850337225696,0,0,-10.213625,-5.1000000000000005,2.7397623571322316,0,-2.0488225024075044,0,0,0,4.296738413644921,0,0,0,0,0,0,0,-8.371140372247094,24.51411962032178,0,0,-7.69002082317874,0,-1.872148258339208,8.629544718775769,-1.8871591297456618,0.7573214834087425,0,0,-1.033224649049069,-0.2265543068912913,-4.106989447719651,0,-7.4241773651505465,3.137353016664498,0,0,-2.381648807389208,-0.4502734089302594,0,0,1.8488008213591216,0,0,0,-1.17891886824811,-0.1,0,0,-0.8916508113388035,-5.1000000000000005,-1.903751916279703,0,0,0,0,0,-1.0182716563957326,-5.107076520199091,0.6344093074349125,0,-1.3249887047539772,0,0,0,1.6153468704701037,0,0,0,-6.1000000000000005,0,0,0,-1.1110230068415154,-5.1000000000000005,0,0,1.6646414878589724,0,0,0,18.039590358254582,39.00308643541233,34.028598392216495,27.49565011291972,25.495857279476212,30.241829516737997,42.26100948176893,27.559824732570654,9.127551266830105,29.21882826223385,42.12068462388672,27.693612598722474,11.898489514591736,27.634153518615676,42.95797005202199,19.756262394037215,23.741234628743605,27.68151766359476,25.86588952272935,23.536306844754947,22.324276577539855,27.918411882561497,19.09495973200586,23.04791086109515,15.686271270390383,18.11624423003789,12.251159056943209,24.24979929340045,12.355297061608542,7.243154109482771,14.785059610173871,21.59587006847184,28.091976911294516,-3.0720144580816737,42.80092653506367,22.00992027378903,23.653458908984575,-8.378034971126018,47.401205758357236,18.653880119114774,21.52000242527106,-16.336218932592644,36.04948464783915,24.693534092914504,1.4487095894824615,-7.988694892043227,43.81150575510306,11.526856419358765,14.277471843307538,-19.484813576566445,48.29238483679003,15.244842060292012,-0.3209986641204816,-4.52800145092424,35.79373339464803,8.779841146473508,-23.57718319208095,-10.510970074219621,24.445205217718026,15.053241818702526,-0.739611767429396,-9.036454084861415,30.357998736566664,2.39947432252951,16.576225870561633,33.72217891326571,5.486393567981366,5.5231243386420426,-13.634082086920676,6.517351212129759,10.317926722605353,5.165886495285544,3.2806704146753396,5.0922571531691485,4.335212985518246,4.533564975718877,4.55522501552195,6.694097203424751,9.282888500424008,8.26104409404159,6.992830016424125,13.882375576925465,6.103282698977612,8.505104047844128,1.6566465571218676,1.755026033096889,6.396764831938531,3.2967527910500936,23.710577296191445,7.588840754220376,5.260573563850321,7.41423508839404,3.446485148958107,1.91732402925896,19.051765050103047,1.2744751880104976,23.126449168181473,-15.35454141825567,8.595307202605225,5.523118581167602,2.4129884621519597,-14.288161285424406,7.202469511622605,4.1519571091212155,4.228717920149711,-17.20286325636244,12.169021936786597,3.564009492228276,22.638366712453514,-10.787324962318145,6.16526660227717,3.01686612078537,0.3987537647783027,-33.656632794005525,6.844418220826783,1.5887751534581418,-0.17775795164556174,-12.946922650923888,9.245371954481655,0,2.7964333096908742,-13.08893423852047,13.746538659457405,1.9814190474447404,30.31357518700832,-22.787682560192163,2.673327553904319,19.075602855029658,20.087656378105542,24.309780108080254,13.04684011539958,21.16551762438031,15.155953568540419,20.521013652400356,42.3253990198397,14.769838352367637,8.667694558141923,7.6286492890104425,11.87096822004063,7.227910771890019,34.021078540772784,8.385938078330524,7.170998286616109,4.847720494345106,2.2643913449922035,18.380667559214356,11.018741876413422,21.55617204211099,30.500761364956617,11.503127059691607,7.933102115682467,15.46232839923654,9.027084511748303,6.867101738750699,9.257902866011207,30.49945794610417,11.29568310644315,11.03058567809601,11.469873906360586,26.405230639010462,6.972569537691879,-12.80442410294328,14.761559850132295,9.49097326937131,14.041672816622405,-11.764090212591514,36.4335365410951,12.758334162077796,30.99658412583525,-22.50945293787841,5.31170682497786,9.00495230054958,5.982758171065253,-8.523676159945127,2.5427855575409684,25.45991205563325,21.71165351244916,-11.727680175145647,4.8659441444809985,10.832809152076722,-2.024807958111237,-5.999212269428603,9.729498096253856,2.714523748395162,4.2058183281495,-50.621770025496296,13.939515359770622,0.23821360919076692,-0.8803194917798439,-19.782113348494846,1.93629254183826,3.330791016969897,16.68969016799962,31.29403293988375,16.07701142944294,5.109686134364319,-32.148918796002846,6.462540310818713,12.74208991175129,4.70998919020197,3.6208703059674505,3.7491227088667882,10.321968079055804,1.9978336233883718,4.0439614517710245,3.1775661758516884,12.99139976975943,1.6564637333330514,-6.992545746421973,2.984927722086798,7.312669119767117,5.226871171824003,5.7181978163638085,0.3681746092297794,10.149261113690326,4.267440523178223,8.895655486047922,12.548533805118424,0.8095736117839692,1.2918350970960155,-2.400948960127576,0.9517093905672416,5.670265138277964,0.7700323058677357,22.51433956743788,-15.04127557614861,2.426591617591715,4.320820815261174,2.842602417030804,-44.7493158351773,10.43257964457894,-0.5165095262871936,-1.6135689480193793,-5.107075010273138,7.69925726508385,0.5718846322032441,0.07863592264660119,-16.711012878419407,0.07609085943157137,3.442382744979065,1.4014785200431117,-12.58947760940111,7.408662091572395,2.1907362504374643,-1.5753739611935853,-9.648029384025872,7.296625320121301,-0.19065282513757628,33.996297215036485,-9.528421510808073,0.716934882429572,25.370187389956364,-2.8992873946014734,-10.301746767864497,0.771583155292573,0,-1.792913332937697,39.457118409940776,6.067096362592991,5.866974033560663,-1.021848711214926,43.7787648547257,4.965833930233532,0,-5.52144839999564,44.310111325353766,9.330929868131149,0,-5.401776152123741,31.52441252294849,4.415640295956179,0,-3.8385398090617757,33.46062819017569,0,11.177269529769276,0.23741193018704365,38.57727356059836,0,0,-10.213625,31.7077425947333,4.7454737977785975,0,-0.5813292922453339,16.262965364978026,0,0,-6.106029186567069,-3.4174341628354368,41.858034667693296,2.3083179836792396,-1.023994075254033,-5.1057375,21.9744526427358,0,-10.213625,-2.5827087194276457,30.83288524540373,0,-0.23075303916460294,-2.538982736628485,8.974777597511217,0,-1.5262669376920432,-4.232566626110236,28.467299082459363,0,8.263664105836432,-1.7081644677293748,0,0,2.9199205141146294,0,0,0,0,0,3.8551948420907207,0,-0.6971766416473613,36.35546821045969,0,0,-1.0141102954633263,-0.34946998900081117,8.022061092018134,1.2266527536679206,0.13503881165854725,0,8.218422843291862,3.3863372651430397,-1.0528567879250257,-0.20404894172718901,0,8.537470096099717,-24.110190929873127,0,3.5932427556878137,0.4883443242910117,-10.213625,-0.1,14.944487449839595,0,5.5239443339516425,-0.1,0.8487479202602662,0,-4.370713938257974,0,0,0,-1.106584520453043,-5.1000000000000005,13.89057020055444,0.1295093077273693,-0.9894867935160502,-5.100897850191854,3.469732561317277,0,-7.764286420441069,-5.033570742861713,5.254309333089011,0.38060561043812546,2.76964876935473,0,0,0,5.023400923903931,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.111071527722228,0,0,-1.5386974378912646,31.738412378695767,0.9951629989804497,0.6576693514397487,-9.434647997423003,26.77359241300833,0,0,-7.16904691209821,30.154870861751373,1.7878205400384648,3.094652776282504,-13.126236995156486,3.6817157763469917,0,0,-6.590203062537395,0.6091722275596625,0.912743778691187,10.519949936823892,5.152824920765955,0,0,0,-0.48958949415171205,3.520443139046035,0,0,6.891442167920274,0,0,0,-1.0737420067699437,-4.872245106568217,20.62547637841624,1.2924001365877322,-6.1379464080439465,-1.8165958410895138,0,0,13.115440196823418,0,0,0,-10.213625,-5.107434049235451,0,32.613572202378066,19.294083114001733,0,0,0,-0.3054342130912051,0,0,0,0,0,0,0,2.9673518175630313,0,0.6517599926361934,0,-4.085091579027329,20.66768373330632,0,0,-2.06970188054025,-1.2134868875932454,4.41699163246672,0,-0.1320106118823448,4.482166406605261,0,0,-5.7251088093474145,0,0,0,-10.213625,0.004532020703081022,0,0,-2.599787659756931,0,0,0,-10.213625,0.8509040383691413,0.5582277696223561,0,0,0,0,0,-1.880554377021565,0,0,0,-7.325902078143056,-5.10727245691666,0.7682901312038984,0,5.27455183987331,0,0,0,0,0,0,0,0,0,0,0,-0.015474237265904467,-51.015995663302256,1.3426179863361252,0,8.294830596163358,0,0,0,-1.117211311692799,-10.214881862725655,2.5888309130053413,0,16.245549272136973,43.674375820525924,-8.820202784756995,21.50513869213618,16.989485057326004,41.02502348223885,-7.652268101428301,14.521829981863325,10.121816925156303,46.145556913063494,-5.409975602512045,11.482957355005613,5.141974481390719,44.2755922602557,-0.17533750391322586,4.883084708198648,2.513925459069128,35.95453323076233,-18.74473217747589,16.099850937167773,13.025101138349982,38.34591866408361,-8.062246059886526,10.660115955309296,3.360590715968079,31.510634052281254,-14.921959147805788,0,-9.726735855152807,36.75055609122886,-3.4288933932356436,1.5684138394747924,-22.452704360405107,-31.068958269880536,-23.63428055964839,17.88855270825718,4.349421585907518,-12.240633111701587,-7.6964821284923834,15.574306738741031,2.6068449220272507,-5.237163531799714,-17.232510920313604,10.049948433844026,-0.13972415269973287,-5.1000000000000005,-3.9609601696828145,13.072137095986209,24.31849540033363,-7.284869362969188,-4.816665761762944,6.6652000880020585,-0.3716123510263558,-5.112728580748703,-0.8475284587038246,30.759878604496905,-0.2636982191263453,-6.064763020742337,-4.641278414730738,13.302080762250208,-0.327261452008351,-5.1000000000000005,-4.1000000000000005,11.308691601759067,4.171946932485785,35.59140708330831,-23.278790076308677,11.535888002523892,4.155773700215752,4.993906146472407,-44.11770111608268,4.782696198333294,5.8461430098962,6.175789691196304,-39.68907108104987,12.740245148161527,-5.7682881609343335,-0.029576113190304953,-42.82259677352271,-2.976858445031988,-27.937345266301648,19.812197347739833,-42.19505035623948,5.359387030292442,3.5877360072053968,1.5204274553654888,-16.293516831402133,17.421108330757168,0.4149509239528757,2.2318979257981857,-10.099748365643912,16.250405256229424,-0.5112748956849874,-0.013271246797902609,-6.611032673268212,10.438634302141416,1.3736377505366826,-14.094890250986557,-27.016393692501662,7.168520687738859,2.74266268153022,-21.62828528014001,-15.365971445470311,8.165998046199269,-5.431922542346663,-21.90348471853974,-16.64652955102711,12.910001517391988,-0.27452262278442613,-5.1000000000000005,-7.3897630019339875,2.5398733487330762,-6.1000000000000005,-10.640259789204443,-7.7021370368978905,7.39246923522999,0.4832017699975031,-13.381122697954316,-3.5863815759696696,9.398571378513921,-0.06329724254413671,-5.1000000000000005,-4.028262103998834,-1.6669450689099712,12.776819907747772,0,0,0,6.008401824036319,30.56023037606208,-16.57094468425801,11.102429359491921,-2.63025875927347,39.2014949296719,-2.672119459319376,5.614031588115173,-7.692684965294234,4.739947254096056,-34.3087255435239,2.10711504061298,-6.780488197919656,0.42303332378032626,-25.07651046190667,6.474106498190057,-20.25412361839683,26.645748823086546,-20.33399186309312,4.473742617322464,7.897003457058636,3.774580393832582,-19.341606834070014,8.205257990848034,0.22465987368874077,1.3007751292020853,-22.78037321568946,0.7576477653006378,-31.454801439017906,0.9790973788651758,-7.515430363197185,1.0745950153804489,6.774766943553831,-10.833818055885619,-9.319301357857393,27.8322314045297,0.05964919088997034,-14.26791458215585,-8.140984368608379,15.188003155776686,-48.950335001631444,-6.77589928960558,-4.122841743049045,13.981798548876652,0.16867661916493826,-5.1000000000000005,-4.1000000000000005,13.744747978501415,-0.07790621814454868,-6.947669755566832,-36.19461869785248,31.75069026339621,-5.697737419679702,-5.1000000000000005,-4.287081193072606,8.974526625469549,17.804554158117295,-5.1000000000000005,-7.320718616470023,1.68549419008353,11.980603109504393,0,-7.2307467274343775,2.7984595141477033,0,26.282727307256422,-4.1000000000000005,3.1040280486187233,-2.000207075865963,-0.07565225604858536,-16.841431634214505,27.082679104014506,2.851627538433661,-0.964336608809964,-11.1265050453125,7.574421582656233,-1.5973227335373676,1.1965242995964278,-4.101247453021503,16.37724551528727,4.438716262749186,-0.7757571340478028,-7.791146060415754,19.049173808541017,-2.80174645430482,-0.6054780453301986,-4.1000000000000005,13.58163525276528,-7.088186162305234,10.261482638876148,-4.1000000000000005,14.940015781056424,-2.896122432836056,-0.17768402362197874,-7.797614484251592,8.862940885963921,-2.1515852963846527,-5.1000000000000005,-4.101268601670256,15.555104259118426,2.617595882393074,-5.165515806026551,-11.235633233885274,-0.19179377111880042,-2.0417936405256207,-5.1000000000000005,-4.11049304528328,10.444280696647322,0,0,0,0,-2.436366084906747,-9.057208277166584,-4.101132634722175,14.982944733338416,16.702986673047135,-5.07174968278256,-7.798196182143404,0,-3.7979438241717127,-9.695437040496515,-41.05800175293371,8.262793388262395,-3.436614849253586,-5.138306238008765,-4.24839620781742,0.9651948738386367,-0.37901415582455156,43.699537510713675,0,0,-0.11360931041192171,15.023915388275453,0,0,-58.411748125132284,0,0,30.566962092396935,-6.1000000000000005,44.103039871923656,0,0,-7.547398602238294,20.6324864134468,0,0,2.0177542874690784,0,0,0,-51.83425422672316,0,0,0,-98.06500708922019,4.661730724956052,0,0,-0.9389397811028145,-4.610136082386048,-3.8017625842166214,30.091588816101375,-0.4094002333221429,-4.707641192870589,-0.365932828846524,1.9317531906683865,4.496710364522779,0,0,0,0,0,0,0,0,0,0,2.5438549718056858,-1.6922062230799761,0,0,0,0,0,0,0,0,0,0,0,-2.6118012484949773,9.757035086043542,0,0,-1.1012375,-0.5972689753657064,-4.342590982846184,5.707759881244666,-6.00820895018167,-0.12115337774343266,-3.6362025802465583,1.9573580428974493,5.026663088472096,0,0,0,-8.20027459149951,7.762313926397811,0,0,-8.514545741959507,-0.3801601756632894,0,0,1.1790603277371514,0,0,0,-0.1108915727537859,-0.1,-4.107826778727545,0.6616493264297758,21.199068968410735,0,0,0,-3.5565475220725506,-5.108135915402158,-3.2178014006666324,0,-6.10120868157453,-5.1008298278619355,-4.106975537926717,0,0,0,0,-0.10576469733545722,3.407497081770491,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.18739569267803846,36.64392394336481,0,0,-6.115863548916357,0,0,0,-4.863954678879038,5.792185867280484,0,0,-4.3037428445049475,0,0,0,-2.703265325597623,9.351230549575686,0,0,0,0,0,0,-1.0673346448666734,-0.4268215066507168,0,-0.1095980753576744,2.3610406804549178,0,0,0,-1.712485813331899,-5.101252407421885,-2.965547618556537,0.6102377501336217,0,0,0,0,-6.111597586658365,-2.463043104927765,0,0,0,0,0,0,-7.580148861454283,-5.09639555739828,0,0,5.225689799784391,0,0,0,0,0,0,0,0,0,0,0,-0.6944739845410474,14.555452703270511,0,0,-1.0162448418177719,-1.1863881163208354,-3.2156124572412312,0,0,0,0,0,0,0,0,0,-4.659646441413166,0,0,0,0,0,0,0,-5.926639741357898,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6352424745115046,0,0,0,31.98819033762186,42.776692963631575,34.97361148568348,-14.077629822242379,29.616939108694734,43.60924161342892,34.23737382577942,-14.498571529368169,30.971310988343436,43.68282685317487,34.27791581102058,-15.970223210994689,11.392926696091276,44.04523188666608,29.282347233343927,-5.712939048687398,36.915208160372906,30.025405783410026,47.704860861759855,-12.297497556142826,22.754196119030805,38.83695962224482,19.954536448820996,-15.470832143383431,23.859059341209743,42.75945218466121,25.49141808820684,-12.354744572915703,-0.8771644298952822,32.36121268054097,0,-2.5134023861505836,27.330121517605125,-12.523572520569594,55.40200028752843,-15.113203784594972,34.03434278727951,-6.190342529190278,52.43968582259333,-15.786857603105032,20.23890791657141,-7.757094551999571,52.18042920456038,-8.506474486520498,27.163920991002886,-4.101124025440456,52.165543468476244,-2.109259366582827,25.791851780477064,-20.182364377910556,52.92069022222516,-14.265376044455724,-6.194642443859826,-9.4404464330757,52.7675074112453,-13.684963566919691,6.82422638994383,-11.80769368245017,50.75461074909305,-1.3810010466484934,6.279450273536559,-9.109957950949667,49.19483990386261,0,18.66726364891885,30.789942473056822,52.153178957930415,-18.063228077014966,20.780819368085112,22.33060427023683,54.760279451787206,-12.938780338581168,19.472197170656006,35.99341113402536,54.0658510089648,-21.183503955174793,3.5766045659665577,5.138584352350987,51.4492591773127,-10.196236883063477,15.12794984416557,28.17206225289623,55.64482162426714,-19.418947171349235,5.005496909810713,28.420755393345377,53.265692574912315,-6.476822629636625,2.08397873626013,7.681000587551475,43.359813407620855,-8.045579961106904,3.608221479785659,1.9726030823403902,52.421007109887725,0,23.030852207734814,-13.624276522520814,51.8567728330435,-37.38659113142439,5.856575443347609,-10.823252507311839,55.97999340537608,-2.5861316092569835,5.653570915366963,-8.634900115223084,50.23857752189648,-6.041439377121605,3.9849569771204276,-17.225668722573378,51.611229294575836,-14.260771980965703,12.5652828946977,-4.707651436072149,46.006324371714044,0,0.2805941292660541,-9.55958898328258,46.570350155110354,-5.1000000000000005,6.249208970556974,-8.82799088965997,55.402086457178484,-4.892764469295795,-0.026521097904221913,-8.858036812737197,33.452995042868196,-3.460967755024992,3.573792876965593,30.750522220979086,47.734620562373046,-21.637311592631445,29.42776497746657,32.58032592049674,50.283031845622624,-24.088884124589075,31.98578954534704,19.930399146238948,25.152552996384575,-25.79899169554336,3.235593144070786,13.39821172490622,34.760021456269946,-10.069297946330623,29.705047210188308,23.007127054488393,53.458235350907195,-20.497451760839514,14.608939213056843,14.370884112256173,51.53507143099039,-13.306510724174842,11.146927345631132,13.768349149391714,35.796524540373525,-24.389902307092182,2.424478943753657,4.1014249507763925,32.448498919912886,0,16.427154860767903,-12.710135927430242,44.281674876755766,-24.107064413184304,26.23560157532361,-7.896059337595078,51.38021504221271,-4.985660485401582,7.0407405874635245,-22.136139170271324,47.69129761683329,-9.690000000000001,1.9398839361557785,-5.1000000000000005,45.208680879057454,0,17.63391283942419,-13.350613107237065,47.54129061693891,-16.899257920558426,-0.1497573690869972,-13.145746741178677,24.49775510793936,0,3.976338703661664,-9.09508709306656,51.95998562820452,-4.299875968238779,3.941752976492919,-10.027025596647716,43.415868767462946,-8.64270821124717,12.071457443872259,18.49541050299005,42.914441609500756,-25.157858228367196,13.915074304476958,3.355956523833815,41.64621911747233,-24.653387339500345,11.086667244521825,12.097939011031668,54.067815417887,-21.812209705335786,-3.692024769654348,3.0032494341842515,44.946775996923826,0,26.60844923633483,18.249660121098398,54.40745234514323,-36.68315413980061,4.73108877899232,2.4676437988868467,43.50531920797305,-3.5290996143025426,-6.100692415567879,0.4107019916152553,47.769677732625475,-14.46185776970319,0.946793011099312,0,33.504557288984294,-3.898810260564212,8.44832046714173,-15.550299771126078,38.294122551630295,-8.50476720187273,9.548742874557982,-7.472154895325454,42.14239249637857,-20.555762169310015,11.212086359831119,-10.858078502169429,50.437154846934384,-9.510702050775045,0.9390177589439426,-13.864774975600326,22.770230176211598,0,-1.3491778709059874,-13.134137730690938,42.111706495813124,0,-60.23981964057496,-5.101244790457088,27.590397631285423,-5.1000000000000005,-3.5073231596353307,-4.951409059498209,39.33968766220627,-9.690283277542003,-0.5060260862918996,-5.157944279347078,25.91284850434661,0,-7.763434119998823,43.558981205454444,5.649272204537497,-8.855265004509816,-1.0818922569262632,41.81295917984867,0,0,-3.7025992444515774,-0.1,57.01175123414732,0,0,29.865396088038633,2.9161854232302744,0,-8.946778978252139,37.37369208419074,0,0,-10.213625,37.00794875541162,0,-1.5504651194297083,-0.6971550309737271,8.77149477868106,0,0,5.975395153904039,0,0,0,-10.213857897515325,-5.1068638921875005,47.35783878325842,0,-6.1012375,-5.101192544608471,43.577048815255594,0,-0.8955761101140607,-5.1068625,36.397075507979004,0,-1.11066968509212,-4.30720687671361,15.280718620219996,0,-1.1950353388820252,-4.649128537042571,48.61178233668026,0,-1.0415776724315264,-0.9164392256191711,17.736203512515722,0,-0.1741235247158553,-2.088341144923693,4.6092319144083636,0,0,0,0,0,-1.3553735583373105,28.521179104899602,5.030068457901305,-5.103230194176834,-0.8899114271724621,-0.5739472649963243,49.24216373240217,-0.8649232085322347,-10.213625,-0.12801111526437867,27.59236176646958,0,-1.0586641538457606,0.13288504416917465,0,0,-5.105986446091858,-0.030988915566903363,55.923765653138,-5.1000000000000005,-6.117234203536486,-0.39497693185687505,47.956249798318844,0,-0.8479219214030213,-0.5708051031324708,0,0,-0.7854238189543048,0,0,0,-1.0549087927285703,-3.0925596219539733,36.85117957360035,-5.106276064844783,-1.1059625000000002,-5.1000000000000005,14.836966376593152,0,-1.1113517089674303,-3.762191484476961,46.96220269610633,0,0,0,0,0,-1.4858761787434416,-5.232235775914286,0,0,-1.1908451084729377,-5.101096838184729,0,0,-1.4414723500262356,-5.1484558297701115,0,0,-10.213625,-5.1000000000000005,5.566416643947022,0,-10.213625,38.94299234529548,0,0,-1.1,16.935112697514533,0,0,-16.826609477102394,21.468521382614526,5.619016866136912,-10.580562501239836,0,0,5.910607435247913,0,-2.7409028920697462,34.973803950068756,0,-3.5138085506549945,9.831653732601467,0,0,0,25.25097808295605,2.1274164779661406,0,0,2.747523451546544,0,0,0,-1.497726872831772,-4.214323202084303,52.47631610885936,0,-102.2043548524522,-4.849409825705937,19.57189824871152,0,-1.3451945376814616,0,0,-3.0811016685043247,-1.6921482392045857,0,0,0,-1.1058875116376443,-4.701399601499487,16.06862305821656,0,0,0,0,0,-1.0671944619434033,-3.792674867122355,5.731783390585915,0,-10.213625,-5.1158037815172985,0,0,-1.7646471720661936,21.621316139368602,0,0,-6.114697076512212,-0.13243924837289756,47.26600374628335,0,-0.7146806183576841,-0.2951603411072374,26.351921082921148,0,-10.213625,-0.5654788886060923,5.756549487716456,0,-59.49556934100045,9.22099526411135,0,0,-0.6320201828722629,-0.6808788686875493,0,0,-0.5956818588506002,0,0,0,-1.1227219241973148,-0.11262135701720791,6.399658739131409,0,-0.1535692204231479,0,0,0,-0.998131464260251,-5.11089654084352,6.03262445724862,0,-9.946657665184201,-5.098912656127427,3.5549234837286745,0,0,0,0,0,-6.10870732680616,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19.019311364477403,40.15735381885952,-0.7730577559218814,-21.737850751752024,10.987140431023642,29.538849214722166,-0.8607100590339514,-4.182226533992451,4.684831668657368,39.545441611226366,-5.107377155106345,-13.234120314305663,-0.5703295989392706,44.53302383197313,-2.2048008609461203,-42.21119057206513,11.515638944475917,37.89123278932866,-0.5168504708809558,-14.201428476551595,2.909032323352944,42.69784781097268,-2.848065208126523,-3.4325928507711896,1.2814437159531016,48.48245740156295,0,-5.402494198636635,2.907535962527163,38.909426088824134,-4.1000000000000005,0,-14.639092680523301,-28.841437415268295,-2.7966007439670935,-47.762505068249176,-7.943157325221081,-10.294448546758847,1.9476267519902664,-50.25653534400366,-12.071379392507739,-6.63194677691535,-38.75761581795229,-26.538336912177236,-54.42723492919712,-9.324513892266006,-3.1120958943184664,-6.363533815818843,-14.745092343873516,-12.657927673028643,1.9470837402135177,-13.007367348110334,-9.199786888753817,-8.381673916424134,-10.255160556212747,-8.911523219236948,-3.3241511678050437,-4.189156860944111,-3.038487795347561,-3.861355090146042,-1.4721653607448613,-2.9991288065249226,-5.012287834006499,-5.9093020359142026,3.2897929251783147,39.11099211737718,-0.34088364509342983,-11.656000265197804,-11.313786793010177,-3.566001431902743,-23.312987897042476,-19.583313260193577,-8.595419853055493,4.352199906892713,-7.952005986556694,-17.730399767422703,-5.07627085642153,-8.380401611279703,0.8854650479958732,-4.826289805391258,-2.7497677978379933,13.549830805594034,-1.1896233313240139,-13.306618571582797,7.017733989591524,-7.8600570491324175,-11.649284775749587,-13.913419756094076,-7.855068309022639,-2.6865703951426436,-7.342830353781189,-10.393222898113919,-12.643146884501054,-12.296706173815604,-14.84557039240555,-12.763795395685452,-3.443593909744465,-8.571083220278178,-0.009718356477147042,-9.22159742391433,-6.961170802654517,-9.706932255044737,0.43183594918151536,-13.473908060021486,-8.233252112664712,-9.752457702717166,-1.6806743489649354,-17.39717932673564,-1.9229773189544048,-5.106875560772596,-1.1963034106711432,-5.106348457686359,-8.581279419899316,-9.009254924769605,-21.777068297782836,-11.370319805496276,-5.454481156309234,-5.115875717687111,-2.949302962574308,-8.942270548711026,-5.338203921656021,-5.1159560412222485,-4.778898931856103,-5.1058664449258515,0,0,0,0,19.567397405248343,28.979112467756412,1.6452209905950865,-14.017172705116153,-40.141793367792125,16.625397372508985,-5.008362003947824,-49.644868604448476,-3.1727135803223088,7.892299558879986,-7.484059784803479,-21.90583573828219,-2.430106816388968,2.9903162977042372,-19.368727390897035,-8.823375437401932,-0.2842548995911609,10.551241193631075,-3.931875371147071,-41.403735125415096,-0.34739677131645763,10.183569627738084,-3.4128139242156657,-12.696279448367418,-5.157375,1.625967625185823,-4.392805880595479,-4.1131502119616234,5.9599252114553805,-0.6687567279863699,-4.1000000000000005,-4.134422670449242,-5.59651903979734,-9.91410508679439,1.3579244490954228,-9.697297632445432,-7.892793146980723,-30.17257488930395,-20.872300252845463,-23.821976717675216,-5.045920495977387,-14.44281496266444,-7.964997178276912,-9.19337366722681,-7.892701589185567,-5.101201595353209,-3.5761595331864147,-9.712569458183982,-4.252042566237824,-10.385529208810839,-6.674466117639486,-8.320978865622848,-4.050231896114665,-5.1068625,-1.0130711396590792,-4.343247625135388,-3.3273300328492517,-5.106875541573551,-4.101246346349462,-9.398709711599494,-0.644956651736915,-9.691500735871557,-2.537626662074944,0,0.20685384502497164,31.35339316698444,0.8386681781757638,0,-13.155031039029765,-10.802902370951008,-21.326682352227877,-18.529728960019536,-7.239377309941626,-5.946022103886054,-27.684954435938494,-13.288061613649393,17.335104903730617,-9.400304782679347,-40.238610466763,-10.684212702620417,-7.17823179629641,1.343310047143113,-4.2450557621720275,-6.168204079343289,-3.122609240547831,0.5524599116503177,-11.938380188525187,-14.567895497085685,-1.7857816787516523,-1.7689301749719015,-4.1000000000000005,-5.1000000000000005,-0.8530474250925458,-0.607195717800769,-3.3482369542597006,0,-14.548280014534456,-15.02389098834377,-12.814860275928355,-51.10715914655816,-8.54458779995968,-10.058700978108506,-9.789276659382336,-9.690000000000001,1.2601814570471033,0,0,-5.1008786639013834,-0.6182326822450244,-5.106622777827761,0.037074253996633645,0,-0.45304607316085854,-3.949945027052559,0.8983060259961515,0,-5.859787635918245,-9.756880430041756,-9.057956712353036,-9.430860670028402,0,0,0,0,0,0,0,0,-1.1115063550559112,44.09859228072414,-3.984675486096668,-5.106983141043728,-10.213625,42.650388248396204,0,0,-0.9429365148589591,28.67036984886777,0,0,1.5743980978024295,0,0,0,-10.213625,18.501470325259817,0,0,-9.029690190547257,3.916001409302069,0,0,0,0,0,0,-1.1109089314627665,0,0,0,-6.121840328125,-4.502511988488393,-1.5828287638441483,-5.107214273480705,-6.1000000000000005,-2.7486171273233815,-0.33064493159523606,0,-6.168635895022038,0,0,0,-1.2351482230205992,-0.7562862059311755,-0.10149847341992882,0,-1.120492340485413,-3.538253923985538,0,0,0,0,0,0,-1.5209431918818426,-4.880753138995607,0,0,0,0,0,0,-10.213625,19.135421886525776,0,0,-0.9388827736302947,-0.5402497248531257,0.6645396705272504,-4.787334684158946,-0.019444568822303235,0.049706736085904035,0,0,-1.1108047756265154,-0.11496575940685741,-0.30831513441181146,0,-10.213625,-0.1,0.4778855960688173,0,-0.7718158657897265,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,-1.1525093305128666,-3.0302539956420143,1.2579540346213864,0,-1.174845954606711,-5.166492797322707,-0.3001295439022876,0,-10.213625,0,-1.7743249159379042,0,-11.72444796313723,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-10.213625,23.204788338835158,-3.5113608200742537,0,-99.24539720944274,3.3144167491247063,0,0,-10.213625,4.676340129391422,0,0,3.437458376405863,0,0,0,-8.861345749913294,1.728875198617355,-3.5106117395637995,0,0,0,0,0,1.363385354156873,0,0,0,0,0,0,0,-2.112624658917373,-3.9893464686203544,-2.168723698478715,0,0,0,0,0,-10.213625,-5.1000000000000005,0.5852906580781756,0,0,0,0,0,-6.1646403412822295,0,0,0,-1.1540461918949674,0,0,0,0,0,0,0,0,0,0,0,-10.213625,8.863279500305422,0,0,-0.4478842926269578,0,0,0,0,0,0,0,0,0,0,0,-1.584907767588279,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.1162153281250005,-5.1017419666087305,0.35709261395005143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.5029691861315415,0,0,0,0,0,0,0,26.26112884416454,31.324531006457278,43.642162488207575,-24.614767915973,18.60872651955058,33.18958547634351,44.15893257486065,-16.597111238411692,21.330300349287246,28.7132364112229,46.0785131595557,-13.356524494568548,14.205499293478809,37.53157266438868,7.024159988276983,-7.04690457981871,28.883221813041562,23.140599844838547,33.239910931631826,-24.53766936481644,8.868030142144574,12.809882596496934,32.14878408954161,-25.54633281124298,11.909748939481709,15.78862128591478,14.050604739118157,-21.082793065775405,-36.82634901153628,30.625720970277303,8.939736382160168,0,29.096041059682268,-21.009577259753506,30.851544030535717,-16.959032723548624,6.609240948233312,-6.05089733187085,48.09950120262975,-19.6152117560948,9.296790243586901,-7.014376460435966,43.676973718882934,-46.72316109914152,-3.926331205001518,-4.05307814126374,46.94156981327012,0,8.128691703388315,-10.370144431625414,33.57291263398771,-36.23850883814348,6.51766230179775,-11.960185363075274,45.82922031747237,-4.505415558845032,9.098110737030911,-7.764997770824484,45.9504814160435,-11.150332407410785,1.517282909611735,-9.588814514715557,25.515720706685045,0,28.742540586764243,35.28843140991043,5.962261753889908,-25.8642534684934,-20.74302133788201,0.5648512179735643,6.445023178075788,-37.63056692334854,-15.251093665530536,5.003059063679,8.705979505275328,-15.113862673094356,2.1381636213266493,0.18151907685328394,23.10199449174689,0,-26.44503341158582,16.940859601067423,8.951155159184234,-26.442109700596816,-32.02691478084148,0.5796093860828968,4.810016833040068,-18.497054584562285,0.8891093462672561,-1.0747106548910275,14.829064511067836,-5.104447357036078,-4.968157849810295,0.881740636970945,1.4338751738384077,-36.90273475237811,-1.9491353107694596,-15.368437422787144,15.676423357645866,-21.060105288523996,-1.292223199100179,-5.1000000000000005,20.783926585022215,0,-7.9152332777074985,-22.19318609446172,7.178162932430932,-4.696178395974285,-5.0306964142784905,-46.93495782887228,5.311669154800756,-5.097824456503528,4.574720952714724,-6.804056561990635,7.572909796122114,0,-3.016212343476115,-5.1000000000000005,11.164469117636994,-4.988506209307879,-1.1963751901511808,0,5.125269773888707,-3.7791023753979722,-1.1912063218258098,-5.0761183383627895,3.042559739486752,0,10.114285355010551,23.802502464071633,31.490570717508163,-18.488242933759764,11.135952620448599,12.124876861598327,35.504605399962436,-20.837817567013204,-24.28389650580624,8.800388939234907,10.05940883792744,-33.4272280827601,-0.07304155624718459,0.0003241576064115098,13.467496753657045,-2.664458907838169,7.353169978264257,30.1353119249737,9.375017460433552,-31.985170795739535,4.2052909163226975,0,12.3273304617977,-1.503935818860076,10.038578893751533,10.377869893706624,3.442238055260399,-9.303987982378537,19.755738693088812,0.568334391911811,0.8130054359155046,-8.731763626891738,2.711784218066135,-4.997147688410017,32.22769883917183,-8.418643403612556,15.43063975547083,-44.58983011501319,37.88096020702429,0,-2.683167363706801,-37.357839201685124,9.303988611099008,-19.92735604023882,0.2952885872907489,-5.10698240758551,10.683098056465266,-13.661443913180719,0.9350126058374428,-9.71050953417501,11.200450188713997,-13.562687995220324,-2.173457892270802,-5.1000000000000005,14.832940715164193,-4.907491241524906,-2.9302467718909755,-4.979391695645937,0.8183640415674666,0,19.92663392491088,0,0.9279855784562312,0,16.096926675824754,36.19921383586579,3.8828573348307445,-40.97092375536092,-0.7019480983283302,2.127804239472419,7.113372441085844,-17.752828543997865,3.474775008474742,3.0888528717012527,10.612965776948231,-43.52183062042614,-0.2083985700149226,-0.1271664814148125,7.82363747003558,0,-3.182195690220637,0.669845612218045,12.282188262598904,-4.8532235987673715,-9.447842728020873,-1.2289651382445093,6.8206211146848394,-5.087715161444746,-2.490905662260113,0,6.661653079920327,-4.578745346724063,-3.8076182517346666,0.7593949880922837,4.715854646448431,-4.585475044630373,-2.9160574781784554,-11.712784299300365,9.041393019050359,0,2.4878452049759474,-5.039693243279351,8.68568100345307,-4.695349694136255,1.5027459601674567,0,5.95394768991387,-5.1000000000000005,0,0,0,0,10.500890339126894,-13.6202415432003,1.9220236326772417,-9.025905321434,15.793974418824465,0,15.590142251912797,0,10.47203665256338,0,0.5193472456435771,-9.67942074836926,-0.02884260983517173,-5.157407447936065,2.2899086051114548,0,-2.5457683925363375,40.99621588994245,4.951656349924939,0,-7.833539170913413,25.843928367469992,0,-5.102242372726977,-3.9726992782128874,40.62963413776727,0,0,-6.1012375,11.069429606238469,0,0,-10.228706807826626,16.949282731928072,0,0,-1.714966185933578,9.091160170296451,0,0,-0.7158775944085813,0,8.550295120903591,0,0,0,0,0,-7.702106389999793,-4.852910120076042,43.48801471995934,-4.1939036890965316,-1.8305866300081945,-8.205186503871328,25.417504395480776,0,-1.1163208398989222,-5.1057375,13.545730557086793,0,-1.5802921104362522,0,0,0,-4.851375803958185,-3.344054116730631,13.773859563759492,0,-1.040176843690627,-0.41577689039059396,0,0,-1.394108423688868,-5.101985228068575,5.0203529681656915,0,-0.5261618967905116,0,0,0,-10.213625,19.401103865985334,0.8446009063629184,0,-10.213625,-0.3565359371671131,7.416740008704053,0,-0.8900861171465678,10.34478081809875,0,0,0,0,0,0,-1.8060561620670228,7.527339117634224,0,0,-1.0754390056141507,-0.26072475233740605,-0.09517764913997251,0,0,0,0,0,0.1453284262963475,0,0,0,-10.213625,-5.120141060604971,0.5040479269946978,0,-1.204012824503064,-5.1099546942682395,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.954319539603641,27.083928397040935,0,0,-1.2414340751243398,2.5936693879835593,0,0,12.657566002137814,0,0,0,-1.3261137057965553,0.8413842710103671,0,0,-0.9903821723147459,6.268766955842912,0,0,-8.493761548196131,3.2925701334373465,0,0,-2.831769240685283,4.56238108837152,0,0,0,0,0,0,-1.5473158095700628,-7.843620832521685,20.196553891840388,0,-10.213625,-5.1000000000000005,16.62534609684237,0,-10.213625,-4.622850955308866,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,11.95807297422693,0,0,-1.6610517713388036,0,0.9861527627506829,0,0,0,0,0,-0.9691707897148979,0,0,0,0,0,0,0,0,0,0,0,-0.3479936841147704,0,0,0,0,0,0,0,-2.06808186447051,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.100669661893791,37.595609319647444,-5.583602147407511,-17.847805473727618,-6.1000000000000005,45.77383628458174,0,0,8.44509253891578,29.08594400117792,-2.607146283196837,-14.990770231680399,-0.06008213528346684,38.17802614844936,-3.984198898419136,0,-4.914539169950807,32.740144296293764,-4.3381552788141855,-7.7830192611848705,-1.2527162385776163,35.9991087857993,-0.711308401457827,0,10.946554805221888,43.33047386175323,-2.378964921454552,0,7.646753145278354,-0.1,-6.956038459604031,-11.901572394600382,-11.21910558282761,-11.8973669470268,-4.731147628677192,-14.70712354837998,-7.055430273245211,-16.744503993064768,-23.129248035795996,-16.566484779490512,-9.802586112002452,-10.57533676720685,-8.092364302285493,-8.835315452561758,-4.298614724875548,-8.460801056797479,-3.9886706872611306,-9.155656244436507,-5.76380353614283,-6.033668824162234,-4.653355372994013,-8.68302761420359,-0.6376767678082609,-2.0406822269661293,-3.457971505815512,0,-0.48084177494730407,-5.1000000000000005,-4.100752776933775,-4.457864732872111,-0.6199061442816673,-5.1000000000000005,-1.1303731322064825,-4.994293050747777,0.9675494102543807,36.6345492639881,-6.200208262118755,-9.690000000000001,-12.774643257149453,-9.538939149703344,-13.194690886351829,-18.92635346133298,-7.978131934745452,-6.210627910293085,-16.34637302849623,-9.013490016060913,-6.332400425150643,-5.37134557980058,-7.126615457413307,-6.286867039195156,-4.563124032931139,22.765345952336123,-10.438278638059566,-10.931222328219581,-5.347850953406888,-4.671393686476057,-7.999894168930002,-8.21451993524586,-0.44617252675268493,1.4032218365579625,0,0,-0.5878356611464638,-0.11154095114343106,-4.1000000000000005,-2.8499657432925765,-7.034937160200879,-9.907857281695703,-10.115121771641974,-17.196775904805282,-10.589804973382394,-17.620978876985607,-14.342138479167097,-13.831914880144954,-9.580321899096795,-9.25987503443147,-7.371765140091231,-9.69273043873826,0,0,0,0,-5.701824989149966,-5.1000000000000005,-7.791242689062501,-5.1000000000000005,-0.6112512058738541,-5.122677739100183,-40.47194460502489,0,-4.175716234277953,-5.1000000000000005,-7.791249983164549,-5.1000000000000005,0,0,0,0,8.255336334420866,39.83652337956402,-5.074577563021165,-8.779325852964455,-2.320453870688149,28.798176476737265,-8.625838579604233,-9.611685064412345,4.729681261265243,8.547201571343864,-4.149701918468763,0,-6.372431920281429,-5.804242515187267,-4.497195025587365,-13.103585341491986,0.06099374201135002,15.0394039131404,-4.07239929819158,-11.677464615989692,8.40590507182592,3.672812051281045,-6.739498081244673,-13.52398078731493,-5.787384698096497,12.648768507254937,-7.32840224354233,-4.994571254752857,0,0,0,0,-9.747439546875,-7.939389016541642,-9.3750347269606,-9.684731083055143,-10.160903774597392,-13.466768075906295,-12.279964227298882,-13.626566617957721,-9.534433230155589,-9.63096042885416,-7.73192727205481,-9.183471553582915,-0.7220435333823102,-5.040529045690381,0,0,-5.450937256066524,-4.8903167321395005,0,0,-0.44838100635682576,-5.082797472792162,0,0,0,0,0,0,-0.9777611391372956,-5.1000000000000005,0,0,-50.062068752824395,16.078106080207142,-4.01576318327988,0,-5.379398853244482,-6.978933125435503,-32.815761401458445,-9.419886288657022,-0.21733454275782638,0.28868879183833773,0,0,-0.7784088620407709,-0.013937993047260802,-3.6810026038717876,-5.1000000000000005,-3.5403200374204764,4.1360213505789565,0,0,-0.26067654597606893,-0.4345688824426488,-4.12184870838752,-5.09805529355855,-0.7581580392498201,3.377331708123264,0,0,0,0,0,0,-7.4441118192096445,-9.350244576624725,-7.604787447181105,-9.690000000000001,-4.421101014155487,-5.1012489989060015,-6.607757594202429,-5.1000000000000005,-0.9729448434061351,-5.1063595371567345,-4.100250671650826,0,0,0,0,0,-0.8942319761183499,-2.52700976314018,-4.110052619198911,-5.10151953619455,0,0,0,0,0,0,0,0,0,0,0,0,-1.2967836570166387,28.99341642753189,0,0,2.688110163339377,0,-0.4294748577747292,0,-10.213625,8.130853282539046,0,0,-1.1058877741777344,0,0,0,-6.04709578940799,-0.10670952137466211,-2.4057774542800243,0,-1.5501151641530808,42.111867683907846,0,0,3.9395615836464586,0,0,0,0.5472452165236014,0,0,0,0,0,0,0,0,0,0,-5.117227828125,0,0,0,0,0,0,0,0,0,0,0,0,-11.940790393207669,0,0,0,0,0,0,0,0,0,0,0,-3.963837284218829,0,0,-5.1069871104235744,-1.17873573031477,-0.12437448726801281,-3.5867454622908816,0,-0.8504966364343037,3.1155380600673155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-4.208820992718112,0,0,0,-4.4876971984671785,0,0.02254229977040083,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,21.054906078566525,0,0,-10.213625,2.2776496168557276,0,0,2.1011781360463226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.108522806243807,0,0,0,0,-0.8264166953128472,0,0,0,0,0,0,0,-10.213625,-5.1014130026427065,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.086010393244711,21.224454582391353,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.9128668074536865,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.237206863180287,38.75710393375548,39.79678768858039,28.92352122033348,29.705568688740126,32.73714215902612,52.43987041538334,31.007479575922158,17.47357054132101,34.71398155053435,56.02755241007386,33.01256186526502,5.5947990249022705,30.339873924431657,48.59034511760107,14.954011808830945,12.70538091790193,30.403736296474907,52.519423863152205,30.315577071662553,12.254507248713239,25.943400878546257,52.72613787233103,39.471485443715615,19.35446566065945,27.97339652585798,40.47304791107565,25.46872481142426,2.0098497646678313,7.399957063486428,46.837013195926964,10.00660089524605,28.600835793265063,-12.566167452018473,40.4965979156293,30.44826501576647,19.43762735427276,-7.844727151002869,52.924970115029815,36.83989580408553,40.736290496404074,-6.552030967605538,48.707588149930544,41.2170947232671,-0.01794960200025869,-7.781727194363335,48.49902681097532,12.064889040013066,33.7653432878853,-15.482171800739348,48.37577145962773,24.396074408288097,22.76191356600767,-6.959417230816557,36.89282981828321,6.880154612477722,11.803580599386422,-14.011693019883495,46.59011851519854,6.905993166099433,1.8839491579007104,-12.371300934325275,48.175336388189805,0,14.555346724146368,30.777309859312318,55.06880987033275,30.780976959725425,7.536688303548146,14.655467035281712,57.062189042472006,10.760297448008142,33.90208440903063,22.739114860639837,51.85184920573443,38.013506472951136,-0.3273260824751935,3.2935662382657456,51.73430994037297,10.248129132454611,20.656980859848105,24.594177918929304,48.359284383131175,25.700955450989767,1.1593014883520298,31.921149072280862,57.75053948050472,17.63263234798335,8.475860166352643,10.078760311307837,54.14973217486375,23.581694286697218,-5.554072221208161,-0.14674235650648912,32.190895918565275,6.989180098081604,3.950115781618472,-28.460048445666253,50.95704768577067,24.943670830689676,-2.8017921652648172,-13.700636412354868,53.30681986334852,8.238583172612039,3.9183335231453147,-10.241891648164895,50.44282508794468,0.6267532572858082,-0.6102971800187225,-8.689152016061518,55.753208522301534,6.239215480539677,-10.363717273340242,-16.286235746112105,49.79736118348334,3.8153573166573302,1.8816324797682573,-17.054858381144246,49.970913815562376,2.611869934784724,3.6283647742966343,-9.18999503180167,51.697789128603056,0,-6.1012747798500895,-5.101250416244479,39.84613366720682,0,24.539263203426895,24.96436062882301,45.94581153763411,20.9313953644678,19.95780181988512,25.079262863939572,50.23263225329933,20.935827360138564,17.869913747404194,19.8572059727806,46.70440146395432,19.871507131071482,12.805205563005812,15.14750107268134,40.6259262714932,9.919535854806218,14.63828216816379,23.828556266301128,17.71483507122027,19.535471346474548,10.534651241337569,8.621659340810494,31.575350731653817,7.5067319669401895,15.422989898079196,11.76920505393937,56.62687366190116,11.936698470847244,1.9814890833441572,5.779748729483097,37.84143774949292,0,13.443873230620264,-12.67706469000137,50.437107644125085,25.94531151421656,7.509554917325951,-10.972555686059438,48.484142367539604,6.063453403530302,16.35330006634885,-14.05551078309174,51.50876576099351,14.785940798754808,3.8157096038376728,-5.100353195676638,54.696680928446575,1.2028533753938797,7.822679712329199,-11.3369272051785,51.13461414501662,14.480187246999595,7.8071963445011265,0,38.4275970849854,5.814468279320408,-0.6266234249274509,-5.106723988474277,27.400121481188116,3.3169554794271963,5.83261731550089,-5.1000000000000005,26.94947477699047,7.984807847265174,26.57511650155653,14.13435221667308,50.835527632445185,28.706326979467942,2.072921270836307,5.55008907708912,48.37925985570567,8.45965887345403,-2.7943256271536026,31.016581768171605,51.46351445944375,10.250460113151728,3.3730349982001537,-0.11983484090259403,47.620583810724405,5.712765198647042,3.5789150581863063,1.9526780061055895,45.42717670775771,4.428553413805804,2.115600046456928,3.4226835246304557,17.721659245079078,0,0.5086484929133013,5.270930952785347,52.131429350114296,-0.1,-3.0748100202334028,1.8371777780662395,34.059261347971024,0,6.684144003789256,-14.288655721111144,46.67045755567207,14.900217028505708,0.42312738680400175,-9.933024956939107,39.18513656044183,6.948686612359399,-0.1686990729562048,-7.420926803019805,17.86983814449977,0,-5.810424832273087,-9.708967659148326,36.144081619129395,0,-40.14320468486943,-7.98599606693534,38.316544572198374,0,-5.157375,-5.085233155478768,22.962504175799644,0,-1.9881065009897743,-13.1737592839279,15.72884096464961,2.0927882319986186,-6.100120088308868,-5.164237635099347,21.816716645366082,0,-3.2714255818844684,41.88963448585479,0,-5.097283118917736,-1.1058157113314449,-0.11260140687362939,51.55851150806549,-0.39604905261500367,-1.1695917913969254,-0.02388348021308826,48.913672850588284,0,-10.213625,38.31748969409049,5.717961209244729,0,-5.8455613883721105,37.27713793377817,2.118001042098286,-3.0395027031748163,-14.871506963236374,0,49.23989597348286,0,-6.101361097266597,21.226680944292,0,0,-0.33095184490996643,4.194700921963425,0,0,-3.5826162667304073,-5.8213766316375,51.25773208714572,-1.1560872354174703,-6.100909640697688,-5.106898023843467,45.25285396475474,0,-0.3398189387292405,-5.849742875766266,50.81261191580898,0,-0.7251998821452152,-4.9762783241956585,45.33749067344896,0,-19.303752828125,-5.1000000000000005,49.5537156453353,-1.0965482434354943,-0.001648206896065041,-0.9304595111938725,20.860696210080977,0,-1.1165827634025225,-5.098226993685342,31.968608863600895,-1.23550148554204,-0.7368386840316047,-4.499944279940489,5.139378622901781,0,-4.451179905298249,3.6874647402287133,48.4625570265163,-1.061897807774352,-1.0480253444353298,-1.274683137701131,49.54842089481779,0,0.796860447853817,6.956191316658615,0,-0.6189545420409353,-11.061177828302606,-0.8064342976243619,29.493188988883638,0,-4.657577433814964,16.659528597771427,0,0,-0.9744538693049789,-0.6351965541217035,31.325637394901936,-0.8865168583591079,1.4959433756571714,0,0,-1.5916830744716617,-0.4286789078286942,-0.4236267714136007,4.526278869883482,0,-1.1110460126913282,-5.068955437835561,33.028330281587074,0,-15.685682622851775,-5.208588814013134,27.519434366227664,0,-1.4760128245780193,-13.843389893014521,19.281774904473096,0,-6.104869942606783,-4.947897361050719,0,0,-1.0028254956817546,-4.620402761303335,0,0,-0.7592492840420704,-51.02176532660896,0,0,-6.111602828125001,-5.1000000000000005,51.434778594651675,0,0,0,0,0,0,38.46038585202392,0,0,-6.111602828125001,31.59313821413765,0,0,-9.584597421119256,19.254695837067406,0,0,6.947872006209509,0,0,0,-3.205471921857038,25.005136125371045,0,-0.790100877494746,-0.6666375619109424,1.8712274325591853,0,0,9.207820429631685,0,9.908254278062866,0,0,0,0,0,-6.106977385410045,-4.891070540183856,45.46504279825569,0,-1.1018379735341635,-8.801127660569339,10.135942912209222,0,-6.111347808362571,-49.55473943066883,0,0,0,0,0,-0.8131826757599289,-0.8336272544934236,-5.1000000000000005,13.26113676152414,0,-0.985088603607893,-5.100749288975245,10.628350376237298,0,0,0,0,0,0,0,0,0,-4.263583805884183,25.015166024839267,0,0,-6.101249414938592,-2.0635025807130787,19.06099870793554,0,-6.114169324013531,2.578051017768507,0,0,0.3711819263323918,0,0,0,-10.213625,9.502273326615754,0,0,-10.213625,-0.8205416760386239,8.301354549399669,0,-5.331762559011196,-0.29201950977724656,5.7355702887973115,0,0,0,0,0,-5.215636873423515,-4.359755110388912,5.367507351256828,0,-0.7891141903750244,-51.05913071969812,5.711771669131888,0,0,-48.05665300057895,16.13235137584442,0,-0.3398541216673861,-5.1000000000000005,0,0,-4.996693503667105,0,0,0,0,0,0,0,0,0,0,0,-0.8466000575137924,0,0,0,23.061506005722123,39.489615918583496,-12.748341644535458,25.515751836248615,5.099424485181169,43.460975231370696,-2.250300900339521,11.941477361170946,2.8476457935816946,46.12238642601012,-4.116360369674833,15.560693796609558,-0.7365131773547507,43.987610420059006,-17.204928384123072,5.363598548029708,11.896434244612541,40.57209141988296,-13.946639920201044,21.357244666231797,1.7707084254436463,41.84729054805734,-39.27889487189858,2.788981641276674,-4.2209324085329385,31.296205092002154,-2.0773562213897914,2.792137390185805,7.045100030138383,40.22240488645418,0,2.8627057710995567,-21.321531382208274,-14.428992691031208,-0.2624946260306723,-10.992917677946174,-14.774916365075493,-16.73774607217255,-2.613544500562214,-12.099811143270212,-14.040262321272692,-26.847328754488306,-18.5952953252397,-9.084856255944588,-14.291073206258638,-12.382316272570716,-11.046786433276706,-6.6670486433292915,-43.61440165811309,-16.00612205197157,-10.336989059430563,-12.057085980804528,-14.056540296385752,-15.112284528590461,-7.902479721622931,-12.298611477601089,-11.368458561546143,-10.889302326796102,-8.162547928137352,-12.14281775982832,-10.821980248124525,-6.71682348586485,-8.665185506307905,-6.687701072708648,2.862596944695652,38.63756537259377,-1.3264330400378683,-1.0977658166125877,-7.90868451914793,-7.987011098304404,-12.062312681253891,1.123730626535254,-7.503077781645737,8.696096809787239,-5.7809266239736665,-4.3783926372244375,-3.4619738617689646,-6.7157161390675775,-36.554182240862644,-5.809882209352546,-21.40361661792633,13.353857453883435,-10.540287297480496,-1.8366953753881103,-28.501493991601706,-8.01521398609189,-24.134737752531283,-6.755008816389912,-16.956680988293435,1.1733826978624593,-35.65563418520329,-4.566336763695583,-5.37325785593742,-6.621908948834125,-7.754498601498633,-6.085979983672108,-15.72921286757786,-11.345048356385,-1.7419273447121537,-11.786277739689528,-6.991860324311665,-14.127827158008696,-29.456013404987985,-9.822490608581981,-48.98145391175645,-15.458400846555103,-37.68441653632904,-12.739618255005258,-6.020117227139858,-5.148480082939052,-7.036013888986741,-4.177670216776593,-14.102509979409932,-13.868914775599741,-9.755143088317094,-9.691735923585744,-6.1000000000000005,-9.444904367190139,3.239400438510691,-5.430417333761706,-3.5203616545220204,-5.1000000000000005,-41.0603899183902,-3.2083733851543568,-2.427613156078625,-5.106988978786147,-4.648525582272445,-2.796425147187111,22.215893944476257,30.20404004545975,-21.42124631191017,7.929917250955248,4.552718849342563,22.110715187677993,-9.801288316393265,-0.37322618375658495,6.7498390572807025,10.865777376727593,-23.9554563972239,2.691190001177786,-6.137074558679269,17.402926343743122,-9.808639625544714,-2.700254240284641,-1.268256732882337,19.507069910261585,-16.07940998053091,2.8342403356505654,10.147794736479728,1.2088038163581667,-7.092149106127193,7.883652684786055,13.438163563701778,5.612371087763009,-26.59996872328478,-1.7083342814407496,8.985910018787335,-1.6510536374487796,-15.335326868282026,1.8152822135305688,-5.992037499403583,-14.601407141716573,-10.790674022379582,-9.309420871480677,-9.04822213614127,-10.866590973203644,-9.561658949411045,-9.600570125328552,11.225302645051928,-15.78349456473483,-12.939477096003264,-9.81542682359381,-4.611198048156729,-9.730937180642112,-8.787347840427106,-8.44236553576677,-15.492946843431387,-11.677608753233384,-8.0501556147063,12.641297153379098,1.082429905841965,0,0,0,-7.753599485576039,-9.508567389926242,-11.1127875397284,-8.705587326414344,-2.636594946443953,-5.1000000000000005,-41.01362466428792,-4.804428397444014,14.57014062413578,33.37269691905416,-6.3954438443434105,-0.8728073953179711,-9.127522424257634,-8.960339333826425,-14.508741040365678,-9.288682770254422,-6.042645737685311,29.229756604064047,-8.171047739492888,-4.963312989947742,-12.76223562380856,-7.518789940209878,-18.875815766791487,-8.259391037034051,-2.4023374992955038,20.280932989088317,0,0,-10.038468252679426,-7.277129332646781,-7.796289350915012,-6.54925143705805,-4.495369666737794,-5.462484206498762,-3.521820006122214,-2.594628876188977,-5.599775128066356,-2.6150504762424225,-6.896997820371139,-2.7900922862822526,-4.867766028149744,-11.046879567574466,-8.16863973793243,-4.593063831278915,1.2193514382979553,0,0,0,-13.285127845653356,-11.677032989100898,-7.7912501957712905,-1.563321021948313,-5.473651882652309,-5.1058561209727715,-7.5716639626054985,-5.493826594874835,-2.080143399745507,-5.1000000000000005,-7.412979232599222,-3.756485604799488,-58.50432095922278,-9.753382283257238,-9.20022103409142,-5.818201285961299,-0.6104509014266593,-5.1000000000000005,-2.391727620572194,0,-6.820442382598225,-9.995203585858961,-5.106605374696615,-4.022917444582526,-7.431845632610241,42.68390809782983,-4.1000000000000005,-4.9420663788735,-11.004354518733427,40.42177153794437,0,0,-0.9092354386013499,30.263465233664398,0,0,-10.213625,9.23624792774316,0,0,-7.521652204558386,38.02531087368569,-1.3326780754376444,0,-0.3839837587583711,19.0799558127852,0,0,-10.213625,12.888394169286592,0,0,-1.487469113591401,0,0,0,-8.289482621623158,-3.9766486713739995,-4.78430283422933,-4.056833463759325,-6.106636579927479,-2.2943835156164156,-1.283630076630104,-2.9762219722610648,-1.0597489715331956,-2.1165323630492145,-1.4745611154769378,-1.1169485514723565,0,0,0,0,-8.743456638048354,-2.702106401515845,-1.9406324467263691,0,-6.1059625,-3.236918554321649,0,0,-6.1000000000000005,-2.124668318888735,0,0,-0.9055019446094802,-5.1000000000000005,-4.1000000000000005,-2.224926006538869,-1.151793668635261,22.336646368529244,0,0,-0.9806271832266052,-0.5907843943430352,0,0,-6.620053904440569,-0.8415339130582877,0.28478449355241725,0,-10.213625,-13.58337170604168,-2.337100312548256,-0.43394115729753757,-5.49018203208281,1.1757936418038581,0,0,-18.245150185852957,-0.8380293023199935,-4.1162729813909955,0,-6.1000000000000005,0.6245059248484088,0,0,-0.4699626216750855,0,0,0,-9.301003978460777,-2.8452900232567755,0.4303240233276931,0,-10.213625,-5.1000000000000005,-3.5731502345425286,-0.29904048479988804,-1.110259068804439,-4.9500132164239155,0.3896850585401417,0,0,0,0,0,0,0,0,0,-6.011098550368242,0,0,0,0,0,0,0,0,0,0,0,-0.6373918302424677,27.557351057817147,0,0,-0.25739741140043704,7.06150688172065,0,0,-9.888067385544494,0.07654890708113951,-41.07044448993935,-0.8031703105466328,-10.149119183273257,-0.5794000175286166,-4.1000000000000005,-0.44306216070878324,-5.826701967564283,11.66147942036449,0,0,-6.1000000000000005,0.3062406522483895,0,0,-3.289008014571669,0,0,-0.814438263742089,0,0,0,0,-5.867405978454114,-4.19985506220715,-1.872826804864941,-5.706158643271908,-10.213625,-44.178103118385586,-4.104559395808706,-0.4663960417028308,0,0,0,0,0,0,0,0,-0.5585120031211349,-5.1029145214524885,6.304239367959773,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8322055508662389,9.481312111026892,0,0,-6.00484049851512,-0.10560294275150335,-2.488879906599264,-0.11156033317596348,-0.8476568219004528,-0.20061466303590783,-4.106863726097871,-0.17145966548646566,0,0,0,0,-0.19463694538957166,2.0220189555189805,0,0,-0.933076134190867,0,0,0,-0.6351137317037425,-0.16870704916191037,0,0,0,0,0,0,-10.213625,-3.5731164429832947,0,0,0,0,0,0,-0.7185813056654301,-4.782050162051184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1573106654896301,-10.214926974498676,-4.106863964721311,0,26.439053076469005,39.84626857109008,43.85017969996292,30.336092386069915,17.752086724274474,27.979174297349225,45.99664980190905,20.986491914631383,12.903416686617113,49.251165127690776,32.494749676020376,20.667452704241317,5.15206776088751,4.789630108042585,47.36330204000674,5.041747926780975,25.24135584635119,21.301912462920495,40.628446593004284,22.3798483566773,8.17857922396546,4.350302974031525,34.62125772009034,5.047409820413398,12.900680884597964,33.95620088766013,12.823168782981316,12.647793359039339,-2.108256474374909,21.186647794444966,7.91992120498628,2.578910588241894,15.903166216269442,-8.439293423278228,49.137087801844494,29.617768307284415,0.049512142898831435,-14.014455699326382,40.46043261403041,1.9607727831588904,1.0943266260954108,-12.78487064235311,43.96581819890241,5.569032411625058,-0.45605934809966775,-4.562631233545676,48.173298691347505,0,6.1538454032094325,-37.02171588928444,39.56621104734722,7.202273772920381,-2.1024011330665604,-6.728539472584411,41.3700144336386,2.9477985154446835,14.862168493824662,-4.762620712103252,24.643806530681164,7.839699920712212,-3.9370848046181792,0,26.09196389149441,0.8812585418964638,7.192907127870442,37.33988199306162,7.30054736867321,3.0220835484024198,-45.67466664795733,-4.721880486440798,3.969631306943513,-3.251617785767086,7.346647518249536,-1.3063755621425621,4.53116191422378,-0.4768484004514493,1.9907102454693808,-1.3918595809901906,5.555886142722009,3.249012572319995,10.213151667404723,16.109695201375004,1.8846531619389602,3.919574405160504,-4.099005626264775,-3.534549264390297,-0.28470162483532857,-1.1271930822036278,-33.60632971943215,-0.9570874491247854,0.17286287367493486,-2.098024282910342,-0.82604333372795,-0.833368993913568,1.95145301443061,1.0145753627981011,-6.634741705814732,-17.012452747290805,5.129092500549219,-4.001872159943645,-1.2116902739873479,-16.030046399511065,4.977311220241789,-1.2684003311532182,-4.488190356027372,-43.504404529101336,2.2675108322182673,-1.0474727119660723,-3.1747636617113164,-9.75347006826641,3.0526269849862935,-5.224185451287077,-6.533896425339891,-14.937383588343527,-0.39113448840011533,-4.426777393128393,3.905061895367589,-5.101332241566833,0.9367249186438713,-0.4384986498480188,-4.35953060457637,-9.690000000000001,1.9059027311851466,-1.8891920716018715,-2.998622020761504,-5.017701334094326,0.9622157228249528,0.04311078502110009,20.70091867148323,19.65394701652677,27.900024596383577,11.94571707692397,13.845341572772211,10.452772885887986,38.90356837816523,4.1434612171104535,13.360595342278174,8.597877314785935,10.483329529033258,4.975679045564399,-26.306001981056045,3.336506598126738,4.799626633550606,0.11615884159729724,-8.057644669342572,10.894359506720566,14.959779564461131,4.479709572941861,0.7856434393738132,8.478611992873635,0.7368574654576291,0.15085556428766864,21.305183147320495,9.705419940226943,4.028436787973919,15.21872641318117,-5.957370325861129,-1.8318247177399405,4.462438732692608,-1.166395177475369,1.5291532925797293,-12.509472962453996,34.02543896550088,2.1087859029064058,-0.6717651345988853,-9.129792855035419,34.314921877081275,2.4205044252926626,-10.941997141519483,-26.416272046659525,1.5387081863306715,-1.7800778509362307,-41.90013108711979,-9.703325087971145,2.0797558422231255,-3.4601294587030313,4.657328092637542,-24.524300976899234,5.625791018434486,4.838029829535271,4.652342580992709,-3.732186147271415,7.929152642341188,0,-2.5338328064687192,-11.455416357616183,3.1556138950495507,1.562483018562244,23.788675276206554,-34.95974161967188,0.8874929696537515,0,-1.124520955593722,32.01463244125325,1.3528846320356822,6.577240314696829,5.2171476234584695,0.17767878347131827,6.9487867354589845,1.064300398907207,-47.05358812503985,-1.471692244692008,-4.6032595022993394,-3.574470865785004,-3.3170096109986633,0.0458750646848452,-2.2236845253136135,-1.9848865162771907,-0.6639799768097439,2.2823112522720987,6.801539449128498,-0.1807455208876757,-5.9015359665436655,-1.0687755179262468,1.5630965284005196,0.34373076898037114,-2.0176124796605137,0.492787185154303,3.4923689108453386,0,-2.4409215036604714,-0.3495954834832463,-1.230282459622735,-0.3161811518426393,-3.295292344553432,-9.035564844470562,11.343740832563679,-0.15360095220342723,-3.0253340917194063,-13.562360230022344,-2.114914094205992,-1.0729281786482783,1.8802990390754477,-13.436613126676306,3.1249535068210945,-0.8546964864460019,6.4532639944705075,-5.109570993223038,-0.499378277195782,-0.36207768454241507,-45.508724724150966,-6.427621748228026,2.7944455900822733,-0.06117760012320145,-5.781327157840721,-4.958759364830802,6.0967611236080455,0,-3.2499949116228173,-4.8991689854202045,-1.3386768460520828,-0.1920906652079867,-4.0235758751537265,-20.44962974539079,-1.001656002706489,-0.3457582108093833,-91.55410437108361,40.47463163176485,0,0,-15.303995304164829,44.65877375239566,0,0,-101.34429558662009,36.868887300917145,0,0,-0.06498006563842935,8.278218790660052,0,0,-3.4476775863083073,44.69249829512064,0,0,-1.8560878657546676,11.546486810117475,0,0,-10.213625,6.496370216964697,0,0,3.406383440058958,0,0,0,-0.7507125371797021,-3.939929969580605,30.76683345478653,0,-10.213625,-2.3137422488965487,16.338758720763458,0,-0.5244468338175395,-3.478228658237775,17.379331471418325,0,-0.8789202523890778,-3.8898352029565326,0,0,-0.19262927965752683,-4.555083407487665,19.499778296883058,0,-1.354699618479402,0,0,0,-1.105831478975709,-5.1000000000000005,5.783502570133983,0,0,0,0,0,-0.6620507286315717,24.098397622702816,0,0,-0.9486405211989921,-1.0109846338140618,0.6345366128707794,-0.8100879111946564,-0.13565817679065936,-1.8388089555211953,3.3839258966607675,0,-0.9086964205668631,-0.38997250056766464,1.0618326881151465,-0.6781648980383204,-9.439712844721345,7.31009212706232,0,0,-0.34937004401553795,-0.5267043183850874,-0.16672243203528156,-0.8494787571820915,0,0,0,0,0,0,0,0,-1.0812149648076683,-5.1000000000000005,0.6725079999862085,0,-10.213625,-5.1000000000000005,-0.3051950783093922,-0.6395373723809399,0.6354116153417412,0,0,0,0,0,0,0,-0.6314024287280579,0,0,0,-0.2492186006650716,0,0,0,0,0,0,0,0,0,0,0,-2.0083197383049924,24.140686361729,0,0,-4.747381523581189,37.8487984912912,0,-0.5630730096749329,-1.1,5.225577239498434,0,-0.1,2.657930982321064,0,0,0,-10.213625,5.033526930408749,0,0,-2.8248852274606224,0,0,0,7.5782583408144095,0,0,0,0,0,0,0,-12.614122262096952,-3.7948046157590656,4.217802264792279,0,-5.5121985078667715,-4.751557580274823,0,0,0,0,0,0,-1.1111533831353886,-51.013599458999025,0,0,-10.213625,-3.896061954611937,0.1615248007466258,0,0,0,0,0,0,0,0,0,-6.1000000000000005,0,0,0,-1.3964573759948573,3.5894327246675477,0,0,-0.1783971610439135,-0.6120243426935073,6.534049214417655,-0.2512443794225603,-0.9644966833242997,0,0,0,0,0,0,0,0,2.7737854222440883,0,0,-4.416132564478974,-1.371233827826479,1.2830622318678115,0,0,0,0,0,0,0,0,0,-3.538473967088742,-4.791877180388662,0.8149277600929733,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.3160487682079336,30.17390897105007,-9.289189140502753,9.160891941387575,-3.5785053469064447,41.320018126174034,-4.542510404800462,0.8604496618821621,0.7997398272762393,44.46727576251226,-3.1257995971809716,3.181112633623341,-1.0233087039980806,44.44293095941156,-4.1000000000000005,0,-4.337377541342517,29.117029993774466,-17.346047084620935,-1.1127996659230956,-1.8344266850636162,20.22926684671708,-9.010465857723688,2.358688221074116,0.029757453451923155,35.262956099879894,0,4.7993916088925515,-3.117141363035685,11.08106877758237,-4.1012375,-0.726353776756668,-19.431390747934188,-12.983480163182007,-17.484288261363254,-6.619942739694842,-15.4572257052501,-29.465243698898604,-9.542162965314901,-1.7253872624136792,-4.786253189748258,-9.764836866310873,-8.190553812387714,-9.305752427198005,-6.5614166338442885,-9.180932798409188,-9.931797377234908,-7.334876213907159,-6.7554242846757475,-8.341622524795437,-34.62509378046475,-6.321504210280395,-15.91215755378764,-12.965966539082483,-38.59672484566837,-11.84996968276664,-7.427299822432872,-13.40520096306411,-39.323941605739996,-9.427791306459355,-6.502595371834258,-9.1782652650705,-12.376595389812792,-6.902627468074732,12.376467505631357,37.613661512350575,-17.670632324504435,0,-21.89699564828765,-11.103177674485325,-41.97637994036051,-8.063255076298226,-9.03147790286204,1.7591160133127506,-16.94027792628732,-7.3693730775064505,-3.84336333550588,-6.8371212542952575,-14.16828781794157,-8.232512587041153,-3.477274606759005,12.515612644721044,-4.117247209431641,0,-6.985907536219327,-2.2023888801686544,-8.22000498651532,-4.245240630454441,-7.118765649269221,2.3061978771810763,-4.10050381774258,-2.8366031461731227,-2.384031167825901,-3.944752910320415,-4.1000000000000005,-3.362094761867856,-11.464866303249941,-11.007979078996463,-18.0205714277091,-8.365842198206098,-0.7722127338145821,-4.969141347044824,-4.8147782768011,-0.10084261168547631,-8.56651456998853,-9.690837412100983,-11.1187372964382,-7.251353304279637,-5.823303987655744,-9.699801561078345,-7.948929708238966,-4.136801218282209,-4.526223075674535,-4.948752150513297,-4.101243494129754,-5.05573922801469,0,0,0,0,0,0,0,0,0,0,0,0,-2.059986768785783,34.07427613450718,-12.836949695016846,1.2914726460750752,-0.21255536986103465,35.26919809960856,0,0,-2.1937436292566512,29.87634931674479,-41.219799652983745,-0.059311257857729616,-0.33733505107152306,3.4977753241549854,0,0.009653713420521638,-36.68157491732405,16.13031974636741,0,0.1367313425013053,-3.753846311842586,3.6020609710206277,-6.904861816464526,-1.5743793569635438,-5.157375,9.011606624438397,0,0,-6.787141661230574,-1.7406026100802632,-41.04810987107162,11.628945670723848,-53.33252438514971,-10.166051330003649,-12.483560821355123,-10.378340043818312,-1.036297930483549,-3.7209174234650124,-2.270430516603217,-0.19541923090390703,-5.157375,-9.673652413284263,-7.818561511628198,-10.374282646345854,-3.7249265216520473,-9.353547963018794,-7.959913837749906,-5.622978997881584,-44.37961264468501,-4.592572000374054,-7.335755488662709,-4.010115213944917,-5.157375,-5.10633703490135,-3.8125407587413065,-1.0378340043842569,0,0,0,0,0,0,0,0,-1.1425308540636907,24.765391683838075,0,-0.1,-5.742486790952252,-6.115111866457691,-14.473932815295816,-4.3435807279844925,-5.309234370898866,-4.800266337853789,-11.111,-3.9674182600011307,-5.780478085032543,-1.1735380141092242,-4.1012375,-0.9364014957364546,25.06172587923929,16.906724309053214,0,-0.1,-0.8945447943022433,-1.089770560323921,-4.1000000000000005,-0.42381325177886786,-3.988880910942092,1.1795250662646577,-4.1000000000000005,0,0,0,0,0,-5.807586776465577,-9.690000000000001,-4.101243325799862,-3.8856627903446292,-5.157375,-4.950139766485081,0,0,-6.725540245047956,-5.101414941047324,-4.101249890048233,-1.2707179759608707,0.3127987016781615,-5.1000000000000005,-4.1000000000000005,-2.832846447629312,-3.4927028207677595,0,0,0,0,0,0,0,-5.977438458216209,-5.106853266640539,0,0,-3.612118460592833,-5.158324275236313,-7.792484689367706,-4.912368185354795,-6.0602574045914,23.782061022883934,0,0,-1.0986500609752665,10.445887878117873,0,0,-1.1,3.0383965703748723,-0.9339637124381928,-1.1345807351625656,-4.238689210155921,0,0,0,-1.2890509491807085,5.482902736179452,0,0,-6.105906291192917,0,0,0,-0.3060759992498936,0,0,0,0,0,0,0,-6.054291923016063,-4.384746055714314,-3.49643850853512,-3.6833322078594564,0,-3.8717106850693064,0,0,-1.110221249778308,-5.105891844042067,0,0,0,0,0,0,-1.061309694241942,-4.964062075230102,-4.104312784128502,0,-0.27035732501736476,0,0,0,0,0,0,0,0,0,0,0,-5.5418325996987114,3.6551519636713374,0,-0.1110893173983169,-0.6593442171766932,-0.7341319990427877,0,0,-0.5910817126779002,0,0,0,-6.121840328125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.858869415986975,0,0,0,-0.3354894974974788,0,0,0,0.13724654910663167,0,0,0,0,0,0,0,-5.723230287349043,6.2545706757888055,0,0,-0.2519278226720822,28.384076746669365,0,0,-1.1,-0.24673588427977494,-4.1000000000000005,-0.5669135356134907,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.3289859550409553,0,0,0,-0.05523245394303138,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.5138556990818584,0,0,0,-0.833062187760985,1.1171435734553694,0,0,-5.388287389250401,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2515031369771631,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.689897925507406,31.98343963033881,48.962713393321394,-21.70972514776177,19.917655180806143,30.252862008810983,30.410577685085844,-17.32803757023232,-2.117747502458523,35.83745767332272,26.216308123536454,-21.784123587112706,-0.09966186504300156,44.84189359693072,36.99400479406198,0,34.69094912418022,34.87951984473145,32.05287534353795,-18.702431265737076,0.004132516855903212,32.31922934833885,4.918933059435497,-2.144418364441875,3.467892202080531,16.414047653289835,38.81086479033342,0,1.0768524149137932,36.60685853724785,4.261456271865664,0,11.23134464543401,-6.820439675031479,52.00931670223459,-17.884819467687205,5.5791590990070965,-6.0136810838928385,44.34609723213092,-7.82863150951606,0.20636647051663148,-8.05196232221081,48.98855389849928,-3.364183124648851,-1.3853982969500018,-5.1000000000000005,53.63290139462994,-1.7215868999396784,20.15959585222647,-14.604386563606694,50.79659340931148,-9.53212415012172,2.6413551779628133,-5.111710096697436,50.96381842297043,0,-1.3568862722030488,-5.10099324561525,45.81939217462774,-7.976658473640186,-6.101356154766471,-8.122378813474272,32.81993299393714,0,18.539525906833447,30.537441861803185,0,-16.905246862096604,0.5360427129113763,7.5936539562173895,53.78687736667982,-7.103520589554891,1.146760618299047,9.085862167994804,52.988127286562346,-9.090327280420578,0.9802750601129826,3.45619101229381,56.4184136319552,-5.1000000000000005,-37.05608542786194,9.51581232330508,42.29306930984581,-6.855772104253877,11.364627871690447,1.2893416498742543,52.20848605158329,-9.0733156400238,-3.2302816463989323,-0.11419574968373723,48.20483797292871,-51.200708318755616,-6.104972817065821,-0.027378547839279156,41.50186036385594,0,7.3501112356083205,-4.487271946767939,50.93577920156993,0,7.029799002477235,-5.110167499156464,54.02870648846565,0,-0.0252553006797646,-9.433263569789638,52.78049262010088,-9.163241771319864,3.285429125279001,-4.631635151212787,26.07247456050662,0,2.6163682410482134,0,46.93527941456331,-5.10027039372664,-2.8955091986795405,-5.1000000000000005,30.916149372925574,0,-0.8228359791394372,-5.106178374866246,17.055514270350525,0,-3.3556947663343024,-5.101048274755397,55.07192726602658,-9.690244888851062,20.229015610217015,24.384463150889584,42.315735142004826,-17.825224064028443,3.388086770947929,8.824469618963994,48.96670788376463,-27.97392945133406,2.8515050066827143,2.825301615379046,43.92170537245121,-18.611092564650995,-45.70300110915175,22.023100148402975,0,-2.6271479253530274,14.584392960214048,25.849481652395134,24.17325942091193,-11.190762913130989,-0.26454012300158425,25.321261148909837,55.267433844972395,0,1.6316692067104297,0,46.57831394911646,-16.42227467649477,-0.6441806527960825,17.10011542060706,0,0,28.503985801672865,-22.753254573312752,53.49522029284148,-17.96264480457921,3.964450279110574,-48.06332011361147,56.90802271080089,-5.1000000000000005,24.919944470295892,-5.1000000000000005,49.08801943045471,-17.39206237494913,-0.36947268071405487,-4.887146935716505,21.741075198822912,0,6.823199083398302,0,41.64247182111254,-15.606539630311293,4.471208946939361,-7.239652668377189,16.000669758920274,0,-0.7511871377320936,-9.690000000000001,26.16613470327321,0,0.5273153909962143,0,29.197292826651513,-47.69802252898268,15.295115308575905,33.542707869132514,3.1668588376039257,-11.480204949118882,-0.6327161713488173,-0.1,55.47613420885048,-4.971605006831837,3.4448449905264136,-0.1056300173152017,51.2637385775129,-4.933773376120891,14.320148046294255,0,17.77503307707979,-4.9784949010921835,0.5185343854354854,-0.21990599559575225,32.09662410717273,0,-1.3062135825321155,1.4340075748157233,52.570421374835966,-5.1000000000000005,-0.42884137870494893,6.149010245020445,53.60558051045445,0,-0.007060672182022821,-0.12883362823625252,9.325217711714451,-5.1000000000000005,1.7950794221793442,0,45.51684670046447,0,-0.3192349959452149,-5.1005216907596385,55.55073981594447,0,-1.948970828985789,0,52.54053428690633,-5.1000000000000005,0.9881451089937587,-9.743908723661466,18.727498166089376,0,3.536512389489628,0,22.637400279018983,0,18.946289172453252,-9.697009608948242,16.866683307860136,-5.031354027257373,1.1097252074178667,-5.1000000000000005,6.153425785356087,0,-1.034621960703711,-5.158538949705792,7.0704431018851,0,-15.355097707276027,37.95689699055935,7.99949143807524,-5.18670304225833,-10.213625,30.93589250014586,0,0,-7.606184323109527,25.518348643172246,0,0,-1.1113504518752462,40.735922291562275,0,0,-5.158571012865195,24.795723985162606,0,0,-22.64330364957757,12.452502006293798,0,0,-1.2278001881239513,0,0,0,-0.6835510608017459,4.7357799084735435,0,0,-1.6287544705992325,0,39.39850078686692,0,-10.213625,-2.4540323581258665,0,0,-1.245561387375389,-3.911687177170623,19.61242584022342,-5.110663031923261,-1.2500866970694275,-3.9038718500988057,55.72781924986999,0,-10.213625,-4.573837519608823,17.761295305433286,0,0.2551114653387853,0,0,0,0,0,0,0,0,0,0,0,-6.111601566174439,36.165050173681806,0,0,-1.1,-0.5227701574462218,4.649324042693759,0,-10.213625,2.4163716830743063,0,0,-0.8559741605499158,0,0,0,-1.1056214901126833,3.9483877250266053,0,0,-10.213625,-0.6146861795773789,0,0,-6.1000000000000005,2.79557832233566,0,0,0,0,0,0,-10.213625,-1.868548107457378,10.5964294346921,0,-6.1055299052305365,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.880836048519573,0,0,-1.1,0,0,0,0,0,0,0,0,0,0,0,-7.930212319185538,35.49602706142348,2.5529456339933527,0,-1.1111891703579475,-0.15546621705856598,5.434542297244982,0,-0.4944660896694779,6.347180410900199,0,0,2.378168586819907,0,0,0,-10.213625,14.493114141965528,0,0,0,0,0,-5.108041654523189,-10.213625,3.670548011218755,0,0,-10.213625,0.5252448062711444,0,0,-1.1108127396943592,-5.1000000000000005,14.48981584684288,0,-1.7379018005809321,-4.141975203539652,0,0,0,0,0,0,-1.72266111469295,-5.105462796060173,0,0,0,0,0,0,0,0,0,0,-5.997139820976127,0,0,0,0,0,0,0,0.7171611583154957,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1054998063229737,2.794909058424719,0,0,-0.994689099681912,-0.1,0,0,0,0,0,0,-6.114224063764646,-0.1,5.009065170249855,0,0,0,0,0,0,0,0,0,-1.1104854957701904,-5.101730222975196,0,0,0,0,0,0,0,0,0,0,-1.528940184241603,0,0,0,0,0,0,0,0,0,0,0,-1.4842673702232358,44.72421900099403,-3.7637949305604277,-8.812927084835204,-2.7734874813892345,45.3855545148967,-3.396914715488949,-5.10123156949956,5.441508982974911,44.78953576275069,-2.9153270296400913,-6.88040527309035,-0.11317668739674805,44.609559361814284,-0.4778041239586498,0,-0.25584384140238453,42.76916754291747,-2.062450729344677,-2.9991777935353077,-0.07043895095797512,32.27995637114738,0,0,-2.3495423404516362,43.33014904675694,-2.529895288265232,-5.038213698066793,8.233734136912624,9.746845684099988,0,-22.904052730900602,-81.21848229336675,-48.747772547599396,-7.552482241026165,-37.223925535821834,-10.978663423343614,-15.537362730716263,-12.170816967167262,-27.246099080346767,-10.900698571282595,-11.344391564815508,-10.708244525402227,-9.889805310605128,-0.9845594977608919,-5.738841726065412,-2.055050787148652,-5.357010601923806,-10.921790918609299,-12.941523997437994,-8.26884058296484,-14.25056611012942,-0.7301834700461827,-5.105220956217674,-0.47901307292140305,-5.101326077696605,-4.951008237002019,-13.822019746049424,-7.697469467294112,-5.1000000000000005,-7.314019448325495,-5.1000000000000005,-7.774759340425511,-5.1000000000000005,1.3396136719650253,36.31516255667747,0,-9.830808842342854,-16.30153688724174,-11.119986718021426,-11.082661328888005,-17.283237408943105,-4.669122126491748,-0.6462127346509408,-14.092126809839128,-9.612689201168973,-8.736050361807852,-7.852928778507783,-4.947615728690168,-9.655039460845328,-2.4826088453683393,15.9394700526002,-4.1000000000000005,-9.458648044723018,-9.900978156070758,-5.939137923371251,-7.080150919755489,-9.671190393128036,-54.83600883344172,-5.037848519307998,-11.68273919623176,-13.63773255404464,-6.107545120691766,-5.313949871279892,-7.791324662792567,-5.092466868655228,-13.957024842306208,-9.944752022115631,-6.356819196751546,-9.765410830631623,-1.0221702982301348,-5.1068625,-0.52221294494789,0,-2.6795289906763164,-5.1000000000000005,-5.432884638353292,-5.1000000000000005,-1.1668742914353571,-9.727989095654884,-2.9398326011417364,-5.1000000000000005,-5.157375,-5.10664692447153,-0.03183237490145246,-5.028755133695759,-0.8197721854432919,-5.107004579065064,-4.1000000000000005,-5.1000000000000005,-0.45524630486337164,-5.106726089314228,0,0,-0.6165586286518887,-5.1000000000000005,-4.102214428913377,0,-0.08932803664960959,33.632793008863366,-4.668319548491382,0,-2.758398208561461,38.55528694432494,0,-5.102084230921419,-0.3989912593783583,4.627703814840938,-3.9371851264033135,-9.463743265651019,-0.9605431765127381,1.13061547994754,-4.1000000000000005,-5.1000000000000005,1.0423113741887242,8.721786763518143,-4.1000000000000005,-13.864631458485501,-0.32894214546166495,3.5177521161874297,-4.021116974034025,0,-6.022846977944027,7.023600231624581,-4.1000000000000005,-5.100269125471318,-3.3131795924298366,-0.5820653801347185,-3.917277589145975,0,-4.1928127907217885,-6.998368382474526,-4.542378642738257,-5.1000000000000005,-4.2615675178900165,-4.49486023196161,4.365708329718099,-5.1000000000000005,-5.221139412966115,-7.374381273042429,-7.321110934562688,-9.69934970564949,-0.7780438483793722,-5.105601979944027,0.3808148313969433,0,-6.0382214778028676,-3.262730373321346,-0.6416254471460104,-5.123191999301007,-0.8153672232767963,-5.10456000497788,0,0,0,0,0,0,-0.8207614888898495,-5.1000000000000005,-4.1012449994576965,-5.104735950259503,-2.773067602571319,18.694634609933416,-4.101250594064995,-50.93616810521916,-20.375363644812385,-11.68961151761117,-41.05767769906084,-24.578197145556864,-0.8155081410000544,2.629273086207003,-4.106869142387665,-5.1068625,-3.5766377180231537,-0.6229637476509309,-4.1000000000000005,-5.127351002052393,-4.151838313997116,2.9811508568292844,-4.1000000000000005,-5.1000000000000005,-0.383821563605387,-0.5674330164958266,-4.1000000000000005,-5.107026410551746,-5.157375,1.0291058540212232,0,0,-5.56731042815418,-0.1275819062077849,-4.1000000000000005,-5.106010521223806,-6.0552273857012215,-4.737681415380347,-3.9420801739009015,-5.100414548066539,-5.157375,-5.1068611147113785,-7.483769123070959,-9.528937719109631,-1.0327789008718307,-4.908640204322805,-2.9874980533900732,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.157375,-5.1000000000000005,0,0,-1.102941332324958,-5.158615808998866,-3.904273408077178,0,-5.535290419664285,20.69420325446891,0,0,-10.213625,4.160366089567772,0,0,-6.034737457592335,11.033741287184045,0,0,-1.1057570249751518,6.869742822872006,0,0,-6.875035775077108,6.11062773015672,-0.45842641086689967,0,-4.725275275079453,0,0,0,-10.213625,0.9685789314574555,-0.9832087183632002,0,0,0,0,0,-9.754426457864405,-3.495455864795481,0,0,0,0,0,0,0,0,0,0,-10.213625,-51.13579910546257,0,0,-1.2611067845795068,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,3.657901874578474,0,0,-0.8493959400707798,-7.378042667373828,0,0,-10.213625,-0.5123835680740038,0,0,0,0,0,0,-99.1526135348092,3.4203213471564653,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1057836180038725,-5.1000000000000005,0.039988444243647336,0,0,0,0,0,0,0,0,0,-1.1053607986924223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1105665344753672,0,0,0,-10.213625,1.6010395284779049,0,0,-11.607885538076165,0,0,0,0,0,0,0,-10.213625,0.07185491435935498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.817053092862763,0.5482653800248137,0,0,0,0,0,-10.213625,-4.4946445832968465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.24260103304455766,0,0,0,0,0,0,0,1.4225910317986736,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23.20276407070827,38.77387262735054,19.939356973188982,-15.392921701010325,5.639206322676241,43.192732682066534,7.1213489165849015,-13.112456024812086,1.2938568752516666,42.75863200984827,4.375463863591786,-8.818418440696696,-0.09515302977055076,44.14451074795462,4.275549899034299,0,8.394146564457841,39.5575565438392,14.417545399740536,-9.72888933089927,7.293258737622736,44.87634505844244,0,0,5.542279973537437,6.24021909570282,12.847052977290415,-4.464551802730664,13.140222812328417,0,24.06705030107537,0,7.902523232282544,-5.1000000000000005,43.371599863309164,-4.447030222226127,0.07244991936293002,-6.470378883462274,35.50516853358879,0,2.4066340301285316,-4.844657604034979,44.256553079384126,0,2.457411382229112,-5.1000000000000005,32.273938986788274,0,1.5425257907743812,-5.055588641267289,38.53191476337211,0,3.2347644787343084,-5.1000000000000005,26.005432951926707,0,-3.031079392957582,-5.1006203346229215,17.165381739818734,0,2.7924220755704314,0,7.5266661299631235,0,7.754856092393449,33.34247113080714,0.5733937905970689,-13.653440033242127,-7.166164942775791,-2.8872426670597786,3.876733625347556,-9.567809125781757,-1.3605277206522683,0.8321440584152743,4.681253640770621,-5.104779599857757,-0.7449225744895558,-2.5721886430951,6.77977178580444,-13.456834537835809,0.67834238809789,29.027400079154475,0.3368697044703588,-5.087137690055573,-11.545986489679787,-6.648770881586751,-5.111577451016937,-17.72965659241235,-3.4239016244422,-0.6108321133147688,1.1881922810087062,-13.092697862896552,-2.7197793311423677,0.0567283413333768,1.0320402357099774,0,12.332719431717694,-15.884229982659196,1.8184007664897983,-9.58554304117698,-1.0232532543136246,-5.1000000000000005,9.514039368793226,0,-1.7113282199905353,-13.420360494298082,3.174362905915825,0,-3.217988623713632,0,0.3607505942765131,0,-4.262211576513696,-46.0349840120365,5.305001804432363,-5.1000000000000005,-1.302440548866275,-5.068212222866337,0.8321682521364355,-5.106412124604562,-0.19910766710217961,-3.372112319932457,1.7026814960700896,0,-3.1085127583849426,-5.1000000000000005,0.43196753920961184,-9.596384099614394,4.578875882578862,34.260530946208526,3.4528621762300737,-5.1000000000000005,-3.8035240942965944,34.787375171234096,0,0,-2.772809904868037,11.379381607566414,9.208777932297926,-23.49508040055651,13.377434159635808,1.433946306225037,0.8509152976640384,0,2.101308352605523,17.62037875262892,0,-13.342169489661408,-0.45081808023829795,30.132524636018793,1.2613908969124294,-4.823542993434392,12.07348703268205,7.409680503505594,0,-48.925011994879824,25.041684335166238,0.18770401144045556,0.8779427072739838,0,1.3537930935907962,-5.1000000000000005,16.036635130544045,0,-0.8560138809491131,-5.152619186354946,19.51003959835804,-9.819945283729474,-3.0418419329619653,-4.608566534582126,2.0074020115392353,0,10.763877721402405,-5.1000000000000005,0,0,13.842590710336589,0,0.934855996138738,-5.110087509896617,17.750638920329532,-48.978284177427895,0,0,-1.9411306813104177,-5.1000000000000005,1.6489873074632326,0,0,0,0,0,0.41431198754985576,30.779480907053795,0,-5.1000000000000005,-1.6477492043827842,-1.093634169892474,-3.0112625824481114,-45.73013831907825,0.22811516760870987,8.683786285586216,0,0,-6.306255433490439,0,-0.1768063089062876,-4.601737453614613,-3.455152367006039,-0.10820329530242474,0.8630672480675892,-5.1000000000000005,0,0,0,0,-1.0232236262341918,-0.1,4.170986351767487,0,-3.371183835469986,-0.1,0,-4.436273964082106,-5.157375,-8.559879654097271,3.797652520507208,0,-0.7305121831648198,-51.23208040596579,-0.3711992117438896,-5.117563659885728,0,0,0,0,10.699299252065408,0,0.23140185037580674,0,0,0,0,0,7.819967032969631,0,0,0,0,0,0,0,-0.0862001994531344,-9.715350088533915,0.2148869110220817,-9.69089158619099,-10.213625,19.079031343478857,0,0,-3.608659763829034,14.845352076025009,0,0,-5.8790355153981375,11.331359257619097,0,0,0,0,0,0,-10.213625,15.900835460142785,0,0,-2.320872465810797,0,0,0,0,0,0,0,0,0,0,0,-0.28397664265406264,-2.846669576750979,8.950898546444161,0,-1.1172143463236686,-4.625460248130906,4.160499711480916,0,-10.213625,-5.1017339554636,4.834512793198244,0,0,0,0,0,-10.213625,-2.845051708229464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.101259627508746,-0.1,8.72390080413723,-5.117225987544954,-0.996730356132051,-0.1,-0.46738808642783386,0,-1.1,-0.1616002928915014,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,-0.1,0,0,-9.148186293170486,-0.12031147101465343,1.270558174295814,0,-10.213625,-0.11532255126612459,0,0,-1.2318747687023084,-5.1000000000000005,0.5870694989174389,0,0,0,0,0,-10.213625,-5.107936914101607,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2560023490722374,16.366811531245986,0,0,-1.110731628951891,3.924608523696267,0,0,-20.74212327195095,1.9137245299450356,0,0,2.610027732110271,0,0,0,-0.5263473358451314,0.005437446459857754,0,0,0.7424690583334801,0,0,0,8.322962983218893,0,0,0,2.3588179380130554,0,0,0,-10.213625,-1.5300504776537922,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.1734944655484454,0,0,0,0,0,0,0,-1.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.0935303253106805,41.18466748664953,-8.29556504570394,0,-1.8239716304511604,37.46061728763241,0,-9.55727009773032,-0.2865961043043379,37.50421791283352,0,0,-0.48728403495017214,12.202957421804554,0,0,0.6829442524723578,28.86795532662481,0,-5.1000000000000005,-3.2486754027310996,0,0,0,-1.6838733471373084,8.87750003080845,-4.07716342314263,-4.94244359441718,-3.159981710573646,-0.1,-4.101051991493202,-9.693626609943545,-56.41964319888294,-9.303999658546424,-8.039549715457852,-9.793528444999392,-3.19292213664294,-5.213004374564326,-4.195236790200635,-9.972119907020073,-0.6059903725273728,-5.101158017140554,-0.4250128488052248,0,-4.027736718069338,-4.5845306866542535,-7.4104800657368335,-5.2301348566270836,-0.4770252484212838,-4.254337193426453,0,0,-0.757807820696338,-5.103353680594606,-2.429851765296882,0,-5.157375,-5.1068625,-7.791255679738087,-5.101405908911611,0,0,0,0,-0.728280887629317,24.74844393480598,0,0,-9.88458932448949,-7.69256739933743,-41.74517108578299,-16.6219935747786,-0.8799088918148339,-5.738246765030054,-4.09662569706668,0,-3.4544886923839897,-3.888336977375553,-4.101673142874196,-4.917427487682253,-3.137627858084645,3.0795251263688637,0,0,-9.628848571789954,-3.811073060740396,-7.9860232924358225,-9.690000000000001,-0.8553636839037488,-0.014622990220171318,0,0,0,0,0,0,-0.6009903001002036,-3.0820059854827657,-4.468744483259541,0,-11.212072208936759,-13.938375749788726,-11.595290412420205,-51.00915186212782,0,0,0,0,0,0,0,0,-5.4279318838691974,-9.485663999290923,-7.791250204268938,-51.00149421156682,0,0,0,0,0,0,0,0,0,0,0,0,-7.797543224432567,27.784415446374076,0,-13.592253962962655,-0.6144107339848035,19.410594104018283,0,0,-2.7649272851664644,1.0756405929906485,-4.119834327341002,-5.1000000000000005,-2.3261859643801506,1.2166058549021395,0,0,0.7140804392890061,4.280110184460288,0,0,18.14995926117281,0,0,0,7.1729687240776085,0,0,0,0,0,0,0,-5.157375,-4.909837698334621,-4.530416338750123,-5.1000000000000005,0,0,0,0,0,0,0,0,-0.6205376900826196,-5.1000000000000005,-4.103301179549666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.088798763247233,34.017783636721205,0,0,-0.786801487102168,0,0,0,-5.589667739166371,2.4445431094256245,-4.1000000000000005,-5.1000000000000005,0,0,0,0,0,0,0,0,-0.8622807792916058,-0.1,-4.10096370147224,0,-0.6233686401200906,-0.10833067012358114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9309123293347498,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,0,0,0,-5.208389022268396,4.062551742893851,0,0,0,0,0,0,0,0,0,0,20.60717169184982,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.495926566523998,-2.5825113912918862,0,0,-1.5880399072426519,-5.103986906595911,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.995790056752632,0,0,0,0,0,0,0,-6.077165516414035,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.1048245999590165,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,2.7158513070384975,0,0,0,-102.14952215530631,-0.030224984199304784,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.111924239673577,-0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,3.144269011673247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.3814425585808697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32.80479315822738,46.22006684844637,49.28748864212741,32.98855788484547,29.192129241290175,40.11725551674492,42.365335746525226,37.4378531787869,13.927356044977147,43.815693627637685,40.295913235050264,32.8724070240126,28.12336619490093,46.501165793794925,35.208543438506375,37.269151385873,32.57036469259758,41.58939146323963,46.593956090543855,39.03471454694906,-4.978590087457112,33.866357602890645,28.952616557033885,38.46083957460395,32.93344563860414,38.935806174302996,44.46200205638298,34.254976411727114,18.666616944874903,31.96205734409093,24.629252761205795,33.79992034730017,32.00217035087141,-8.032303539512744,34.124850424695516,46.9659022327384,31.356592712297033,-11.369425876622675,52.92216709065827,40.05097601549763,33.58815313974873,-6.494021134797801,44.71996557573189,46.87962516066902,20.622809844537098,-6.830397689097164,49.79644636339744,40.95931701888276,27.01290675568575,-11.167245639832469,36.728844967790415,46.35883199092809,31.764292630166786,-7.324823092009004,48.7725756874446,28.226832127019897,29.200987400249737,-8.68612689809771,49.54653227795179,31.886031823583156,-15.69311520462631,-10.553285174937745,50.75033804188476,25.32607091830866,30.32045737259841,39.52623441044768,52.71323716928431,40.500639989744876,24.023570293681257,33.69855647594099,55.469071192341474,41.620652953507445,24.333757169030424,35.2169027826965,55.96819551010844,37.92655984876336,34.35858471618963,38.55143727374681,53.092203113534794,35.05882851654704,23.755984125084115,36.34679549625753,54.909996215986396,30.878178352507035,13.325945491004987,28.344294609875114,56.04608226357806,34.90374192059521,21.460230331183915,30.271688116595406,51.56313050262642,36.370460067703426,21.122594735592116,38.419307437300326,52.13704069781038,29.671127806690972,23.976195068105607,-11.806666088574014,52.80437980297772,27.87326607097984,23.406678920348302,-13.116854127314788,30.628303895399153,33.57390019652911,28.539415232629075,-13.883628264404726,54.681725728161254,38.590348039114446,22.466800221209922,-10.883038131857003,53.89826284983947,19.481120195480933,27.760050817961638,-12.327138640191784,49.771813462914295,24.135642770882093,22.21629760884786,-12.239637449457108,54.20486470391934,39.17919086918907,33.80795476087389,-12.818413516707537,53.65699544913744,26.060687546433197,-3.4084402172848636,-4.848889838588356,54.15616144946697,16.382485198107627,-17.420662637926387,39.129505077589926,39.945472052679,33.84020616381327,28.73947552028198,32.90489477982601,31.318763743800616,33.7242649410029,29.14329783361608,34.74093787323856,31.802142702389606,28.669521130802575,26.93352697086179,32.07526453876628,27.044322530189717,44.67300293437814,34.94211779108544,32.22898223833702,26.947854090312216,26.94638197775439,23.19066636144573,32.460382144784134,26.81550026287954,35.59242254653998,19.864543332923475,35.66340897017578,51.72817001527044,41.040872269265435,22.07535010008564,22.817379185723155,24.447599285061763,37.655868967138446,21.648303541968566,-11.379371945963845,21.336692468638223,26.796204147497185,20.618630458963114,-9.361937824707695,25.530842929546118,30.001983313155733,26.830149735053396,-17.403198325049573,28.596612051945442,35.57667426916202,24.289618084332744,-15.997366503395211,52.349186694138176,20.375793758660535,29.927395923934828,-17.786539134605,55.54892905800716,24.115105244914304,16.89995714792259,-25.149827523024527,10.945207316620213,29.26425042488028,12.419634355006615,-15.259801572434839,45.937048805284476,28.066709313791016,2.369313030811795,-8.71708415306568,49.62125191079133,4.265555755458667,24.79270304081758,34.64883779794472,52.69157471412238,29.018273544543426,18.411522426419886,26.66531928758897,51.413181539659,27.00147060634263,6.8366474451340995,20.641428245296094,25.182304042679764,32.90395097484064,27.317253137702743,21.92148579834796,51.70514693190227,24.736504979832883,20.08698199868143,22.53626153367526,24.503296371560605,30.673569945836036,14.87577474810227,19.448255934966994,13.223990767765052,25.088466103351966,7.298756176138527,18.65664633899752,19.410787514999882,30.282492784363747,-1.1008225823528899,9.023177361384105,50.467606379928704,41.86733528269433,15.603558339650753,-17.30253347211198,16.98562398457254,23.27638078880178,25.367964809466933,-15.650474567500982,46.94121908998481,24.540536019331146,6.548078757472819,-16.89294484635722,19.102194007291317,25.926635800739813,8.716077243058866,-9.798229434779541,54.11732074940937,2.780097884880232,-19.833272331354344,-13.250734668122286,53.318705440942345,36.42935881867553,-0.1466640904650834,-7.593876662783222,59.01443854177386,10.229366208579387,3.5072793265596807,-5.1011171511117634,53.56231891826153,5.989757023250149,-0.8726238901509977,-37.47580715144738,42.86466941188609,24.957941395932995,-5.283002962086475,46.09253293697895,38.62207076622026,33.8487738255364,6.191954613229342,45.44018230497727,29.73352841409112,22.079652808892156,1.2360439137099046,44.11904826399131,29.1613721973563,34.08895445049266,5.184395247564813,43.97035272931243,5.5690588621100785,4.712987967256288,17.417943243046352,38.70285046982265,22.353245307962474,28.670018580052115,-12.32207475544891,41.919490606189065,10.89365780644366,9.777545429097485,1.4336646509560926,41.049049447657914,10.492432617809747,43.39863553690559,-1.1012375,39.21746518344525,0,0,-13.145691770420019,-5.880333683313647,32.43701491033424,44.76945066943309,-2.267567406017876,-4.354659682534455,52.016402775262435,17.939842454977548,1.4606700847807166,-5.902567323430912,49.83964217442414,8.607717522434994,2.7375131012756277,0,48.64994494513228,0,-28.08368243764585,-4.502369192814196,42.49113996840961,46.20576378746293,-15.97241012205577,-9.327048316349403,50.39451558639223,0,-1.111101169579108,-5.106983444026333,48.97315945744095,4.842704700219728,-102.18300456905673,-50.67375553890047,50.32463920329771,0,-69.19776183914556,37.076215651160446,4.221983092892124,21.287495344941753,-28.48457371457291,-1.4638332124527649,54.64632506364655,10.249116645042044,-4.960397368291689,1.3682017108543023,50.1616564946091,27.620097929035783,-14.672042555177704,-1.127097636318208,51.839366404958376,4.890531735554951,-7.086797652703481,1.44535515621114,4.998157720219338,42.56526043572639,-5.4249915236724515,-0.5103754412961893,52.95940931228706,4.166582233141287,-2.931451239932027,6.0327543496152805,0,43.85772693066229,0,0,52.28339690740492,0,-6.773464377668596,-7.422139001811761,48.514684860782495,4.077216445786529,-1.1,-9.814378143437853,36.33561521241041,0,-0.36483041062242305,-5.389007424643814,52.35178422872813,0,-1.722960743180101,0,37.16611691214092,0,1.8756304454944237,-8.115203779602998,47.747286056602704,0,-2.197652518323085,-11.427936418029217,56.513478601069735,0,-97.13260124867878,-5.693624101165407,53.25198842051519,0,-1.105848228225764,-5.216782245184782,24.224052058525757,0,14.34507905550149,40.25749469200244,21.05339834271584,37.12508907197033,3.6047488004614756,13.941276941100806,49.843770192857605,13.915018623177577,2.624257596167449,14.324923533644156,16.927293529144517,39.6223789836125,-3.2773942932103735,30.510266058933766,3.8121188932384475,36.24405744404873,-0.5791787008236546,35.858453471711165,12.476207231274405,4.741386535164833,-98.91904337702063,32.08550145483315,6.860483674675796,0,2.304632529066366,26.797147595304523,0,3.800079869789208,25.461955591826428,33.847699205783236,5.3124775568789575,0,-1.0951309134018072,-4.894871455177549,47.51073720814681,14.327483784676193,-6.209720778039893,-3.584448724628288,49.57604557651549,4.356710402434009,-13.913801771148563,-8.94191987676075,52.614217543104466,0,-0.8862810201615594,-5.063343555484856,26.101613095642087,0,-1.0711869495980693,-5.872649934937741,49.52808116058833,0,-8.573918006109755,-3.24387003754698,35.52616119983597,0,-1.6075605504099522,-6.197167995659519,30.149644726580235,0,17.762948550675727,0,0,0,-9.17947818095022,34.14422872323482,5.197013497996295,8.288611478612424,-0.054343225666114936,-0.16705576483115667,47.783702676674416,6.576818459405332,-1.1171340405252494,-0.1,36.20251843620228,4.150902893246449,-0.9800909620264671,-0.6998203994244334,35.98881791999413,0,-9.243119738427826,0.48562382921761005,47.53715279238532,4.0888145182433755,-1.8070524790382048,-1.6981053369492811,38.96972686404643,3.1208776407605883,-10.213625,-0.19585803033005772,53.69802814053769,0,-6.746059472370852,-0.8737423880124443,21.335767661778213,0,-2.820708444743875,-6.035720701668396,38.762093524136404,4.094348850679004,0.4713476359927755,-10.317951597219121,39.99519656480068,0,-6.125730163143744,-5.319523359928717,31.153838353632086,0,-8.906484835876025,-5.601292854460133,0,0,-10.213625,-4.671790998600467,33.69085189880897,0,-4.815915878237397,-5.106258798440219,9.65997637660617,0,-10.213625,-5.1000000000000005,6.702475195102231,0,-1.1109754433588808,-10.214874847373778,21.26409532880365,0,28.228414384690126,37.53800840614987,-1.3325537028465078,43.9918180251984,27.40678902661783,42.73126784713785,-1.9899830020719447,33.29805826613456,16.005550712618742,47.79436880746321,-3.6800240438432943,38.26353214621456,30.85362325482228,32.49230757212294,-4.618927430199374,38.220662862127966,25.48150259817082,27.378715512148972,-5.235934785380252,43.323273567998314,22.353100158085734,29.13832064328113,-3.158605087084135,37.09225694145819,17.93619657573418,30.598860701018,-8.319522101866227,45.108913975116614,13.583161585918045,17.46967401477971,-5.614973104978429,42.61341351035239,15.971723586788077,-13.731485386564504,-0.06769565572100855,47.98696228095105,14.15011204002461,-4.228172999715527,0.15238387276141707,39.857385121787765,-25.67431085778873,-4.807133942833914,-3.773994865661018,44.32228745230281,4.869771236606382,-19.566906089610306,-2.992186323770498,38.79758837203205,11.589507711423613,-7.743965984470231,-5.027266139592277,43.88168806823825,4.501973838171578,-6.861976058995482,-3.707266753880359,41.57862668339534,7.218180806297292,-8.18678322514927,-7.875334495050409,45.98249795825308,0.42978296950704875,-4.137644663362592,-7.791238892187501,44.346313534205514,21.93758041816141,38.35800814112323,-1.3387975784609407,24.424737874314378,23.692341002162607,27.884324307585587,0.4809884763743199,45.98665503898943,-22.792283461294275,27.589999694967478,-3.239124075947495,44.74453913330288,19.3931796430711,17.357399620327218,-8.38797073340821,43.55097691598397,8.655010569056746,28.186163147836837,3.3892052552091867,42.992419631928634,13.184688616137686,18.974074302412824,5.207434054325852,39.91184998014011,14.270455800887808,14.092328597559954,-7.454084957919072,35.92732961052852,14.52600587983758,18.802992822623487,-34.10201417392893,46.823029748607944,19.227079909931565,-14.654569860646117,-2.0928191906452245,45.16316972446017,11.599900542252065,-18.525191709285785,-3.246169832920861,43.73944674820035,12.16201488899228,-11.251219914320743,-5.065146067380994,45.189988555250764,2.5483649273775413,-3.176196654303148,-4.365300833100324,44.50683417837062,6.060465320963196,-16.25667727208786,-7.017556537358556,44.78177646403075,-1.023215773620986,-7.987592972344314,-2.5778073095609595,38.11550225330985,3.7707052198289404,-6.536891381045216,-8.087644368174177,44.86110399960487,0.4577853967738057,-5.101247468451579,-3.7990333629862927,41.58117584322462,21.605889236397104,29.1027844815128,-8.154123924136202,48.8895015173595,16.051758250550257,21.50596514820788,-8.499428807916459,46.49140923662166,-22.498087573554926,20.24583657741437,-2.7077953799490517,46.89323127187403,14.98473569059472,23.1477405181955,-6.713098175657351,34.63184063370163,3.92387053630011,16.54947086859586,-20.14158711888948,45.31934875537339,18.218796916464562,17.263541106322723,-23.542382201251996,44.086984862706764,7.257134726635109,23.466527807367594,-13.316688789462608,36.63603618251919,-2.7944097092651465,9.534713029071412,-4.763590804207283,37.3389501771603,14.553369666488102,-19.003070542388233,1.8836284780748314,24.21256907526205,12.587513015787643,-12.099078639964588,-7.809721819026403,35.46362875699451,-2.1253322312233687,-13.161295882684755,-13.632637357341297,39.86084253198453,-0.018442186418537964,-5.117105359701626,-2.2265084059943625,39.01838485182798,2.7266963727565297,-7.858885990683154,1.8705341951983288,26.509229837243836,3.161849113766068,-12.447497026067373,-4.3770075090664955,37.51460374142627,0.7949592667686334,-6.749349650905096,-8.05237442702726,30.990209666098632,-0.3336800839681695,-13.519895524006351,-7.132548790612109,34.82050329339628,13.857172613984561,20.997402214657203,-8.37556960934878,26.411369342512753,14.176720157413621,15.19359036751341,-13.294989635228477,22.80797384090055,13.959486387774673,14.406991981647163,-8.492196695373117,36.30328845906474,4.636509715354741,5.66587590858985,1.7395996554484723,30.12809569482622,-11.561691641560781,17.208914845962443,-11.28297210177147,21.78937398131078,-27.678631456101648,4.187453483452598,-8.424496753498271,37.08178884440859,0.20352538889474436,2.214846891891562,-3.151568677505913,43.046572236555235,-0.15409776041501633,-2.142447755441016,-4.101039058654961,44.163124810507476,5.672265758232193,-5.932799456098202,-5.6218832631295435,41.17683887034038,16.4778371849523,-10.759092580517507,-3.143940492064005,41.558900631727035,2.6824462622450294,-7.939574699588958,-7.3352168088862,39.85820221935454,1.694125711994947,-4.943356107475721,-8.888181266804901,35.88817386982103,4.445242646173693,-15.807582273871454,-7.9890137254742335,29.30890020392982,-7.540694447086829,-9.702072100301887,-3.2194155412874803,44.9793657529004,-2.779227051474446,-5.1000000000000005,-11.112604079787475,40.42796246639679,-3.6996188688146656,-9.658753198821099,-7.72541982234105,36.700852811585534,-6.390423686545899,44.289656245686174,-4.77427777805241,23.013069325950802,-15.280797464320052,43.54166370004898,-0.2906724785309765,9.969623008715264,1.2581411760548886,44.09398375759418,-0.5353689638020336,8.95141296730445,-7.983599081359194,43.64354517970668,-2.7579262087365928,4.129648795794174,-4.734602976404341,37.348464564634426,0,5.8902603818407515,-1.1141561332010772,42.60975433957467,-0.49829991448913663,0,0.684519300822416,39.60453018845654,-1.0203300497027374,0,-1.522374386890351,41.10695658866592,-4.101247165093089,0,-11.698712883935013,-5.1000000000000005,-3.9992359805949027,42.597249903573754,-6.118401650639247,-5.101244198072209,-3.6629646790781694,40.49498137721818,-1.104767114615371,-2.9772242768576667,-0.7382621889999819,33.30147606724327,-0.970426158825497,-4.321831285234814,-0.5056526956181777,17.719134350612013,-0.6326006170116449,-5.099048464628818,-4.771742919557823,41.962548553051995,12.902674512072933,0,0,0,-1.1050965742150218,-5.1665163309276165,-4.1000000000000005,15.678107126412032,-4.424773853090206,0,0,0,-1.0911528315725885,38.261563211530856,0,8.124849885450363,1.4042526499133765,-1.1157489119174266,-4.076944465066118,44.66782151600204,-0.9726129103289103,-0.1,-6.495053456876121,44.19008320076554,-0.023396335222512655,-1.1094068067620824,-3.062954477035048,15.951463112794483,-5.545021672582724,24.651253579978075,0,8.542464862757416,-0.9040793195818841,-0.18292433025184895,-1.2412491491669504,43.97574102122729,-3.0356636726330155,3.127819087210943,0,0,-1.106521471129857,-0.92163394819042,-1.1609449505842353,0,-7.266461085325572,-5.107038736060931,-4.106678810875425,44.415515208038734,-1.105544678701995,-5.167444175566955,0.10051766748781715,3.143338206589963,-1.1107618313917096,-5.077610069870646,-2.6949729284604973,44.84716568105685,-9.805189394458482,-52.3822543482887,-0.3633182385190452,4.468581897296894,-0.9642972780492814,-5.0879280515452825,-0.21952168710596567,20.328129300825672,-6.184523909362742,-5.204306377707351,0,0,-10.213625,0,-2.7625933497681445,0,-1.1074560107989482,0,0,0,-5.245901852234571,34.05834176093816,0,8.20490709838594,-1.1143367790473564,-0.1,-3.8869532869681254,38.46509261519814,0,10.413582353326872,0.6975236984418689,28.863115326970554,-0.7772944180408834,-0.00567971010688101,2.757245262494492,40.46984562983093,-7.015432126952213,15.0035253923909,0.6231528647286986,11.568034895766147,-1.8027075463415159,22.823557365747195,0,0,-3.7461569513606015,6.086655788376443,0,0,-0.5715463777193968,-0.1400864638659281,-4.102969828719989,0,-1.0940221346341168,-5.908330413375226,-3.7572165618000284,42.62641704453954,-1.1056914332367103,-51.01237499999996,-1.1013778676798562,22.87152261000116,-10.213625,-5.07846271249398,1.5550064726161084,0,3.2648066075551894,0,0,0,-6.1000000000000005,-4.870456540254174,-1.6970705000579664,14.503543669411943,-6.056358583663228,-4.928504808660489,-0.07836864093484835,7.923117264923574,-1.1053539464270046,-4.075688600038811,0.39579125363693923,0,-6.101238102335941,-5.032941863031119,-0.9498775660317197,4.257277947674193,-14.572436471284782,-0.1,-4.106944896698577,36.291387402495985,-10.213625,-0.1980951751521196,-2.3251950112483515,43.07087847096331,-1.1076645693625657,8.367083826007693,0,0,-9.979419675346119,-2.123336972166537,-30.309043440057504,0,-9.633459293631569,8.339974567790492,0,0,-10.213625,-1.7818784316113292,-3.6412024634770357,4.532800288332601,-0.7777851635941057,-0.8664342457926797,-3.622689008888169,5.269174200322133,-10.213625,-0.3610389283791721,-3.6387010166788425,7.927770556448477,-61.06260782225869,-5.1012559294305415,-3.4198858510899472,4.9797960243034325,-1.5927533041932826,-54.33047687338731,-3.0018550854359844,0,-0.6772015306597426,-5.120528156140105,-4.106869837751635,4.04661943696058,0,0,0,0,2.698371377498633,0,0,0,0,0,0,0,-1.1046125,-5.1000000000000005,0,0,-1.1172862267668422,-10.214881947005113,-4.1000000000000005,5.083017366991225,29.08622689440364,41.54559857390016,31.890713036376727,38.84031169285784,24.139952960938654,37.535311969468445,49.62207596569986,29.656935719592088,25.858938858467,36.6461434680779,46.90759216652544,31.693323635921132,6.689723806939788,32.68089490794361,46.84217594175324,31.70559131608836,20.862130274575353,41.243747444070195,28.820384121380346,35.397869164679605,22.421996926242265,30.05560850764735,34.06820091455991,24.746513775092374,21.940503140497444,32.57530525293324,27.19888045340236,27.731234019245075,18.485877478349266,22.297825553581337,39.74134972802882,34.245522436641586,29.425892344257928,-11.694746376849725,41.02810003461236,32.471288627007894,23.662666858843426,-7.987371545069636,47.818878569159374,37.93752650081605,-0.5333001640629189,-6.8242638575959065,45.23279755892812,28.098700918058388,15.112349948216147,-8.192446209363553,47.19288546243962,24.900057620149173,20.261855982299505,-14.585565020337798,19.74261486143603,22.2033215197872,19.061572662547178,-15.68903034449377,39.25516727466949,20.735101708688124,17.424240361520063,-10.327727240538994,42.10394659687294,29.44592587012735,17.244600423246368,-21.806097092037867,42.40048974796771,16.60720917056516,31.113939314251123,31.53132286955593,14.791732450845094,43.83715748147722,23.007039559382896,18.69108860316273,15.693652437699216,42.26045507907024,14.058857946885297,15.92025686161644,17.8212517519105,47.38328308456437,16.931471073464778,17.928716303989415,47.55662357713677,21.124977868011513,31.922484043537583,26.296447337147644,25.40282986248268,30.043164233395142,19.92320671611646,16.083110431036495,19.95219320165708,33.28059585087208,17.185106779311816,10.817088474635536,16.99313982391525,26.509659492716818,-25.128097237354822,15.075482494900921,15.930925143862604,33.188216299796935,22.01545970521555,-16.97844954907365,15.419958103607925,24.649085949314426,18.554152999168828,-22.039996038107393,39.78511171285937,19.077458730069146,-21.6639717056529,-20.233389162501155,44.38933228645383,14.458079760718146,12.711461346211017,-10.358116040869414,12.101070288622816,40.40948986776612,-5.135932263355879,-22.056353440321356,9.981287173106947,24.462111894505657,5.34786295483296,-7.100261582262437,41.41929413324043,9.076041810964538,3.646917666024171,-26.89514199367146,45.911928224566125,5.231656269044777,-0.9184513119694255,-5.076107936486943,20.96862989630154,4.56455764749132,25.70305601415128,30.840912468276905,48.7991834256906,21.756017411865518,20.958816716982156,32.767680152325894,18.85803800385814,21.944943168741418,26.371580823946378,27.4687530920754,23.49118137281512,20.586502111102863,16.238944062555017,19.497123613690263,17.89061934160398,17.79004288566868,17.971646322837078,24.588648144687046,10.46691019473204,23.70571469796001,-2.433114948450097,21.02886990686193,42.54420373238935,21.023464632797268,-0.6345002774193373,15.68628896415591,36.944132270705566,31.644303633287947,6.372010158205717,13.391337154639533,42.99728088927393,15.085300497282088,-3.7914940000148576,-16.170383726103974,45.047272895501486,20.365686978799303,23.40403652273482,-8.772775375749928,43.8399332920464,31.60803459606193,19.410855913781305,-19.645394182907868,19.4341758901652,26.953314360950348,3.5987991496141962,-22.159923359446637,48.74777239752772,4.7997695532712,-3.059329911005841,-17.831682499296093,18.702476865119277,10.637756353705367,14.09344960076426,-33.27183404745857,7.960204049783104,27.300272525028447,1.6077707669377141,-10.478545508681858,13.104732065592732,31.21099423318632,0.6407482333610108,-5.107195384435173,40.94381760476318,2.140005110082929,8.632089962495485,24.499753206321763,26.809530676063183,44.1839054264329,12.631201658738648,15.414932595909828,8.910879570818869,32.338378935699794,-26.268096863324523,19.524206579247338,38.65156217005053,17.596346468928243,4.463654038458145,4.716235442380061,41.613330947094326,10.442416367360453,15.316793523586174,13.876062054407361,14.811445844050507,43.54404747484085,25.55042531493094,14.287609162222505,33.485711243178834,14.971453366905976,11.641803134160845,12.8722816639308,38.84936755092622,13.329140845229784,5.284075175675143,0,48.43844504331775,5.720302038801626,6.408662040775938,-15.51017295939513,31.47826794208794,9.740522430115574,16.54467317405733,-17.240339702849962,6.151683361281782,29.404904864567538,-23.691926217327147,-14.0829039244202,48.13481837613034,9.895269436000271,5.2038735708344985,0,9.43973682028436,18.06453051931428,17.43872654865554,-16.68175111922197,17.088990230371564,11.545285228975702,3.931948698682678,-13.921506064067083,20.930210571494193,-0.0261543798729502,6.949751941472093,-5.106852880282432,24.826849448245813,0,-0.07274783069028729,-5.623904606813662,29.562230471793285,0,24.528521178994854,17.371726804638207,27.093112223827895,39.91526610220891,4.66465797861902,44.897857992056984,12.319563177110338,4.876461681232122,-0.8059067991457862,39.59824282187453,8.925946138814126,4.407033945071563,-3.192134710887405,40.08732560724425,0,0,2.0243324388615607,33.44708485781017,15.196731783421537,20.78921106110203,-8.153867905595476,39.52508774576585,5.394165670009357,0,-1.571956627249647,40.586277386928586,2.9547184867635767,5.646004846096796,-15.620671874440948,32.732049585114936,0,0,-0.8414808330092995,-7.964337508965727,36.24051087151069,7.910837962864288,-6.325169597006116,-4.98934882032103,45.156089653078965,0,-7.660708080934168,-5.317960010181227,48.14122375010342,2.3644895078148944,-6.26130056102722,0,26.970994553437187,0,-5.482550729847499,-5.10009081208301,36.50578249989401,0,-1.3615547410882693,-14.637397114795005,18.627785602581074,0,-6.101381559217734,-5.089989373178918,21.746123353015733,0,-6.106976411796726,-5.1000000000000005,30.872766593025435,0,5.829308984987289,10.873812613635256,30.111003759863934,2.2787605635972263,-1.021795853248679,-3.022966526858851,44.42669445956289,7.750107116950306,-0.9146417792089858,-6.888579938698118,0,10.346742247412369,0.9781458787229318,-0.8683350420858567,4.815863699248851,34.30632558730674,-1.6207946842168335,19.707432706992375,4.540909487881112,0,-9.272510078148677,-0.8914173960309033,22.258195263321465,7.859024290851892,-6.1000000000000005,-0.20959856995793844,32.73750403247297,2.870109109298636,2.3317349605546016,0,43.66760326900495,0,1.6950759180348258,-5.106881706006857,37.200754784695924,0,-6.1000000000000005,-5.620839885037601,11.213810662953604,0,-0.3139517125663723,-5.077448402368173,25.31280219238564,0,-6.1000000000000005,-5.117567401211041,11.844139297451306,0,-10.213625,-4.191830036900458,18.567992233496213,0,-4.975647003070769,-5.275273303542402,4.732298698620234,0,1.9781607750158547,0,0,0,0,0,0,3.6300127838209315,-6.813190394389057,34.642813585628744,9.547522913098984,31.54638312194264,1.957774520371635,2.363414799157436,39.95689635341337,0,-6.046518963291913,27.40445860469794,4.878220649929855,1.781163527180735,-3.68678883656119,0,0,34.06820932721855,2.9188412110758994,-0.025097038209139555,32.384211804745966,11.561802145142504,-0.7996899871691383,20.2587517858725,0,0,-0.2966256492979311,22.53938776954099,5.54805140691753,0,-1.5616573588245632,15.376890335544893,0,0,-1.101629738123784,-4.145040527234015,38.1642879477991,5.584795388382785,-6.1012375,-2.724090811734855,30.359667108295827,0,-89.28075087096599,-3.1622555546029902,38.57528993180103,0,-1.574181456877102,-5.101476773480705,0,0,-0.5510982978309712,-19.664661233249273,22.49364873065167,0,-1.922103841597229,-1.945722745683276,7.604350108888109,0,5.311976171508441,0,0,0,0,0,0,0,-7.550091978869158,32.16075278638691,0,2.3242544091345656,-5.976878643801552,-2.1621083671416708,27.75850854793635,0,-52.79989129959322,0.43046753131957766,36.845451778797774,0,-6.10506432710637,-1.7125050102274715,20.584321179217476,0,-9.259750095583408,0.4143188712843485,0,19.934156299642495,-0.9649332243783446,-1.5292896161915879,13.157015814500445,0,-0.3254280022652178,0,0,0,5.880955903355966,0,0,0,-7.6599202500376204,0,0,32.037943177238134,-1.1114194984401031,-5.578628281659378,8.487466644240602,0,-2.717032774396579,-5.057867108184528,46.882968789150944,0,1.6440951812312006,0,0,0,-21.047651043152786,-5.100378952934817,0.8010281122162208,0,-5.310425363423924,0,0,0,0,0,0,0,-3.110567972131686,-10.214913311856535,12.579733486103637,0,7.641429916729961,43.533995134313265,-3.831606056142581,28.794924232783295,15.375300256109409,43.5232464170708,-6.552638654164926,19.42348789719521,23.45271643093468,35.58304719037268,-6.678054342946079,18.404973460202054,9.806319658940152,25.556306778396582,-14.971893931432751,18.532637613729175,15.672083175417978,24.99186712965576,-14.100237856480218,17.672875335674096,16.572503659144278,21.84829452651619,-11.305538952327147,21.86808106108977,-0.4477696200049168,15.522790196213819,-38.13368965451179,25.514598069421716,-3.2366748680519626,21.59063319224912,-5.789617978925474,10.963504935188965,7.801291431132718,-15.558607796619672,-9.464022617358058,30.158240802797916,11.255756863628763,-13.133085049698051,-8.356863399668935,22.31979871732055,1.5836606278248346,-6.601023973550567,-8.156445465924223,34.329476013030884,5.771987864305198,-9.477629533503908,-4.101244711684273,7.635958399975821,8.121093184005744,-23.05460405842557,-10.188991474270765,20.130338845742397,-2.3354365913335373,-9.932618090564427,-5.8955393372250775,33.020067190434325,-1.0281510339360347,-6.0842333541509825,-3.5646827304565356,27.12609450789194,1.7684809376182091,-5.724413966275494,-4.101244591529882,25.591388092111227,14.10730942718634,33.17124060660865,-22.56184121912138,8.8765538180073,1.456580231724363,17.162462553631332,-17.37445641552139,35.5700212564034,6.909527631561899,7.738883608299808,-27.198807069476057,13.155848940705855,13.42987427143503,12.461806186708936,-7.326019680609097,16.530408213750757,-18.795773600844974,8.184948074219474,-19.65579727620545,28.694250610287423,-32.29473809772685,4.896216625569599,-15.857917929359154,34.9730281656122,1.4761289605456156,9.501101337617389,-19.034688676488685,33.94172791813202,-42.52067804222209,5.172900439021868,-4.100898841493812,21.469585285470142,5.4231893443925765,-13.741343036817412,-11.874270142871238,39.66701191187576,7.185377307716574,-47.98223176772927,-1.8355964298716205,40.80129115210953,-0.3729311207301869,-8.900052556885603,-0.28761522028540015,38.60695085885237,-1.4572732924078569,-9.669653074090856,-4.094747296037413,37.93197491098921,5.825007832148897,-5.1012375,-7.78212577198741,38.15899321965026,-0.7309696911946871,-9.118108061628357,-7.791250068883516,40.400007909113434,0.6176915089599401,0,-7.790000000000001,32.45630590916774,-1.535167515013872,0,-4.100181166728032,43.350068890428425,23.99232497259698,27.060387534825523,-4.698392261669097,30.003215380389843,21.902353798315012,14.442210935077192,-14.29369925376551,25.112159427864977,-4.817011445681081,13.001385540778067,-18.20647666492065,27.500507819485527,5.960927908966769,8.847935250677827,-33.62862960983134,26.062867059065294,16.28743726347704,18.046800155915356,-11.682847288980042,22.17286546067543,-6.447612066080347,4.803688636112783,-38.4079405446691,24.01659263581572,3.933248251724884,11.254372683215031,-17.571043329105787,32.83898897139889,-5.9025246965933444,2.1071125642521844,-10.967603003729828,26.369859211203373,4.321068535460919,-13.51791801963353,-13.659491602106804,33.36485918769688,8.227519963600137,-12.068952220145006,-3.3158803216285273,29.232896787216415,9.829616726554113,-10.989549754340267,-11.024207379495632,29.37980815354127,-1.0231284608048792,-5.10124420891075,-4.130954294649567,34.644270998316635,1.2864023142270238,-6.644486687052331,-7.091100312465924,38.82351852606998,22.943616220777756,-15.84856752416327,-5.281809797474335,10.209352979049358,-0.13390049942309243,0,0,34.15538930421722,-3.2550063995153167,-5.117227828125,-4.101248096108945,16.657056331247226,13.398220547656429,31.3066194416209,-19.084095990388775,31.525715768548217,2.7318659581596627,7.131139856188586,-12.316739895881533,26.733029441737433,-2.9894463764915757,2.3210842168317747,-14.139265476177252,30.028966701706715,-5.827021757601713,-0.042320914979954695,-7.796813074407565,32.9574092987713,1.9574379100634913,-0.041187460892907785,-14.110576918083826,36.37467847556228,-8.643337512821908,2.7514336295839494,-4.101245011811964,34.112943999670655,1.908216542171063,-0.7092529141874199,-4.1000000000000005,36.423810318929625,-0.38556109927691895,1.7057449726767242,-4.1000000000000005,10.558448422593898,-6.100715990588682,-34.926160027249615,-41.070944197355004,34.01207997527655,-1.6902051231646102,-8.87914901770837,-7.822272768706832,20.94022065177252,-3.792079576491044,0,-4.117893017088467,33.435827535319206,1.777283597770258,-9.451609419969188,-4.1000000000000005,42.78996581206351,6.426273549013441,-18.987764398088242,-11.172415088830622,17.136623552443346,1.2445431861092489,0,0,12.759883782966405,-2.689228312083194,-50.88197960449939,-41.2857761129465,9.89902908557738,-1.034480319300861,-9.516456761158338,-7.790848444702472,11.342370395544409,4.455030278366694,38.254211960608515,-0.8249762370141813,0,-8.193215621042452,40.86680967958259,0,3.228433542695441,-3.2265512291794476,43.875944583892995,0,8.415883462647239,-1.0356863543901424,-0.1,-3.5134032024313266,30.473759996450948,0.7255418440291552,27.003640063275505,-0.38479190536795826,0,-35.8840848656557,0,-0.20069814107182682,11.096772131515692,-10.213625,35.35495557775218,0,0,0.12011275132765326,13.949473801223945,0,0,-10.213625,-4.873683476285696,-3.938320153097054,12.310566829093046,-0.37174848624953133,-3.918701399307893,-4.105424812684059,35.25170207503819,-7.53990375358438,-1.841686787058822,-16.654822280616468,24.928303352339796,-1.9393691401738864,-3.290129713877828,-0.504154789437569,3.0201127169782516,-0.9916464152027159,-1.533811145735163,-2.802677041331205,0,-10.213625,-3.888308135825506,-0.3124419249068538,0,-10.213625,-5.003477280703044,-1.2776549949510139,0,1.9903797348473795,0,0,0,-1.5382563752374552,35.25138018418302,-41.05218410738386,-0.10593763257135574,-0.6367826194984586,-0.7445732044725323,-2.98124104365599,31.666080002418752,-1.7293753400096936,-0.5844588491486916,-7.518211014310356,37.37094286323461,-0.30092335698175765,-0.028826205703793174,-0.23828297453129751,3.7943634825648314,-57.717341276118006,-0.12531640122821952,-4.13751112586573,40.76256345012325,-2.8687907022502577,-0.4461803321405693,-0.5867524875606513,4.364521399786965,-2.7901587077949217,2.9358437857409436,0,0,-10.213625,-0.32174120008444745,0,0,-3.5168664461461105,-5.069069643483978,-4.110946459320203,12.16718962557762,-0.4843933450774507,0,0,0,-8.040856580016621,-4.712942624316757,-4.1063422608455395,4.238099918762291,-0.6195272851287275,-5.117227828125,0,0,-1.4530205342766647,-5.1194067864820285,0,0,-8.572832867103962,-5.1000000000000005,-1.980383580372533,0,0,0,0,0,-59.740986543830225,0,0,0,-1.0889938128347907,34.078113628547165,0,3.5615045885868017,-0.28435993348058786,16.17020263715093,0,0,-10.213625,17.205670770707666,0,1.484517377521704,-6.1000000000000005,0.38423368490543386,0,0,1.7682581415537135,-0.0921499018000607,-4.101362078385075,23.786215800906138,-0.6650681784711922,6.338644521610956,0,0,-10.213625,0.921166027956087,-4.10623316589258,5.930094002231799,2.4579195067226633,0,0,0,-3.284097682316345,-5.1000000000000005,-4.0018659063157145,34.63446705721223,-1.1,-5.1068625,-4.101178642547758,4.83027520909608,0.13445739413236277,0,0,0,2.1896535375311297,0,0,0,-7.742646699742982,-22.089813938009907,0,0,0.7265469027496313,0,0,0,28.467087029391607,0,0,0,0,0,0,0,-6.100131288572212,13.552319815853037,-4.1000000000000005,-0.1126078470411621,-1.1033441073611197,-0.7260028295317865,-7.798433831125044,6.919917561382558,-0.14162762800026785,-1.400588416977785,0,0,-6.1000000000000005,-0.4710247285171148,0,0,-32.11259978517589,0,0,0,2.193094721854338,0,-4.1126015890797065,0,-0.940612754611246,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,-4.108175985566,22.98515399211385,-10.213625,-5.101347108620615,0,0,-0.03710713143312532,-5.100900851813678,-3.484232201159069,8.275341944255668,0,0,0,0,-10.213625,-2.3647910437930753,0,0,-0.3609190973468219,0,0,0,-6.1000000000000005,0,0,0,-0.7891247645213871,0,0,0,35.18794835718603,37.67960754133453,51.59132973906195,-9.294138772601384,33.3405300322769,44.392736324875635,51.13135764350915,-9.272397913019738,31.682792728664595,38.22218760768068,51.053989411439154,-9.922100509145523,30.88594264447548,43.75822804167239,35.92107596969526,-11.429610003829076,31.766635052227326,31.56564947782758,47.57959593550741,-8.67473380983784,32.99503864551368,41.1063554356213,30.372099718654766,-9.192998362147543,-7.084373483541345,33.708591367896766,46.58717213971147,-10.743734458365077,11.949820918502322,35.37263833831353,50.94590900286676,-9.574321368449489,24.917384043727306,-8.280193920617798,49.94294872648169,-11.431124175861886,26.403919662116834,-7.540027711221292,57.86305734694467,-11.57051270799279,-35.726494244025275,-11.131128065277023,50.29423368597672,-10.583062111915204,24.603653631274263,-6.021310205381864,52.51271558485654,-13.182613840078062,32.50328349383148,-18.5239930048839,29.290832827057432,-11.60186686388266,17.013224341172222,-10.262968536184928,41.33658559617923,-7.84906051558399,25.80008601445862,-15.980132793280946,50.08837352312074,-12.915514575058813,8.635213626162267,-8.253124796880439,44.602867713643725,-3.272679157014693,30.111165034349675,37.134733347298244,54.75329909685969,-13.465943689614924,27.073326830465334,38.40536078302078,53.804693202595885,-8.917806442236586,-5.497496666910155,32.92683859875255,39.62509802979856,-9.28930515808116,17.9925934835979,24.580869556264602,56.824175645676426,-9.776091756528121,28.701158334754936,35.070623756946596,54.720565718044426,-10.645243085999983,25.541480729953946,23.5391052504195,55.85003003049632,-8.592235985296904,23.19740471288536,24.52763684145513,53.73015023654969,-10.577680714551065,-3.0830203100507574,9.66655960527707,53.22879021935874,-13.250283032710245,28.057149851464498,-12.023700935815494,48.42547363237706,-4.59730117112205,22.631579412850595,-11.470046034993048,53.42419010959753,-14.720422266799117,35.26159975742342,-10.408033279859733,51.99399091760747,-11.804978495497625,8.577813316905091,-36.163615316740646,54.13552303899561,-2.523708337787906,14.028152767107613,-21.127804807710053,53.2239818659164,-14.153663604396415,28.988860859255368,-7.9270598069078,54.909577096483396,-5.63833200936681,2.7987845904486472,-12.474209286822974,47.120555109629585,-3.219334235549884,-1.1,-5.131561120628099,53.26704625115691,0,34.639690277447755,37.08856456834538,55.767291136112306,-14.576361659517664,20.434046468096184,30.910310347368984,36.648269996287276,-20.2699002764791,22.26177466455447,24.218966910848025,41.79484486104657,-15.837731762534542,26.13863255075372,27.473891299399586,51.34400202883884,-11.583073766310951,25.154427872398042,29.924107700907815,51.84934438757882,-14.22296373040696,19.476277555637424,30.97399681724956,50.35929811446888,-13.097066863816226,30.029330939477596,17.81150523166898,57.1387044357961,-14.826656485381234,8.700683074006962,36.62196427949652,0,-2.9917437301599534,27.116069436018076,-11.897793971649504,35.74075790421455,-16.077296555046598,17.763408348048923,-10.85405182677425,52.549190709793,-15.408261175068725,9.296979971297283,-14.679788223701308,49.33547446516587,-17.512773619322335,0.5865704139170891,-11.712205661384855,48.94839917761176,-2.927680880271565,16.98952634297302,-27.586593945762072,53.06118103193497,-29.996509472747192,2.908225698350681,-30.02831791618889,48.98513297507376,-15.939278996145305,13.94163804119212,-3.8907770874504832,55.00838422877997,-9.294235872948876,2.6466138963890966,0,47.384715851643286,-0.5489535036492036,17.054759319624633,21.300114813219018,49.82373062557164,-23.784958117509177,24.125451469027546,35.78426365472138,49.18976986620314,-21.74485067004914,32.61635978654071,22.847176824222544,52.54373639207489,-24.291594589286472,-1.3806605489667376,11.585260684320222,53.66312845049206,-0.9244067189860226,18.20109088566553,30.62558654628305,37.22091784573771,-23.74090396314885,-2.7999085556138916,11.842233690593655,50.631702529185304,-6.377259689721152,-1.5523946043574055,37.851345588401664,54.297802650756,-6.169526308704029,4.243835618382791,12.558961121060733,48.317455600269994,-39.2962724345653,20.68158399064752,-11.248797624710354,51.00121438663829,-27.58600048915355,6.631643757732806,-11.769378562275222,48.56138723168796,-7.5460930534586925,3.3049900927900246,-9.462066797840693,47.518132080430014,-27.021191359092896,3.880765232716023,-19.13650539578315,41.41863650351484,0,3.3800632032996205,-13.46290508762057,54.44055246650335,-26.821709083099396,-0.08277064667691242,-5.1000000000000005,52.620504741956466,-3.3185725379909004,-2.3241252834542183,-10.556511822670595,52.75147764171512,-1.9212849963224827,0.5255251356609112,-5.158532365660243,48.30371086184013,0,-4.595000187507421,45.126709131351625,43.54331091510586,-4.051712248466797,6.295367468898406,-0.10124522188738541,52.439027835600335,-0.8131963616131132,22.350822518775495,44.72952966190757,0,-1.2427521967823556,-1.1,44.15354966754921,4.914113070571261,-1.0738883152969512,2.2435027302354587,46.70675941501358,4.568274529938541,-1.240576065907756,-10.071119829159962,43.529497259438955,2.9143361424046637,0,-1.0905279514053516,45.1867470026797,0,0,-1.3622481832323863,39.92659480205042,0,0,-1.9982458151334612,-6.019206729087832,48.72505534622995,-0.5695245253809524,-6.611607873112204,-5.101244216897381,51.362335976066944,-0.9326253130264542,-1.715309366415225,-15.672064557830662,49.67257737633302,0,-0.8258821799148207,-2.6336043103727653,26.699794326214796,0,-6.105968303675595,-3.1312088952504276,48.43739293042661,-10.8477478572215,-1.5376251182607357,-3.6564431084491087,34.08706579517861,-0.2617564539364473,-1.1064685963143084,-3.8728953713179037,51.52393788636175,0,-0.6036031783462937,-2.9076013011909674,13.375252888095716,0,-7.743461121843555,41.9717334607486,10.11226684498074,-3.6673738045627644,-0.8542896859253848,-1.2504174541436828,54.797750030524874,-0.6263163773698125,-1.1,-0.5667093256347706,52.85497707396396,0,-9.175780771256258,-0.685544284990175,55.228283405683804,-0.3930001696160368,-6.1161032829544295,29.352784619135278,2.551213522435546,-9.555750629471031,-19.303752828125,-1.1620258066389035,46.93047418937213,0,-1.0970133226099683,-0.12017126264405582,31.95682419155949,0,-0.9011656728081339,-1.1490200502360672,6.747713156723586,0,-2.4107123121479694,-5.316886583451172,51.0320405498551,0,-2.6191260364935345,-5.101644866539374,52.21010622492069,0,-1.5283181088070368,-5.428977425538671,19.204227053670486,0,-1.1048542781709931,-5.1069869790065985,56.849557063272044,0,-10.213625,-4.2097125278108285,26.042668753413107,0,-1.4808207794071095,-5.390627463645168,0,0,-0.9323172754135151,-3.1868136699384344,5.658516606425341,0,-1.070353265998935,-5.106989135530661,52.49822853119421,0,-12.22373063314857,-0.02984004432705394,56.57211216472481,-5.112124693546238,-5.151163468944928,38.50264076245153,4.636918476328947,-0.5317832212539599,-6.7004058356081035,34.81357260360998,5.761786885689759,-1.1346865006936953,-0.450442019839124,29.854161765513076,0,0,-1.1,34.53592670135007,0,0,-0.3300889659121386,21.529938210239017,0,-0.647205673778278,-0.5104728047135086,36.715411124821685,0,-0.49905825202325715,-2.5140467060737515,3.716166888499304,0,0,-10.69011021869109,-4.968554126572467,57.32266968921954,0,-2.634777004510572,-3.191339945599326,38.73255865069684,-1.203396515059823,-2.0525563283937642,-4.433076465518247,28.957424543771356,-5.107652883842691,-1.1163127528143848,-1.453756259566336,20.747896706726397,0,-10.213625,-5.1000000000000005,44.085888238279445,0,-1.3358742065036522,-2.1126122801407186,10.716006114029572,0,-5.252601629662804,-2.033249979866403,5.512325353941954,0,-1.1059941556383506,-5.101250518946358,10.405294637975656,0,-10.213625,26.126389282727775,0,0,-1.8250237336496196,-7.450126408891941,50.01347645198887,0,-1.1105360745930806,-0.1820889635641949,48.82582024542994,0,-1.1067197660962982,-0.7340387686968199,5.043094134663118,0,-10.213625,17.89641588994681,0,0,-9.140206625095672,-1.0243763995163282,4.529952401172294,0,-1.1,3.4268084951267133,0,0,-0.973014136423903,-0.1,10.243364553053233,0,-1.6283031347527315,-2.677431150825173,27.123916387965213,0,-1.146071585617499,-5.351255230128259,5.772040014814138,0,-1.0603244073854847,0,0,0,-1.1822555597669173,-5.10744428098123,4.759912390870436,0,-0.8247677945275271,-4.771448853297767,5.486482445139821,0,-10.213625,-5.375852807388412,0,0,-10.213625,-3.729511328092801,0,0,-17.026561238080497,-10.21525900863611,11.880837498897659,0,27.481991240589565,43.88326791112656,4.540749724849573,-6.755047877430802,19.158180022868535,44.75408298056194,-4.655851368003302,-6.2072315387187915,28.1619263143156,44.724483101129785,-4.188643437370605,-7.746833333785871,7.177835905692537,44.54529542891679,-1.1456346829080184,-5.8956506139941025,22.107054350147,42.88870710958032,-4.949309164071723,-6.1470979695032275,12.524449922540427,31.62568505850268,-4.663612618267002,-3.78026507643674,4.267645741141546,43.72704530212569,-2.9557550900292755,-4.831140748176336,-6.1012566633566605,20.09269067098859,-1.2849132320916021,0,-20.358542165953807,-37.960853593056676,0.41225093711913313,-19.876738852426115,-11.818281162538486,-14.49290588742901,0.9270663488591709,-13.108765581933275,-14.22037416374311,-7.17046453922815,-10.060633193331483,-10.86569709477968,-9.765441542754722,-9.49477518967046,-5.748926968496939,-8.810928652831148,-9.891625968380652,-10.732191653867192,-3.024746905880886,-10.763644909092358,-9.757370829445849,-8.974192383746697,-4.008992577272231,-9.229692740230815,-11.413077758214973,-7.315349363244605,-7.298268422292484,-8.030046227926881,-6.917592366589977,-9.707500845800254,-0.3228059528815648,-5.507136752836729,13.33276955929544,38.509223104521176,0.18512603904462743,-10.387470678039165,-12.86174108889588,-5.574945454182526,-12.125843235320545,-16.764318057462162,-5.266273440816615,2.935956226098729,-9.734608665993413,-12.750412860529373,-25.690166897854006,-6.861778371060816,-19.425609758359847,-11.934885563514452,-8.998979185074596,21.07182950466937,-5.342182814001522,-5.419177942532146,-22.889265217238496,-11.175132110771013,2.8040599623705247,-11.652050946662454,-1.7816372000776535,-4.232984603039557,-19.478850053230985,-16.28805199838711,-22.393495931896254,-8.24549991137591,-11.966559551832765,-40.84732412016358,-11.435021890357092,-11.22617077802379,-1.1749787196745467,-9.153742231959397,-7.420757432218595,-9.914650085891816,2.3220528081697087,-8.326316955261987,-13.807131812691592,-11.853567996264243,-2.7561421109630517,-12.158125154063919,-15.048157518705736,-52.458681647802926,-15.247976336852329,-12.164723325859342,-13.86146013870636,-14.352666510122711,-28.61127620743774,-11.827551519613056,-7.627509219838264,-10.064969376942006,-0.9362322890445848,-9.366316986940639,-51.63865389229334,-13.53740353093054,-7.761417391207268,-9.64572345420059,-7.457248922062408,-51.11105071503867,-5.822266266226132,-6.861616593202237,22.094832261530186,29.083088395439418,-6.895036054506883,-13.1275025140069,20.621393646336017,25.97597279616631,-7.657323057566352,-7.226820990747165,-7.723702811536893,11.963010709747433,-12.950377916124872,-19.745419045984445,-4.53514413555394,-1.1511191770254126,-5.915402957365627,-37.55018945300409,17.535330439424264,3.969070243716682,-7.154798043436118,-4.857852612536598,14.881150920714592,9.364470073632049,-5.566715182412839,-12.07550548025126,-2.6311740448002627,4.262734000662794,-9.747707682945213,-7.239236756071588,12.372512489768916,-1.6159013562053288,-1.903115957602391,-16.682044791559733,-21.430697053014175,-18.287920212380076,-8.27927999379838,-24.166593981109617,-11.167122576177185,-11.254898309520017,-11.339705038700277,-8.594927761941891,-8.627861270668896,-51.024211504619245,-9.158528372857257,-7.21066848210006,-7.622463899509463,-5.117227828125,-2.035950215782613,-3.898669059566303,-5.784493962095839,-9.033814483450275,3.194446900623138,-19.091176118359858,-6.227790484489154,-11.555285653381759,6.951178826265662,-6.175642514370398,-0.5169211885378471,-4.523188153075252,-4.100791366572856,-1.1261387955830473,-6.997344411040409,-9.41110901973042,-4.1000000000000005,-5.1000000000000005,20.001852128685723,29.962905282246098,-6.285126656429293,-11.362977706648877,-13.623388477240077,-7.163748532850649,-25.97349787362782,-27.007556411294804,-5.373079450455166,-6.070500305692484,-15.540982204930836,-13.814119614309378,-38.34712694605234,-14.812708011912793,-33.474151684212856,-18.72624957163565,6.385907421614862,16.367725263548426,-7.209384595197843,-7.718232872459083,-9.614169611888045,-7.08174662443765,-26.63628094478723,-11.765270661926309,-6.374724911568008,-7.540553904928103,-16.457639753887705,-6.086331297994144,-6.482610290188541,-4.5787412557968015,-4.1000000000000005,-4.371705569818621,-12.876926790888076,-12.747840920651605,-10.738452424889513,-13.024669472418475,-8.649169110418184,-5.1000000000000005,-0.3226158195228347,-5.1002669109570675,-14.542358640326928,-14.71396686946709,-15.902630543932393,-40.009639999945875,-1.078137751050791,-5.3144177136601884,-1.9156304324420472,-4.712549398343572,-5.157375,-5.118196318790445,1.0243150468014273,0,-5.054249878553476,-9.69433188170041,-3.7405872325794345,-50.34242548117011,-6.02908590731934,-5.1000000000000005,-3.743007540651903,0,-5.249741264489392,-5.158105759594292,-10.023088475090795,-5.1000000000000005,-1.105964161152075,43.84286683203709,0,0,-0.019975908484753058,45.61365442181941,-0.026329783824218824,0,-10.213625,45.625062601358565,-4.197756060827233,-4.899566753645082,-17.943021935417235,23.292439652575048,0,-2.701241266393611,-16.31716227306321,39.72484494134426,-4.1000000000000005,-3.164777802468468,-6.101261607025441,20.57979064280309,-4.122902217539615,-0.37498646023933163,-1.1050644632437734,28.046951157625863,-4.1006397230679905,0,-0.26592515016924717,8.228243517097084,0,0,-10.003793279461282,-5.65819896493044,-1.8526030085806178,-5.11366851034827,-7.120648506308109,-5.101250121683823,-1.6314775369045766,-5.107152426810195,-2.6073569277691617,-4.667897109257315,-2.7007295853682667,-4.055906890734122,-1.032321899648918,-4.010973614191274,-1.2967047534082443,0,-10.631532488402787,-2.951920243945765,-2.3216218647363993,-3.2896708727964916,-1.1249986070036935,0,0,0,-10.213625,-5.1012375,-0.7263849810930818,-1.454142259966637,0,0,0,0,-6.1202809947085886,38.70309215455998,0,0,-2.7929344851177955,-2.150785457418841,-2.270298192147367,-5.039455805498363,-2.134584269600874,7.92056796844351,-4.1000000000000005,-5.1000000000000005,-1.1050954081607238,-0.44325257127617435,-1.3494400005414346,0,-0.1199352577833194,6.590991976001963,0,0,-1.1725193085895749,-0.19397076042482214,-2.3289552571106804,-1.405775783861416,-10.213625,-9.341300145015504,0.4845423556537341,0,-0.8814853877979522,-0.21188803546231255,-41.06037841923448,0,-1.9382274245802396,-5.1000000000000005,-2.477824887910366,-1.1234849675965621,-11.203478023117368,-9.7514854135957,-5.174424207079259,-8.807604077970936,-5.516170985293016,-5.120291487561378,-1.5908103779579872,-3.962285305063616,-1.1052736616993586,-5.101243701791311,0,0,-4.519712842085388,-2.7098048874702476,0,0,-0.6839937779348159,0,0,0,-19.31413919420948,-5.11836660763415,-4.113958800794157,-5.1172472326768785,0,0,0,0,2.0031641870298045,31.19735633502897,0,0,-0.5325976479674142,19.94175281034629,0,0,-1.1056168170049263,26.026566018416755,0,-23.500581944128577,-5.908532526993024,1.114069052933004,0,0,-1.137838560911792,16.645915051211517,0,0,-10.213625,0.650397907001333,0,0,-0.10752701821211269,0.737131813999876,0,0,0,0,0,0,-10.213625,-4.323562972865869,-3.107982517743529,-4.392496768608512,-11.711209253090905,-8.351906394558416,-7.798907945312848,-8.713213711981998,0,0,0,0,-1.1050643292548463,0,0,0,-1.7233721704747462,0,0,0,0,0,0,0,-0.16673251733174388,0,0,0,0,0,-1.9346957974580168,0,-1.0993937474494957,20.088467660432393,0,0,-6.1000000000000005,-0.8262290114613852,0.2978568019779474,0,0.5581778562007311,0,0,0,0,0,0,0,-9.762843279533556,3.9882405592495136,0,0,-6.031495787422128,-0.9806811763274322,0,0,0,0,-3.7381946860113064,0,0,0,0,0,0,0,0,0,-1.105664843879903,0,0,0,-10.213625,-4.658650767852391,0,0,-10.213625,-5.511261538398738,0,0,0,0,0,0,-1.4771740177639217,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,33.10486174861956,39.905933023386446,47.94344139256964,-17.49566576447204,23.902930305580647,34.23539971643697,47.79460358171859,-23.31088988681254,29.398106645807147,33.672607986684476,39.58686570125791,-7.856831803732719,15.87499917624859,43.01254712072199,24.08611802542826,-8.12499921115994,21.985085122441305,22.823331411168578,18.48633887434478,-18.178843239473025,18.01186923378121,14.802221266452701,48.386791385487754,-12.309990541420287,7.935323536061372,19.961471878849107,48.59886644046408,-17.92307539355597,5.702841432147483,35.3487782637501,5.917881922136674,-2.2281645587873937,30.44765287665433,-9.886137470040094,44.32208804812564,-15.236317355627584,23.372777751072267,-10.685559990760925,47.58245047386881,-9.197001754487765,17.837359869687635,-7.611553172784924,47.688345028965294,-12.521318880248549,20.704003783140198,-5.371846574293835,33.62717217981122,-11.121470796020082,14.29841015361384,-20.750192577070017,46.770520193885865,-10.68349117469028,9.243674051835171,-9.14807133032764,44.57291107588662,-12.876772950339188,4.9823259416866925,-8.057267510269018,47.3869786861532,-7.418655344162091,-0.11968436608003419,-5.1012766182199965,42.0520608576679,-2.0457073592095814,24.074716058717463,29.915582435416095,14.384144279514658,-17.809102169834446,0.9523993969079818,7.767500196640753,38.129157517259735,-20.43898335214337,22.988066568458212,32.132970101526496,39.2882379280139,-8.31224503631375,-0.5299250222891199,11.581396543574183,46.38474342704319,-3.6087956062062125,17.21408629515441,13.823267548842788,32.056079758956514,-21.62662459797777,4.937797114081567,6.176475701106168,35.03141047936916,-13.253267683057851,3.419815492094364,11.521705421052655,48.926593157201324,-11.092597096497515,-1.1068625,-0.07667801751848126,36.88515496947625,-1.0539118487135326,4.6807334720716645,-14.34905043229072,45.06051007125402,-22.224191759048132,4.130037775553041,-8.015005803515917,38.87193614410262,-12.977413554216264,-1.5435693374951605,-10.25434760729689,45.655575593638886,0,-0.21340596020208855,-5.110132294333018,23.466156757684473,0,7.812122299433762,-38.56404125272749,23.106139211264082,-3.8680280693488394,0.15189701754649887,-12.119126139182214,38.25446365859078,-6.252066826759757,4.159717726964609,-5.076200037630551,47.2140156220738,-4.360727859709613,-0.2603979792085088,-51.26012178480952,14.042780525013393,-1.9122147834468326,28.11320960298628,25.606815056708097,45.23290646383103,-27.449027449584165,23.980497381743135,30.676386834496164,22.106909793539696,-37.11721610264338,31.52764350469955,24.203624814542025,23.734416108929782,-23.573149224585695,14.238340908217964,32.29996776186441,14.251267297080755,-30.395123332532673,21.096638206969974,32.58053626452233,20.714528421463804,-27.078775260294275,6.0201439239460095,14.842660160593566,10.640471527639848,-11.950942227541237,15.171995538144946,24.93925995993441,14.511789918235587,-24.630904993531033,0,0,14.017380910459837,-2.432645022951682,12.116386567519097,-18.92349258965561,39.99538960771452,-24.613904306293012,9.647796936288785,-9.266375046092014,46.47193103946875,-14.618662916433385,7.305258146308595,-10.762005821983358,40.38256924468004,-20.521307882723814,3.662628832176729,-7.551962595778457,31.31460289113406,-4.753463784811838,9.013329782008073,-10.278912402417108,39.13671397121659,-34.400320437552836,8.920202850116286,-11.136649422206077,44.999539706124494,-10.1101678910347,-2.4979993463022656,0,41.97845447943413,-9.535091082117628,-0.04908619901424611,-5.1000000000000005,31.71237501010114,-4.87822390255814,7.4175930458037165,34.78654946323675,19.559459081059046,-32.29991799292089,14.898101335115411,14.7854080630326,29.395300487926956,-17.273077757479236,11.60032400238995,8.266125571745954,39.85366731319855,-16.12361165878277,-1.040235975996424,3.082977194982009,48.11282257095224,-8.360377834497566,11.431415934819986,18.085484551649568,42.91135190435683,-17.6965915717977,0.3348471549556622,4.040439828843727,43.269937860134206,-5.1000000000000005,5.733239796790932,7.84960251906888,36.530557992095154,-8.308562949356526,-6.101369281665351,-0.1202407490305425,40.368071062840436,0,7.362245578564742,-7.02899328619506,39.8085732927913,-5.067686373114943,-6.101771953505356,-8.123430542322406,44.87471378771296,0,3.4773026345183533,-4.524581108149422,33.72786242456549,0,-2.041662177128563,-5.111209418337509,47.8316210809157,-5.076377321118364,-0.10050928964846301,-5.100911791409047,42.2572336820443,0,-1.7681958053596962,0,30.416306586371533,-5.083676053494788,6.144093783485298,-8.837134959320943,32.04809385958249,-5.005991577047187,-0.030131351062195683,-5.157408897769945,17.23766375413098,0,0.7194515497465174,38.762921936401185,10.426090440777303,-1.0667759028445283,-1.410529812325868,11.781091477291632,40.43430458137078,0,-0.2975676014255111,36.83571629513618,0,0,-1.1104560699269101,27.091344871763717,0,0,-1.492619751718797,32.01858370514154,1.828021493574979,0,0.2347133617532271,25.239038845796117,0,0,-0.9219946736664713,24.926291809106946,4.600209787869551,-43.50236388038902,-1.052864439815911,0,0,0,-1.019639375514745,-3.9919369790738917,46.84927821807047,0,-91.81780623697881,-0.6638283371430007,48.03184444129926,-5.1000000000000005,-6.111347116791448,-1.918487665882802,13.249949023952492,0,-10.213625,0,23.53781549563073,0,-1.4545902570008142,-5.101830070622784,29.945214584017197,0,-1.1115024690986235,-1.7005178746841794,13.03685563221161,0,-0.48670430976977413,-5.100920333091712,4.470264071973288,0,-0.9273139454633207,0,0,0,-1.0821403597336383,36.06841824858207,0,0,-0.8028597002077625,-0.8179609102534839,35.551233136715084,0,-1.153452220167189,8.022593371813658,47.80537153601551,-2.670455313943056,-1.1731226741687353,-0.33892689355626615,8.65584865409955,0,-0.19165459313805888,2.303116721771625,0,0,-0.7722405285479381,-0.4359997602887152,9.087906434124687,0,-0.048768400731661644,2.5861995734001297,0,0,0,0,0,0,-8.973952823326245,-3.7202961936498684,48.26760626631493,0,-6.1000000000000005,-9.759839532176048,0,0,-1.109349422357458,-5.2910048035112816,5.230167211275298,0,-10.213625,-5.100837547068161,5.624061249180631,0,-0.9943903654365296,-3.5536899514177933,4.83113801200294,0,-9.78705624799216,-5.1000000000000005,0,0,0.1453149451479309,0,0,0,0,0,0,0,12.002274408655856,34.72626062263571,0,0,-2.191136467963643,39.6359510384262,0,-3.646923257375567,-5.786593030959008,18.98460504033612,0.8722287402911086,-3.325813091700979,-1.1056768055072375,11.832225886383256,0,0,2.657391352760211,33.328506826344366,0,0,-2.2206096917338263,8.800038758077257,0,0,-6.101262861825438,7.144454093374451,0,0,2.3927272281024297,0,0,0,-10.213625,-1.1561043688446255,30.869664836788818,0,-0.2349788586848062,-3.9665767581530833,15.124439883767058,0,-0.6660346446623382,-1.8203756755413651,4.963524221065961,0,0,0,0,0,-1.0216881359152643,-4.620041332717399,16.664390840823838,0,-1.4809670376645199,-5.1009079446674335,4.842106301355575,0,-1.0485842129807392,-5.1008903913114265,0,0,0.15481300141899956,0,0,0,-0.9575295997028914,14.177877798785515,0,0,-1.4244454845881251,-0.6111526550100912,8.829977698031794,0,0,0,0,0,-1.2058757657715988,0,0,0,-1.3813462632975426,-0.11947590274272518,8.733006056123692,0,-0.0013663563917543087,-0.25127084735106536,5.483385685911206,0,0.033279795797086065,0,0,0,0,0,0,0,1.3106895832412642,0,0,0,-0.075444354225084,0,0,0,-0.7018178795600684,-5.1000000000000005,47.865012766497514,0,0,0,0,0,-10.213625,-4.632418331134363,0,0,0,0,0,0,0,0,0,0,-17.11298855159382,-10.223314676193644,2.460976164401538,0,23.275251273929648,46.00494153865885,-10.552433073740824,-12.691274544082757,13.405578928953656,41.97641439240134,-3.2037140717535233,-10.022564320454382,10.264088578115905,33.62711282552159,-10.364558141972173,-11.372840316578866,-1.0278285411251733,41.17613132650795,-5.019442436144348,-4.543503209290397,6.727649938419749,39.98971904582447,-7.196223755299378,-7.817143370827864,1.9061058159109308,38.13907778420884,0,-8.428581792602966,-35.709311454163,33.848650230447255,-6.29576076255961,-12.477066069501124,-1.0281183655031172,27.00476938884458,0,-4.5372204449537765,-25.402082876564506,-34.61920887447721,-23.17346374047184,-12.98725724892399,-10.555956115748971,-20.571181688767993,-7.750227173063156,-12.371364233184607,-10.640614049931688,-7.244604569085697,-9.547418240517942,-45.15893014177059,-6.9873279601335385,-8.556668213547459,-9.134542137382436,-8.103928208859605,-7.398429175722178,-9.641474128288934,-11.734265140944009,-8.588117125412818,-9.226633257030725,-9.75000456995075,-9.542622266226914,-10.031470274612962,-6.311096311384569,-5.385943314965316,-6.445832869178167,-6.1426642802847535,-1.1106219348762443,-4.97501258364505,-2.3178724890317244,-4.678198761172414,-2.7397225495714377,35.00770383442711,-3.8202633001553887,-5.476107204933248,-12.734513066874458,-12.366534103810203,-7.424441393368032,-18.736944564057524,-10.023602474109955,4.834435265576412,-13.782021077926796,-16.8159513630297,-9.968547222820684,-12.31973962065276,-7.357304039659788,-15.754958761948322,0.3019792549283191,9.885871740601107,-8.740488495423135,-17.37634703453095,-7.431532559097248,-4.123783726503976,-9.441270583393973,-11.838060624664895,-10.64086355805446,-4.506235885625931,-12.596581230188258,-6.111974637341731,-5.35345486421254,-4.243114291888373,-7.789319833337901,-8.322469095288724,-16.710196414690614,-14.061203016699995,-34.48047970359773,-16.316624404932405,-6.343644053876659,-20.943128217298245,-14.101563915240856,-18.477694204132085,-1.682989211238221,-2.179030288700135,-3.730176823503992,-5.778998894459116,-0.5215087810746116,-5.1000000000000005,0,0,-4.507764383869679,-5.078546048931221,-4.026342387580321,-4.7899968593493085,-0.812223109737662,-5.255199626678258,-6.145450507418959,0,-0.1923236071160389,0,0,-4.876154599287287,-0.3538460663512941,0,0,0,19.71379188033288,34.94406014653587,-20.863213604830054,-19.965981774402966,-0.24977331446713125,31.73584373106744,0,-4.891000568114283,-46.63289581865147,9.841354220049247,-17.53438874672054,-24.874850763387006,-5.038913538645132,-0.5901422417560667,-4.102149686616057,-7.69628598904643,1.6503873785260168,16.781499360169665,-13.391246374325481,-45.90829383559075,-2.0755532522423503,29.892462764993653,-3.751270609272835,-4.701673260221589,-4.613442753148636,8.878251987524456,-10.752903589469762,-3.9513335430904393,-5.157375,2.790734850311714,-6.362014431165214,-1.3936962718015586,-22.79297564225439,-15.020827198039003,-37.65559516939039,-17.82604668316365,-8.566019640494233,-9.973095880616453,-9.238373652891159,-9.384083368828179,-8.432048083812266,-8.881247868926483,-10.435428301974676,-17.64237005389547,-0.24172457412888396,-4.884757173943503,0,0,-5.157375,-8.062337510773958,-3.758687885078515,-7.462527484347263,-51.62559621595683,-8.599554568019263,-3.7262833203273362,-5.7168671739354675,-4.201679807411966,-4.959687837528464,-7.575691814212615,-5.101596194409112,-0.23858094883117806,0,0,0,1.0568856717328114,31.339078489230705,-4.1012375,-5.1000000000000005,-17.036289009329817,-11.907812740621013,-16.538726487804446,-39.17340491387034,-3.5689273748495687,-4.216328299825983,-10.357156820288257,-13.838264691182712,-5.037866170013659,-0.5940683054189634,-3.689835368493396,-5.106326754827387,-0.26218605724558497,12.029520911650255,0,-3.506967076201931,-5.498289596457365,0,0,0,-4.484451103226623,-0.19457289962380364,-4.1132182415526914,0,-4.096614578294614,-0.2594134056345009,-4.1000000000000005,-0.2701383622771246,-17.510219111129196,-15.402211901769487,-13.758072534410896,-17.393056902880023,-7.414176892145195,-56.41818936187452,-3.9921950990625987,-5.061228946790752,-0.2739993940924117,-5.124778093767246,0,0,-5.157375,-5.1000000000000005,0,0,-5.431961135715517,-9.228527751278929,-7.846521141291137,-4.99923155819042,0,0,0,0,-5.157375,-5.111913538079557,-7.709621075590586,-4.89566147878363,0,0,0,0,-10.88877045119532,38.085022523239346,-4.035945870113552,-5.114614896517432,-10.213625,15.085908667489942,-0.30463871039003226,0,-1.1,47.37262165655309,-4.106864020366049,-5.042294486721741,-1.7664080927974328,4.645053240982941,0,0,-3.2035730520374184,6.519104271134413,0,0,-8.950422649082435,0,0,-4.089558259582164,-4.1032437138031295,8.304267888811992,0,0,-10.390708870415184,0,0,0,-8.702737568194971,-3.239799418375699,-2.6336265231286795,-4.6089905858869615,-5.256064007672794,0,0,0,-6.085637307312802,-1.7215246842712908,-0.3746147578301752,0,-0.5871304060379585,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.482674691984454,0,0,0,-9.30523331059603,21.948108742877555,0,0,-10.213625,-1.1451937039533266,-4.049303529155586,-5.106994308640466,-5.49612054869865,-0.6279831522166743,0,-5.106237823563697,-1.104762462492994,-0.17040027741977393,0,0,-10.213625,6.461758192756868,0,0,-7.6332552253121575,-1.2872260947578331,0,0,0,0,0,0,-0.1181364579093513,0,0,0,0,0,-0.36197483663583657,0,-0.961562388281064,-51.11810269652568,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-1.8324518830503074,19.324565547695027,0,0,-1.1026388902465925,9.795323129159136,0,0,-6.09712774983977,-4.955558638220352,0,0,-10.213625,-0.4530405697916379,0,0,-1.8217104406995093,4.154980342874573,0,0,0,0,0,0,0,0,0,0,-0.7167360684325456,0,0,0,-10.213625,-5.025810496096293,-4.1000000000000005,-5.117227828125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,3.659969389969911,0,0,0.9069132502075559,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.112155375443688,-3.617404339961243,0,0,-1.1115000404071909,0,0,0,0,0,0,0,-0.6941928390722537,-5.116800135393046,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23.548050189028636,46.559092725553356,39.22486578014468,34.51771029777026,21.734180139056445,41.231525642921646,35.820235677119435,35.98907568268316,19.504890029187752,34.60118009512734,50.783978429842676,36.46621696952705,29.78758175279072,35.14364238075827,49.84607453282706,26.83729273974576,17.63704859121463,43.98899038413304,54.379402642013524,37.898787946595334,14.526129496612892,34.15542955258792,53.88322952573739,30.133090844438456,11.691384353906205,27.176567142977685,54.5839178651398,31.087880500808556,34.25581423087518,45.650620378214214,21.37105873601611,31.94962205070505,24.93881329000091,-1.7412496314925516,44.75811819080981,34.65974080613573,29.099126589486094,-7.348624689748137,52.2462197386062,34.118510799748826,12.889800082058766,-7.49992681232748,53.78281272570265,28.817714118293196,23.33529329832307,-5.305939968367245,54.97360167481104,25.147151453652757,19.19934729660424,-6.9041993955923,50.69069065491205,28.05769561917203,26.859967610662718,-8.806569595558265,51.826366347928165,37.5616184926465,7.226316959054886,-12.568864174574804,48.49671502305711,26.204913914729804,4.501657426441082,-4.780175348961825,48.38967741831037,6.7941402139802465,21.600600379762092,38.329443834379255,49.80668906197022,38.1677639588321,27.524699117516498,29.162999241904323,51.24673595615991,33.48321152381746,16.524658431326213,34.37818516624752,55.21356969448016,21.71191433815944,12.109406952645731,38.050359450748616,51.91042736085044,18.56554469754763,-6.652772760266032,30.69201245083063,44.43862717760889,35.10057025495233,9.189595827746617,20.163555708910764,54.683232093057406,24.7560661186858,15.3125394519774,30.865551324243476,54.11595846189023,33.33303232344184,14.14892575641871,9.692637873685445,53.09172719056015,20.887412558464053,17.00570374722526,-14.726720488005885,53.3201774288936,25.273150494551153,0.48738262530197485,-12.00282361609202,50.41018424789354,22.591571317300275,13.873685172670774,-14.173636891682424,54.02613516315714,33.05894884619977,-1.669129393902773,-8.00499610020833,51.559076802851166,9.40779402261995,-24.304100959689546,-15.30733551202446,50.99555688093214,37.61358301226209,9.621290311849295,-5.821546793891381,51.7866028897249,14.659871118762673,4.294949737689528,-13.023048205963148,47.03990387940961,14.276546834126373,3.018247087512157,-6.037797014957762,54.33206973082385,3.930107491398105,-11.997116918976435,38.94119115868722,49.33399845743036,31.751661910556926,-0.4530132508776932,37.82873513012462,53.346452812177,28.58595111667575,14.612389693825989,33.214398634569534,54.99018610996052,29.361639406594264,9.063733765725853,28.846131802752264,27.100168889585664,27.165700486604532,24.689443722019124,33.67466368042162,48.90455714235458,32.53798810732087,13.890746427568422,29.51804452438026,22.271764338327355,24.38752465972967,27.544393828624663,38.89373306955343,22.87459504995317,26.814957583840677,10.951629269174019,20.614247489989587,45.977516238057966,19.55223297113514,16.533452236022363,-12.59860820813398,52.81163118201809,30.522842800710446,-3.7535352099946317,-12.523428359807466,46.18427973447131,23.79590483646721,13.329536484954906,-11.152971119504793,52.06103989507909,23.22069297691746,4.699398392239324,-11.752318429411863,53.96212761875946,37.47131005682703,11.757872752608389,-21.92491864719603,52.63164912876951,19.312131497296274,4.771255484681198,-9.764785224155979,52.98197747143645,13.510187813524276,1.1198631902437781,-42.62720038095838,47.444197438656744,11.991259223309495,5.830811197482725,-51.069868441086335,55.071175727604995,0,20.95966510837151,27.501200028435306,53.30444074985022,27.970344042576276,-21.810887247453486,41.22006455148407,50.83863681150474,18.767829218336207,11.501647463331249,20.61978324435903,43.79237280316647,28.329002061310728,0.24826489317119504,37.47095488873873,51.28923808488986,12.107581327753667,20.486320302676543,23.89760819588548,45.25091418477545,25.896002076974433,2.387079052407247,12.299855709234414,56.341865468334106,2.8779183134438795,7.723772702211624,19.24838483124427,56.39391448332104,18.139020976286414,0.6946684166159303,-0.08243715314578225,54.40644676610623,3.7258271534572156,4.84367506453443,-13.819595704838836,52.99771809780075,22.28138568569538,13.492829829075863,-11.142991347903942,27.34074808235734,7.249968852437658,10.559187088660739,-38.25973380794762,52.2542704881302,14.842593546667386,-1.3095227715725124,-9.46278096397842,49.81354654317714,0,8.364931031721285,-11.248261097557137,49.20772547993595,6.62073667910586,4.682820707171407,-5.1000000000000005,50.52576234788169,0,-2.224335152747315,-4.688261102428344,33.229894383855644,4.895677464478217,-6.10129625801054,-5.164238958290262,43.00942183464884,-0.05190653979631341,-0.4623486303247475,46.41858230181274,33.18405324676613,3.444726981553907,-10.213625,46.29727190721883,9.462371400316265,2.940626709216585,-6.654077893640769,-0.1,52.068427974246056,4.095594643300612,-4.680673562898603,44.512378990459005,0,0,-3.3650193457161284,43.52824148648837,17.957292021130392,0.036605860099492515,-10.213625,43.0521675699777,0,5.445429020290595,-0.9957210798101805,41.03815504078232,0,0,-1.1,41.64809050039523,0,0,-12.273871813152958,-5.101234636056943,53.374457123284756,0,-0.9355428184688575,-3.7172440082089473,51.468794927908135,2.0570721649278827,-1.111289523839005,-5.076598121894666,51.47583931804578,-0.5845402403166118,-1.1113513503334491,-0.7083197385126803,13.808419464436735,-1.5836889336496638,-4.198568347367548,-4.026280377590582,46.16983367401119,0,-0.21244411715732225,-4.637127046497695,44.71270095079621,0,-1.105799123415183,-5.101244209301567,40.916496107150955,0,-0.46445320112695204,-1.2828220086900401,9.193397986863005,0,0.9571410505188704,3.381939895098735,48.327025887841515,-1.1456234422516354,-11.4633045090635,-1.4240035872543695,50.73495079015803,-0.1934125059328871,-13.672362768637889,5.356300461314578,56.68666145758295,0,-0.13978159004289736,-1.665612113461645,53.80497267830609,0,0.42101049486169906,0.8094822380663205,0,-1.12399940525112,-11.688878735270388,-2.2609492837634426,52.20701289519305,0,-6.114352737398589,-0.9331238288229594,49.01083899002776,-0.4440863439286952,-6.1000000000000005,-1.2022968842184905,22.38870908869062,0,-1.105489258040218,-7.846295234785751,55.6042033081187,-0.8894995617996029,-1.097855046556324,-9.751010261285291,40.81963527346427,0,-6.124890951282474,0,36.75522355101056,0,-1.1047719418774185,-5.101243853214776,22.818121245763884,0,-0.555270675685094,-3.631244682801385,51.5182036334348,0,-61.11601882849373,-5.1000000000000005,21.945466454639806,0,0,0,0,0,-6.1000000000000005,0,0,0,-1.7559291558824182,39.52267161653691,13.769239373108807,6.594699989716262,-0.39500703623215466,40.4841923874769,0,0,4.355002854903477,34.19944772836742,2.8653597230621353,4.320424105639228,-0.00801715960346705,4.46447346564484,51.07843062865267,-1.3218859422735543,4.715964884356607,38.42701605513494,4.126340127167075,2.7945046548658095,-1.1058763184230984,-0.1,55.990426255394546,0,-0.7107571875261101,36.44355618513367,0,0,0,11.391211587539445,0,0,-1.1,-6.675441495621903,49.095009081069385,0,-0.061435819442921424,-3.974032915298387,40.47611408923503,0,-3.372780145133462,-5.044671308786572,54.3041477432337,0,-0.48319006923786373,-2.6051413321681136,14.862038403042536,0,-10.213625,-2.996849743594614,43.119398518272384,0,-0.49112105408961393,-3.6751744214807376,9.943111545532718,0,-9.804601327217403,-3.3845292153111046,9.478080457492673,0,0,0,0,0,-7.864489274147099,30.129519957241683,0,3.558177933764891,-0.5810871790210738,0,46.4075149686063,0.8709352434529314,-0.6499781568853982,-0.23063434654976886,52.45760618861871,0,-10.213625,-0.9461298018636658,14.58798470723769,0,-7.480624241081179,-0.0891362446306867,53.3631007036883,0,-1.2086389029778473,-1.0706556664990454,25.565505222167154,0,-5.936740338311335,-0.8809212853375152,46.38100337600792,0,-1.1,-0.11133049476687858,11.502987080378848,0,-6.376761221226513,-2.5490816080037786,54.5782028339924,0,-0.14398562848012839,-5.2194281572060826,15.756154439562351,0,-10.213625,-5.101220049313425,0,0,-11.379169486107635,-5.101291238584995,14.10484555817512,0,-1.3567865523498632,-5.111161641727804,35.6086791969398,0,1.3439555410147375,0,0,0,-10.213625,-5.1268445800786635,5.568660734923313,0,-0.961981060219382,-26.82936694123227,8.097596846981,0,19.38656607626127,46.39642334610163,-6.499858466179009,32.21810907125479,5.265247960404197,44.789677990571036,-5.9332263740433335,29.973521368543796,1.6816871091484695,45.43438212243176,-3.603935966373742,31.76866876464883,-0.07647825523194274,49.331981028222316,-9.42082964441889,14.618689195615685,14.133289168088835,24.071951420878065,-10.662235277551542,28.740607400834012,10.876162228929147,41.55157878841966,-4.675305417295391,22.87840974952395,10.04590914922655,44.426571251913934,-14.865442916084575,25.191120547196267,5.204266464616304,42.08895353020626,-8.191785137777885,10.92154599928456,-7.24975370653883,-10.84372161437112,-8.598045087967462,2.2154585433960383,-15.223635437740011,-22.558037134363296,-9.141709958622474,-8.830824702212853,-7.225607885248852,-5.43910476848399,-18.48603987246996,-7.602691703886337,-9.12971672385669,-7.4353337907832,-11.730912878525654,-4.169886662458972,-28.219321485583592,-17.422988802918915,-9.196788494553433,-8.879583066808824,-8.51953489390381,-7.55821577557437,-8.399145310478145,3.6876521177116697,-4.55034806497658,-6.257510985777927,-9.823383261811399,0.9505261903276809,-22.81206606370631,-11.42688612159046,-9.646503474302428,-4.935062606287238,16.205730209821173,38.958932798426794,-5.267288118302855,7.15909377980992,-8.87387840536718,-3.993819299054169,-0.18757267421101512,-4.477740755164229,-1.5489146044039066,5.188106384738362,-15.745689033252368,-4.677632886446849,-13.504028647559645,4.457114138347067,-17.035155203210653,-5.781886579082974,18.89832059469525,2.2964679809535142,-11.656356962363919,2.7117956646034735,-2.749799908203628,-3.2556200155998267,-17.192059860359706,8.443542795123857,-4.983229748493265,0.6544864188814788,-18.36778773042984,-0.3383408759733787,-33.87863603061071,-6.676760416370143,-21.9968525741808,-7.579547053381561,-49.11378273160526,-14.445932994390224,-11.99513272683824,-2.93337810971626,-20.743457362754974,-36.98451780870821,-15.8444645934804,-0.21890433664064812,-9.023357150721111,-19.49034891372022,-14.07992329937194,-6.258979521301686,-14.619124186276593,-22.843709185295044,-11.92814588045973,-10.137463971469188,-16.599415562931775,-23.483241809353274,-18.597114789801054,5.582486146346563,-6.804959248256968,-48.03331001414168,-1.2758415623099888,-5.842360591137368,-13.993568264219544,-13.663842034986043,-17.34272929331465,-1.7665919279249627,-9.12060299183425,-9.742220306650035,-11.3027019030969,-5.948708200094574,-0.06974813922495438,34.18763577274761,-24.217770222950755,15.245052161832056,5.504582270376725,30.62088907390534,-14.214265691243464,7.799122838786496,-14.558775179512917,5.761989750612276,-4.051289787864524,4.256575358604294,-10.711148297916083,0.08253367488060484,-19.459748396501062,-0.7503454887517597,-24.114662364350824,26.334700911374874,-8.562285842215157,9.25437357840216,9.618666487265731,16.234619298279746,-17.808655306336668,5.012410325949441,4.534268937703198,6.078666635785929,-26.78535957270601,8.052107977077345,-1.8694723973120406,-2.3979400579912165,-11.858437015638277,10.570227684249467,-9.253286613238041,-15.904479715931613,-26.942939294542338,2.6850882442132376,-16.441706470726924,-12.262537350059064,-14.763486042681242,-9.101148158847273,-8.787591138782123,-21.844423865269704,-12.462237853759493,-7.896123096083826,-8.669744643974076,-9.477014568027453,-9.071904779727472,-3.244308264286015,-14.831988472560845,-15.442314479309317,-8.59316813281091,0.5182459233483281,-15.429509310302183,-13.564957629300634,-40.76716226310988,0.7719825463167633,-12.065236509677568,-9.611780201127361,-11.113572142456913,-4.393585089439841,-1.0223993316257116,-5.122475095784546,-4.101846756352482,0.9511078627572243,12.172010798193732,29.198851532488035,1.7802434568370746,5.293395985656936,-10.199733323125043,1.7409605204328824,-10.631830996862682,-5.5080586634727755,-11.786280265750152,-5.762416745976617,-14.566834409269264,-3.5348101914703163,-2.7716075721690143,-7.183295284257528,-10.183517285559828,2.575493769065562,-35.17294562523281,7.200912364437668,-7.790000000000001,0.13425240417151946,-6.612764252848127,-7.72388671049439,-18.64272261166417,5.46022215101881,-12.58423979481806,-3.541489104027017,-16.0124411416533,-2.3658820363193858,11.752320693490361,-3.445250136284927,-11.112124789354073,15.462903090879903,-25.680297578328968,-16.771365226136957,-14.638189396100692,24.813024505921423,-8.716433221595949,-24.247369989461717,-12.414940404430464,1.4798424582220564,-9.599630941427266,-45.16575526283808,-26.206741615524,-5.454788306441412,-6.153430588898484,-9.867663176220088,-13.02331194324485,-6.71192345568905,-2.8069824248868747,-12.832399601464227,-9.803549591133889,5.165954925694907,-4.353668346369389,-51.8913968336817,-7.818034176008986,-1.2167531722040241,-4.26958024156084,-7.59371773260745,-7.132499615937923,-5.786301100342818,2.2617559527821944,-14.747789187831984,-11.123583085920158,-8.881305887302794,-9.077823341412468,43.20453062953784,-12.048960536802031,2.360939107733329,-5.710084842896938,44.567755424411786,0,1.3321144509992406,-0.2709019476759025,46.73671208763636,0,0,-6.1000000000000005,31.195206763408535,0,0,-10.213625,38.89034122508666,-1.0282595299365176,2.709180336773031,-4.174656733812693,18.16217508481207,0,0,-1.062437447769257,40.15520489578381,0,0,-5.490095984902348,8.53386289715003,0,0,-8.568983320160982,-5.985163741498647,-5.606404153925689,-7.858086138442974,-0.18450319645047175,-8.71173205839949,-1.7480226651801907,-5.77690431237746,-5.753863061216559,-2.104234269663994,-2.6287001221557325,1.1754153167364656,-0.4333793694926005,-3.8473940356062593,-1.276578807804529,2.3798296750596966,-10.563270406256335,-2.6320585661781566,-5.113955871970144,0.3640428752503668,-0.0916474235455663,-1.0105507536501008,-0.0739714631117451,1.290881931515695,-5.920447423170898,-29.361669894135904,-3.3492714873399057,-1.0395404372186803,0,0,0,0,-0.6977143195509387,36.39921005759808,-4.1000000000000005,0.8438578493849054,-10.779743988882045,-3.034354101569976,-0.7305486380260805,-9.442986144949941,-1.0450605105872917,14.999671117893895,-4.1000000000000005,-0.1067438200549109,-1.1044611683126073,-0.9825977594798696,-4.1000000000000005,2.5155880856527384,-0.49166133722087,8.992537416180792,-2.7344952216873972,2.603988940052796,-0.6784257621747398,-0.710064288627072,0,0,-10.213625,-0.7772550046294073,-4.1000000000000005,-1.8105081705787354,-1.110513779393777,-1.0875355595931342,-1.4636100352740333,0,-11.618272986781461,-5.00648052099892,-2.365739475342939,6.788740605298349,12.173127365703468,-5.57254142362183,-4.1000000000000005,-0.2765769370561111,-0.7925533820212731,-5.1214532854454085,-4.1000000000000005,2.629207525872507,-1.1054891482411047,-5.101249535606918,-0.19741379844181567,0,-0.0924898750015124,-5.140683118185125,-4.1000000000000005,-10.8266921048651,0,0,0,0,0,0,0,0,0,0,0,0,-10.079748461436665,34.54490650465995,-2.7369531009056156,2.455766299156162,-11.348404345836553,26.083794152563662,-1.3598462480130125,-0.5729630751022318,-1.1,3.0067213648663174,-4.205438290611348,-0.4577332960227891,4.969290716915815,0,0,0,-5.987704628822198,25.89796262259308,0,0.6794123987545625,-0.4569125874842806,-0.038642625148100775,0,0,-5.3109412606404085,0.9745944356285527,0,0,-0.6691350522443862,0.10213497566823936,0,0,-14.354343122515376,-8.145754181412427,-6.693935755385272,-8.601898007953597,-6.335179351159752,-5.1000000000000005,-4.465298763960528,-8.855745130181885,-1.1155290066854417,-5.054165694407065,0.6897136616260653,0,-9.078466644215052,-5.0062508229865434,0,0,-0.49616530490868405,-40.69114467739238,-4.1064154589587,0,-5.646989030890987,-5.116154191136436,0,0,-0.05813317459877312,0,0,0,0,0,0,0,-1.1007038739825645,23.58892728995379,0,0,1.6875487116593233,-1.6805063012975285,0,0,-0.22923818157534515,-0.197554867470212,-3.671581484565225,-1.0495314334916561,-0.864446906268169,-0.5673553294270127,-4.1000000000000005,-0.10640992011640904,-1.6607665496711967,2.240021068132971,-4.1000000000000005,-0.1630647506012018,0,0,0,0,1.1191794045504473,0,0,0,0,0,0,0,-1.10545058768546,-5.106975,-4.1000000000000005,-0.7744618620002723,-1.0573578026755388,0,0,0,-0.25113457039449244,-4.981228997739989,0,0,0.1285133819042887,0,0,0,0.3717044970763972,0,0,0,0,0,0,0,0,0,0,0,-1.0489433361517888,-10.214805061253172,0,-0.5889616227546001,27.331540264167167,44.03967101997305,21.540069348709867,23.668872255302762,16.32957707179992,26.644502844475646,47.831799395444634,24.34106973755664,21.26176189217033,47.1949181679847,47.01709795592146,23.070920109591302,26.100234037787605,25.90458067131982,45.15037674475914,24.357045939901287,20.016870114944602,34.430164811662394,40.7844151594537,29.391009402370244,-23.720591969702333,19.70152386687659,39.151930297172115,24.262372547997714,16.139374672754155,26.901690842671503,21.48223589942348,22.320995951910124,12.213749864610158,14.766444777696874,10.894578386881495,10.860737206279667,23.80124033041063,-13.696451977409602,46.53519691884811,28.637594866905815,18.46822543498184,-7.255544389439633,48.280278796695356,19.833714594817703,13.73607239253345,-9.415712823686235,43.33461292997699,15.597543006044575,8.452373682469009,-42.83245720775343,39.36232921428409,8.067188007106468,12.83710178866423,-14.43809495554352,33.991242230924726,14.708568952122494,12.456825857619124,-7.2403724308150315,37.096580450842886,16.84989239063334,27.638502042518844,-16.430265177816576,21.82816050630787,10.442513347856169,-53.91048740773345,-6.089101820650873,45.76907762700355,2.643694545176086,24.136685752753387,34.36699634793804,3.719836572117076,13.526374421034163,-12.197496302797347,3.117743847868672,2.602124260625952,2.8777350872702296,-35.60659802607495,3.863712034516121,1.0116468650371337,-0.7796769899185463,-29.353701502149228,-2.3798285976139164,0.9230794696256855,-1.430636751516956,20.0393812813763,1.5681020903858396,4.708849093634109,1.823133587433412,-31.997332093455412,0.10570493009075667,2.379212419675174,-1.4917121081535143,6.068463918510593,1.2226093339376225,6.33216789323194,1.5601127049365713,9.864599098343676,2.1083115559420107,9.197152652681398,1.5368059403621546,-2.8134748125853757,-17.568393072960987,4.329903451169742,1.2700796260985114,-34.328805407589485,-28.126334115473423,4.135891079355763,-1.3821258801156715,-1.2166393262466486,-23.50903553697141,-0.04124100453185827,1.2393468895399482,2.0283550464300593,-9.706114476249525,3.489090632363927,9.67303559423588,2.7715674043805762,-9.770414033701169,5.701423178715434,3.132682411767811,-0.2095941967150793,-19.475831636704875,4.6123264615193325,-2.0822288767544013,1.0122998870713285,-10.053591295720603,5.208996100622434,-0.4918301761456806,-3.4598819350448284,-5.101253446393065,3.238162657684995,0,28.805835692667593,20.301900755375826,26.997638155962733,18.900648159943707,12.72210086133938,37.16492555651603,13.528117069534794,11.200511911243808,3.837424446189882,7.824905604519307,0.9522712917179248,3.5901984517922694,-14.953483980846954,2.0491976361161286,15.877074610535946,21.567618182183406,-21.494205191876315,11.147035957780842,8.435037158846155,11.84806980782201,18.938140880620654,21.5338515949796,4.26380863753199,3.9914626685405645,4.551098639127536,24.917900436283478,2.873136328246922,5.676888762126778,28.874805430052465,1.4002209434980462,0.8084754779487934,17.642661264587506,15.891480408209675,-14.418808703374257,26.441748689923593,9.716603501509661,31.130204209491133,-7.006712354104416,13.001207101548518,7.445718231283631,1.4287211354732021,-29.257143941328366,3.4522688398709818,1.7237155707857705,-0.012507462228992298,-45.937057246896174,6.465914500447893,2.656998403112032,1.9521122402608564,-24.538585164464678,11.058958920313296,2.795250176659432,-1.7949766406878371,-17.351895737648885,10.8664607510693,2.7362605813846144,-25.22518150509499,-26.058319041306337,3.7604694519065056,-2.416374108464118,2.476133888428546,-4.927062482999311,5.546591120855411,1.7270211472572323,6.142168743721141,31.984740928434153,5.798523706965659,8.811525479850442,-18.685461619466928,2.3597919192703882,6.5697456696405645,0.7364418222588915,1.7108144806266088,7.7877642146885915,7.267648106600259,4.575438977136348,-1.2065113150806388,3.1249623990386004,8.95228050869003,1.9227020254107425,-18.03055402581748,16.868137587207045,5.922846366165449,4.159549360116141,-11.113515902927492,4.196172092006419,12.406698863416167,7.178219297481468,-0.1616441846762955,0,8.666153823820702,0,13.001054178593954,0.3605764111875921,2.1799859582232752,0.8197530406712256,2.6770353466179677,-7.287867402769071,5.593740426850465,-1.3487354024935136,19.253694269487426,-19.42818522961738,-5.526040762033723,11.7302155773405,3.3789368813864074,-22.699685372119234,13.793456271974787,-3.01411584837505,-0.03541868559547924,-5.111639032639987,3.615991002043836,-0.26681676599285054,18.882181401718952,-8.456568218810206,-1.6596711298150284,-3.229281282506594,-3.165665486623523,-5.1000000000000005,-1.342716699190106,6.613369697987272,-1.1,-51.06116610918429,5.9793700761864335,0,-5.077865077310163,-25.325623485514413,-2.0786760948346243,-3.2498200448789754,-6.884064151142785,39.89370616810914,11.536282102270178,2.411806844199203,-0.7314960081108425,42.045585770712016,0,-0.6975630628147522,-60.654634139453435,-0.01979452310592958,48.50292979905877,-1.252212258189895,-7.224915677482924,24.976472400898064,0,0,1.649070563177637,28.287298887556663,4.856690200008822,1.4473117394564499,-1.8142419625786195,40.76699208181124,0,0,0,39.05433594070452,0,0,24.60733950954148,0,0,-0.4133962211595118,-0.3080172942113919,-4.94597789569394,43.52440195551338,0,-1.1115007332805797,-5.492679181788457,42.363811970233535,0,-0.9173799904854866,-7.016160480117073,44.40022196327605,0,-0.6689681631457903,-5.1000000000000005,21.948062076873885,0,-1.2393752452087776,-2.0436280279454944,16.040222143150817,0,-0.20566099277984462,-4.22662451526144,15.332152987632348,0,-0.38527537862832245,-5.10135,15.80022220491577,0,-0.32214035502535715,-4.647110299414511,4.833234443122822,0,-0.9354812291457177,40.77095366776355,0.36339509080894605,-0.45231490199853513,-6.1012493446363285,-1.0417693158845045,2.9975056362597945,-0.10700668505433619,-1.1114735473760537,-1.0943364174980257,3.235180582277181,0,-2.264212744894361,-0.1,0.6957003904767063,0,-0.8448706724407578,3.1289591238035435,0,0,-2.745929190148704,0,0.5992222461353591,0,-9.54404101989548,-4.855122652202803,1.249856894975263,0,-0.3363858760139027,-0.5677107604159429,0,0,-1.0959259215883328,-8.228884852352113,2.9086146157276205,-1.0649643044145525,-0.38006279263422943,-5.070504295222071,-0.013199773751190592,-0.3963955665465986,0.679777978974364,0,0,0,-13.803760534674101,-5.572511309522468,0.8261064464430222,0,-1.1042642323691871,-4.529720839012571,2.764360209368849,0,-4.559127616135999,0,0,0,-0.1090722970238371,-5.101354427143749,0,0,-0.8237313550488441,0,0,0,-0.5675564952866737,30.001303630698956,2.70873814889032,0,-1.1112873458407193,36.2627258734429,0,0,-6.1000000000000005,-0.09738164031246614,-0.16456829919544252,27.90267695477946,8.693772808531456,0,0,0,-4.7436497561906865,18.15511713964141,0,0,-5.867293528399933,0.15796098433696903,0,0,-17.737395768732547,2.188880846856584,0,0,-10.213625,-0.06269862728408425,1.2137316742328852,0,-6.104032501314265,-3.5200564411325375,40.84682018122414,0,-1.1058750215271211,-5.1068654318846285,6.885204871889141,0,-7.460242768799056,-2.503634320667811,-0.0668602906469063,0.6149056606305079,-0.024484320316795306,0,0,0,-6.105688909718563,-5.1000000000000005,6.563063889023491,0,0,0,0,0,1.0928011068765624,0,0,0,0,0,0,0,-1.9013612674158702,18.930330371962018,0,2.257962316213151,2.36773905158126,-0.10668946766944505,0.7471110085951774,0,-9.00984757532069,-0.6110048031762976,0.7105992235085425,0,-6.1000000000000005,-0.5731814433883177,0,0,-6.119177313485687,5.7872001849835994,0,-0.10680657284825171,1.248350228027587,0,0,0,0,0,0,0,-0.3200837530855813,-0.1,0,0,-1.3271154730109855,-2.7711848142012774,1.290295126073107,0,0,0,0,0,-5.631538201304906,0,0,0,0,0,0,0,1.2803518697581273,-5.1000000000000005,1.9658057759109737,0,0,0,0,0,0,0,0,0,-6.106654044495603,-10.220494985800059,0.7333160552969251,-0.20290482468980084,28.054818323924877,47.18265652052224,-13.369991536312574,26.19092005165849,3.031341159978638,37.06675198848391,-5.652810587492083,16.22815780472475,-11.870181812773858,38.05482111445348,-19.121005504549654,13.320703184074839,12.328365165473572,43.368162992247406,-5.676188034459026,5.113414779303424,12.580118367416606,30.830491562935734,-16.591096592477925,16.613796640841475,3.0479707310885726,39.08257351500667,-3.42969823843763,5.270154552910437,9.631786935406994,27.63296752539806,-10.144174949901407,9.770070449483892,-6.568351042592704,29.072740476055174,-7.747583586681872,4.219021265963177,-14.250213812652326,-13.225897138851648,-12.475591421603273,-2.2388541681994902,-12.034138920797613,-12.31646003974031,-11.192309465950753,1.6020325808247615,-9.559989016305197,-9.027427367878797,-29.737829088909066,-6.036464405192839,-2.6408076693265987,-8.519398831432685,-3.950227170780123,2.971530127486138,-11.491394480493573,-11.901341439373923,-19.759930064012362,-5.292522756173915,-7.394760070569252,-7.290692359191026,-7.3953795687554535,5.111734790275724,-3.9321478823879517,-5.1000000000000005,-7.725973822143059,-3.4900063814898115,-7.229373672358117,-8.10195936262697,-7.790000000000001,-4.507991002278987,4.490434259645125,37.56398105437335,-25.70494015376279,2.228867263234568,-12.386644296378895,-8.911312986090033,-38.32624684662007,-8.21311866111609,-6.393553157425016,-3.3600802308652353,-41.07191240876803,-1.9218221509988507,-10.424374598206008,-6.154854267140188,-14.337753857755372,-4.030809303064142,-2.8292529901042123,15.779155871845528,-11.119159711392403,2.842856635273493,-2.8426998254894795,-2.1891653033377274,-14.490547077779908,-4.08561030485922,-14.21877165016259,-4.972219760024327,-19.105732499090408,3.9147010107978932,-10.473585545140018,-4.4108852969383285,-41.54540644113467,-1.0404588140279571,-50.40253411921124,-11.767678493074046,-23.48918300357759,-1.069434432112633,-11.666945068916124,-24.330266131392747,-14.497274705987257,-9.908306027458822,-4.678995718707742,-5.974860925309821,-41.012485028337316,-4.084187355209799,5.015561068153514,-9.759128925518809,-4.107123016743586,-2.7722166279983074,-15.112830834560931,-18.076263342652766,-17.19561924466844,-6.917587126073169,-1.482800347367001,-9.690215618255325,-8.229464537148296,2.066342937243324,-1.5092567297448198,-9.41039246843718,-4.1000000000000005,28.021052996621272,-3.543918587889873,-5.1012429369382986,-7.741175752296122,-3.4930621851995647,-11.648271858120431,33.494264451212786,-11.147645447962368,1.892862318175378,11.793479931799238,35.51114511387212,-11.664278952105342,2.0562156158921,-1.8979770877673374,10.01737435796221,-21.392291515629385,-1.0913885548694955,-2.825105913647118,0.892452095425699,-14.101560740444192,-2.8464712753837884,2.276467155774527,15.926758153242385,-22.572377254841367,2.882385171995567,25.318915434579388,-0.7571503458414757,-8.02328715395329,-1.3488454841154502,-0.43646131713525893,8.789495208591905,-7.78267778081346,0.9474814042677369,-5.576960264887938,-4.4967621070691575,-7.798649815708839,0.9167995217132164,-10.240647518832276,-20.856083149027977,-14.657327956049304,-2.5669284686816227,-10.496413184575797,-10.988264203127907,-12.080488702582006,-7.194496629832233,-4.540201230901259,-46.09671311218704,-7.790000000000001,-1.957402849486591,-0.17353491355207123,-5.117227828125,-4.086102698765446,1.4062605281161533,-6.567465623866895,-4.758408259468621,-40.854346419736636,-0.768008638509599,-8.39234096480931,-8.405092852052444,-7.863065209751185,-5.634973223903115,0.9262516203718787,-9.100445455059825,-4.1000000000000005,-1.712059820195008,-4.118837983937459,-4.88787896529384,0,0,-5.931664215623932,30.896370043529032,-11.371293133022617,0.8785404322506641,-38.13198719091625,-8.127580145525773,-42.39498909196473,-4.000139043787389,-0.8952380246389859,-0.6153296542030401,-7.790000000000001,-0.34915308377106546,-10.675098551884721,0.9308095060397429,-41.018379542332205,2.499699565121033,-0.29956596549397885,4.59895377314769,-7.790000000000001,-2.366558538404736,-9.811763102266958,-2.079739244571414,-4.110811431644968,4.200987646866579,-0.5014693595394096,28.487006855956004,-4.1000000000000005,-0.30992444923193296,15.310149740521211,9.146104391926157,-7.790000000000001,-5.25164415824512,-3.5952918982418405,-9.00346139564209,-7.7927731471490596,-5.229330539240615,-11.066287300700086,-9.481159109837346,-10.832681706875105,-6.5552466247496675,-4.7919309578287645,-5.090403161830967,-7.686097903222966,-4.163954588738335,0,0,0,0,-4.434524706519114,-5.1000000000000005,-8.148020463627502,-4.592371911094328,-3.8064413814258318,-5.1000000000000005,-4.1000000000000005,-0.7449507131219376,0,0,0,0,-0.552946204627925,-5.157997064480207,-4.1000000000000005,-0.12246025370184628,-10.191146119711787,38.720227046960765,-1.0761698587975719,0,-6.1000000000000005,24.484440499592438,0,0,-1.096893934535439,21.67844214582984,0,2.4443024122104937,-0.6487034205965826,43.567264943604904,0,0,-6.1068625,25.853939490425237,0,0,-1.1115027080846345,6.932150799123589,0,0,3.0932194700106455,0,0,0,-1.1068451987021954,3.6100212734989507,0,0,-10.213625,-8.152561784770683,-0.7466553022098467,5.853912276999036,-1.1,-1.7512677280772082,-0.35496161021602934,4.340266913238392,-1.1100488207778694,-4.165422474625998,-3.776926828510582,4.9776710434986295,-0.22077740337957083,-5.1000000000000005,0,0,-10.213625,-5.1000000000000005,-40.04317313696201,2.9953127692496144,0,0,0,0,-6.1000000000000005,-5.1000000000000005,-3.804151854331497,0,0,0,0,0,-1.1052308823005461,22.936279579730403,-8.737425299599707,-0.8655100303075539,-10.213625,-6.2999417984364525,-4.131899306428786,0.6614680850640504,-10.213625,2.317618614366995,-4.169059304157506,-1.0922942062489835,-0.014235465274734871,-0.5693599899601708,0,0,-0.7917611123175498,4.933276418933897,-4.1000000000000005,-0.1066726300352209,-1.4585498489868065,-0.16598699281294257,0,0,-9.034118727590723,-0.1,0,0,0,0,0,-0.12562566411101728,-0.8968645641461374,-2.0361901238316613,-5.021165385352788,0,-0.0776145367708777,-5.118842254844461,-4.101249423495972,-0.586138012183471,-0.013361900349535993,-5.1000000000000005,0,0,0,0,0,0,0.45774382020353227,0,0,0,0,0,0,0,-0.5298653554029799,-3.913308188708196,0,0,-1.105440864685847,-5.10124924139421,-4.1000000000000005,0,-1.0658339588930044,23.945525234481163,-4.1000000000000005,-0.10620328388867471,1.7754304336870077,0,0,0,-6.12702487342311,1.648859776129547,0,0,0.6365953902498251,0,0,0,-1.8787837536196887,7.871374852694279,0,0,-0.6134487750989912,0.14762821508188442,0,0,2.3068847144144358,0,0,0,0,0,0,0,-0.6940124272246859,-4.7034313950308775,-4.107734160435657,-1.1767869110423124,-1.109545427001381,-5.1013247297763975,0,0,-56.826042642265385,0,0,0,1.1457478851038665,0,0,0,-0.7944249749717668,0,0,0,-5.684901810009866,0,0,0,0,0,0,0,0,0,0,0,-0.25825702975377834,13.577115149710636,0,0,-9.697670883406557,-0.5667880593566453,-4.115794671348042,0,1.4502112630807629,0,0,0,-0.5261509163463178,0,0,0,-1.0972246753061021,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.102102656373115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32.191476054210035,39.41082721487148,48.32085429070377,-15.811118365834748,31.563951105784138,44.763238764108785,35.50801227906641,-16.929588107929508,37.65048066642429,38.0929793273914,57.45628392358255,-15.144807994079223,5.640694886844357,42.165531606816316,27.72561068867627,-31.54769237325742,18.67347564919295,29.752101877255107,47.664482630159476,-14.08545781256663,-2.273111466786951,20.44576181381789,52.55699030330566,-14.001032705805386,22.267986552518096,31.319730614941285,24.831056691454556,-11.293101486218923,1.9235739043137943,45.609350080289204,5.604833203721249,-2.3781177290411617,14.27422711239287,-8.236348738805365,52.04528247800242,-28.394078288710265,18.78085144351355,-5.621286865945848,50.29903599736872,-12.691533004026207,6.255339534127524,-14.724811316322109,50.41505514037244,-18.903580103547213,0.4701032116616521,-4.480468257840159,46.209235875105875,-7.137591469711303,20.361257748946777,-12.782550901303422,53.228789733455976,-6.915692874016085,11.936540615568978,-8.79395389476553,44.36793551362545,-1.3735561418790951,4.917110518202154,-9.594682045921253,53.29685181505138,-7.952210118347363,-1.0333252636008954,-11.441109055899162,47.02763679873022,-32.36528325676543,25.390380984906628,32.12020701995278,49.93961164204093,-14.624177693518138,25.396065051282445,23.618544385798202,52.31059358393014,-22.178780830821754,13.185202495918869,22.09558446689366,58.71903022187823,-14.22690959464986,1.9315018532998045,14.590677322316079,53.158442679442196,-3.9135414055068924,26.163467662148257,31.75490338727046,48.59539105934715,-16.095167393089003,1.6455788815976078,10.785218489679924,53.3797467820475,-13.042581213405011,9.381958402231753,12.806285224272065,51.42153799261332,0,-0.9203431838503655,2.1750984390201733,48.98249691618497,-4.539466498580645,9.131900055676528,-11.699686576041714,39.19176193425291,-13.400805304040112,-5.174583180868323,-5.113352599018224,52.22325519769581,-2.0940686688327546,7.290333325206717,-6.596459634668893,53.89305137271559,-6.916649116309994,2.624615507991546,-15.546637935166034,51.61993275085985,0,5.027768145080804,-2.0385271517200025,53.48199920445689,0,-0.3278892001506293,-5.1000000000000005,53.09650508805015,0,0.20796977223661953,-4.781590920182451,55.63843974742441,0,-0.205625307998054,-5.1000000000000005,27.249285839477803,0,26.07136666980627,39.7439554962964,30.791954042145424,-24.10411765315115,27.29409820548483,39.157046126287554,30.100898277422303,-18.117183606084158,23.071669896471757,34.19241579895423,23.586737214105856,-27.801210421940908,-0.33763984367283717,34.184591767792725,5.702934539666732,-21.474362403354498,20.520942305588207,21.750632717581247,15.845517333296165,-13.540542901378625,20.952743308614632,32.65423198035677,5.852341818185174,-18.99527472032855,5.476892708550167,30.835678395451158,20.730242861182077,-9.826630012617123,-1.0226910073195687,30.684013734354323,2.73280235504032,-1.8343700095976851,13.472571099299245,-11.918100682737387,52.019803927719735,-14.643561395891382,11.327750683947816,-10.520109967215838,53.347410552763236,-29.540409696890055,1.3830806435357332,-12.280959208713988,47.502013479536075,-13.591373861596612,2.2292971850321637,-9.21719381347883,54.31755905363008,0,7.243377129559949,-6.321923710889525,52.67050288905723,-13.81450706384398,-1.0286329314659721,-5.100120249142106,51.60755276273541,-2.9540409697157175,3.131648199738104,-5.1000000000000005,51.5739841340636,0,1.6916200640557288,0,37.48931790202393,0,9.559347276320125,13.799711178642209,46.95241883663425,-20.36781184124212,5.868059443421088,6.281619720274617,44.50841077195959,-5.388213026930566,1.4604281070144218,10.448132900606147,53.21550526757456,-18.63733625001486,-0.1856977008962657,1.1068250126234294,51.51394610770253,-12.059610049224176,11.733527976315775,10.257966100366458,46.83646495301634,-11.330884025074159,0.7078015018645634,0,51.006495477091875,-3.626250871547647,-2.2293503408807873,5.851128585728864,51.98988826700038,-4.91193731303691,1.1137736976447232,-0.14129360743983793,39.93624590165227,0,-0.931178525427824,-7.437241460397795,43.51081938960979,-43.109709261223074,-0.38677245879651356,-9.745784357246755,55.31871275763055,-5.111602828125001,-0.006878369035382904,-5.1020688966515735,50.80175515474633,0,-0.08966948808534224,-4.856317817239847,11.61894471473985,0,-1.4270586822349516,0,52.40667801105079,0,2.7729675792448605,-9.119561918698531,22.393721810448955,-4.63890217943311,0.9841448015275562,0,5.538446163571291,-4.103634042252298,0.3746256753677969,-5.157562595874051,33.623925870392426,0,23.52123766075969,12.24814874879168,53.00866577140735,-5.1166722970881775,-7.561169075911842,44.6854857323175,0,0,-1.1058763184230984,46.84796303094334,4.617266318795951,0,-1.1046125,43.52571429500429,0,0,-1.8825134838737583,37.03914232799517,0,0,-10.213625,27.601702622928148,0,0,-1.5702589841606862,29.92725868612852,0,-2.5038760475707007,-6.111368689687686,14.193028899260309,0,0,-6.9128171340758735,-37.06956791704906,53.633755917725075,-51.06214782298136,-1.1106773103758338,-5.106905249889241,55.46827385936489,0,-10.213625,-2.285559001216814,17.916702700302956,0,-10.213625,-5.1000000000000005,10.508218015502756,0,-1.3447486350928608,-4.5473922799248605,27.66714697348341,0,-0.3843001970055504,-1.1400790888396324,10.034801970861004,0,-6.105938587697322,-2.771109932210312,0,0,-1.1046125,-5.106875551663634,5.352171594629406,0,-4.002170981688302,38.60006803886871,4.370533757447778,0,-0.8910899125636004,-1.0738744050349514,48.995666249193235,0,-11.12085968602963,-0.5720978925750013,32.046199986597856,0,-1.0858398206228044,-1.0965027268667387,14.489498789389389,0,-0.41950440259819094,11.111446610630878,0,0,-0.29053285870929796,-0.47278413948515774,9.211109834183205,0,-10.081573234482445,2.1664842439114382,0,0,-1.1118448804322079,-1.4393678489873316,4.821220908120541,0,-10.213625,-5.1000000000000005,51.68214495367391,0,-1.433511059124149,-5.112348658544413,14.735694696246563,0,0.6377338354957273,0,0,0,-1.1055688816213116,-5.101251369851163,0,0,-1.1197207415988057,-2.2339925324123744,0,0,-6.1000000000000005,0,0,0,-1.1111165816816404,-4.979950035310091,0,0,0,-5.1009685418083635,0,0,-7.2037166255190535,36.85335476274116,4.962822518196317,-5.11750262636256,-2.0024188728948755,22.061981623951446,5.106717188146838,0,-6.1064110009426535,22.975670206826933,0,0,-1.154408052266979,0,0,0,-0.9091541175004068,0,18.57202924857097,0,-1.113962134807514,6.259924008013892,0,0,1.9281953729652712,0,0,0,0,0.45608603848230483,0,0,-10.251206842452454,-8.626251996430488,37.293644660689836,0,-1.0404370592463938,-47.38383069852866,10.55681741341623,0,0,0,0,0,-1.0945272194782356,0,0,0,-10.213625,-4.664698582160881,5.850603131109819,0,-1.1074444132122505,-5.101661376097564,10.586180363378965,0,0,0,0,0,-1.177478037837167,-4.819387684739748,0,0,-4.052796274405036,33.469375871008964,0,0,-6.105314076699486,-0.9070457444988054,12.714678470498077,0,-0.6720702774592339,-0.18265917745485094,19.068572532032924,0,0,0,0,0,-0.06652553048243241,1.15105899046255,0,0,-1.6990212879300597,-1.0472336445114008,0,0,0.4103046707974507,0,0,0,-1.1,-0.1,7.5640940424603995,0,-10.213625,-5.1000000000000005,16.938928077651166,0,-1.1059846392492154,-5.101244287961502,14.885019568672934,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.17053468951261,0,0,0,22.230039967268592,49.0237859050132,-6.968335835325528,-20.710867030112894,10.665237532944438,46.500730338993904,-1.1210333540741846,-10.28375843997458,8.187663632655479,44.17914451014436,-7.071739659712293,-10.49381788648856,2.329162177630355,45.58765655849302,-1.3295098424385752,0,12.859147931854563,40.54197338164023,-5.342949005283329,-12.596087103792806,-0.06836466303592041,43.82147809722283,-4.45733436861187,-3.1143584349541498,-0.8288016871297694,44.29497087435881,-3.968576668352962,-8.693023236218886,-0.2199493529538634,35.11928890444845,0,0,-9.077524814432905,-12.851169790583565,-3.903011128016121,-51.00448354694991,-7.6740846734375285,-10.12890432059018,-3.2260888920767448,-9.700283368481337,-13.794189143305815,-15.288492061678907,-4.502664460071949,-24.122642877392426,-10.09946893526406,-9.812231523684991,-10.182433403069322,-11.212866098184303,-9.911638846028401,-17.714320387984177,-18.043531736061446,-17.526809875469425,-12.205210396515124,-11.14575398616405,-6.607759731479525,-12.381863544984428,-9.488275154796833,-9.814813092867285,-11.375907554423685,-9.662095691525952,-0.6308315241657899,-0.22595104036342023,0,0,-1.0278344439534037,21.367869758256468,0.5606096658438864,-12.74261323262931,-44.96615061469822,-5.377924818037503,-17.733580796278794,-19.99764649726131,-5.585930363312205,4.124949833329963,-11.453599842261339,-21.34138531374758,-19.52819632670259,0.7223166402610564,-12.924728504160793,-17.004658620001194,-0.05366504963375832,18.684990296129484,-9.895238906691336,0,-10.545433818932603,-10.206939233797696,-8.416083638026208,-18.215045899459373,-12.043641358118705,5.640978638987452,-9.14519434601058,-16.770030868878703,-10.59150090433245,-8.046632364882774,-12.257242428501723,-11.867932459249985,-18.988047246480303,-13.595225596648788,-25.331215973365374,-17.632355332163044,-11.76984386507338,-14.206144187791052,-5.189868958598613,-12.969540924561741,-16.554032376704512,-16.440101846576056,-15.119557377197273,-17.830385672204876,-0.8079569638205499,-5.347374572400782,1.4210862858436746,0,-7.329743071447816,-5.9750820256676045,-7.355485571835294,-9.702126914658349,-15.255942870691442,-17.63315885674862,-41.06966122238554,-14.743115058140036,-0.4693478306426133,-3.616892427057076,-4.101250249780072,0,0,0,0,0,18.54693475738998,38.73799896283715,-17.408911168445876,-16.89852763866689,-0.4958530811575792,36.41761571947105,0,-6.877888503917103,-0.3928740519910195,14.131335683125375,0.8287037910178102,-48.43377961449248,-4.449910141991435,1.8847281088927672,-6.668152961850996,-31.68874636630629,2.4863463623379065,17.094303957798488,-15.535517147049426,-8.859857915087296,-0.38797185524629685,9.571508246020946,-3.848681678957344,0,2.4657046072327224,13.05569540147202,-4.1012375,0,2.727028513183851,0,-2.463234747825531,0,-9.329437733679772,-15.182919823216757,-30.272962997512188,-15.876957047294237,7.35045825275377,-9.811283926152301,-11.907398147598375,-9.696975,-2.939411872370157,-5.484481965130353,-1.8983914567080604,-9.563420745477675,-1.6215857831586602,-5.04788952913303,-33.24516165278786,-4.59119486231121,-3.917273856835978,-5.937128965103881,8.287946822015105,-9.313039169571205,-0.8328406781862582,-5.052977819498565,0.5476644606163064,0,-0.6964847094659101,-5.1000000000000005,-4.101238866783426,-4.522083419122758,0,0,0,0,1.4223578189922428,28.96477915413024,-6.332860200386527,-17.438533497279117,-7.623305237671775,-7.777333948609905,-22.25508837953839,-19.731995578466535,-55.80225882384118,-4.601201813054646,-6.972845739533454,-9.799806852640575,-11.006089416727264,-6.077612201636156,-7.791243977864566,-9.690491370476028,-1.6361472199256732,2.7649656134004537,-4.1000000000000005,-4.34642412699425,0.321871590376008,-0.9586665294554164,-3.0075191094873266,-3.361520286827913,-0.4027417146668777,-0.5061858675501303,0,0,-11.112852627088472,-2.28839904719579,-4.1000000000000005,-9.546160463186476,-9.350835724680858,-11.40834886617807,-8.884411728114614,-9.690000000000001,-5.157375,-5.55262574908714,-1.4619816299584771,0,-6.029025608552735,-5.10698937080751,0,0,0,0,0,0,-6.397153577569684,-7.142432860366828,-4.10701922294754,-9.692545766473888,0,0,0,0,0,0,0,0,-0.9732223946289935,-5.158469875193958,-3.5602625634707907,-5.104576299805006,-0.13109812245058627,41.360160761569006,0.9907475309507469,0,-1.1140299309742565,17.842230478350295,0,0,-6.1000000000000005,26.796812063234828,0,0,-0.9351035495130608,42.558292454201506,0,0,-1.1046125,23.108036958159094,0,0,0,0,0,0,-1.0857401321244973,4.252054837313592,0,0,-0.7960218145973206,1.938468405123789,0,0,-10.696996416632778,-2.6687275810792745,-1.974026222234968,-5.101250544840699,-1.1114354047753714,-2.8407840536204976,0,0,-10.213625,-6.777498301283124,0,-5.117227828125,-1.0596777646409696,0,0,0,-1.1120842713542627,-4.775939494508539,0,0,-1.1116633058205534,-5.101391860660814,0,0,-0.38108836647961564,0,0,0,-6.111859983212694,-5.106883414101865,-4.106876698722113,0,-10.213625,34.47596154852011,0,0,-7.041497183200511,-3.5554826217831748,-3.4688973397275054,-5.101233984232518,-6.107322616647245,4.218831597465217,0,0,-0.9748251876031055,0,0,0,-1.1111392479000977,0.32086205198317963,0,0,-1.0673701320261921,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.861992615639692,-0.6117261351870078,-4.937569057066215,-1.1050832512750908,0,0,0,-1.1052988177384095,0,0,0,0,0,0,0,-61.17227828118717,-4.776266574991776,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.54651082965967,32.06514675019453,0,0,-0.5600406934421609,10.204278653774868,0,0,-10.213625,2.8534460452139934,0,0,0.09096951182995135,0,0,0,-5.484036717247472,4.683137161207346,0,0,-10.213625,3.4257917276857124,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.604516707909318,-3.04889346629427,-5.025851230051756,0.7502211323192501,0,0,0,-1.1172142779679102,-5.1000000000000005,-2.935429961515174,-5.106961837811099,0,0,0,0,0,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,-1.1,10.35748200005239,0,0,-1.3497481719581743,0,0,0,-10.213625,-0.1,-4.101057060108373,0,0,0,0,0,0,0,0,0,1.5421632080416576,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0699767730609,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31.60847741995339,30.26779013395744,42.43557659731178,-21.1362317398146,12.164761427207566,24.203776722420375,39.98077867216532,-18.508482651418912,15.402899280969962,27.59656555654569,48.43954573410556,-17.727590466813837,-2.410382596899282,42.56340226082179,8.999449650967577,-3.996867547621733,21.449315443478653,30.842994938115588,35.92029988894581,-23.36193815704682,-0.967983762698875,42.88451007049017,15.53683836002269,-10.350908116095757,8.704521709034601,29.38427491543003,3.374134204472476,-29.80280658641133,-2.3497273218077104,22.27316643448039,0,-2.371017863411568,8.053306801040824,-8.30692207918721,44.37159807503345,-28.010755522523016,-6.107011615635998,-9.64174418841994,45.46018874271682,-2.869919243162995,8.087422708592538,-3.554210997300171,46.40738434735958,-7.071347351905495,-1.1068399909163291,-8.183136764012044,45.378759262806035,0,10.113911207128968,-4.935225982997891,44.43002144841603,0,-0.7822156836097746,-9.696295126534341,31.20700011310878,-4.405959152120543,-0.1677764592632551,-4.397326318145265,47.117470146865,0,3.6796063850372054,0,13.474261983638407,0,16.468500398042654,36.25388850012878,2.029633737352341,-21.76696654674621,-5.238840818573497,-3.476270797488038,5.058132119650201,-23.816141232507057,9.402812094988338,8.510125696819165,1.7719193339480814,-9.704539019857183,-3.62259645966485,-0.8427762730210026,1.1950810068104452,-12.442636557409186,2.4026430240983907,4.769336753193589,5.96594020870764,-42.934306583973154,-0.5897080381122679,-0.5740493467459281,4.681387529622279,-47.075544004107435,3.369511580240614,-0.061656993111176894,5.51643023186805,-49.70260730075685,1.3347351094776476,-0.19549073560579094,5.825278663072821,0,-13.339366001734328,-11.864781024495521,1.8583241447320042,-9.690049751679766,-7.938384089527547,-26.012404505183436,7.810865314654268,-15.521049521687234,-1.0233127741777344,-5.1012375,0.14743758414960967,-5.10118111619362,-1.0223400997457432,-5.1000000000000005,3.834473140718032,-5.08274067407231,-1.0288475261283903,-5.1000000000000005,3.417950160808893,-5.09399681214812,-0.3633146724656789,-5.101111487133773,4.106037849654149,0,-3.262021078938771,-5.001986023337359,2.486163781667303,0,-0.840945436625198,-5.1000000000000005,4.211587762902251,0,18.15959864883723,22.626827587651388,28.084867736275363,-40.64647691403369,-2.32826509836944,24.47962649151227,3.0631664322957413,-44.85644814804828,2.8241570045490794,2.2027476888923285,5.845511479439598,-26.153895538742685,-3.4428205521768036,-1.814149891103285,8.236154021706621,-8.726647169871027,-29.504734397537078,6.797509388850673,13.318063628022024,-29.47962306552378,12.60809172669654,3.0573466936206746,5.726919059301703,-10.708357156496893,21.110791262385188,3.1100361088747936,0.8357547013759765,-7.4322358466221505,-2.358460635039005,-0.008777689381147438,2.5382119448972973,-2.13957658669221,5.872593524678349,-6.836739265403668,37.49783679375673,-9.63931640894323,-0.49854436578402067,-14.92296913104228,40.91738600617838,-13.740884377441118,-6.012106896898356,-13.56341892354285,4.993367891452375,-16.89378226435257,-0.6739929206644852,-5.112511109563526,6.082563186173479,0,1.5473667816935675,-11.029304800994375,16.05223714147171,-9.353831901745497,-2.7893548240196306,-35.971153861795784,11.373981841123777,-22.420361204632687,-2.6379916881033014,-5.004059398707385,2.6446026782744076,-4.399239635970726,-5.157375,-5.106987944992117,-0.40534155689727014,-4.7494500219584666,2.4978911958251873,34.059056494763524,1.308024559297822,0,1.5179751941394084,-0.09924953783569666,8.19846118059324,-48.755632246149425,-0.356258694893568,-0.23239660142540874,6.709419099135615,-5.1009162430467105,-1.0286200855299485,-0.1,7.945928930714945,0,0.765724882645523,0.00555250692165573,0.8022619715710555,-17.056643703113952,-38.11444702490786,-0.01871270255745405,-2.2720364746057435,-25.30422059929789,-0.5864806640134986,-0.06983208553601494,5.379533356303129,0,-0.2738951799377844,-0.20325050780649875,2.4414850681486735,-3.949853977392097,-5.66782593282075,-5.1000000000000005,7.917598780508183,-5.1000000000000005,-5.1081102027717025,-9.710350382069013,4.686580945068096,-13.782613668287985,1.9317392133104223,-15.649036042789385,6.926937521151884,-9.310139260926825,0.6090238918049428,-51.044100220427644,2.493955139330197,0,0.7819948746103814,-11.781722183120241,-6.509499674918088,-51.65610286336798,-0.21189502583406164,-5.1000000000000005,0.5653625131370971,0,3.8094424882808893,-5.1000000000000005,8.901165366874798,0,-0.1512226613898168,-5.157545125494064,5.280542461535655,-5.1012375,-75.53241114549324,39.93048528118835,4.517219224176337,0,-1.470558460642209,26.41415946513708,0,0,0.8541624054400525,24.424266651126942,0,0,-1.110684839142045,4.476655240420971,0,0,1.6929581232894033,-0.6371305891598809,18.804084284057094,0,-1.1172209367209287,10.223081002961905,0,0,0.8594877209412868,-0.1,2.4276489147950433,0,0,0,0,0,-1.4426700477979695,-5.101249118738062,23.340645705031015,0,-1.1108674610893357,-4.8683879443606575,19.152444049814093,0,-1.1,-5.106455518585276,2.813877608800335,0,0,0,0,0,-0.4369386427731004,-3.132344842676693,0,0,-6.101249041452405,-5.1012430748305055,3.5828809763024134,0,0,0,0,0,0,0,0,0,-1.1349885113911762,16.4951497816155,0,0,-0.19660809120064346,-0.2166575704963743,1.7776438927110223,0,0.030130657737674094,0,0,0,-1.1,-0.1,0.9296635876707522,0,-1.5765627934057846,2.970734017153733,0,0,0,0,0,0,-4.964887453070683,0,0,0,-1.1012962732129061,-0.1,8.873921465673732,0,-10.213625,-4.72419519819867,0.8356077753513789,0,-6.105904344590652,-5.102875057022657,0.9998413658213713,0,0,0,0,0,0,0,0,0,-1.18447132654199,-4.838824757181276,0,0,-0.42588484129361526,-5.087583352192255,0,0,0,0,0,0,0,0,0,0,-1.5618739525558458,18.928155414823273,0,0,-6.016463293076794,11.839209745126622,0,0,-2.5906857355448043,5.5454722379342085,0,0,-0.23925124311169643,-0.07829546560623718,0.8873995981049468,0,5.83375547618258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.523025936543889,11.247635374900732,0,-10.213625,-3.538381929057465,0,0,0,0,0,0,0,0,0,0,-1.4461394385926234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.1547083673685807,9.094760431026979,0,0,-0.8878393630623205,-0.8560988400860385,0,0,-0.4855814480863089,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.25197090252525317,-0.7685012602319184,1.1197901947991495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.745160072365715,37.52463419057925,-8.347778846871256,-38.21179535785559,-4.02507052435537,43.909247628953395,-4.474345468256568,-11.488288523119367,-3.405138361714041,41.22055065077666,0,-4.438052514735654,-5.157375,35.324540672386085,-0.22845427769581123,0,-2.797938589008516,31.95288932342056,-36.29780532129071,-2.5129287566499547,4.252093887814924,45.84473472605983,-14.626350923436647,0,1.0601001894240976,33.73632379026765,0,0,-6.106981560413848,4.775845407919098,-4.1012504514576715,-3.8868889738668324,-9.873570258806216,-8.584795182466918,-6.536200612172749,-9.260625672878707,-7.604895926087342,-5.230501340036142,-7.3997588350270025,-9.487365346957022,-10.679102829282607,-9.807584621097554,-10.435379215851418,-17.3849856114457,-2.855952624174447,-4.025906929427528,-3.917501565256243,-5.13144961427208,-1.245279800784981,-34.69814656519393,-4.017085801133772,-5.0838275345560575,-6.32562212314206,-7.084383090555855,-7.791250268030739,-9.697252569903487,-1.1258415611739698,-5.101303932223179,-4.100916268462316,-4.675894551109366,-1.1461162251537829,0,-3.5992802195079197,0,2.475970198197932,35.916959477699564,-4.653326126962701,0,-14.268591226571827,-7.063000652543655,-12.13467983816078,-13.688696428418176,-7.128149118143719,-4.29248663964583,-25.68396733241235,-13.680165496395077,-14.12271056343471,-5.188385350814162,-7.791248502833794,-8.18765048462003,0.4551452795087405,10.136062188002782,0,-5.105710086466233,-0.6919371113299418,-1.187938884659103,-4.11604868876585,-5.067992647168805,1.722923684274285,-4.576579833067676,-4.1000000000000005,-13.788108668196777,-10.660064521383584,-3.89602705542189,-4.1000000000000005,-4.893282469292993,-1.093215114146626,-17.76212363829044,-4.0500967877237946,-5.1000000000000005,-10.50032159688815,-13.853370236366768,-14.201384505080203,-49.12617126974196,-3.101402029602086,-5.864097161687574,-4.214213298798061,-5.106975,-1.1,-5.406068952128551,-4.106981908224749,0,0,0,0,0,0,0,0,0,-0.9492641010263878,-5.126572106471212,-4.1173757163814155,0,-0.5890768005267992,-51.112772328576625,0,0,6.533547958675589,36.123628778457594,-5.577043596229023,-16.619170007658745,0.254515868814881,27.312386415937773,-4.105343863409744,-5.1000000000000005,-6.100216707939615,17.490810927197458,0,0,-1.4840938074403387,0.16242690874707227,-3.666663867208953,-4.950309379112392,5.84724705304091,10.403404061451539,-10.641288123195583,-49.581632716841064,-3.341881310106985,9.472795547191375,-7.99511360168587,0,-4.364596915827992,6.027842752709578,0,-5.105857096106497,-5.157375,0.7604212562250393,0,0,-5.229314400376541,-7.30965722319079,-6.401808581804907,-5.111614074978618,-2.2995450485874747,-2.2103192197882517,-5.357236323673094,-4.531558381130902,-3.536530947399196,-26.09713550107004,-4.099366583765917,-5.1068625,0,0,0,0,-10.25514765051906,-12.183923441886614,-40.76364802741493,-9.690000000000001,-0.8788695866140582,-5.112050079737917,-3.5897616530153984,0,-5.157375,-4.500118296497127,0,0,0,0,0,0,0,19.63289582576666,0,0,-5.157375,-4.139024541728923,-7.815057533131791,-5.1000000000000005,-5.157375,-6.422393715221442,-7.611313457110102,-9.589108526030577,-5.911232090125093,-3.0495645159729072,-4.028413452250954,-5.079216418205924,10.346868618530996,0,-4.1000000000000005,-5.111602828125001,-0.7956711211780876,-0.5085465048660042,-4.117229213377584,0,-5.157375,0.20963666128747396,0,0,0.837817927725332,0,0,0,-0.6241417788165152,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-12.141159643257136,-9.736846081056589,-41.101952607406076,-13.834726290964241,0,0,0,0,-5.157375,-5.119488024804578,-7.7912556957172665,-9.702021847279767,0,0,0,0,-0.45713932841029675,0,0,0,-0.3565920329295451,14.52476823203331,0,0,0,0,0,0,-0.6605278127791697,20.59198917326714,0,0,0.8373058099893456,0,-3.776268574771001,0,-6.105490823232245,9.064642203073163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.251133885018619,-4.234539275857545,-5.117245835142532,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,-10.213625,-37.978281217489624,0,0,-1.0716382396365827,0,0,0,-0.9243337605386289,0,0,0,0,0,0,0,-1.169943085576529,6.486004654115479,0,0,-1.0616157733826392,-0.1928368638656943,-4.68808638274767,0,-10.213625,0.6107196252904474,0,0,0,0,0,0,-1.1104012984658496,0,0,0,-6.1000000000000005,0,0,0,0,0,-4.023648515186129,0,0,0,0,0,-0.014871123305877455,0,0,0,0,0,0,0,-1.0677120943150162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,5.449982872831752,0,0,2.270677871788557,0,0,0,0,0,0,0,-0.7722821366329001,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,-0.1988969524835844,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.118941607390446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.116475904768855,0,0,0,0,0,0,0,0.8961631428820453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28.803563959637682,45.31762406157156,36.236175891977375,36.04606645601906,28.641039459757806,29.37556922062451,25.64104277085788,40.274949038149416,28.414407344906486,45.04769957380901,25.11680737117694,33.59848018678819,22.33104569120138,36.984817588565186,52.59362448074578,32.89814485434708,28.243379708790524,41.79575284508335,25.575382881518323,24.17108256085906,24.663695570576735,26.667593096413576,23.912920034309074,38.16495462579226,32.339540840216294,26.6099430037635,53.32513059091374,26.203570476993946,23.509278400373386,24.723250725425224,24.967043663657506,27.586885649364348,34.93606816133393,-11.282965112710233,51.88951236842803,27.67063147815449,30.950816572432917,-12.332909926568709,57.008655694753806,37.7129285842929,23.129932811611255,-11.072133982108177,55.527053644825834,32.59060939934541,19.71778541922112,-9.06545356241961,52.64587707558408,25.5659113230756,33.03447602346731,-18.99225425318281,46.23525542389784,29.853787979222304,24.844398086177662,-12.021973868076305,48.99280140770131,35.87055613059379,13.103570867876524,-12.912946514660538,16.871997962747518,18.64832102203598,11.041866428154744,-5.544909166565209,44.337393034774614,16.19802123756849,35.69398694322824,35.14999122038989,53.12259078286453,36.30122350764913,18.434245213666586,34.62562126397768,57.55514534215572,30.08570800226759,13.744281658343148,36.58325575126101,56.40733573486489,34.01062551016624,12.340506408089336,37.21641973223011,56.079742632081356,36.854017030292475,19.41709306308583,25.894498976098134,47.00805084002532,25.495682123510086,4.041737532331078,21.291729705254827,28.19871442699063,25.05009741780383,35.645005111904425,19.419103848966227,27.49233593730682,21.53682836724781,19.223120100679996,14.405094617476506,19.514807238132597,26.988485525291516,12.361283752823578,-12.58966278104692,24.202580849866095,25.082265162527307,19.459443518000967,-12.165483475975314,50.21103234643019,16.27240848829442,28.380076000405108,-14.187924740268503,56.26265943380902,23.283622500234433,7.047308647979858,0,53.059639937697874,15.20442193511756,14.686993743984273,-17.643699042507677,55.286815870508384,21.925880433497124,1.5086056752972015,-8.543404340611541,50.276969359852835,8.929775269288864,15.325780169756127,-12.932190824348487,48.93600299566037,24.554765370232182,-0.23527508346812276,-7.4356081979141315,30.596449715670428,4.103665788044222,25.624085334460624,34.53357360888326,50.113074547338705,30.440634718763157,26.312190326931127,29.409403009808905,26.096783571285037,24.56328832783324,22.22311865558063,31.27000101961822,47.73787929619537,25.64757564575574,17.299671875386668,20.707855192362302,47.73221149644039,22.027840625836863,24.93430436124462,25.10132218565474,35.2039929755424,26.497251603424505,19.50043409699334,33.30604697812638,21.32351544611782,20.957282468717093,19.22484413670265,22.088297680548067,45.112431420615756,24.74592612433006,18.21885225908936,9.194695245792028,11.697429152986047,20.656796071753394,1.1074420966130925,-11.011350784595239,53.67821271570973,20.794663256818083,-4.457034487966056,-10.927080988144471,35.227118393017875,20.67988811478102,12.6232358133506,-22.555792862618492,20.094146557439636,23.486297993762022,8.630965719068453,-13.311079767589263,43.20694137317297,16.21148899990302,10.168970788638601,-20.131765483606724,12.775820711419769,21.79009321556849,6.3526939862141045,-10.762932732372482,23.389416546015912,10.441815690307948,10.653837780885636,-13.633259138078042,46.74952926546304,15.986575365065974,-6.1000000000000005,-13.286162446847637,46.68615500841777,0,23.68022087954489,34.24151960360981,51.46155589812244,21.04570609182783,11.01991093545821,17.357735954470186,55.812204656811886,13.356502664391463,32.52169748919234,19.573492587573977,49.095752920651684,18.02974149091741,-6.027125767421601,13.512098322972134,58.19016979212215,4.045489707741383,22.754185210851723,16.34915543812253,55.9225176961319,16.574484183787753,-28.29730154152214,7.518560985089407,35.97820857068118,12.398901371203523,10.52089264193111,9.631572622014076,26.98313525690104,13.824102111020851,0.9559756508556755,5.26977939053512,39.85378552619527,0,-5.893740971452188,-16.178079816844015,45.87349143139621,12.05964182702545,11.846308767620842,-12.654235837863698,50.73314281574922,11.42293288365569,-6.856410038799791,-13.835970974230328,55.47266363803498,5.547498915709671,3.3979131862278376,-7.209055075077181,15.78449869644319,0,-9.963337673598945,-9.58346356803103,17.04837056856069,4.348189399224757,7.885753436372419,-42.38746072455272,55.33217166818066,1.8523749959132354,0.3145215917671886,-6.977400994550578,51.079716142229955,0,3.960037928574753,-44.2617631883552,41.58076505196716,4.404243111252933,-7.873611655644804,43.56328053434423,32.47718620803843,18.957076174099242,-11.135657494948324,-0.027695866734382936,50.46029517933949,14.983746259074781,-12.808540843124886,42.96850313354553,9.756864871947247,3.0361665537396227,-7.017318573362456,43.98227539814484,0,40.11347821652099,-2.7495993806541863,39.54480386897923,14.75318261970716,25.0191965620958,4.715835919508288,37.96272650234128,10.454622650601234,3.2296621976051547,-7.75889638699817,34.82231141928827,5.408283562909272,0,-1.1012375,39.6237038504043,10.910040505518566,0,-1.1217021541238215,-6.321785086500354,54.13094870622117,16.591734494794128,-1.1151003400380788,-5.106887070369141,49.4078120966972,-0.11251916437283858,-6.1622777522455765,-4.793440094959866,50.804801204695714,0,-1.8186388808098468,-0.32428992227716197,53.87646991535324,0,-2.6323854127484174,-15.80460711969572,40.594089818815235,0,-10.299464792288477,-3.91299886800499,33.75747945234774,0,-6.167387830666645,-9.690905624326488,27.795546855702952,0,0,0,18.568271737106187,0,-59.632823508347464,39.52220706752209,5.1248989869296295,6.666031217343516,-4.23233397666711,-0.987955019134599,50.02254246638332,11.628889064403575,-2.2446254611761463,-6.341056755874925,50.25932450503298,3.6982903301732573,-0.8810188618211268,-8.944468277523415,52.69500816910869,0,-19.21233006843652,23.957648730781795,3.201606542263031,3.2817245509520157,-10.34036154973289,-1.9150145536640193,38.507938388235054,0,-2.8196335671544963,-1.3254003026092225,39.681177348988655,0,-1.1055791303605453,-0.6232035651525972,17.998071236577225,0,-7.716168277049498,-5.101243475500831,47.03266155931534,0,-2.5071746155222945,-5.2203319012529406,40.77783791514771,0,-6.1162153281250005,-5.1000000000000005,43.84348457584087,0,-1.1050654355877787,-5.1000000000000005,30.2186055433738,0,-1.8800570240772747,-4.055960950243352,23.133931504439364,0,-10.213625,-9.957938515640192,22.9132074745023,0,-1.1236737579005887,-2.90161441706102,3.189153986271562,0,-10.213625,-5.10710361009813,5.483944965869459,0,-4.161447053827014,13.576039352117524,52.103170131255816,9.078300292856335,-6.095348818362939,-0.1,39.50643276403452,0,13.342696565964935,3.942574813789916,36.05957750946611,0,-2.5475864824708303,25.70277791745677,0,0,-16.31142473493466,30.113417898635568,1.0178502822915052,3.423854201940253,-98.81329169342125,36.909767466949425,0,0,-1.1012375,-0.1,12.0575059066409,0,-6.1116274885004245,16.38210886784335,0,0,-6.0754993062188545,-4.937685615111693,48.598324311150414,5.225503304600228,-9.088634909646935,-4.678916307344991,36.275537465887055,3.640383065607853,-0.9314367823220296,-4.476749149487149,53.72550104486056,0,-2.0869210086950054,-4.374310610540035,0,0,-0.6812463749617301,-5.1000000000000005,56.13046562112922,3.804175061219425,-0.43814074085250687,-1.2901903803718526,0.9555459711629855,0,2.778893404081318,0,0,0,-1.2721666762970747,-4.223493482408937,10.245558681384782,0,-0.9789103535259269,32.77942461328562,0,4.793738653492781,-1.462405449706834,-0.728691992676006,51.822727285953306,0,-5.690310556442261,-1.6529086680402332,49.7499618375129,0,-1.8214186221109872,-1.4976023171853128,5.452499754672168,0,-0.2672319644947123,1.7192430613776768,21.52878749334805,-0.11093676375978517,-9.120208255116184,-16.22081811282952,1.15005432785918,0,-0.9887134601800883,-0.1,25.083816454001465,0,-6.120448406904533,0,0,0,-0.19425012780148415,-5.105751689691826,18.04041358239408,0,-7.877235501195499,-5.43641124370841,0,0,-0.8272561809547035,-3.4189702441426846,13.61122112389728,0,0,0,0,0,-5.79382608854461,-5.1000000000000005,6.784368586643909,0,1.1123786932971769,0,0,0,0,0,0,1.624562590908003,-6.338087985421989,-10.220875030358528,13.501758374105156,-0.10638344437917667,28.408472610399887,44.19787413673593,-0.3981279545969635,29.40275967780525,22.06770111220259,42.93194517977922,-4.390378884047862,21.71930643006688,20.2016195783072,44.845463437995775,-8.426579527334123,32.194103681739726,3.6089336673452084,46.237831523656006,-5.824777208303556,20.672522515653906,15.534804010617924,25.098626100160324,-3.0364591370149916,15.723962109005981,27.093117784214872,45.69801509496656,-8.071822563212953,26.780630729785734,-0.3795359193286094,24.41477396618923,-12.508378973824101,15.726679640543125,6.780419429119909,44.04892503844202,-1.6467270296524288,5.832869457532867,1.3167919701398647,-8.92128121501183,-4.139237802731976,10.07658986183642,-18.943931093595243,-10.941331825037244,-1.661486422055214,25.236603049773645,-16.9954666855689,-6.052121883247326,-23.157154308043076,1.2032601055083172,-54.95491220225519,-10.895372728442434,-12.205942767803332,18.0114357821272,-1.2005665904565963,-14.249301693250802,-4.406129948946807,25.21171978548605,-38.51635950101851,-12.855898018587874,-9.774909400051124,-0.32052671334195837,-0.5688519313760163,-11.82628943595275,-11.5052021967822,15.418049540564043,1.998751110620907,-17.133385997444144,-10.955320424540105,7.344633385683257,22.98074025432413,37.51246700794315,3.1153281549232013,24.460657233364344,0.8638826350442832,4.381051660585617,-0.3129087144010252,2.3564940640922325,-23.040480798561237,13.02510092721675,-11.565502084144471,1.201867095249543,-20.902651519866712,-1.8053204327032746,-1.738400617065083,5.887711801310494,-6.526021666068862,20.35070788658555,-7.07212168317064,2.7831542166366656,6.657358037646894,-1.644770537451718,-10.86321816657164,1.672899930904983,-3.299230083143912,-0.46785811414818823,-27.156774958084377,12.589453596053614,3.7106100369550683,-0.08892003902670309,-13.063456757438958,1.7146815323517788,-9.778824336400174,-13.194686435929949,-7.805781578076865,7.788250492030991,-0.2889040897986673,-24.422889115350486,-3.3605823721399872,9.366686910304074,-7.223609181372549,-22.030494492718912,-8.772659447404752,9.635686226310618,-2.9499385429259926,-13.589978749801034,-6.436748659254678,15.62779574843695,-33.03325753831384,-31.60946076257612,-15.135502246099872,4.869294923102354,-9.068666872425016,-5.114311873829626,-6.606737383894306,12.839369408972647,6.727533886969187,-9.690000000000001,-7.377165198739878,26.222717164429383,0.8650128434227077,-12.692563437210882,-4.117757278635422,-1.8100679236162587,-18.374734631134846,36.85026065501038,-11.04495590185837,14.311815105102404,-10.254128450126823,22.246080112491647,-16.685421383242225,5.513144968892124,26.398913528447448,12.639085079059258,-1.632167751010118,11.230908428918049,15.769395835398512,4.2230941329581375,-26.93944088614689,11.025918796235437,-3.812498939984761,20.970557288184157,-2.3069822553172323,8.489000019897233,6.628203206335012,15.321054681668034,-7.444534273618394,7.83709079628658,-14.2708940605338,4.243915734161252,-16.177916951066855,8.40386210484088,-32.00491069112107,0.7065533780358435,-17.837490019299413,24.400419507283264,-28.61840044644046,-18.700256433036994,-11.229800485246322,13.072642715692965,-38.92454566788022,-10.67260870492503,-12.337944320458975,13.036672527075869,-24.60093022365162,-20.623782689775297,-26.206520633134467,-0.9020433280915591,3.788882689952749,-5.1000000000000005,-1.2852263204079042,3.530834168693511,-1.1276888754121979,-17.787840645981937,2.1464152711788307,-0.5623957097349797,-2.8672819042015947,-15.121129275615893,-10.562185672619984,7.006136043150008,22.083795204067307,-13.444025497844404,-6.42033291337141,-2.5702600077062425,8.069099616983927,-5.1000000000000005,-4.111602828125,-0.9373428043919813,10.707275835996152,26.471647524267578,-10.200214374461272,5.908462633703235,-5.0051540300479065,0.10672514961710777,-15.53940747295766,12.527497394748714,-0.9926300292966941,-0.49069457652169457,-17.69409902753262,2.3492114470488517,1.325642205671393,0.40934926675129246,-18.97491837021829,14.513990756942487,16.393911333744416,-0.9086981097851289,-38.97023051940973,2.257843865348726,2.6064026923108106,1.5281117212621307,-8.478766340719837,5.383964959250308,3.395110529700575,-0.6448306133537586,-18.159078854765177,6.505363241094472,-1.9683243847610252,-1.0236049957226285,-4.1012375,9.719464760802063,-3.085958965556353,-29.454754557193155,-31.793497274302208,1.1530271548577615,-0.04323096338320092,-17.08531599684454,-3.9537015197531953,10.715855333028115,-8.451489055429647,-18.26184879619251,-6.834914824042287,3.9741992459647033,-0.6797472118264815,-5.054495361426322,-4.106989444604191,5.893313274453664,1.882808478416841,-12.39451545360099,-8.842901040462134,4.707715763988322,-7.418340615216159,-48.16092021021013,-5.0022680354996565,-2.3101648040420293,-5.495193472448333,-5.1000000000000005,-4.106943557407325,4.038695749605965,1.2544617285397857,-13.729723796796838,-4.1000000000000005,7.358394966248106,-12.89965675486815,45.77349088698159,-0.6009910004677459,0.2097107610914215,-6.111612701696458,41.513072629921226,0,-1.9463458634356703,0.36109881550505074,41.73422363700212,0,3.044277319934967,0.3428732765554625,43.514940172525456,0,0,-93.3150931368109,38.048779389636266,-5.714225781082635,3.6549169266583528,-7.775690177991408,33.30674576191606,-4.023994776272422,0,-5.909901757409473,35.31116693479602,0,3.0172046050276204,0,0,0,0,2.5709186815668432,-5.100995020285567,-4.1000000000000005,2.004993231380193,-0.7826784394148919,-5.1000000000000005,-1.2328312738118403,16.016159396579635,-6.125952274169714,-4.363417478527033,-2.95165587736933,19.576051688228517,-10.213625,-3.6930153658316196,-2.5807535294750563,0.9371427046854404,-1.7225117272908208,-0.6377062850093097,-4.100832562270688,5.531661340443878,1.7529325909702071,0,0,0,-1.0827476394741433,-5.1000000000000005,-3.983569927435319,0.9413640825229602,-6.465651361765549,-3.8161918390341527,-1.8771810422746424,0,-0.9023335837653177,37.37339543986468,-3.8224392899081723,-0.11105180080664304,-8.804428222058396,-0.9013237448469297,-1.3484947680040478,18.345536682549017,-1.1110528715942174,-0.1,-4.10686403273879,16.720873587650452,-10.213625,0.16405818546499282,0,0,-8.243116839560567,10.871519712079692,-4.106976334353736,0,-1.1057995782635348,-0.37028944029516914,-4.1000000000000005,6.538243464975622,6.305482521163459,0,0,0,-10.213625,-0.11023251865703912,0.40557701672042584,0,-0.5424807007974563,-45.14068678000399,-1.3146114912031164,9.632012099722164,-1.292608412337196,-5.241329302166719,0.24141660462197595,0,-5.139717412974122,-5.208657037785241,-0.3112445396189415,4.019548428056975,-0.9184874108687785,-5.1069939114106475,-0.991162782349743,0,-9.103826882552413,-3.7635278586482075,0,0,-6.225334528490475,0,0,0,-0.30365691566936936,0,0,0,-1.1106585732165344,-5.1000000000000005,0,0,-10.076671178418268,32.09336072707944,-0.7804796550513373,0,-6.101721201494599,23.251307761890732,0,2.542333796509819,-0.3875101655760969,4.796682607185215,0,2.6376223066646745,-0.3025374881970495,-0.2214543044263761,-4.106863100722463,2.486503041156184,-1.0286051413283743,14.155971683565891,0,0.11150184592080122,-4.756897308582906,-0.11623604154652648,-3.608481191624728,0,-9.279476736726462,0.8869926626390665,0,0,1.4342913071785306,0,0,0,-1.0048446821376922,-4.790015841849677,-3.9537620177705195,7.17873412383681,-7.521501256735367,-5.110618518451816,-4.102398409989762,2.3748367515024773,2.0839206582019694,0,0,0,-6.2250452688378255,-5.105502302117124,0,0,-0.4335886390042924,-4.405830962816476,-3.6303908525733095,-0.10541361135706778,0,0,0,0,-10.213625,-4.160863937896433,0,0,-1.1059585272993704,-5.1000000000000005,0,0,0.9929430165077369,16.411391969537227,0,0,-0.6630140485011163,-0.10649995785928741,-4.106580921170276,2.309982871211437,-10.213625,-0.1510756472605723,-4.1000000000000005,5.648261014736543,-0.8803105298441818,-0.1,-3.6932928756866477,0.9526883102061778,-0.514814462988456,27.174719941203964,0,0,-2.1574267449268723,-0.6190246239732973,0,0,-5.886976108438221,0,0,0,0,0,0,0,-5.084943820977593,-4.952214654075806,-3.722652327690865,0.6392613277435881,-1.0664211916246964,-5.1000000000000005,0,0,-1.457854250782983,-5.1204744885535725,-1.4609015679625044,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.15403695317321,-10.21492329157232,-4.1068639605780195,-0.10582403834418189,20.024940774039717,39.91180632635693,30.127689060850585,27.529676903850277,14.48310691186604,28.194733829738098,47.62540610578771,26.252705593204038,13.783175786866568,28.337110714803252,44.55190845187632,22.1599872071002,17.597453481270882,16.444876295763834,45.632546555861964,17.795449054333986,1.4474014219732343,30.282733559344706,41.76480412007116,19.43402573212273,24.037718355339916,20.33231403077594,40.02530616651186,22.809301673952625,16.717723528436462,20.966483544728526,9.347335071178193,23.65151256592701,10.135027815918384,27.066844736990518,6.233896983670333,12.39514869850853,23.24148712620622,-9.503474899770787,47.951629251436884,19.594150352756042,16.05749467502156,-14.911012944248503,43.709382202088186,17.718694747023306,15.585856084952681,-25.529150654903546,44.24876527097016,21.282205725190256,7.132413580403934,-6.034423639739898,43.99407822405466,9.03603562926299,-9.042426962052014,-24.576736824072587,30.424195561513443,11.978748012957775,2.123170422185864,-5.728054855289329,41.03661748113495,5.101191048367067,15.020725039648191,-11.187875957036264,34.69930030433187,12.487545794430623,-1.6909012562791754,-17.755634179135807,26.893551995130306,3.997109060308482,29.90060648107559,37.93090273459894,8.07774094415732,17.085498037270064,4.698519722929,1.3784650896355162,6.676182342552736,2.4287049716070013,-24.014910635731304,6.473289333797576,3.7566552782272415,16.61975307910739,-43.77706007926918,1.3206912324062998,3.830834096052243,1.2826908120236447,1.5274818741388376,22.765776140721055,2.796659695483324,10.944810150577698,28.19806075521183,11.771678930370085,2.730009839959948,13.940014483393188,1.7781567267088887,4.109510570913297,2.5881037016739983,20.599181325852292,-29.841929988478107,-0.9886730934627921,0.632262619756536,18.541732241134675,-15.269638793048255,-17.380166102205287,-0.3525715267822749,5.7072016400788375,0.6652297421000481,-26.061221698937377,1.7399241925913538,3.557807467857179,18.210119602461702,-43.559949091311,2.324984488630322,6.757470407320842,3.9044146756306306,-22.30713260674994,5.167295309447583,0,-1.3252510488751015,-25.050417899473455,1.667949037911645,7.352988713682311,0.32333971114830307,-13.40162601531501,1.1112709922340034,7.288999128432218,-3.340179697870292,-5.100856185078357,0.1580783032255032,0.12868893073391072,13.75769059222416,-48.52824945894615,2.2675022793964517,1.7638504057119089,30.063527150013797,26.582494723434223,17.76881426365283,18.58302580940763,4.242081243313463,29.47389317174531,21.332036678204904,14.978250841094102,-17.555389413055018,13.043027304845761,5.470398350382638,11.582605722146932,5.875548464000818,7.375099994423601,4.854045108060895,7.746730795509738,-32.721485022950034,25.266146042942417,16.00384303127171,16.659666350725526,-6.52646511635197,3.1816871312924935,7.967577557346441,6.5129742039975955,3.856170607019871,12.763185784961035,3.506118140473604,26.318039279866603,25.691804853150227,7.485637562129137,0.9609391588128191,7.055532332367377,17.46599266968544,-10.055138840691404,38.25132309255969,17.58461728663031,-1.442473467895547,-6.031007874749212,33.261969795121466,1.9646740930775353,-0.6763775573746655,-33.1369427679144,7.34054775805127,3.3666276637418218,2.1589213641664946,-41.893761496252125,1.7227204594086114,3.1139346144559052,2.202196726397945,-22.85101558277299,11.652867728050818,1.308105141199146,-1.4597492939771728,-11.219088829425012,4.013138621080054,0,3.3689711993307827,-46.54763723864272,5.810646863654663,4.22978812007102,-0.9617246241036554,-5.108987336389968,2.898907961945281,0,14.614771764042976,29.0725806788633,1.9383520120596833,9.22985379683694,0.8823931030615526,1.9663762593773992,7.4271646888271965,2.1978600617665927,-0.5170441308133698,3.1542957199313224,2.819015754289765,17.483087938650502,-45.39782599164992,16.96042695637228,8.295111988225056,7.615162732674071,8.186541647053069,7.343642278652924,3.7812697275665457,16.80379595007352,24.695977848843015,4.689946600950624,1.331158754827828,4.983808414851821,-0.27012724122461285,2.1859936725652855,4.879800109949057,3.8562441171816855,-0.12015813447864199,-0.6330040101555281,7.3198299174638395,0.7078810867058336,-30.966525903372908,-15.903418753035723,-2.07770025042927,0.9153042230778164,0.6355213589289446,-9.688211858006003,7.183212404517724,-1.2638787064377328,2.019174649244065,-21.699917484815494,3.5074989709730544,15.68492274367106,10.749453361495366,0,0,0.498137693378395,0.523275699631315,-51.03103635658486,1.3340174105330587,0.7718801272024166,-2.9293527530465493,0,-0.09431611976415653,13.759337002161041,22.55976812496927,-5.122315203124848,0.5442924295472193,0.26510613494177065,-0.5061637279171967,-4.820349103507106,4.55853245964964,0,0.07506956306383472,48.80580262500479,4.264247162335406,7.06273774843869,-13.510072271765818,40.25356395418598,1.8895198755406757,2.600197750735859,-0.8239295313824372,0,39.82025488019973,0,-10.213625,-0.1,27.85319152150994,0,-10.624783853097814,-0.02246779772293719,45.02747263561453,7.753761676288864,-1.699245229906989,21.85570558995573,0,0,-4.246331222141801,26.219829126299608,0,0,-6.1000000000000005,20.36136923645826,0,0,-1.1257666622973195,-6.347123966450304,37.44197918645386,8.822730765146257,-8.424427857886823,-4.6243116527337635,43.07473644310468,2.943955252797737,-5.098462845454565,-5.107426511371802,28.845997093750363,0,-10.213625,-5.117227828125,4.308718690532731,0,-5.9123665441429445,-3.9498924688214845,37.7632610158817,0,-0.9509410131564128,-3.5796787965513874,26.116528398728583,0,1.9739529549052413,-5.1000000000000005,10.149095850337854,0,0,0,0,0,4.413636210393953,33.51100808983146,0,0.11792269158774245,-0.8660936848999781,-0.7392312833445482,3.4341204273368886,0,-8.282810786347294,-0.48716328655971214,2.5364974440120585,-0.18829895344842776,-3.555741107020611,-0.11104021497915856,0.8317583869029489,0,-7.8934548660551584,0,0.21648598693281285,4.951605096711027,-2.2975741044126794,-1.0952069338580817,-0.037237992339904484,3.668585541795138,-5.617264014532933,-0.14232249434673946,-0.10632562891375485,18.014613558208456,4.300801877238427,0,0,0,-2.527502121261302,-5.101244110849805,5.617974623201537,-0.10573882443859728,-1.923119176286408,-5.402142752009212,0.9063072200265166,0,-0.9101237735584846,-5.101249488894197,-0.04419564750027565,16.108182961205397,-6.0144945727502765,-5.167400067061292,0.7317015107422409,0,-4.8637252597764995,-3.6122276454836193,1.2487893159296153,0,1.9185586296346167,0,0,0,-25.942361725329867,0,0,0,-1.3093602453665778,-5.1000000000000005,0.4170022539662215,0,-4.857129919026234,32.86388162263528,8.68687351210243,1.6072334504636634,-10.213625,32.53466587204473,0,0,0,3.1721838693782236,0.8950822408767704,11.890234314903756,-2.276619335428842,3.6872979274844635,0,0,-88.97657794026632,18.470735644560516,0,0,-3.0338337612862074,11.255037093493543,0,0,-1.1114911257916655,0.579281358865855,4.4855869220950275,0,-1.8995748215587955,2.5078961494907395,0.33649564693961703,0,3.8118231214997618,0,26.986335924492145,0,-10.267101451032179,-5.106983164538949,19.664889597956996,0,-0.03406188715033687,-5.097570769745759,2.9524876246509524,0,-1.1,-5.101579953018428,1.6177260416261732,0,-3.66342897881286,0,0,4.306345844109363,-0.24926359160839573,-5.112619368759383,3.2542474027776884,0,-1.8447969987238637,-5.1000000000000005,2.4298628929607653,0,0,0,0,0,-1.0023861479773963,25.471777337186573,0.0027918236912803708,0,-7.729255530623973,-1.0722672035973548,7.554645075723467,0,-6.105167293808382,-0.1,4.5657840387039395,0,0,0,0,0,-56.45125737333337,-0.1,0.0409600379127224,8.086370114378733,4.522430224426999,0,0,0,-0.4431469575557152,-0.10676823613444904,2.675087904179855,0,2.5783093599827254,0,0,0,17.399979491749257,0,0,0,4.174747017152356,0,0,0,-0.9073491520639059,-5.1000000000000005,-0.05849413389783802,0,0,0,0,0,2.6713627251953476,0,0,0,0,0,0,0,0,0,0,0.227436161102769,-0.7934325855545246,-10.21451761165875,0.9833543877416222,0,14.759329921692062,44.92098164618884,-8.344932654444035,23.172587280714065,28.54217489985572,41.00468224842285,-1.2034191179010993,22.128795374737464,-0.22428352800954876,49.55003677528818,-5.426906603294014,11.340816769889013,6.14671619079618,44.210853644545594,-9.922426941343721,8.615576085635965,10.539704224747215,38.654039573225056,-30.215977686261922,15.442567744066476,-27.271569958656542,39.85020847183347,-13.647248770174029,9.361365660384577,-4.525452414326674,24.144841770892274,-12.474812015453649,7.336521771546055,-8.116068680163423,27.490271437462525,-5.508874726541906,8.58055115111659,16.09105610758015,-11.889897863898481,-2.664625556350079,1.1171472150822317,22.597670450567108,-4.958057357047092,-8.097106188341982,9.333532723328593,22.68162727048646,-10.191927332096345,-10.686634765262736,8.748479189087217,-1.5395320788874824,-13.828957999066919,-7.9504221925855605,4.170282790728191,-4.159171468754838,-9.486425018774419,-8.33450225490875,6.556784665952432,-0.6213112037500688,-9.690000000000001,-6.181506532240891,1.9684030667005612,-2.459331056002588,-8.759128467453756,-4.017172572766987,12.312360456517677,6.6935763681759815,-4.964268234112572,-14.001965373562962,-1.5014089326903213,16.027796255110204,36.62091345410129,-26.809901192583553,11.136679870294882,1.8135464150701148,0.4581406083108671,-34.706915124529374,8.270274457290682,-45.0876877001762,8.919238710685542,-27.100618023043932,0.7129520173331706,6.531127694161707,8.260251512584857,-21.790788151847707,11.848553427129543,-0.0037473750596079825,14.99965607468478,-21.979656805642144,1.5938451318842195,-1.665298120350282,-1.3711641546722637,-21.59318907047574,1.5839582357355286,-0.36298946621800926,8.799500194607486,-11.309069616992014,4.62508708370116,26.055257936569244,0.36852074833830395,0,3.5216374205638252,-3.057593365073821,-35.82103471546,-23.548821866478196,4.10662860981123,-2.057037206438228,-12.125103287991754,-42.930252820972655,4.443405188592386,-3.751762523915346,-15.764265229447059,-14.197806799425875,8.940980205578214,-0.838501182936771,-5.111507397735807,-4.149842745448942,5.649792159606475,-6.021137468953801,-11.113800832529286,-4.1000000000000005,5.470075572484168,-3.33610273648864,-5.087205095890868,-4.1000000000000005,9.335818059973558,-3.7327927855766463,-5.1000000000000005,-4.106734917219071,4.544749439099212,-3.264628536951279,-48.03587473986523,-4.1677262680411,2.803394046211057,6.3257050533945005,27.39445911543111,-16.46555957373247,9.688699608198721,-2.101162233757636,35.31703100771602,-2.648550900957762,4.691488077577746,20.672100110137983,0.8850140826860862,-41.3542544317776,12.292353621049969,8.868468836586457,7.343152251590503,-19.359374899486934,3.040525178269581,27.090697114221868,9.185447969113502,-24.513324372868926,9.721189714875724,-24.384858357753938,1.9867083054681187,0,7.259648815122122,-0.032164163229364995,3.0008318092698465,-23.52128445991842,1.0485586974912735,22.216479221045585,13.273715622691418,-14.176789397658082,0.5748860066958884,-7.321894090931195,-5.785785074190139,-10.36149213507462,19.987641969144967,-1.1148591985889444,-10.231076190687459,-4.664694425020131,8.4025051782174,-0.6189820315300568,-7.48130273161218,-3.8902749510292534,11.57352621229578,-3.2746913874542773,-5.1012375,0,9.805557813215742,-6.671814752256137,-5.1000000000000005,-7.048617710707626,30.024182748068327,-3.3988426809454566,-3.9560382557427225,-4.1000000000000005,12.584189732786152,-1.2685353846958272,-5.012429268144445,-7.870692314232786,1.9568921728348585,-0.06258960871284547,-5.1126000000000005,-4.115483626257231,0,1.5361319422890392,26.80207408321378,-11.175551296540547,1.2751706746621654,-1.3158505654294925,-0.9420101042200253,-7.8176048459853416,4.678008814124121,-0.0609809131468646,-1.1105344017342438,-21.32148889936883,5.054715856374663,13.15517929953293,-0.05515728066338872,-4.1000000000000005,0.8205584070585096,-2.2417083940788682,20.243995853185286,-4.1000000000000005,18.8973752705929,-42.42292223725898,4.341188025398411,0,2.062653036274412,-4.717524785629213,14.383401014240986,-4.1000000000000005,6.238528405161677,-3.1793135524669407,-2.084727662365041,-4.100576093197043,-0.5857989377399627,-3.139236010888788,-29.00787831403243,-4.115652481407606,13.03406739324843,-3.9311281728161895,-9.6968626265625,-4.428415991204969,2.213257030990518,13.917979773929606,-8.721935357634273,-41.07508044421601,2.742667504034115,-1.7648857690110413,-5.111787887173982,-4.0562960880306305,6.857909933928151,24.79089486158152,-3.249963541214198,0,0,-1.3527191538330077,0,0,2.9783776625335037,17.55559948123325,0,0,0,-5.206535856791252,-5.157517241176503,-41.012591481873514,0.4663439280157873,-38.04012504731319,33.12431181579024,0,0,-2.0308989380245777,39.87752931345679,-2.321767643861834,0,-1.1042559145776953,25.511198256716654,-5.56782575606417,2.4139397367059767,-10.213625,15.214565400904103,0,0,-1.8737019563907018,40.52948588163669,0,-0.2023374939779342,4.787908854856298,0,0,0,-9.261332223330013,8.201169961582526,0,0,0.5512412100927196,0,0,0,-10.213625,-4.365610695420268,-3.2914883270425825,5.806040277749299,-8.405938535584633,-5.1000000000000005,-1.472416759190816,3.8034015634043383,-2.673113335683224,-3.8119081826141903,-1.6584579524489158,0.6985836513197393,-6.1000000000000005,-5.1000000000000005,0,0,-0.18759021211393226,-5.1000000000000005,-3.5853096122890022,0,1.725945258535643,0,0,0,1.242561457979758,0,0,0,0,0,0,0,-5.643916143311223,28.093968112290437,0,-0.11028149225459981,-9.026070994540818,-0.6650662259172775,0,0,-0.9345895488520839,-0.12154186010126895,-4.1012452203125,2.029523536500442,0.9708056397948994,0,0,0,-4.233998083940038,7.574152745920234,0,0,0.32821083921126815,0,0,1.1963478270258714,0.07741075305295153,0,0,0,0,0,0,0,-0.7645912428233486,-4.249906191190365,-4.198324262188301,2.7375190779107723,-1.1167243100999364,-5.101249799179648,0,0,-5.083827779486687,-5.1000000000000005,-4.1000000000000005,1.3906755083597162,0,0,0,0,-0.8769926972477293,-5.1000000000000005,-4.425240134802672,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.640806118825123,25.769874029740404,0,0.20708821913959474,7.272537786178046,0,-3.5090181399640255,0,-5.542819759857692,-0.027870089932826733,-4.1000000000000005,2.761739903830083,0.9660256462919915,0,0,0,-5.029783668111948,11.032995447774663,-7.792546881775559,0,2.892127904664509,0,0,0,0.608544869533446,0,0,0,0,0,0,0,-8.457740418869692,-4.89966301170748,-3.8408767713158785,4.683072850408627,-9.784084983733559,-4.960951921777919,-1.7945819596033865,0,2.1571022854018143,0,0,0,0,0,0,0,0,0,0,0,0.31642928082220334,0,0,0,1.96766228696639,0,0,0,0,0,0,0,-5.96497928287882,9.473324440379127,-4.1000000000000005,-0.10579640477936746,-0.7608412693214284,-0.1,-4.106863589502232,3.057126799314237,-5.25963764260532,-9.0940844026272,0,0,-1.1135103954835808,0,0,0,-8.215883637025687,4.366306851236239,0,0,2.4522114538904507,0,0,0,-4.064791516291139,-0.0977922984317517,0,0,0,0,0,0,-0.22055740110072275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32.351883190420025,39.399103036937454,53.7841201045171,-11.990863171153837,32.15498223732657,46.50157540596632,31.522770344505684,-17.60393305524738,30.339420528474804,30.54123592373924,52.541919187879806,-14.272281139963168,9.979860101104926,19.1939697378641,53.59866572056248,-12.295976514561058,30.653596243732096,28.177474099189713,42.9846527925574,-15.475708487723876,28.067781190185787,30.538842416976088,22.418653192545975,-13.112776879895511,20.970683980879286,23.553017972022438,36.19853711341776,-10.75265512160611,24.645609912411693,44.46072349337079,50.73624182109438,-3.6075041774970837,31.32149632369615,-12.29897662988706,49.292092746889296,-12.243914817541313,20.64533551979078,-8.318142161743966,51.72193834220186,-8.041176417449371,13.206179429695524,-5.702565120040696,55.23138287486219,-22.636163694953495,11.372160162325002,-8.972248252331237,52.68947989001508,-2.4793092749450922,14.415667365034516,-16.52338744002701,29.93960292335075,-14.583966924844988,1.6838493614062222,-39.004647365561794,40.49911132840065,-4.597343672188336,12.896763571889927,-8.603645383051667,33.40502965257459,-11.94875477872306,-1.4667947946332813,-5.1000000000000005,23.09168177505577,0,28.199534555406835,34.64516175147561,52.988520082180735,-17.933420865385788,-27.89427819226592,27.59076479906478,52.20519733519041,-15.812512918967274,23.70578543752391,29.527425634398757,49.410637201134094,-17.341882555428278,10.423637076829852,9.912619646970933,53.51582346258848,-4.524263726389822,20.570108775108476,20.72277391120066,54.26063942699136,-22.71156299284912,3.0479448030648224,6.763533964988574,54.525656633475585,-4.049560307883278,-2.0122882216989044,1.6849109453709676,50.21147590511545,-9.789669029583074,7.225746588912272,7.6517734903701395,53.961694416758526,-3.878956739052313,33.15643953631361,-11.941866883171457,54.81117861158211,-18.09288176242682,9.091799420327881,-9.933847599128983,55.470383871494825,-7.781132377653703,3.2873697596279543,-4.293204152775196,47.36606082433383,-3.896356645713744,8.402385283914663,-8.412925272059127,51.49510869340412,0,12.853402847535463,-7.260219803246736,53.074178519744166,-1.465943617975706,5.972451586085745,-5.1000000000000005,50.743926029605056,-2.0935464526186176,1.8737745314099465,-9.738098392294676,52.5770163129587,-5.607031362087602,4.15225375323705,-5.10124396106581,54.820612150659926,0,33.518600340224076,36.660458823391984,27.692377178155713,-21.37829826338498,21.2005796165215,23.620005064932325,55.59822868270784,-19.692848774119724,18.80863860849207,15.378823274078947,44.78391130989674,-26.779967074302245,3.3053409067228414,4.691402205162885,46.00407951107443,-3.953166581581244,18.892558235029792,19.500285526771954,19.24321987786718,-22.33844176693403,13.212753173047094,26.060468719078138,40.16761829353666,-7.132172914389662,13.888532956916581,24.532656240908928,16.713592023125592,-11.244816430571984,-0.3476630460027242,3.643518706001207,49.58903097524768,0,20.664693321902977,-11.63825697984473,48.75995076451801,-22.209324227973024,17.923890051434867,-12.10083558955172,11.932624161217841,-45.155193730506554,1.7009056902040185,-10.615351666514037,50.16881565258192,-5.1068474118679665,4.684484416881927,-7.513544893359135,34.570906300347595,-8.060142501842373,-3.8568248684125805,-4.930936915709649,49.18105284328398,0,6.444701524727634,-9.252879066280588,31.54258316743853,0,-3.5609755775961602,-6.360373372565851,21.340626701287647,-4.757267070256332,2.7581176719225633,-4.916483574570303,36.079590140123194,-1.4985395798017649,21.68592923603931,21.665739551458525,47.08317433196266,-17.67851496623919,7.781583973486482,2.826525903961947,41.69989197977574,-6.541808130037933,3.807934061489924,8.997255187159015,43.691101392716554,-11.16403194444341,-3.6353801305101654,8.798291128589504,49.90233088317741,-9.034772606341514,-4.116924634753652,-0.708973683691559,51.08524856273604,-8.785875903825248,-1.045100788102585,4.209751830781375,43.97973502967487,-5.106873003430255,5.241244025283319,0.6134558206224384,49.654842124834865,-9.480306167693332,2.4178040744174005,-0.04930109162873372,49.86053736457705,0,1.6913201647956164,-9.412237544718042,48.963943366441846,-16.672763190579523,6.130385074441053,-14.2606778775644,38.095546765566056,-9.107834339314518,-2.573147311024203,-9.150641773516043,47.05563449894209,-4.633922136257287,1.4435726691686672,-5.111998607987875,39.34790026457102,-5.1000000000000005,-5.157375,-8.09409926263596,48.97568399494405,0,-2.8830675299633803,-5.029227491623624,27.43487337202019,-4.714434212645018,2.420791033714657,0,55.16755925273519,0,-4.848447106272601,-5.1628295029945575,34.049562399552705,-4.991193835907049,1.6626038073514464,44.02626289253058,5.283562983476855,-3.6497146354422485,-0.9491872673381089,45.3092607302296,5.100925658053857,-0.8736215115187392,-6.506535853194307,31.998948161676385,0,0,-10.213625,16.876510417144562,0,-2.1331810625506566,-0.9809250078898737,39.73935643810559,5.099915983727803,-0.8811614381303543,-0.6034390723283584,26.158277719153553,0,0,-14.339620012569,41.25052805234833,0,0,-10.213625,4.970862857379171,0,0,-1.106976297842979,-4.720038397267139,51.43464425458377,0,-1.2388776716699683,-0.7220761042367784,43.91263182676869,0,-1.1060387188095433,-5.101870052042324,38.654010788097494,-3.383953962890283,-1.1097004186580353,-0.366522733546384,0,0,-2.5822643012409165,-4.986608783433866,59.95160604286251,-3.9528365922006046,-1.1065419235502152,-4.961258970373977,8.308184453037946,0,-10.213625,-46.23457501120972,7.973365004562598,0,-1.5380052712085441,-5.106869222501764,0,0,-10.358904684865307,37.858758232624595,0,0,-1.8223029165872013,-0.9747447588970396,49.42142864691869,-4.406998329954478,-102.15688699600362,-0.677513190871909,34.66703886648535,0,-1.1011051001748096,-1.100506637618173,10.315147674511909,0,-10.213625,14.236813765488087,0,0,-1.189319250678574,-0.11928211345485457,17.633290341654252,0,-9.786996714182438,2.755688043216041,0,0,-0.9832829648645633,0,0,0,-10.213625,-5.1000000000000005,17.49356356353013,0,-1.1,-5.1000000000000005,15.969878253810013,0,-10.213625,-5.052847681642324,10.571637076908868,0,-1.2630515486284255,-5.1000000000000005,4.740869904198552,0,0.3701398325112056,0,0,0,-19.1096828407026,-5.187819104405815,0,0,0,0,0,0,-1.1115003669777646,-5.112171835826441,0,0,-6.008775009287044,37.23494771910809,3.8062457161930996,-4.7035932361199775,-9.12496605723361,22.828748816616955,0,0,0.2131700960440871,26.629059434519917,0,-4.331549609357537,-10.213625,5.244470596228679,0,0,-7.185872914190797,30.154404633109003,0,0,-10.213625,10.017673569445238,0,0,-0.7815682246391289,5.203325952491497,0,0,1.2419918364707057,0,0,0,-102.2068496317904,-5.0686735909210885,37.231477303585756,0,-6.106615406301361,-1.068181046240634,13.564134238563735,0,-10.213625,-2.769938176119881,10.702135457521639,-3.847083800783077,-1.1115005002833955,-5.101810483673286,0,0,-1.7507981568310809,-5.101581812262527,14.412333882321452,0,-0.9745128213081348,-5.1000000000000005,10.634604380858235,0,0,0,0,0,0,0,0,0,-1.320714809795172,16.41909722349452,0,0,-0.32406327735052226,-7.675865854899973,6.3483941086932125,0,-10.213625,5.760234770163784,0,0,0.09994363903987598,0,4.696119493608404,0,2.0135124083628773,0,0,0,-5.2303815397946245,0,9.274692246524506,0,-5.398576018704624,-0.7403401604107849,2.1728211756756934,0,0,0,0,0,-2.0525673637321917,-2.164476017793518,0,0,-1.3336052968356256,-5.101649702236818,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-14.525172753218037,-5.1068692078125,0,-4.778123961926432,0,0,0,0,-1.1108881466694172,-10.214874749165004,6.696836967033075,0,25.754025801630373,42.49869349257495,-4.927625142363023,-30.288508601358668,12.338474601774431,45.067167415682825,-1.044339283117723,-3.8776722740398633,9.286578439262586,37.8576593830899,-23.291671305968713,-44.686862448352876,-0.04273991348442178,47.00843095615118,3.285684459378691,-4.139112040754175,-2.456105839144085,37.3167060984592,-9.959594747154759,-10.101696150584612,1.556583835908626,34.199288402108955,-5.329829658062202,-47.085475079730244,3.8956256234405506,42.79213450171893,-0.24326729019563942,-6.721148019186118,7.6733944706162776,34.40458509769556,-2.765055977313236,-5.706154847904245,-12.502069322890682,-11.707255091238105,0.9712117767476891,-17.252685540382032,-16.68231850937814,-7.995437486657396,-14.771320522941453,-11.80349371194021,-11.539420757343368,-29.47953226474679,-27.172680022586437,-17.571045603588757,-13.992107843154226,-41.87225379547955,-8.093369776289483,-12.480279353533533,-4.638510685958302,-9.116988750987982,-8.322412877408587,-10.71505606642094,-8.346612723161293,-10.383392177712821,-4.7827150786356745,-8.793004170749379,-8.533798833039596,-9.874680177354541,9.461705390566097,-9.332006789485284,-0.6466888535348377,-3.9012196009170212,0.6432636105673893,0,4.882539544038465,39.23305225328895,-17.40670330714328,0,-12.748151420675345,-4.655162726812263,-16.175203335838052,-23.841462331045378,-8.134337861394702,11.19007194515578,-9.360208669648525,-20.32451080314278,-21.04783417091373,-7.408626228690094,-13.288540362797145,-48.02712530054154,-5.143881217372191,6.660495396909779,-6.23426220269578,-8.740608476640414,16.459860856516737,-9.636454974076647,-8.58861913390359,-19.12671160531746,-5.05894024187311,4.42378080970776,-6.5251670775156985,-17.621763216791944,-0.10684440965648623,-0.18512505927323664,-4.106870018243373,0,-8.523057006329879,-4.708408310657904,-0.9147663613553589,-5.1000000000000005,-8.076078828293344,-5.177399167413962,-0.6902616181126036,-13.272905934836531,-65.05252141367978,-21.96077910495945,-27.622842564406927,-19.719720030493608,-1.027616649778033,-5.106982720312501,0.15559535758243215,-5.042314476251571,-12.021218773527954,-10.541157102566558,-15.377728859652791,-13.737432280692207,-5.117326637611371,-5.101192893192417,-7.082499350193602,-9.660009522558433,-1.479909309348698,-2.9399514761121233,-4.102212803186658,-4.842007799901106,-6.820549729366744,-5.1068690541760065,0,0,6.735482169527814,34.672482691154016,-10.59922435561711,-11.040613584037414,3.971077266811874,24.4727422919703,-5.799922414039459,-5.1000000000000005,-1.093623110357866,7.524150506064262,-3.255667345070936,-12.704738131588194,0.6621526023590605,3.4668825731131228,-7.799424199396574,-13.041706082292277,0.9917833136874443,26.6711120797638,-3.112802638225755,-11.48146521442439,0.5200118259990116,6.5484798971502425,0,-42.27391045954317,-47.62872260294646,10.268869858423445,-32.14179802348312,-20.85355747869081,-11.069672563085167,-3.8345071790328777,-9.959264341412974,-17.545518471774937,-17.38964544918743,-13.961910958317427,-12.93838666731672,-17.459319701943084,-9.052241749064692,-15.12063669655719,-7.833090393193849,-9.537163530560598,-15.164423025279111,-13.778052779703401,-11.169784005184896,-13.55860232073924,-5.336424333756725,-5.1000000000000005,-2.427990120043148,-5.109484937255996,-0.4444857797562901,-4.335878884059404,-2.9421313434877585,-4.319454038536299,-3.1585395349203367,-5.101211452416131,-1.871520909023944,-4.949832152529513,-0.5330795165181471,-4.882444255029234,0,0,-0.5425915130081888,-5.100649328849417,-2.9977588125909223,0,1.9453871440448092,32.35862077092092,-2.6688853342292207,-5.1000000000000005,-13.373105915520526,-10.349859269430736,-14.44408925480791,-16.006934025201975,-7.830726251832698,9.54941934387089,-7.603280652271514,-12.288216475875206,-4.665451097488594,-5.396103683703337,-10.5066030099392,-42.03516624816887,14.330812821104812,15.62369950154012,-1.5339837795870053,-9.442633320901821,-0.754311701868172,-0.1,-3.297963003623207,-4.999372979159553,-5.82878321560644,2.282231008372689,-4.1000000000000005,-4.120503990873305,0,0,0,0,-10.198583138335461,-10.630758843185252,-9.123183605493143,-9.69103220097212,-6.58804794927054,-5.116831724002483,-4.210457328919791,-5.100894054565458,-7.7881070105471135,-4.035872864483053,-3.082978282261758,-5.1621764662920455,-1.0955920938859673,-5.131502441373048,-4.106880806886757,-4.891277547795891,-5.157375,-5.1011999848229586,-2.3655909186213204,-5.121982450083966,0,0,0,0,-0.3498801553527192,-5.105981508554838,0,0,-4.188196464237235,-5.158531600573053,-7.791250519004702,-5.1000000000000005,-1.1266697832459218,42.61130158941431,-3.8679310223767445,-5.11244515529362,-1.0137279270930535,25.854788337115266,0,0,-1.1164171760346258,12.105733694938547,-1.2590078244299248,-5.104884541563961,-7.3628410247661265,16.62180856955601,0,0,-1.2683644103004104,16.394455402580725,0,0,2.2435849742403784,0,0,0,0.8352344702071096,0,0,0,0,0,0,0,-7.102258093553055,-5.10125053753622,-2.1865391620109498,-50.98992284411172,-6.1062074391247565,-7.516443180028032,0,0,-10.213625,-4.587608197304477,-0.9609338118284629,-8.445623239412232,-1.1059309769773422,0,0,0,0.2659616976981753,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,-1.1046125,21.880679083800796,0,0,-1.2028328733838831,-0.494317460504176,-2.048115935606341,0,-6.103911692408566,0,0,0,0,0,0,0,-6.10654684701043,4.048847059121947,0,0,-9.255164975174685,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.48416050436901303,0,0,0,-1.1056039536348679,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.467271027013675,20.349043989083977,0,0,-10.213625,3.4397746365950925,0,0,-6.1000000000000005,0,0,0,0,0,0,0,-1.3555144657323042,0.8988804213552912,0,0,-10.213625,11.124536866065947,0,0,0.41376473577310446,0,0,0,0,0,0,0,-6.106436857578504,-5.111602828125001,-4.522957073898578,-5.106875437830144,-1.4592094603738177,-5.13879453953267,0,0,0,0,0,0,0,0,0,0,-5.455553905922603,0,0,0,-1.189397901512719,0,0,0,-10.213625,-5.100874405905537,0,0,0,0,0,0,-5.50970323699123,6.199286159796587,0,0,0,0,0,0,-0.44394406862357494,0,0,0,-10.213625,-0.5206002039570904,0,0,0,0,0,0,-10.213625,-0.6021736357529393,0.6670606306579089,0,0,0,0,0,-0.9644051951376111,-0.10673578613743895,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.106877910502043,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23.38894679716723,46.68610081188867,23.27734847675369,-24.12095583059058,32.21781410951422,30.05684598444654,46.42128798251748,-22.872461723274125,17.11320494172642,25.58718935140518,47.32929922209757,-18.46841520022268,6.009925957857016,29.722451810611542,47.967870313983845,-5.229441861159628,23.015399074524414,21.79648782144138,44.599616377902116,-22.852114344853973,34.65848640156861,19.937246371760292,43.6483571478359,-11.695722845508417,4.671774696856691,18.749471901841506,46.89725429834067,-2.8862614154957367,2.832826040916556,7.894877370178818,14.887194583150412,-4.051816323270806,15.605578443325669,-12.141437873652194,43.72003382811897,-25.212874713437202,11.250461206993629,-36.83591668344004,46.72267470310327,-1.8706167731653558,5.757604374005993,-7.858174066012669,45.3348766642367,-13.79733676490012,0.26916926747021774,-4.543765994643959,45.27884516483334,-5.067015103109849,7.188638826868331,-26.27341229413228,29.191648978062755,-7.027809991633763,6.208879839217185,-18.206689388879976,38.92368019662991,-17.92871518668236,9.745999333659526,-29.027073463572187,31.073577058564894,-11.324290340992398,1.734927769309773,-41.86090533110431,31.554344174007582,-5.106837575799304,28.568563570319615,38.655553176306185,4.275386314148548,-31.691093348930114,-46.80463294771104,-0.9214840238378212,2.2824154990863783,-31.754453457198874,-0.05607297520864307,0.8699673945428488,4.864282506191561,-33.218750323330184,11.780477917475096,6.302885187683374,2.4140368228478404,-36.91328640010207,5.790478120923671,22.810372823689494,1.607811094956148,-39.231910412914864,-33.84123269517479,11.916205058026996,1.5339263063666457,-36.103724271591744,-3.9085525033680857,-1.4660162060668187,4.906116958685847,-6.2275044992882815,-4.095882909731389,-0.11803860368203961,3.644246474947765,-8.98680458606244,20.33961213195322,-12.025970320298383,6.946686937136388,-20.273446576276225,-0.06536049732152005,-9.714704024250308,4.687483102165147,-9.573073790347255,-2.4675134307577773,-37.90191214155373,-0.9868117793410193,-5.099892259902794,-0.2952316893937642,-5.112581919261696,6.96243006060686,0,-1.9832911588194733,-10.924111713814273,2.600156407445205,-5.002148735172714,-2.52112303909173,0,1.4500540214639859,-4.967195041997995,1.4860256643837122,-14.523976175231123,6.1423331635287015,-49.85766389546358,-2.5951151641046213,-5.106740607162756,1.0313806728457535,-4.928544544138287,20.715165473718823,19.169644938555162,33.77174656874595,-44.38141380596667,-0.017559523171676528,23.625309906060064,7.985777631446461,-30.220889931710964,1.499897515276118,5.82257051977317,2.747474182457413,-46.56541134740836,-46.83930501944833,5.119106734050343,2.211547688838124,-45.52605658664489,7.929707006771318,12.725766184000262,9.9395621466588,-45.32763333808619,25.654727210956615,4.962320924962018,5.716825502922354,-18.748612223171975,31.484555667586605,17.144061163129233,2.5940472261372074,-21.541965459323663,18.80070723521886,11.63917156963579,-0.09221737012411067,-3.845509630051737,18.78659236602748,-10.841638135152799,42.13870656911132,-18.793316187701212,6.051733963827413,-9.56913330230168,36.73663211290684,0,21.465212792948297,-17.596149385592497,4.007375756455998,-24.195525559004093,1.0393984671716732,-12.939564974527414,3.9145616492283617,-17.241200930270956,-2.7316964735023346,-8.536734051991427,9.709052901118222,-12.361111894234645,-2.40125988519902,-12.88441663852785,10.303548281375992,0,-3.4006447980296413,-12.20789767935514,10.39396898033314,-4.985700292917609,-1.8820677339758696,-4.904240847281908,3.7329622963492097,0,-2.187321326593934,32.07270339615107,0,-43.8834890738741,-5.140115737245174,-0.05068686145360274,5.834139890932453,0,-1.1282714112786179,0.2066598397119512,3.954924728953776,-47.77315217578353,16.883443745299996,-0.4505293278359848,11.37458527428821,-4.481226459373206,0.9648748611071953,-0.2384080446452208,3.456183073950225,-22.07097340625103,-4.8436157346244855,-0.5713019600748699,4.191663498589479,0,-0.23879371999834903,-0.1,4.060018560466494,0,18.43010607150217,0,1.5880309917774953,0,-0.5335263818870752,-18.480564573073877,11.333706389881085,-13.428849612237071,-5.157375,-9.48137875836536,5.663521565985655,0,-0.7601670133356493,-9.690124753019349,5.389343444457457,-5.1000000000000005,17.695217979741965,-9.694001115962333,0.794328287699331,0,-2.9067481110355606,-4.337818118117591,5.952889585543692,0,-0.1521657438222313,-5.1000000000000005,3.2622416210969614,0,-1.7145421962184857,-13.13794444301493,2.4463522973395486,-4.406825823354822,-3.0283566986020642,0,1.659839669366829,0,1.9890676759507326,44.092866329034415,0,0,-4.9695377776866305,43.96198579473336,0,0,-6.1000000000000005,26.187071601859067,0,0,-6.130024837548058,4.305296986003591,0,0,-9.692830354978428,25.8421249668092,0,0,-3.817604565633714,2.4537715919228464,0,0,-7.066010862517504,8.080280887132044,0,0,-0.9862918734526123,8.563850358898936,0,0,-1.645989776188597,-1.1957371321186316,27.809534283602822,0,-5.59094741905744,-0.3749280688759449,7.626722997009244,0,-5.885978212797944,-3.335460722722057,9.30263434011384,0,-10.213625,-5.1000000000000005,9.307670803911005,0,-0.07858531339283836,-4.9503556784591005,13.227511456817188,0,-10.213625,-4.558758013866146,0,0,-0.26044208302854327,-4.321376939881927,0,0,-1.1050611592997426,-5.1000000000000005,0,0,-8.568242101353869,12.824880131303992,0,0,-0.0656826376237067,-0.34053057129539965,2.24748518750854,0,-1.112156133867798,28.307484011757232,0,0,0,0,0,0,-10.213625,4.320432088192451,0,0,-9.978844206622195,-0.3316650804893133,0.47897002247017806,0,0,0,0,0,0,0,0,0,-1.208840800422032,-3.913519531730188,0.05587196309149478,0,-1.111534390705703,0,0,0,-1.4827621533110782,-4.566561453821594,0.35560976278130707,-5.106981022630336,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8735145610591865,0,0,0,-2.085840590645225,27.238755853407174,0,0,-2.397910307591548,2.846938743828801,0,0,-0.006522231645091137,9.800569646926782,0,0,0,0,0,0,-19.259871841071572,8.82210612154667,0,0,4.7323099201888486,0,0,0,-0.21561465545653125,3.377015439737805,0,0,0,0,0,0,-2.3132303321093826,-3.6969211647064,4.2244415726338955,0,-1.7592802952884932,-4.493385191227168,0,0,-6.1000000000000005,-4.890373303530235,0.07992557177374167,0,0,0,0,0,-1.6625685214793855,-4.144505716440739,0,0,-19.303752828125,-3.5236368412205117,0,0,0,0,0,0,0,0,0,0,-6.10086788419089,5.844968189124485,-0.1605224802079336,-5.1000000000000005,-10.213625,-0.10697822475917991,1.9965256569947814,-5.1000000000000005,-9.754583106315305,3.0587065570837795,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.11426057724037744,-0.1903127742235826,1.2224198245340885,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10.632067259165115,41.379660978677336,-2.164340662341016,-12.688831221529465,22.48930983388239,40.790942805452374,-7.488235737658429,-4.562061389352127,-1.8725760880099869,44.67553172499031,-1.875565352498505,-4.818391141783739,-48.37684572662218,41.754277919134964,-2.6389819753356756,0,8.646459812009565,37.104680314038234,-4.2506297339222225,-4.917488621051028,13.120235136794777,22.20863621597291,-7.899364722259147,-47.58733317036691,1.0833533979770653,34.23186926265691,0,-5.1117223659795945,-0.9120023608981778,12.64874831792236,0,0,-20.766533140131568,-47.218259679259475,-15.697717522261721,-23.145124400281524,1.566188116657039,-15.513825002309456,-15.7227562226988,-17.207862506738536,-11.516418228476338,-10.709468178305109,-8.322368096443633,-8.709834819427321,-1.781161407382519,-3.3957207684967416,-5.2160732628582505,-5.024763475531938,-3.516029858868115,-5.101138144660393,-5.531035925771153,-9.061703317162438,-0.5479984397227994,-47.270138718849324,0,0,-0.2974083068099326,-47.874765546296125,0,0,0,0,0,0,-1.1069759657039702,37.18307385264043,-7.905934341624842,-9.22253580427288,-11.899156878986865,-9.373394137887976,-14.370914520228219,-17.229506849914554,-5.347771621972759,-5.904733385245958,-7.804045433774348,-8.921100939009179,-0.9542266637167685,-1.0527227973124218,-4.106764842922178,-49.24965702370667,-47.32204858149029,6.549520192832301,-4.1000000000000005,-4.928929957258804,-5.453912840564152,-9.549222735540607,-14.732162008197246,-20.474464926012548,-0.08037264774444726,1.2573231596813585,0,0,-9.094154594192572,-4.101869274213528,-7.790996017633736,-9.690958551813312,-51.638305941816974,-6.953228488076166,-8.266247554531983,-13.822426687102233,-0.9680734555729384,-5.407764108539754,-4.467793587446722,-4.997903065369334,-9.020400225924725,-5.1000000000000005,-4.117546495682515,-5.1000000000000005,-7.219991457536416,-5.1000000000000005,-7.79124990462141,-5.1012375,-5.914311983797288,-2.8155749893262496,-4.347696255727973,0,0,0,0,0,-0.9269478306331989,-5.1000000000000005,-4.111600802332499,0,0,0,0,0,-6.070420006088387,36.735480018471165,-6.419952385577054,-3.5225748258276526,-1.082507145467611,37.098184296139586,-5.35017281794175,0,25.511835543130832,1.6967360190234038,-19.048031661613745,-17.263742005474985,8.970063980051378,-1.3371610034540597,-11.117866965662753,-4.878203869293351,3.799037284821901,15.07488158312552,-11.111452219615893,-3.4001902702741575,-0.7327988788908767,5.802170496701459,-4.1000000000000005,-5.102965590185647,-3.058346450539099,13.160574896891397,-4.144512830535676,-4.913917928977522,10.612962363223344,0.05424553824538463,0,0,-5.157375,-5.1000000000000005,-6.216814877521388,-5.048071166443295,-3.413783941762068,-3.968331953262243,-7.023205852757034,-5.111602828125001,-4.292198871731655,-4.898572834273196,-7.929137586511862,-5.105092434439669,-0.7905586602308651,-5.024030606219383,-4.216741658609763,0,-0.8816306957176945,-5.045422443075697,-3.888303339288271,0,-0.6082542267899022,-5.11419088754486,0,0,-5.047596844024309,0,0,0,0,0,0,0,-6.1000000000000005,26.663768288191584,0,0,-4.4702284791858515,-4.586384478285602,-7.769139025473688,-5.100112500000001,-9.398439131498591,-8.828280933909182,-7.79124403139758,-9.692385190086384,-0.20964022250043535,0,0,-4.944205679904722,-3.1930213072840092,0.25089684923692124,0,0,-5.338315742576939,-2.4862025962148193,-4.1000000000000005,-5.100467095773205,1.1232337121470852,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,13.212611237826767,-3.384210015526458,-5.115201381154844,-1.5228288199867774,7.684804558821188,0,0,19.25392284614153,0,0,0,0,0,0,0,-4.748278918248459,2.5803117190875473,0,0,-10.213625,3.801361720410681,0,0,-1.1623004169513822,0,0,0,0,0,0,0,-0.09924858917892188,-1.8152115727968614,0,0,0.3196637121662789,0,0,0,-1.1107097360709026,0,0,0,-0.8619735060287284,0,0,0,1.9951270844788276,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9544171479144069,3.4512600450495,0,0,-0.9765389579832336,0,0,0,-1.5714008618852127,-0.4360726046501334,-4.1000000000000005,-4.312220389980532,2.7236927659604535,0,0,0,2.3517309808183584,0,0,0,0,0,0,0,-0.6177652978047891,0,0,0,-6.1000000000000005,0,0,0,-1.5108907560504208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,8.759914745733811,0,0,-10.213625,3.5656773653810934,0,0,0,0,0,0,1.9326773078614339,0,0,0,0,0,0,0,-10.213625,3.6194612403161495,0,0,2.2292694689124946,0,-4.1000000000000005,0,0,0,0,0,-1.661617025803938,0,0,0,0,0,0,0,-2.4347309701020663,-5.1000000000000005,-4.1000000000000005,-5.1000000000000005,-1.0871086993994414,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.280675051375617,39.02174252689674,53.38789700023998,31.133530149247633,18.951711418451143,34.50031075240653,44.41449534354144,33.650620775147814,20.255924866845604,41.04821847958025,20.03607428912004,27.299116695774448,20.689958332671925,38.44838144719029,48.03941765662542,19.169895357626057,8.1242031811105,27.32113813859677,15.803926009735612,24.388104653208735,27.911463519595753,20.02891390978247,21.695042771967582,21.449055644631954,8.455737509686646,17.911008602612025,36.172943382327134,16.1062755554253,5.058615006903286,15.638242466498,34.22519432850986,22.733573952548713,29.963947672611553,-11.438313035779917,52.22614765279184,31.4737740196474,21.083089005177996,-8.76382899813306,57.92858992537576,30.519069674236064,8.87415604046927,-12.817946607676362,53.47995537186257,22.919507695295994,-1.2479905402287295,-13.116424798190387,48.06713575133171,8.626672451009519,28.788232030278596,-18.069706606596085,47.20573242459465,16.866537676732776,11.150250420047342,-9.696633561884905,49.43276114857172,13.271703978519545,12.811052898747501,-33.626886760046446,36.364910260957046,13.75364111232872,0.42063304464292683,-7.209276030918659,41.21792104061605,1.795973241299092,4.528354127479137,38.69148645712505,54.053225347002446,32.26968521061643,30.176203982705783,30.3454325403044,55.28439915699425,20.133102538977628,12.943021883996876,38.10255653455402,48.12583578379702,25.557375178533324,11.85155943500953,11.120961782000728,51.230411562467836,22.764880756332328,5.402392058073462,25.88439331089249,53.58060664093181,37.33588428318873,11.729351667362547,-0.10028500934371823,51.004562134048165,10.002510830586733,11.77159697456312,13.201380762377203,55.259851588259906,11.475226657023065,-0.890257296679611,6.023003333589088,54.68859086303246,3.608489596536825,9.74973751202972,-11.296761233545839,51.716828293993316,36.058866492230266,5.94598824211049,-10.579623673241485,53.88865960406128,5.002188866957065,1.2923317187907744,-15.057939357932023,48.813650074693825,12.028440678644415,3.9787321911167712,-2.43830779160148,53.67636588286193,3.278101156515956,6.965734737061556,-23.662481048399442,48.33034769746469,13.6989160777721,-6.117140254118407,-9.348724799085373,53.14206866418975,0,18.622997209010208,-14.09442290459404,16.43458082417105,3.41886120176647,-2.707840300297534,-48.662535793553275,31.398713451132668,0,15.869716662598552,34.99817735740936,24.73513468609304,23.950115983021732,18.485410375133814,21.47637788007855,36.298865919696716,17.61617563690968,18.141681604115945,21.595017576697376,44.84857862674194,22.331828848818134,5.530237892601265,9.514348272863797,55.41919649988906,11.805415451530328,-4.625684837163565,27.348764430947238,30.4205121172964,18.94673431372123,7.976932773348887,10.145628968177812,25.76674275427393,5.921573516396661,2.1954201409862732,13.801294742676406,51.70009896296111,14.905270912641583,-0.6805364411397152,-0.1,26.286279250537152,2.5841436182102258,16.57689197871311,-10.857703502040629,45.346319024190635,17.518765431176597,-1.6689251281732889,-5.297736122290933,38.88267303935019,10.935052042020777,13.55401887309667,-10.478127109206806,18.484678070961905,11.351209713439317,-0.718098596419761,-12.388421957494355,39.47534339802682,1.6027344410452171,10.27369559274793,-8.343619988127989,52.088710717008105,8.578841465271601,9.87090192910475,-8.014880819625963,25.357183070761387,0,0.34375043802121374,-5.1000000000000005,56.57836290430095,5.110735732260077,-17.837460844683502,-9.752347799577775,1.2561238565434303,14.498631313658539,6.2152281749625455,17.7457955395093,41.577293037655664,13.157545799257843,2.6245978488276642,0.3627247807752341,28.089544062593603,4.715977921185411,21.321597112578768,22.098111489441077,13.703741352682488,8.011939506960642,-4.202362358528852,5.605487382102426,33.25464076027085,0,3.907706643534777,9.431724718229582,49.40156750002015,7.825759747963055,-3.2939679700607125,4.536145270176723,52.92782305201547,0,-0.9573343141132482,9.80719130565368,27.31257084118628,2.7469030004696116,-9.64534617535428,4.685161155745144,26.479487022306976,0.7222992593542849,-16.004594153179283,-42.42278442495142,39.300162878443565,4.364883926605596,-5.157375,-9.615510526690858,44.10369884893297,0,1.4655970821222124,-8.280937456875062,45.36939933617188,0,-1.5810656714031086,-8.853849260793353,8.848406442583434,4.468099381308761,2.515228380495646,0,48.45364265816598,0,-2.276488669978126,-5.106869680403765,21.20728965367402,0,0.08988042346442343,-5.1000000000000005,25.563202051604364,-0.1,-1.0278973787448547,-5.158531384551089,27.480902763505114,2.497202824954448,-24.62612340036721,7.045287944351141,53.37266266033904,4.491748851941261,-1.1015449644705309,39.866474919977456,0,-1.1184661868302361,-4.528362652975845,45.39989404952904,0,-1.89204305435368,-3.6318586927775667,4.183644803578505,25.914644032007324,0,3.0935177228904047,3.338403610410813,43.549677274274245,0,-1.1058817789983326,3.853581121829054,27.589052666052805,0,-1.1,35.90059131176985,0,0,2.5233293535133483,0,0,0,-7.826880838329127,-5.529842744362355,47.06573590546711,-1.103657058194049,0,0,42.758070218733465,3.243923632713311,-4.5076476329081885,-2.102787455858948,51.09199238213813,1.9330531011089085,-9.699969555000067,-4.679862300352298,15.236618105282675,0,-6.028557922012286,-5.111523898174869,34.590056674327435,0,-5.7134210173595115,-4.640135809208734,0,0,0,0,0,0,-6.101087931079839,-5.1000000000000005,11.795959004153893,0,-3.620126308476438,6.5948526460554024,50.88428548359191,0,-0.86041998389388,-1.347672440775296,45.993686363496074,0,-9.952065372678682,-0.41002469251525364,43.57100734269496,0,-2.0938836176585167,-0.5181200234479263,14.506980165466537,0,-2.967273809823844,-0.031011470888821793,30.062157242455026,0,3.4379333164102315,0,0,0,-1.297013878268925,-0.3458936308423717,0,0,0,0,0,0,-1.2339161276618191,-2.1683651188664137,33.83083968928914,0,-1.1115840315672982,-5.101258385899669,13.36255630763608,0,-0.721893719552233,-5.1000000000000005,42.46737727623456,0,-1.1046125,-51.09024424230361,0,0,-0.6997954202257035,-5.1000000000000005,17.818312595529946,0,0.20612241905617895,0,0,0,-1.5463060881571922,0,0,0,0,0,0,0,-7.964020281711582,4.121485586027771,48.80913824632145,0.04173186781234772,-5.860409355142773,40.00787505211905,0,0,-9.095983723855316,-0.011279593186150239,53.91762140584643,0,-4.708786787790648,0.8411005639335448,0,0,-6.123027344629408,30.11001227803267,0,0,-10.213625,12.974203871192797,0,0,-2.775553838908808,14.547965109555665,0,0,2.6759417322955787,0,0,0,-9.43961662023627,-3.670850193573594,25.030827708505747,0,-10.2137375,-4.78109179001462,20.71887939507654,-0.1,-0.8706705987555413,-4.8574692676665165,27.40467927363795,0,-0.41531912807719984,0,0,0,-3.2229173481807036,-3.869908544051167,1.1459433474492842,0,-0.29485332834246397,-5.104726750068943,0,0,0,0,0,0,0.5357759702239566,0,0,0,-10.213625,22.994712014086275,1.4381436683895268,0,-0.6875415378877712,-1.410675159281535,19.028229969144256,0,-10.213625,4.361832668349509,0,0,-1.1100215539628155,-1.8038021619862339,0,0,-0.9210455912540481,-0.11936418538591578,11.64573863628722,0,0.5471549890410909,0,0,0,-18.797564325526785,2.5831500918680295,0,0,0,0,0,0,-5.967771712348055,-4.734485682087729,15.762254118262724,0,0,0,0,0,-10.213625,0,5.4963984555886265,0,-0.7054537213657207,-5.1000000000000005,0,0,-5.382529082970512,0,0,0,0.36475157547826176,0,0,0,0,0,0,0,0,0,0,0,12.094039912491183,39.77171716324315,-0.8893891890936503,31.065823972490776,18.357560418347923,41.32521821168855,-15.977009164900515,17.176008206986904,0.1709840137582268,45.30500112982922,-22.141743355949107,14.046339554941012,-32.831243771216286,39.15072286102739,-0.9340976210747318,5.82509842718906,2.4911980337133515,44.7932281635421,-15.269390047510438,19.10099005468481,-1.0422331991261484,46.07708462969711,-7.667075694993436,7.850342190097695,-3.2305358143501146,45.08490357169319,-9.86489132310576,3.199154412596127,-1.0337268397578483,37.22019745974358,-3.7960600342721076,5.2492066362989975,-15.005673517224363,-11.507240085005952,-10.801172833399239,-2.446102839437426,-20.3393335200044,-11.078215366282652,-13.149840287498883,-10.421536396703049,-14.259616762153703,-18.282442377379578,-36.124886697159354,-6.130572656428053,-9.280175134441642,-10.022429929993681,-9.08964937401375,-4.817614703891506,-9.92752125635259,-12.904498477650291,-11.114929587815702,-11.2649109887865,-9.298251352637983,-12.648189892941279,-10.18941085111036,-4.778789632053671,-4.0211957245421655,-11.847903461268753,-8.548671575198549,-6.056272126990232,-7.396298145396106,-10.183523239984112,-7.74467492118451,-6.3637696171766915,5.789070749630283,38.06182476143361,-6.4374978991467735,-5.233729938119352,-22.516012149420796,-9.308820904361827,-12.915431836939195,-4.815207682584943,-7.590402486337345,-3.4951887627413365,-17.282669079998666,-1.41087182895992,-6.362124037304058,-5.684377544803008,-16.26242123325948,13.090243029732813,0.5395359671864708,-1.1654077707678026,-18.50629271333139,-2.1391701311719715,-10.228219818789274,-9.115846781784587,-14.665800960312275,-3.1810621228841303,-5.342913198112581,0.031427802536238045,-16.47045031868873,3.1137271536646005,-6.854416166226917,-2.6980436028997827,-5.815599137184476,-0.22856969702877716,-9.450524202697899,-10.821652980028182,-26.628284074086093,11.911509882550103,-3.1560443097129034,-13.856183183512936,-12.346664541825943,-8.34465674788088,-6.517868169256138,-15.347475332474241,-7.864019095006523,-8.087257402909572,-6.383844828958621,-5.112119756146214,-7.09181880744212,-1.1936673326422258,-0.964371670382457,-4.941896907680995,-41.0124953357229,12.535778040387058,3.2014408765590767,0,0,0,-0.5826398689131362,-3.392245553200503,-3.664610982539052,-0.3517992537103516,-19.32235794571516,-9.699000591050421,-9.432524485067704,-8.422172493104958,9.15008946842985,37.897494227827515,-9.71964801963223,8.349604323800435,0.5031183719329118,33.982616622262924,-1.034555934711055,4.203629153752041,1.4319563679645233,19.59870870905356,-18.74191000418001,0.7742027815878451,-6.793564921388135,6.188134024665637,-12.54268983903617,-2.1628139474596706,-3.1200624640089614,16.60004028377094,-40.50438887029193,6.301836379374093,0.0894527685487172,16.499178102369793,-7.2057760582588415,2.2268616415678144,-1.3793902619691396,3.5192599169513343,-1.7243386777393688,12.219196269317814,-0.8817817652395318,-0.03958863388905093,-11.241477692739783,2.545428861900267,-20.710711274553233,-17.361444801868245,-20.06712704538714,0.8648430397872358,-4.3069277222442475,-4.76746332926712,-3.5277532627177344,5.291750216975855,-9.942168413069911,-9.692970734448782,-7.790000000000001,-8.930583402522075,-5.821164063306817,-5.1000000000000005,-3.0732000457140725,-2.210519532039301,-47.75264659697898,-8.612686563974854,-8.4226418321482,-4.025449440347292,-0.9122043965394948,-10.721448416855043,-6.354373893755371,-5.405057036697727,-0.5825538238853117,-50.896282954286626,-3.8093507328230403,1.4866715171180287,-0.4007248100759789,-5.1000000000000005,-4.1000000000000005,1.5205251834683773,1.2304507522588548,34.77696534902453,-9.830996080633327,3.0799554507649747,-10.014884240551584,-3.909824875761885,-38.99203759380987,0.7858482761243908,-7.428476273227019,-2.689054323867351,-10.61697686275321,-3.6752791848072537,-11.039863994872784,-3.5387805463895696,-7.790000000000001,3.718966213808168,-1.900501559057672,16.359215941172295,-16.85053339875791,4.637716142023327,-4.190433105690049,-0.7602470165057154,-2.256092783804499,3.728687317944985,-2.4068255643235013,-1.3042833091012604,-4.1000000000000005,0.7592214782347054,-0.4772787672615264,-0.366997356291189,-4.1000000000000005,25.67333795077131,-0.8346652172438788,-10.25380821256035,-11.116558625,-6.618980832553003,-4.745821158946491,-10.867603711959234,-7.764880020138465,4.42655309678039,-5.854671479306725,-5.123696619375295,-4.878405431315803,-3.1934940354353496,-4.731482828738213,-5.103299686523975,0,0,-0.6259210316994133,-3.7942224617156457,0,0,2.079701291340755,0,0,0,-5.888025220204614,-4.142660856378024,0,0,-5.5999227394609585,-5.163674913081894,-7.79125631174078,-0.7785175587302384,-1.1068267227650723,41.1068032360761,-2.242173151851872,-1.2315679726072126,-6.1000000000000005,31.93111646934125,0,0,-1.0151359461285165,37.36561149622892,-3.7133836347745226,0,-0.6228158296836521,13.05801025348663,0,0,-13.782833928040537,25.159893683937117,-4.1000000000000005,3.1225201528830486,-61.27521876528381,23.275152484466485,0,0,-6.027420707189844,17.226730088850626,0,0,-5.859695577913202,4.1516647341378095,0,0,-11.03974372095172,-5.101244116721376,-3.651808497058066,0.04428722910960258,-1.5012145699497503,-8.644403238814293,-3.8610372348823656,2.2195212214178888,-1.104822890158969,-2.9388193534417026,-3.828632188461333,1.4584746286411243,0,0,0,0,-1.7895033832200706,-2.1707757306152895,-1.7818656827255364,0,-0.9431018382371015,-5.1000000000000005,-4.106870148300764,-1.4075199576569277,-0.7785905032733296,-5.107888904798848,0,0,-1.1053992986888261,0,0,0,-0.7071278831265813,37.95919887011507,-4.1000000000000005,-1.730304972358268,-7.4941635866135785,-0.9224130275473709,-1.1311119762969135,-4.900212159605765,-1.1046736798807133,-1.2545852298959466,-4.1000000000000005,5.337488988166873,-6.100123297834777,-1.0118860288842055,-3.6674703695906845,0.049978525112427175,0,0,0,0,-0.07371495040245446,-0.9752904568884283,0,0,0.4058647330998648,0,0,0,0,0,0,0,-5.899012687382265,-4.609406271036832,-4.107129360660814,-1.0807960756709643,-0.20408619099987302,-5.227123987438418,-0.9268810363319624,0,-0.29737126809045494,0,0,0,0,0,0,0,0,0,0,0,-0.7514560413607789,-5.106994366062715,0,0,0,0,0,0,0,0,0,0,-0.8635630124401805,32.82471777750892,-4.106862532307945,2.577614042722506,-9.172569630303178,7.172674441058785,-1.5545306980469313,0,-1.0414853195913283,5.169420609029628,0,0,0.937320879676625,0,0,0,7.439235246149835,0,0,0,-10.213625,0.026154487107357904,0,0,-0.5156744315893736,0,0,0,-1.1107181691335095,-0.1,-4.1000000000000005,0,1.3504238005918778,-5.1000000000000005,-4.106975032307945,-1.7091974005853632,0.13118114339345974,0,0,0,-1.1071668427377817,0,0,0,0,0,0,0,-4.5500103225376956,-5.100269157648501,-4.1068747136349675,2.375400423850688,0,0,0,0,0,0,0,0,0,0,0,0,-1.111280177307426,6.822242760039652,-4.1000000000000005,-0.105881559294374,-5.413368411652457,0,0,0,-0.8413732610275503,3.171664243139499,0,0,0.3703376989647926,0,0,0,1.9544249508317684,0,0,0,-0.5515118121316384,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.27749631430697,-1.8350872971996368,-0.11156020973277395,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.481777337995435,-10.214564356274082,-4.1000000000000005,0,25.6622350962896,26.916108193914294,45.90345495271215,25.92537171922378,12.98005865663038,35.33054434855988,38.81513518945717,17.86781349454533,13.52681856572898,19.334272586937214,30.842139550729854,21.24313917187394,1.89944090410668,4.964905160333329,47.86004131423331,5.264983371920886,9.805802612012524,30.318464322623214,24.248581452082494,16.59727077333511,14.101050733454638,11.786685784240102,21.427491884694913,9.436812813967402,8.568118722982774,36.15792094681433,2.544432538686663,9.683743229414386,-6.154392933571344,32.60837229631857,0,2.3817553091724655,16.489558128600034,-15.093525917675962,46.26885775635658,17.942493619383654,12.388917739307928,-8.652653476659307,48.31358823723966,4.796868648662038,9.124085767461205,-9.298819285575304,41.75551245331314,4.230223147066557,-0.07904457727486065,-9.521434454963352,44.404447724582596,1.915453790914433,8.300298188609629,-8.646777730263306,24.010902879669345,1.071669413586355,26.17835286055945,-11.297701619189265,47.59035967607158,9.939358673939214,-28.506747453691275,-13.869250748858825,39.55524562905123,5.877165465788977,-0.4094052806279265,-7.150105726815825,49.86432563686639,2.8554050662407287,6.6009881581641014,42.210166103155586,0.8107401490492641,8.33510292807951,-28.323685555555464,1.3938686850607396,-0.5030844153034972,4.21678587012566,0.10705071274504752,32.43593992188706,2.8925870392862834,0.5437453722393154,0.3707941073370469,1.6962127869080779,7.054151049844407,1.5466161501093802,-29.536158324871018,14.811116311627252,1.8736637464795969,2.966986027903509,1.2692992566531287,-2.4779113051219044,-0.8712345988976409,7.860697128173591,-1.3512896994618782,-0.1614424715522317,5.155319314494364,3.016246853362938,0.788952833138046,0,3.242925646375167,0.4742278613402551,-16.735393118936905,-16.74634334487052,-3.873558241187381,8.541887077630516,-0.8901815274504733,-9.691275785112214,-0.5742605873643309,1.7551916642591925,-2.242110002253318,-11.453294533453656,5.499915113264305,1.1328624517338244,-1.0994294617762153,-5.022009409127697,5.177086084303755,0,0.60575904601141,-8.537410195221202,3.1338807335903334,-1.8427856026700906,-3.3033805370028047,-5.101130450267405,2.7568069145415963,0,-1.5267314409276183,-5.105257803831222,2.4585149873412053,0,-0.22764172259324342,-5.1000000000000005,1.6635112639893999,0,13.005519519434758,31.45438653677243,18.210786646543394,7.716887519421638,20.93072512583923,33.65588037507778,3.684241046001266,12.635104665739776,-4.5683462928770915,17.41235537792177,5.712531912197729,2.4239618252377144,1.7464504341993585,4.886156793450463,4.4886463444411175,1.2076915010534677,6.989353380805455,25.261218170768352,6.093883347845886,5.270852894139096,-4.006380837151413,2.6524533784396582,3.3173216914211383,-0.8012756934493129,-43.27859784251288,2.010522840335464,8.772582235742334,0,-0.084034277248203,-1.2004045287929181,4.126193578070008,1.471021017701678,1.7290218269400066,-20.587005295614183,32.730948443789195,3.631498452506332,-7.806008875931328,-9.573622595504801,25.4457551140597,0.9136219745756079,-1.8309038646417102,-47.62452217639796,6.634633150621827,0.11200348980435926,-0.5218800968026254,-5.109535447018418,5.21842326418094,0,30.277967188222693,-22.69826107082242,4.942630054453717,5.339278421032067,-23.60769879047552,-7.481156206907849,6.3757141543041,0,-1.5034686788187233,-4.934694543108383,7.418645921891303,0,10.76985162416085,0,1.1898129130163944,2.209084564625403,-48.75462504277312,30.563338567351035,4.275946440713609,0,-56.92657339095731,1.1789191733230524,7.695375563667786,3.1610697107571624,-5.4565406618086385,1.7220535301402145,9.02096497617674,3.1755001387583004,-0.43289050600931755,-1.0916916130249545,6.226955234802385,0.9296954334380407,-43.981955526700254,-0.056118284409926306,5.720625678338893,0.25758500399794054,-2.377490727762313,-0.3792898580714037,6.604023844178837,-0.10043536550872001,-0.004555632044483282,1.1198174909450582,8.073862580421657,4.185618327617736,-1.8266669757471954,0.5725610208485683,3.3642097585796806,0,-49.909822362969464,-30.94051423967515,1.4409203056727797,-0.4778408074165592,-14.97426832269694,-19.15734142078898,2.5755616246147124,-1.5126913692529422,-4.53371544156136,-4.605388784749571,4.879454015442549,0,0,0,0,0,-1.2100196336269746,-7.326497965463453,7.223037084275957,0,-2.130929302575466,-5.1150270788593994,2.433537137422368,-0.03180829195053301,-1.9114936870126327,-5.1000000000000005,1.7088434974563447,-0.13961936874530162,-5.430630020128785,-13.863308174907761,1.9069669881381976,-1.8370500840150956,-61.632654206577094,30.7369071002987,0,0,-10.213625,45.996501500970645,0,0,-1.1,-0.1,45.23907094884379,-3.773296137048364,-3.8585847308894827,11.450424268880134,0,0,-6.100180718713616,21.994370159402607,0,1.1635767016363425,-7.177232085547601,11.068373031961757,0,0,-1.0877134473355814,3.6788084337760227,0,0,-9.78207683676393,4.610774523164751,0,0,-1.1050403273944465,-5.1011035406338765,28.319329073928103,0,-10.213625,-5.1000000000000005,12.721510831719808,0,-0.28839479055374007,-35.692946289875415,48.13186562648709,0,-0.6683018579460102,0,0,0,-0.9641368767034946,-5.1000000000000005,16.968832151054116,0,-0.7929847114137264,0,0,0,-0.4747235607286043,-5.10588417923227,0,0,0,0,0,0,-10.18506534256684,34.00516148353824,-0.09159723773568072,0,-1.1,-0.9492498712702917,1.0776092867758376,0,-10.213625,-0.2926503961796251,4.495883057420967,0,-0.8945836911155353,-0.31726216712108907,2.0599771284985104,0,-0.4298138953576309,3.2338120897828513,0,0,-0.06240865823240665,-0.18378512743917705,0.2879474362499588,0,0,0,0,0,0,0,0,0,-6.151579992438303,-3.9541750857061397,0,0,-5.781667591356384,-5.196261486677085,0,0,-10.213625,-3.9675223852809385,0,0,0.49933474657865595,0,0,0,-1.0840196531028132,0,0,0,-5.9340530587132525,-5.1000000000000005,0.15151377151735118,0,0,0,0,0,0,0,0,0,-0.5310111371507888,23.807774394357967,0,0,-10.213625,39.52238529989806,0,0,5.276911170799892,0,0,0,0,0,0,0,-5.962916317073388,8.940418804258524,0,0,-3.9415659262588023,0,0,0,-5.311092121142609,0.3661673346012819,0,0,-10.213625,1.1021273819947954,0,0,-4.643887441317677,-3.0501851565299605,0,0,-0.5329199123109467,-5.1000000000000005,8.883095933383903,0,-9.888721849912073,-42.49499745834295,0,0,-0.6145463673865965,0,0,0,0,0,0,0,-6.11609671054118,0,0,0,-0.5007487255470084,0,0,0,0,0,0,0,-8.677598313424214,3.863416450123228,0,0,-4.21723854860456,-1.673568931654045,0,0,-0.635795486006836,3.3739428320869305,0,0,-10.213625,-0.1,0,0,-5.816172041280216,0.672804837975914,0,0,0,0,0,0,-5.972172316606077,0,0,0,0,0,0,0,-5.527036122140621,0,0,0,0,0,0,0,-0.07290849567860143,0,0,0,0,0,0,0,0.6750981749158502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.638218882902298,39.92922972272774,-13.731188201465788,16.81731007065349,-0.32859497878884025,40.85058195326154,-4.069846808592487,3.5830674980149007,1.8274573436953983,43.61480061617301,-10.758616740185982,1.7734707693832132,-1.6094291210616078,43.49611324567599,0,2.5405528370515613,1.857359096870216,36.80156439897857,-7.805190042506231,4.667058348974444,-0.30829635396738625,36.4985310392767,-7.795746785379768,1.4067352026090119,-5.0033923743267446,19.438931777922054,-7.791022822724538,2.8795413541441195,-0.22182560905739754,25.90960256415924,0,0,-45.30047898248432,-10.542015714159795,-12.250806171152794,6.7625598386619705,-10.56343733834012,-9.541704998718014,-10.1237588687259,2.105183077382876,-1.282995148751152,-4.628698267311817,-37.68091513123889,-0.08430339888174271,-6.47396039006729,-4.654119156961576,-7.251447213394345,-3.526776232795812,-5.356359065158928,-5.812718099890644,-4.1011748919993405,1.4732548592923922,-6.523523099360383,-5.1000000000000005,-6.811470850947379,-6.676772222961756,-6.267461857563011,-4.669534408745101,-4.1000000000000005,-0.5851964361509527,-3.4470804803129136,-4.106093734290133,0,0,-33.949626437474535,37.38072417466052,0,0,-12.143086682470932,-6.9146068688581614,-14.397572186522085,-1.2472911447176371,-7.505738515125513,0.8475227002163659,-7.796968017572956,0.47938853160843853,-1.4354067525075203,-0.530084897752995,-7.736537442407085,-1.0057572153193448,24.95617840668196,-0.2783317084840836,-7.790954056035335,2.974186757519079,1.2569828329603192,-0.46711808101996855,-7.790680949864552,-2.345138764443091,-0.050935234039816396,-2.6083391444407296,-11.111879109641874,4.076424881864374,0,0,0,0,-1.565044971007468,-6.942797647002301,-42.325470308271086,9.060918916166884,-4.812517345429356,-5.101242925751429,-4.453004273933443,-3.4401685894400242,0,0,0,0,-2.3917278752980398,0,0,0,-5.050669779698582,-6.584234402586587,-7.791255978352696,-6.034260930169693,-4.847827379183113,-5.208815517542785,-4.1160618557010045,0,0,0,0,0,0,0,0,0,1.634417630933767,33.904879453965236,0,-0.04114276124989863,-2.8990555331630468,29.72493155848983,0,1.6940595022498337,-0.09590890012721909,26.35150807339265,-11.058049383216382,1.2990391138717081,-0.5958291514795756,-0.2628045162893826,-4.091180613844574,21.76562111260859,5.371065751177055,23.945690313324043,-4.10149346480472,0.22814768024574242,1.0758402580241424,6.86490378364435,0,0,-3.0997828338428164,0.29681021467632474,-7.791117394752634,3.0788635536248683,15.659778712798078,-0.15351403287975185,-4.128616109992522,0,-9.149845018510531,-7.877790371376011,-9.084098417978463,0.828998158934747,-2.788964478474783,-5.1000000000000005,-9.568303824597765,-2.754819184490944,-5.798150394546347,-4.997803731682885,-4.016267844250103,-1.5685630863458015,-0.6613024604814144,0,0,0,-5.588351818727648,-6.878976150317349,-10.980076620357782,0.06847340412060676,0,0,0,0,0.5161849493254659,0,0,0,-0.5007694043311014,-5.1000000000000005,-4.101773234107536,0,-0.028182780373734367,32.97475838572054,0,0,-50.60173859336324,-1.398945772823976,-7.791248741229685,-3.3473181929386127,-1.4498325226766502,8.720886679328977,-4.1000000000000005,-0.2622304309131291,-3.087504426978659,-0.5489450479559648,-4.1068702203125005,0,1.3497326640551215,5.049065842122689,0,2.9319559797867534,0,0,0,0,0,0,0,0,0,0,0,0,-3.7864132823015018,-3.6765221802241124,-3.9156125170436833,0,0,0,0,0,-0.4425714696048269,-5.101247246810672,-4.1000000000000005,-0.4224404817094061,0,0,0,0,15.016746627078808,0,0,0,0,0,0,0,-5.157375,-5.0700140337420665,0,0,0,0,0,0,-0.9477635823227879,18.97327700814659,-0.621322195345342,0,-1.109960822535891,11.239987891547635,0,0,-4.040673532255696,41.09696267327876,0,0,0,0,0,0,-88.58112401915932,6.057445515782053,0,0,-2.5526547244563855,4.910065331443011,0,0,0,0,0,0,-1.1058370309624952,0.7483745580694253,0,0,-0.5662488689540074,-5.179196205504063,-2.074352221729499,2.4593083472885198,-0.24702628375894237,-2.853989728273211,0,0,-0.7491994076629402,0,0,0,0,0,0,0,2.506690211490846,0,-3.738129099395332,0,-1.8336388819734517,0,0,0,-5.118158983639589,-5.1000000000000005,0,0,0,0,0,0,-0.4000207712718967,6.42377475587427,-4.106863132838789,-0.12515815959840756,-0.5156065720971532,-0.7421188033014081,-4.1000000000000005,1.6369804298774686,1.115161662728166,0,0,0,0,0,0,0,-0.21079794307159183,1.0269479307254767,0,0,0,0,0,0,-1.1086638317078732,-0.1,-4.1000000000000005,-0.10607790247712344,0,0,0,0,-10.213625,-4.166935534082286,-4.101250225222624,-0.2015923845292642,-0.22281924517849366,-5.198938749169115,0,0,0,0,0,0,0,0,0,0,-0.4707377827114259,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.226351168503844,13.337396122687046,0,0,0,0,0,0,1.4277239355068763,0,0,0,7.72634336885001,0,0,0,2.1631653543918086,0,0,0,0,0,0,0,-0.9786042680483883,0,0,0,0,0,0,0,-6.107241217248532,-4.924264566928192,0,0,0.8380152613912701,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8135479053732813,-5.10124333012574,0,0,-10.673280979062191,3.847687743124716,0,0,-5.5008071273065955,-0.5909854420615794,-4.059712870889096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.110527046875,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,11.271737775064912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26.09144755206565,38.68247847511536,49.99994207014196,-28.053774886033093,1.3209128004100021,42.89214800154073,27.61762694046981,-39.795704404483224,16.72819866875586,37.96675524100206,49.11151117417152,-12.520054328058357,1.0626683140013937,41.68781204689233,27.930184885611006,-2.412073367828828,-18.532129732899033,19.797010906301878,43.481143290895425,-14.811080733668415,7.0840260049450015,36.1550050813338,11.33719284260269,-13.341165287870913,5.268234447210263,43.12320615863986,0,-6.833036603054799,3.5389106388779754,29.498759412177844,0,-2.0477170243888456,10.901542399052072,-7.32520651134213,35.184330643290785,-13.712263293899289,3.2242894452943203,-8.834512101053736,51.3004353675923,-4.170040997450136,-1.3055292685368212,-4.666699302896644,52.8096383832921,-5.1000000000000005,0.37258393858780137,-9.690463720490929,45.96994353492273,0,3.1869027746381406,-9.20790545579085,49.57253222190427,-5.101243412890324,32.21855929603149,-2.4092398430837445,45.4755974609808,-6.821467233988127,-3.290820582514195,-1.3837076093997043,38.4410555153896,-5.1000000000000005,-0.8902139738421632,-5.1000000000000005,27.973101899240753,0,10.677866543385354,37.513923671718935,27.200479342678236,-22.476181250775568,-0.47836842655268796,9.706986973945742,50.56200691168899,-11.326727034956443,-1.1,10.555084381830198,48.0484232326373,-34.26380126356198,-0.21118092152867174,1.5007715034755134,54.66932248217461,0,3.0838733474612416,9.609615110145496,49.247967980479046,-19.9006577500784,-3.149939398241936,-0.04598247305540203,54.17178538998184,0,2.017785953063168,0,53.37984192613915,-4.463748463370158,-0.8587573936443085,-0.11277348521637705,31.849726016704214,-7.090365571184849,1.84014431043993,-37.702761260967726,53.22361023200948,-19.997416609547685,-0.88918819292747,-5.1011746463613115,52.747735338059954,0,-2.9098935563833046,-5.1687021667717366,51.041900890058955,0,0.8156272406390725,0,24.39061120475135,0,0.3041659776607949,0,44.861986126289665,-5.102393880512918,-3.310415277023324,-5.106987568883516,21.967471832118594,0,3.7821306694202446,-5.1000000000000005,56.26061523662378,0,3.197598758988354,-5.1000000000000005,23.265055625895773,0,14.515443680038624,36.31740960475878,19.902558702446505,-25.706866325925127,21.612695845045202,25.399503984789646,0,-6.680104008434657,5.861773156014507,14.36701151465276,46.355651211631205,-11.357684530174401,-1.8444753195952286,8.266633746736403,21.502790042991027,-8.493188775885306,11.844904373729824,6.226491343165289,42.88806956982611,-8.191949723889923,27.48069272291028,31.38405623644104,7.666749899558828,-19.477050895891974,-4.571018270155703,35.45385176826438,5.12616721221419,-10.448317370328322,-0.1139884907372915,-0.022812400710150695,21.274638692697348,-2.267801032967975,5.907409781355822,-7.45378166465813,47.72294192815873,-13.06066223325679,-0.06430734363441815,-5.169399105594047,36.05130694956488,0,8.23340353055137,-7.766704635801175,44.89147450171225,-9.226577261335576,-2.3792075574743112,-4.52927105966316,17.439079953606665,-15.310007213708975,6.8133438711492005,-47.40874934050491,45.32913277562706,0,-3.5201495112521988,-8.591020436668655,51.07698982015874,-5.1000000000000005,21.084856130788516,-11.333348874310559,0,-6.847322186902684,6.206801668733004,-4.884077093359545,6.137913222858195,-4.953896824911204,-0.9314794576440746,2.225601184643038,48.74811271448445,-16.143291190002767,-6.1000000000000005,1.5099585384268936,56.408242082443614,-9.12240118938167,-7.39761868149588,-0.06740170814706409,42.080389062388996,-8.715132178790487,-4.573051276933719,0,55.221285366416886,-9.54581270278661,-0.004466239626449681,3.3976847297580908,48.15526479462421,-4.269773580025993,-1.387891670496277,-0.005225378168519645,19.657660135781835,0,-2.3780685050415147,-0.11087923803366942,24.491498813218538,0,-0.36891497424734115,-0.14580280869496828,2.4310766571083313,0,2.7146100555617236,-3.607666178367097,49.64523272322044,0,-0.3529265291735179,-5.111050679175269,21.87604930008512,0,-4.0501302821438205,0,26.222641356767124,0,-0.7550920138434472,-5.112607720478662,19.773118920312083,0,-0.23068594231527798,-5.1000000000000005,48.368270192547925,0,-1.0279145296087382,-5.1000000000000005,54.664266389576156,0,-1.7317847240851774,-5.115193265293325,13.121424851115545,0,-1.0088092525655905,-5.158509910409137,17.50045786173302,0,-0.8190256367484807,39.006212560565146,4.658455703748654,0,1.2946414811877767,23.105113885982806,0,0,-6.1000000000000005,22.401144811480425,0,0,-11.068624999999994,12.449601797218286,0,0,-101.79196205454134,19.936479571813166,0,0,0,0,0,0,-6.1000000000000005,0,0,0,5.059885656318315,0,0,0,-6.105120906587191,-5.101244112307555,28.589076954885343,0,-0.8232248373016264,0,14.781759746223962,0,-0.008214126795818899,-1.794230687426606,3.621725345698937,0,-10.213625,-5.1000000000000005,0,0,-10.213625,-4.755314284229043,18.71541644484077,0,-1.105307078085433,-1.4142946119855297,0,0,0,0,0,0,0,0,0,0,-10.213625,17.393329732002293,0,0,-1.1,-1.0032918162530933,21.73453144176259,0,0,0,5.589719026904301,0,-0.9480064459665778,-0.13097698406249275,0,0,3.5038138935637795,0,0,0,-5.237194704059267,-0.28181012285432255,0,0,0,0,0,0,-1.106666184619043,-0.11112677335454042,4.762599677986798,0,-10.213625,-5.1000000000000005,12.859276865788054,0,-1.7461262706117737,0,0,0,-1.0092733457741085,0,0,0,0,0,0,0,0.5436786178071984,0,0,0,-1.1112851300352211,-5.1057375,0,0,3.2414041369030406,0,0,0,0,0,0,0,-1.1046125,25.058836393682476,0,-4.821510092888603,9.967222358214833,0,0,0,-6.101499262834867,0,0,0,-0.6812783131319177,6.445670253696003,0,0,-1.882537300275803,1.7902633810007886,0,0,-2.1441735527124295,8.147649746200265,0,0,-10.213625,-0.1,52.19969944306426,0,-1.1068625,0,0,0,-1.4004592867155599,-5.1000000000000005,10.217626925267624,0,0,0,0,0,0.7953321426092543,0,0,0,-61.28167086645228,0,0,0,-1.1837056190595852,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6649400698346479,0,0,0,0.4460114803894788,0,0,0,-1.1110814196064271,-0.1,0.8933136990302034,0,-1.5981999325025755,0.8870231304663889,0,0,0,0,0,0,-10.213625,1.5748317209558285,0,0,0,0,0,0,0,0,0,0,-6.101089864774373,-5.101243378914358,4.09848437668558,0,0,0,0,0,0,0,0,0,-1.8955223277627056,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.597296046686079,42.342260381155455,-5.423407750882181,-13.863040386529287,-2.257117575760315,43.92118661317556,0,-4.567637143196846,-4.113568069985288,40.616783112214705,-2.5345150033458212,0,-0.16621444300563423,36.56223997744714,0,0,1.0784092623926598,41.272908625690924,-2.5554889615421272,-14.061304065972974,-0.5427298921884532,41.671337889278846,-0.7371859449913998,0,-5.157375,36.94196251096071,0,-4.10062103665985,-6.067688928534769,5.448948077908512,0,0,-9.370576622622325,-9.826076425893241,-9.264740788995628,-14.844271017089177,-5.581642726396205,-6.533069419377776,-6.282823869924136,-9.71081535315983,-6.343650858892182,-11.847859978239342,-10.16478995197468,-17.63741255270996,-5.8113896205145466,-5.22216724115002,-23.380213412503146,-34.72249029802813,-12.37578727676567,-11.478673455381342,-9.724249637597149,-12.235441065113548,-4.0258446001039285,-6.0123701724527,-5.80535801449945,-5.1000000000000005,-0.7972673751853082,-4.716704477404661,0,0,-4.34319890694171,-4.3345068356229675,-4.739392508870039,-9.039121501817775,-0.7881413379241892,38.15528234209432,-6.12010268169523,0,-12.75163885047052,-9.788587545612561,-15.934526147311997,-51.09524911363749,-2.6263510954457328,6.4116444483062285,-6.3048372401336,-5.1000000000000005,-10.402536047261659,-8.954048123414934,-8.616044287971807,-9.51347916033817,-4.692162042224229,8.824836265926365,-3.6232363008110315,-2.800128158819803,-0.48610712768604575,-0.5519875265276043,-2.0796060792956412,-4.8975749356273575,-5.759743928094664,-5.559129312063386,-7.790000000000001,-7.0670536153755785,0,0,0,0,-12.269790816274542,-11.703968318200985,-20.557308447549875,-13.655609351200935,-0.9258675749126182,-5.140449847676255,-3.2419447142220648,-5.1000000000000005,-7.697225585103964,-9.536976215277022,-7.7912581785069515,-9.496859968050597,-4.118754998149434,-5.112286571410286,-41.02744202032312,-5.1012375,-0.1879967902620321,0,0,0,-3.2134897302189764,-5.1000000000000005,-7.791251290364363,-5.1000000000000005,-0.910240272848394,-4.807204716318552,-3.2635464633576436,0,0,0,0,0,-2.150873807154283,32.85914753685677,-3.207934482261532,0,4.120008104360544,30.208061370682742,-3.208730820356425,0,-4.199942929508442,10.96301994367968,-24.486532893130995,-5.026609163227905,-1.0298356504916792,0.10872968760427854,-4.101361747457324,-2.779799869378596,-0.861314215750387,29.617997646752496,-7.791114015800721,-5.1000000000000005,-4.528929974503821,21.770857652240885,-3.938281401256105,-5.100473537992981,0,0,0,0,1.7313633955574688,0,0,0,-7.2941635378435805,-44.701004546946066,-41.01172543176186,-8.872030026775652,-5.196732636843024,-6.5624397192577515,-36.70441283670149,-8.931593165526605,-7.697022418627288,-5.1000000000000005,-5.605015588204557,-5.114702507084878,0,0,0,0,0,0,0,0,0,0,0,0,-0.8061015691214041,-5.1000000000000005,0,0,-1.023386617422947,-4.9215516588180055,-4.101245024062506,0,0,22.5278675517827,0,-9.691223772129606,-5.7584553529974185,-2.4133739154130165,-6.691854902487864,-50.393957400817946,-0.5689947205818439,5.662489854620281,-4.1012383466964435,-9.629395740085988,-5.157375,-0.1,-4.106997811330341,0,0.6290638016061559,13.845359868434022,-4.1000000000000005,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-5.157375,-4.734240947081183,0,0,-0.3363784285710151,0,0,0,-5.157375,-4.690330869011927,-7.791255152565241,-5.1000000000000005,0,0,0,0,-5.157375,-49.53135731389147,0,0,-0.7217839650592078,-5.1000000000000005,-3.6352429687426806,0,0,0,0,0,0,0,0,0,-10.213625,27.441094328842645,0,0,-10.999378869950428,6.2103749782068105,0,0,0,3.1242978726710975,0,-5.120792037104218,0,0,0,0,0,14.269148676385445,0,0,1.5185899327759793,0,0,0,0.9502704372159375,0,0,0,0,0,0,0,-1.074980959499251,-41.26271480425828,-0.6547191676663044,-5.164272975556723,-10.213625,-5.10124815115751,0,0,-0.5721398802248409,-5.101541683797652,-4.1000000000000005,-5.0197808690196695,-0.7505818986888624,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,-5.1000000000000005,-0.49895588099937166,0,0,0,0,0,0,0,-10.213625,3.7789183062868426,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,2.2472979576229966,0,0,-1.0618814727368464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.3989909126876965,0,0,0,-0.8566235308801554,-4.78238699586496,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.064596684452871,11.736199757526624,0,0,0,0,0,0,1.263568656904825,3.057275891367387,0,0,0,0,0,0,-10.213625,2.099161854873804,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4724587351037641,-2.092326888196304,0,0,-1.1057985075479075,-5.101244110569521,0,0,0,0,0,0,0,0,0,0,-1.3789118591507667,-5.079211873812656,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.9661601664348551,0,0,0,0,0,0,0,0,0,0,0,-1.1103827074072778,0,0,0,-10.213625,-0.1,-4.106981529727633,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8791952701460514,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.7915419507056097,0,0,0,0,0,0,0,0,0,0,0,-14.226249844125508,-10.216109689367705,-4.1000000000000005,-5.10127017187483,21.09955093508155,27.76283724847118,43.156581152777804,-18.93950561224051,0.11894621689302287,44.35625840063578,0,-13.102897164457973,-2.6052087133504482,10.831098759773786,39.955442094272286,-4.984932562192762,0.1203792723693113,43.403423300426184,0,0,4.0267968952316675,33.02878816081579,9.216302990306824,-24.147147309741918,-1.0213696516102044,0,28.88725338798389,-3.650831760362442,-0.012695794274843228,42.1622565740307,0,-2.701066277653729,-2.6739473456479064,3.8495129278803484,0,-7.973208846883834,4.928432008317811,-6.136776789198327,49.02458059896393,-8.574261948628719,-0.4401873600892894,-9.427941577633039,42.56638032589152,-13.827835540833163,3.829965512852228,-4.902884614666715,23.396368165189692,0,-3.442397846697658,-9.698657312704423,30.64117410290918,-13.827908218012563,0.26484519092443204,-4.337492937378958,26.718633267491338,-45.40238603288384,4.860904122436734,-9.451295964207413,20.780162793776345,0,-0.2443851826786986,-6.469674675584613,16.99049027587686,-4.343635623955677,-3.361863164101853,-4.659641599647242,0,-9.690321498281598,30.14592514161113,35.82225614458018,1.127859248853598,0,-1.589809653485502,-0.5774336463998586,0.4189166606851167,-18.833583159853973,-1.7886466059166422,2.1139953046694906,-0.4926271041118287,-8.761980388084321,1.1554375821573588,-1.4898917473690985,2.1655933009695474,-8.862748128625203,-0.3107476234256488,19.45659863804945,0.16098651702330458,-9.16450433411071,-1.9522915993864793,-0.4506189702284055,-0.09618178125245161,-4.821250245064149,-3.0429711364208774,-0.12730453493647795,3.90229028444259,0,-0.983586469537074,-0.11940717082858716,3.6653069954740856,0,14.640244016092218,-12.027729697647352,-2.3361624941333385,-31.13226853649712,-3.892602745357972,-50.22772325052717,0.004664498437030679,-4.795812496324626,-1.0327907531138238,-46.17735448234698,1.3752084405423157,-4.504942915076018,-0.07200860192347219,0,2.330130723264502,0,-0.14420039218176417,-5.1013453764210634,1.8053732604533792,0,0,0,0,0,0,0,0,0,0,0,0,0,8.119770943658747,11.634536752367367,34.59547731199907,-45.92302514423544,-1.2181109570657696,0,25.836263432941134,-12.870592379423053,-3.5867035366065436,-1.5880784249065418,3.9164703067704605,0,-0.8212503377876983,1.33276320637313,0,-8.388488119995968,-2.333643702581042,7.17432190655666,1.364425104322327,-3.433362899601076,-1.6085165903796081,0.8498508212552024,8.578429515045167,0,-1.8588908572424956,13.322614603354864,0,0,3.5120615302928058,6.035692045656729,0,0,-3.4646672931143834,-9.917501291666222,33.60315176073218,-9.649122793554117,-0.4454745634399145,-5.1000000000000005,26.32078176153727,-5.106867995173564,-2.6412213550963224,-5.1000000000000005,15.437801601021436,-5.1000000000000005,-1.038049677664718,0,5.117494461244279,0,3.0428683669880368,0,5.551924166021209,0,-3.003856158690496,-5.092720035416746,2.355636269610648,0,-0.8354807046333641,-5.1000000000000005,1.7088426957197331,0,38.57965626451062,0,0,0,0.550095580892187,28.350205141645773,1.6940131047214746,-5.01673243900031,1.4481862014081182,-0.1,7.0224897414887195,0,0.04706497951754107,-0.10336516005318137,8.392603984079072,-9.608473817216886,29.473261172323586,-0.11491297705509029,3.5087406230286264,0,-0.2040207027079055,1.7426130463836713,4.9328519533885435,0,-0.3403211225022895,-0.1,1.7088496505310795,0,0,0,0,0,0,0,0,0,25.089089045530503,-4.134821845632707,1.8598866666979625,0,-0.015096427984957528,-50.52876494682684,1.045072260099553,0,-0.3186064872958359,-5.039504381136502,1.708843426453432,0,0.5649442149181753,0,0,0,-3.3171760878908927,-8.184925669369314,0,-5.1000000000000005,11.105719626660337,0,1.3606592056141869,0,-0.6221718419396369,0,0,0,4.03301976590064,0,0,0,-7.750823540338373,38.10787363940379,0,0,2.856705785677261,0,0,0,-0.12273298248382575,-0.029338413721488557,17.617332574715906,0,1.5241067557509593,0,0,0,-8.819223725308982,3.896417518538361,0,0,2.7669023135092843,0,0,0,0,0,0,0,-1.0978843221380579,0,0,0,1.9065757023241348,0,0,0,-10.213625,-1.1896939736396015,8.95481429646907,0,-1.5526196643688208,0,0,0,0,0,0,0,-1.9380329784078443,-3.1872363743528904,0,0,0.2452916982840801,0,0,0,0,0,0,0,0,0,0,0,-1.1011436652303244,0,0,0,-1.105869946772658,-0.5745649145010431,0,0,0,0,0,0,-0.7838064634582077,0,0,0,0,0,0,0,0,0,0,0,-6.1032238251486834,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.117227828125,0,0,0,0,-0.26366801040957233,5.576148606136609,0,0,0,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0.4041763703761787,0,0,0,0,0,0,0,0,0,0,0,-1.9356524183516968,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.1083565159413635,0,0,0,-10.213625,3.184821343741581,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,-0.17053085615259428,0,0,1.761077840206308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11.153115794952212,-5.1000000000000005,1.703204637462822,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.3455334058714894,43.11334123655607,-0.6754899082891271,-12.678910449346972,-5.157375,40.84700254884906,0,0,-1.7308562177270796,26.634967259061767,-9.900892203453905,0,10.343637347784183,4.307369106944209,0,0,2.798118354763632,14.69030637969959,-3.8772951062601444,-8.441865962744444,2.8566840602231354,6.959334613467858,-4.101243123730265,0,-4.620848775789876,15.050910452186534,0,0,-0.9048374168724133,0.479627751775316,-4.1000000000000005,-2.640725075733327,-2.584158970429551,-6.530628346483757,-8.330949885816052,-9.707698741635824,-16.02495658530631,-13.560419988489334,-6.479194857025745,-51.012502562698835,-6.0290907690187545,-6.330843188595205,-7.589324000187896,-9.680603103513082,0,0,0,0,0,0,0,0,-5.157375,-5.1000000000000005,-3.862768525548767,-4.6485841734422495,0,0,0,0,0,0,0,0,-5.968688128838033,36.5108987569368,0,0,-7.318192042745492,-6.887182602930269,-7.790000000000001,-13.70967157468802,-0.08622843106410479,-0.11030222753179011,-4.115914522202707,0,1.5761272539911537,0,0,0,1.765570115515706,0,-4.1000000000000005,0,-0.5773872953111684,1.435251724566752,0,0,0,0,0,0,0,0,0,0,-3.809751567796027,-5.1000000000000005,-4.101249787059729,-5.1000000000000005,-0.8684272711269139,-5.2151252634755645,0,0,0,0,0,0,0,0,0,0,-5.157375,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.75839251170839,34.17429512636093,-3.729498738838684,-5.121161807241142,2.075765756211858,13.046354401757833,-3.6775897873134316,0,-0.7968848371824597,5.660998220834173,-4.078894761424567,-5.134804513483145,0,0,0,0,-0.16720696593738965,9.200359647735608,-4.100938804371128,0,16.931299647084273,0,-4.101250121288171,-5.14297391272898,7.930011148309232,0,0,0,0,0,0,0,-51.638305941191604,-5.1000000000000005,0,0,-0.2177091844158987,0,0,0,0,0,0,0,0,0,0,0,1.9818908615307445,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-47.511276527272905,8.10135441921308,0,0,-0.7810374383307224,-0.10693936985946151,-3.9372646853684006,0,1.5119035530012448,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8164741681726042,-0.1,-4.1000000000000005,-5.1000000000000005,0,0,0,0,-1.2864446128059446,-4.291313416203585,-4.1000000000000005,-5.1005034644121325,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1060591509903066,-0.07519727616062129,0,0,-1.6920128567010826,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,0.383165277516921,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.45014957425112656,0,0,0,0,0,0,0,0,0,0,0,-0.47345393732238394,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.105794985874073,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25.849143634059516,46.432532922786244,54.31555850045271,42.143754962734484,17.918268368400593,37.72352057724722,27.609376762928395,34.60100171182367,28.36780180328589,45.41003263686325,48.67406798999922,34.31600050986198,15.902054120742214,46.52628232758866,26.035448066071062,28.184502870284934,27.80778864790377,39.34065681181152,45.664920349092256,34.19060303014849,20.803879534017042,34.038159398720374,43.68370562737146,33.66557886508993,22.731783474138,28.346462403249433,50.06181555437189,39.950435050935944,13.265377878450556,26.679578189302692,24.81357640061179,37.26278409969156,26.165500879580634,-7.103358021899753,52.672058136772506,39.910586683302036,25.868164817066887,-6.94955544576286,52.52418855853114,33.92117870310165,21.66352562197706,-6.401173693702491,54.19057696606333,36.63827411085712,16.011957797622507,-5.714925286856925,50.62507515563674,39.38066081586843,28.773314798614372,-12.212003432961975,52.04371038275505,27.962643091758483,18.11218563395426,-7.562374949816672,30.770768597760227,27.7434297024032,27.087648004554396,-7.9563001136354154,50.03722550862616,24.188175076287404,2.738528587332526,-5.464950004885732,50.91059206766764,15.856723958109047,26.981353655107878,31.018211978461533,53.27268148141157,35.003129170988906,17.36464953123234,38.999799816987846,23.09920752704564,33.845255572695685,35.2333394680742,38.29948229932906,53.39228218758775,35.68151601708966,5.801217355336027,36.74937120219653,53.38054020508285,30.784660093678436,12.996413284617086,29.477955328431158,50.01684045910074,32.919587006933384,11.02131598124012,19.471766121100515,48.684616221579006,19.3542230734433,2.049149313825387,28.197555581708976,53.38859378735799,26.15660958893432,-6.1000000000000005,12.720269951116727,51.142019056997846,13.61966162700514,31.518685413845287,-12.610237015737674,57.289364056999446,30.55048664109888,15.711383246321896,-10.030914708633084,51.28637140327783,15.653066006870628,32.08005440421533,-12.172591835381128,52.112379247655966,32.76732654680914,9.14261210392047,-5.8722364788665375,54.97766420219733,12.258584401074614,12.855863235709803,-14.416902724718884,52.219283239504456,23.978790707224114,11.536772691086373,-6.983599509452776,44.85191266997811,7.786534475654404,-1.5142671398301861,-6.207595063746028,55.13232525094289,14.741511796315882,2.488427157110536,-4.885303749654012,50.01426704174968,1.019535430998188,23.517826601815287,36.432380327845756,54.489337028259506,35.32546220630656,33.15168852268649,35.88988144972874,51.22299631781867,30.84124366768358,29.16622406175652,34.70779075958187,55.71185851551117,33.06476002742344,18.16818991892148,27.445966865704715,52.19115477906776,28.87365626678758,21.165386672741413,31.745641881345836,52.55439194079617,31.915092787400845,24.198088061874657,38.82794401577911,26.94700010632887,25.863062938285292,7.4908074296066385,38.41109617401478,42.555386794109516,27.65776966151337,2.1177290817799745,7.319054115084592,54.42805825123033,14.2171138815772,25.385012807501752,-12.108503399165784,52.18365040634339,30.139364843072556,19.183258257751852,-12.305468779837266,44.151408811329205,27.523664867805255,27.905233890016607,-15.702225772534614,48.17390328834748,14.814775060227337,9.027180629833007,-7.344493735471629,52.658646802234564,9.05982353305672,13.910673439710397,-17.52623690351876,38.891743712851664,14.359072124049352,3.496774424871442,-13.155273351410656,51.93135946467066,5.460099294625403,13.840815762304283,-16.406975887587784,48.55594148389736,16.369409697046944,-0.03795405326361489,-5.004897863200141,51.01871979947475,0,5.06122361653309,35.941114101417455,50.03694668237892,28.21445517173604,17.161477036427037,27.952599361882417,53.78129024903566,19.309327665872924,17.494904048610422,25.53420126339026,53.252288331366984,21.022824500071206,3.3896475050567454,8.938622227133251,55.280887853165986,10.880204356676936,8.843966328605545,26.119458129803455,52.81464884604775,21.18492728760095,1.0710348564712326,15.719669536013596,51.73495213495514,14.520683044626203,4.2862498513730305,12.642393494780515,46.16927670675871,12.193469919940465,-1.2819545841282607,9.451311053943376,52.38220825097734,4.411813826262369,23.004069120982134,-12.363046118643016,49.99653642207085,9.78119507985878,7.314904707958049,-10.26345608946804,49.69309749053357,2.9799336116309028,7.5855731405858045,-12.925389116556744,51.122937869162854,8.309203046048196,2.6662724075788766,-6.581301342458109,27.842240023970206,6.180483243760083,12.982689677985713,-10.130078644039408,52.8897649411589,9.787097442071161,-5.540766189640733,-6.2835220265407505,47.995353827307035,0,3.6996894884186697,-4.964967919259124,49.46968813411947,3.3903716401088695,4.572048672589928,-5.996871180845813,44.02635607041082,12.961699625542355,7.769333293570192,25.21592870044436,50.85580564147381,22.425310175885024,-2.447447975227381,45.58427595614637,5.548150708115572,10.636161560394186,-7.944154226436957,44.12343336871159,5.927699111849663,7.3226768873722,-1.1,41.742157331092734,5.3267320014308135,0,18.45850683971569,40.93203217276671,14.455658801919899,7.317841240778761,5.7264620340698205,44.55784436553545,0,4.24388517634164,-3.2946851831791797,40.93298262706337,0,8.382663127557233,-5.4283789593658724,35.05790396844821,0,0,-1.1,-7.052766476176787,49.27078499853143,4.305466943079679,-10.213625,-2.03683642276776,52.091355390621075,0,-6.102619284398877,-1.7401901742230814,45.83075273714333,0,-1.0664838925381601,-4.181224029021372,53.856702624302706,0,-7.055005326415483,-5.165694966900577,45.82836688472437,0,-1.1052249138043662,-0.890990596777985,24.442450287740353,0,0,0,25.148128746075276,0,-4.242362866630302,-1.1246077320595382,0,0,-4.109258830149535,3.9245739027528574,48.21422786626315,11.730731152629891,-2.1141444730086985,-1.0738513920401613,47.54867153297386,0,1.1582626024189657,-0.5972485319822965,51.402055127745186,3.9479405777657592,-11.08842116681755,-0.695974415823829,43.70754595188015,0,-7.172270829396407,22.989067334064124,0,7.33847207118202,-6.08114901870762,-0.6440416776220601,47.7033690847675,3.4044851483024434,-14.434200172849131,-0.2645014945096923,54.534417843468475,8.463496067531405,4.509503108814561,0,0,0,2.083108390540312,-6.203009112409902,41.93313736374955,0,-3.173152989601536,-5.229577103227875,46.527553960978935,0,-10.213625,-5.125454344766391,31.382434209983064,4.26182944138788,0,0,0,0,-1.1202645821326447,-5.111642703501031,29.049413786253318,0,-0.3621992108267831,-6.064465787837635,8.97773279669183,0,-0.4121959919353261,-4.701350482103692,9.851592321451976,0,-10.213625,-5.358764271408371,0,0,-1.75627702122123,6.657497822476492,18.45280318415982,42.65432098448447,-6.1162153281250005,38.760101652656694,0,0,-15.459999222258354,31.101336728774374,0,4.155798636349229,-6.6484944944983875,30.344220093558366,0,3.672879392274467,-8.29314559886567,35.146933178025385,2.809638228767974,0,-9.871318705200562,22.763158402760077,0,0,-1.0197934628734853,40.797922549755405,0,0,-1.1012375,12.381720073417494,0,0,-6.111475389058523,-4.297499453106673,0,36.56901607468506,-0.8772840496255786,-5.101847307229701,54.700169988902,0,-6.100126675,-3.9081707785284565,52.9119260988069,0,-6.1069814546875,-6.152962620978862,22.67084768535807,4.582008902918725,0.002998102195846286,0,55.898013876530165,0,-10.213625,-1.5356218342248427,5.8174001784826,0,-16.313746767606414,-2.575893987058535,0,0,7.321410392350896,0,0,0,-10.499075249339866,-0.1,51.56332905434337,3.2881201794135175,-20.55677605303631,-1.2289433823523455,46.13834120234259,0,1.4843734069330283,-1.4569499192169273,42.41627114793069,0,-0.9043613664998159,-0.9434677842566077,15.69422704036634,0,-6.910896965024053,-0.1119369232616001,34.77848774216973,0,-10.213625,-0.4783271319861811,15.075912882468144,0,-1.1,-0.8890199115835858,7.4900876852926865,0,0.10316877247846515,0,0,0,-9.227308523168217,-5.1012375,28.884593805833454,-0.10638334525883941,-10.213625,-5.107023062564908,14.119442794897891,0,0,0,0,0,-10.213625,-5.612904058405755,0,0,-0.2785966199709625,-5.1000000000000005,43.870828609018,0,4.3195730414939755,0,0,0,1.5499535442674899,0,0,0,-0.9160033720715228,-10.21465550379358,4.805184157117058,0,25.634680596756024,44.56619907095469,-3.4802054244902054,31.888949737111385,29.14059277247767,38.98173379183775,-1.0347867915963118,30.122608361728403,23.726204425868232,46.359931110571985,-5.348443846560784,33.22710591125661,21.761105858271453,33.8134259479321,-5.935437970913697,33.60479828668274,19.66184594237782,38.76573394301219,-4.060400485829777,27.82283249096654,18.815832978423305,44.96285621282595,-2.672517776473126,16.93186151762951,12.330055697445964,32.980508252084164,-4.771326495419145,24.194753779994784,0.5089475216796893,27.438252622562093,-0.5023783115372144,27.514316631826766,18.199819876597715,-8.786371781016474,-5.178029509176723,44.88917286067221,12.633363290226438,-4.951937331342545,-4.855440267551251,43.59591631239235,7.245703623853062,-5.105866880414575,-3.996492296311957,46.92825283815381,-0.8143961208831829,-1.7508853049936222,-21.633895550311244,44.439771737572855,2.1263835381452294,-3.59627551552565,-5.656859165351332,42.6538494019443,1.0301802978871701,-4.085669950071951,-5.348649738192581,41.626489578309176,-0.3244756923989691,-3.8932866363862004,-4.101242838105448,44.264212730786994,-1.0289242173479163,-9.347438822177676,-4.1000000000000005,46.718182236461814,19.576961738668846,33.890858812575,-1.9911533136436332,45.391515291650705,-2.4897577649345046,9.368434239826408,-1.6287384501243691,43.43924835853039,3.1717234710960076,15.980183570953553,-21.01463516424444,44.09500922873364,0.8602991697791977,6.5605360000331405,-5.621023260364938,43.26578809527244,0.1903200379680814,18.33124849666034,-7.266053718563859,43.317723291139906,-7.4195878817887,5.774424100134535,-3.0337343351580435,43.98148546929504,1.420244459695092,10.61548549926925,-8.572100074477362,42.16965452192257,-5.540415118510886,-0.3494444109049892,-4.1000000000000005,44.90601634151487,20.19407577748486,-13.133480699135722,-4.947618490998577,48.13466077956855,2.1963879021650254,-9.89758422833107,-4.189195102847448,45.547341013529945,3.8473907282202275,-7.527469095740826,-4.377208111750443,43.550411251491866,-1.1,-4.850418553840138,-1.986065754957903,45.87602473025494,9.130691984947873,-10.833420506910596,-4.907136273681309,47.26494439140724,2.0699195828381134,-4.642080053259592,-4.104688012859124,44.531209962410735,-0.019651659822651713,-4.445827156047134,-1.576962506580319,30.851700214987524,-0.28816382865605716,-4.867493891725604,-1.7864864529058277,24.14080245302003,25.513297474540366,30.462533751179073,-5.8526413367277215,43.58532639904522,7.676504130409912,25.34268520609117,-21.187056682474797,42.27222817002487,15.861250577677218,15.352152082796891,-8.88551259014322,41.36395391365198,-1.9954841911293588,16.555135454639796,-7.462615008486126,42.93074947694439,17.770082312483133,26.804894877061336,-5.833620048315729,40.32010844782304,9.441038679957659,13.588019464168887,-3.168934461195091,40.312990046646576,4.4313930635451975,5.4972763900152115,-10.584697291131622,40.482958804675434,4.414647728750927,3.741552975573883,-9.12401126430659,44.78017876766458,22.205698290895544,-4.038171074133262,-6.769854295370006,42.26483169078517,3.271561675860008,-6.756980388863263,-6.505235913590857,36.78999228648663,2.3658710684069426,-6.856817482811337,-4.1000000000000005,42.2085806282969,-2.543399610179587,-7.884143151592715,-2.095960450148464,42.54280041094937,-2.5190565485304623,-2.499390921991907,-3.9659592503776606,47.20519996945415,0.3192939211810969,-5.1012280369681555,-4.022660464054674,35.99054480000491,-3.268420862005289,-8.92546825486424,-2.8144913871380606,43.12994448291713,-3.274172475582203,-5.010126856188403,-1.688258078968996,10.648568825593934,-1.235482215010805,33.450534893884374,-3.6620944038630534,43.936185116410364,-1.2193482872656354,5.857739541998214,-6.186542693910348,44.04721031159479,5.263756481675286,7.22171723366952,1.0366134950991661,45.335099888454764,-0.09045856575094718,1.009768338075544,0,40.830181714354055,-22.09282239032415,2.7785295453858248,-7.191633828819593,41.89482447306696,-5.157375,0.7877788172535563,-4.1000000000000005,40.58463421958535,1.1384739397366581,1.0963163918403258,-14.101541300097788,41.51898217948869,-1.0488845404477816,-0.1698074858009706,-3.1674658679578993,27.126165049072053,1.3184053373981361,-11.799718074862389,-6.392738083168471,45.78521725205865,-6.1000000000000005,-5.121264581363341,-4.1012452203125,43.03264303046024,-0.3338339770275382,-51.205974483242436,-4.1012375,36.835619755278124,-2.5851236729479883,-4.897271018587797,-3.0245902557955633,18.8722084041984,-0.41565125627320976,-4.428040168856393,-3.6679615880602947,16.083741256835616,-6.012585618564032,-5.1126130895834905,-4.101244469257788,22.506995809218953,-2.2935404191994073,0,0,5.166813822128772,-1.0285082478664396,-5.1585320717788505,-3.830239353128134,14.936461500155739,-7.655574880773248,43.26022035011498,-29.060979237566247,2.8918306010944295,-10.213625,45.57430280493175,0,0,-1.8084223592654993,37.944171280098224,0,0,-3.5339149537576837,25.403555037771923,-0.1832721259378353,0,-10.213625,38.27376147876528,0,0,-0.03185479643299534,24.021788743426605,0,0,-8.719925490067787,33.86611097657564,0,0,0,0,0,0,-14.79450827325233,-1.7422275464185724,-1.3508199936712864,42.64271218304794,-1.1052304858037105,-2.069396907380401,-2.873864295984096,43.79785061405022,-1.1054074051222107,-5.1068625,-2.825507122845984,20.828432757433795,-1.0441300989433808,-4.312341955145721,-4.1000000000000005,16.599383664946068,-10.213625,-5.101250135316025,-0.7146776413142981,11.615160000780513,-10.213625,-1.048032611530089,-0.3542256037695154,0,-0.5663249358921546,-0.6040721909905855,-0.02876684050052987,0,-1.0324485414312488,-5.101250348588108,0,0,-8.95094399875769,36.4571316355933,0,0,-61.06859268598725,-0.9032179973349477,-5.120070932954512,27.994870680114442,-0.9804050044147932,-0.7123376922225735,-0.22819373876045435,40.17358951541464,-5.540591904515312,-0.18764758113698107,0.9580654759670455,0,-58.444628590962836,11.186448142548283,0,0,-0.9998345031450739,-1.0812512490643376,-0.29701394332078407,13.38244063211417,-0.6842061195154305,-0.7388213156934985,-0.8333478123001001,4.245368217606747,-0.1405767307354113,0,0,0,-1.1172275457565823,-4.983118284040802,-4.1000000000000005,26.445492195254385,-10.213625,-5.69127907863717,-3.9594718429451854,8.577452559995583,-10.213625,-5.105560492304049,-2.802942722779034,0.21083502847810315,-1.1049582890016203,0,0,0,-0.3407748563085245,-4.546091236733985,-3.271634407278141,0,-1.1103724956044405,-53.43770380839784,0.34662533459871697,0,-10.095250700339358,-5.116201773870942,0,0,-1.1,-5.1057375,-4.1068703541365235,-0.19597030262124054,-1.1,28.434207306894915,0,43.508843555212735,-1.1,16.558562787475452,0,0,-6.1000000000000005,10.92387500048499,0,0,-6.1000000000000005,0.5120039510257605,-3.3434440695674428,0,-9.381924360080024,12.438657251207637,0,0,-0.31014326988154156,23.981268745392708,0,0,-9.167437912712773,0.10497884115330539,0,0,2.222401216476954,0,0,0,-9.740810425078374,-2.5616867745938574,-0.8808013229144912,0,-10.213744180594617,-1.2069927083534318,-0.6064902273352722,-0.10593830632520258,-1.111172340902594,-5.1000000000000005,-1.3811070522784634,7.646717796135693,-2.105644477277165,-5.067252015668419,5.461826528866936,0,-1.113906107908153,0,0.14481870298564345,0,-0.5375651960355933,-5.1000000000000005,0.4188481057344355,0,0.8477624073602623,0,0,0,0,0,0,0,-0.5502891086323224,16.386275709356347,0,0,-0.809486898778858,-0.5755376182957471,-4.106864252921655,16.353136920369913,-0.8023158025280126,2.185080950004575,0,0,-1.1094187635060953,0,0,3.1867237469800562,-0.24310915515924894,3.2495901254792523,0,0,-10.213625,-1.679372594743615,0.45877776627195604,0,0.013334166746352061,0,0,0,-1.1105536297401333,-1.322858571630821,-2.1867038096462053,0,0.268461153259262,0,0,0,0,0,0,0,-0.9317997825747274,-5.10137837104241,-1.540087492888375,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.256825344355363,0,0,0,-1.1041609773751149,-19.310734591552514,-4.106863897453738,0.20494249570520662,-4.125272093907101,42.2424562873015,45.46466036296946,29.395579312457457,16.806037839952282,28.580252407003957,47.75666317376915,32.60383142750124,14.984350174320156,30.642056381935394,48.322965675218356,27.814571700590562,28.221180473762047,36.15914218120475,26.621527567018646,21.79007240885829,31.668521176540818,46.207851554624725,30.597603144079233,30.187522378224386,29.413949648861113,27.963599270578122,25.35197054610967,25.53647206622243,23.83476601055224,30.239177548273563,23.4744912655118,24.288791026510847,13.187582822244726,30.571219454333782,47.068356723016294,22.75375934196114,29.919793816234883,-14.73558582049892,45.284143750447036,31.322818553140266,28.17135397415146,-5.082059131199649,44.390808069226246,28.254680022473284,18.7944531652507,-8.352425872577083,46.35623597631969,28.471830134522953,2.7089437217300283,-4.517492494819012,43.64643066216226,9.46413415067217,14.895014188996933,-14.274714432578644,30.176790446482176,21.1703119850016,3.36015464475117,-7.763888489162444,44.915960852192455,1.2189747976769088,1.8054426005356898,-8.797413058962196,47.71740753641453,20.412174222327373,-0.06999019291587992,-8.247755379295738,29.579719412959985,3.3241692650611085,10.132673584657526,25.791400175662766,26.85929145127277,38.071132259380455,18.367387526136095,14.429289622759006,41.71450807710788,18.80846542569278,27.70283948929856,13.85471803468906,40.10907823858706,19.460921427286703,21.117412001639753,19.24014812409175,29.04115350018423,11.444245884249497,13.783327349439077,18.080082207399652,14.34785658305364,45.18716050916127,11.837578068255306,13.794634652213173,32.96719293804424,14.060209538772504,-26.394337616895072,11.877536959010543,9.630827169476884,20.364224021760826,-0.12983283074797147,-1.6881618193492645,44.627719370784604,9.460041840060867,5.3471560833158565,-15.400307375051833,38.227037093065036,11.577119856377259,9.433523876866573,-8.645920171413474,40.69351636663325,7.064393301790483,11.004229866375336,-40.7595310764584,41.17135600692932,4.344831975475841,4.752253451953757,-7.548471638209053,44.60428667765016,2.3079606002436193,22.80340627208928,-13.814827618558489,32.70963645841008,12.015702915152591,-0.1884196066227075,-9.758719082220551,13.443508446596082,1.355521107407552,-2.079286130286571,-12.358734759753599,14.713490757504257,6.23952503193858,3.309181286658287,0,30.49672195897987,0,27.56645121121029,25.336611738407548,44.8411067524573,25.028299045475066,23.379917220237473,29.5019929436044,23.17932720661097,21.119054993088707,16.163997419566073,19.37247874413149,17.23965052683198,30.427324025568158,8.533565000204792,11.619510038799366,28.546138997008455,10.533167078184475,0.16063150608900134,23.121620018121437,16.590301499705532,16.68122518436964,26.318537532035386,21.76126489115095,13.939620776561016,7.928616315630036,14.115739203112948,17.6511447612203,24.485634701565246,15.453659893891075,1.7372813899983641,6.643508071476385,24.640098537939082,6.925815519705456,22.920145230065216,-12.525714691799564,46.66972585107423,21.189990608020015,3.7914404578456202,-39.57685076331262,42.14655864755122,9.067628962691895,6.970601430110222,-19.20869179674616,49.08263933311843,32.59709252481117,13.01135859838244,-23.38348901952558,46.83986703802626,13.19691106269725,16.097951456729724,-28.93159296060863,45.45108970257035,19.002867812358936,9.051308959275456,-15.10815342014245,20.30903210714732,6.877171248415254,-4.783889646490951,-11.271301458780997,44.441840379078066,4.143843756256,-6.103785521499265,-7.826504946620877,26.08798712722384,0,-15.545441737466032,15.86339179159087,41.32892543328696,12.726890550209426,6.645160606116782,6.267990560691595,44.36362412569499,14.136510776386405,8.525103851234714,8.21118446299538,42.58411453167509,15.361422335984537,4.825731704804443,1.9181009568641105,29.095438326359353,2.194419472619273,23.78045390921661,13.890841231434493,10.212206005522212,19.024788557997567,-0.9207810535971404,12.050409351253233,17.220021959725436,18.023840211004572,0.6618230652338442,2.680994630424094,37.78037241882854,0,2.466440178954149,-0.10697643497124415,26.833784719791527,0,7.2565227035629984,-9.277229385813893,47.623057644285566,8.658871469522024,-0.8523211804774786,-4.925374702369796,43.480722227683735,0.8240118143907053,1.5589388112507958,-3.586821564365536,43.3567718082856,1.1741687919454895,4.261345774072301,-13.316143167752683,28.60213661848192,0,2.8723267778760757,-5.1000000000000005,43.90408161637912,0,0.5225006939030662,0,14.710300614757873,0,-0.024916391726503506,-4.964909230719669,27.070831852260255,0,-0.5937329317314164,-5.158042949548198,23.617454349999992,0,-9.532644387799522,43.36374580122772,4.905941915764033,4.003416933522558,-0.6589091500202596,42.900574618939494,0,4.588212100781454,-3.8750816771660803,42.36671944732276,4.584437927934123,4.1775974663717035,-3.949041543680574,43.152689825519964,0,0,-33.08526476564442,38.03546082925318,2.7645738412549803,0,-6.11063853106085,27.458668993366203,0,0,-0.43760307093165096,24.05639345397772,0,0,2.7162386512913437,0,0,16.862717035276045,-5.3028482146879,-4.204058788032358,39.69808238141783,0,-0.13993851385268422,-1.9288245203455965,47.615590492105994,0,-0.3327292941024618,-0.31630241810285825,40.7932762812687,0,-1.7505305013622234,-4.241724673312779,0,0,-49.52645659649522,-3.636473548952571,25.409925706119825,0,-3.053004745074799,-2.7990333843127138,16.35197134960172,0,-6.106238149381656,-3.276093487158089,3.3361984659363695,0,1.3710270533161317,0,0,0,-2.3697536084634496,-0.11964553691168488,22.991686166720342,2.1470998665831713,-1.038765596625358,-1.8547860657518926,24.986000557771145,0.6123124767312003,5.7479429742946735,0,0,0,-1.0754497525120703,-0.48593035788111405,7.948115794901367,0,-3.225925617644109,1.6202630347328482,48.94013040511132,0,-6.086188120521713,-0.9241772250810295,0,0,0,0,12.921688073737656,0,-0.571436172172679,-0.7505342385587155,4.480083980352851,0,-6.118027258298108,-3.710872456488291,20.043504809750313,0,-6.1065224458976495,0,9.744210869908215,0,-0.00407446320101551,0,0,0,-1.1060746532436005,-5.119876711733329,4.751942506621741,0,-1.2776678241831414,0,0,0,0,0,0,0,-0.16977770757269667,-2.223076965894501,0,0,0,0,0,0,-1.7544010424156764,37.89280669159178,0,34.97397863387742,-1.1,25.644740295815723,0,-0.11148681469692641,-9.124511320589809,18.596042560070863,0,0,-2.8783101750409728,5.733610089886273,0,4.158512567179691,-5.877845591887929,31.20805215961114,0,0,-7.348111121637567,11.953974754412835,0,0,-2.6848032865135205,15.340664500710892,0,0,0,0,0,0,-9.02134947240146,-4.785144033334072,29.07041185568722,0,-6.082138482246037,-4.1496013613509835,15.836074348606251,0,-1.1100867710965054,-5.100817985530405,5.688904420759874,0,2.8049174055200576,0,0,0,-1.1152824468208609,-5.100982334999868,42.544091206378766,0,-0.4967036233227944,-1.8284154224112257,49.056112247040296,0,4.943099888841539,0,0,0,-10.213625,-5.1000000000000005,0,0,-4.18375051057584,31.384312805233698,0,0,-1.0940070126057924,-0.6031861437028412,33.55594490369632,1.4632344068231933,5.643999659075082,0,0,0,-2.2853894209446786,-0.18182954166441778,0,0,-0.17897180984159622,2.680925478069577,0,0,0,0,0,0,1.4863817220389415,0,0,0,-1.0413551076542356,0,0,4.836650988288719,-1.0281066318226937,-2.746769380459077,1.509912613672424,0,-0.887983990458158,0,0,0,0,0,0,0,0,0,0,0,4.171010354386958,0,0,0,0,0,0,0,0,0,0,0,-0.9236076932991093,-5.101086002708815,0,0,20.8483280596421,24.632577734346622,-7.09142547359977,16.84506364584935,20.356818925258015,36.38801007458103,-6.62816068989911,27.73307417943896,17.7707612360467,30.961033721773,-11.144765817779891,13.881539919073846,-49.90837945735607,41.62540589588669,-0.5353937267068695,3.301085874589683,11.158359600656013,32.630942758046636,-9.52224791868996,15.95392746964507,12.921019283550855,28.353331429789414,-10.15582486260312,3.110256966448083,12.899374520204457,14.48674595103,-20.579810386291985,20.564483911651912,-2.0765432102180608,15.937037484541994,-2.7504510461490543,0,1.532670081447419,-6.565373575242311,-4.5229719692403245,35.81470093696681,-0.8119434500516789,-7.099854825007386,-3.87452609995881,37.34928730125685,-0.8881918017670266,-5.708152569848886,-10.717944513232627,32.58209932635383,-0.1416757004110254,-4.189624276725499,-4.026735473112312,30.562326457431126,-0.3087329787880544,-6.980174166644628,-3.4154905312155432,36.1545286446201,2.6337209040780127,-4.76605503655686,-5.036393510936291,22.48824702232362,-1.0224299809123067,-9.497328896240678,-8.152099900065599,36.29706532948452,-3.3478242680636776,-5.1000000000000005,-4.101023865402452,14.211346259796525,17.421459576318938,32.467052621123614,-15.275040444758005,18.56846333769499,6.396422332884731,2.183943339073916,-13.139763961299495,38.76926383358074,5.288437322346875,8.146505210459862,-12.261475100130195,36.92550552171494,-3.7928736495595725,1.8531770158066827,0,33.01172490643452,0.9434354655383568,1.7590688230497713,-4.6319744666151,34.66642820367778,4.835334445664165,2.471277708932876,-6.987512855102633,26.364781442228825,-8.589775167358619,-1.4554529333323123,-4.10116150460911,27.754108406269403,-0.8984118650749601,-0.09307174210967978,-39.00454278227498,24.817377299226536,1.7699321283819338,-10.170075878498333,-6.817475199244625,35.816895525058776,-0.5126434736823522,-5.155906940138795,-5.078742331179538,37.8612814277619,-0.8326953775812712,-5.040544763065528,-4.1000000000000005,37.6230951384964,-0.0459385729672044,-5.10607723281223,-4.112669364812972,21.503221833088382,-0.0390630308337542,-9.240477105675062,-2.826259285446354,22.468418127473964,-0.3752485537075338,-39.45303714783427,-3.0814207845107675,20.21570512104767,-0.07825829719274242,-5.039351777016668,-4.106944742084013,33.67386038177027,22.629509728064622,-28.08706988988645,-3.9842705862384893,34.4283905902879,15.891778282138798,35.834889004677024,-6.926855650489261,13.089595657562647,1.885863471300258,38.238400799129124,-3.3548156097830164,4.686886277884958,9.85195546972334,4.787129481355481,-7.501947300027755,28.035240787029476,2.8663286555214933,6.068778099972231,-10.694692558469983,17.47207347564527,26.23242378255033,16.29514904554369,-14.840735346557505,12.247098064573317,0.39174365783291387,19.234230629293755,-8.182008646739142,14.701997235614346,-0.67192466302643,0.6061829224739541,-9.551170728257063,22.38084586184703,3.1906944583419348,2.902510067305836,-11.647739966715045,6.576211789508015,-0.3305686970694627,-4.375966729869291,-3.8397482684407915,18.880885019730464,-5.670393609490293,-6.28058247963025,-7.607102895555611,30.996253440033055,-5.879225319442023,-6.998535514178286,-4.112429337157471,15.427481150095105,3.0497641749470317,0,-0.26097321504026144,15.145832335442872,-2.194049647427984,0,-4.1149556353125005,28.984382126049493,-1.4069109801506883,-1.670930091512448,-4.116591239400434,14.553723310728596,-2.9282647468448917,-9.586091218425366,-4.1000000000000005,10.94462141568062,-3.201202027745447,0,0,0,-6.101973701172717,17.30217309636381,-7.627940541118676,37.013583772300414,20.140275733786577,4.695154520836038,-11.08735530832399,22.899039604015016,-0.6003988102688437,2.154897978738555,-10.430179298518276,40.68584721295377,-6.1000000000000005,-1.6473587337103928,-4.1000000000000005,20.75302920802709,2.159918694750882,6.7014591191586135,-6.8956257971890675,15.34533412257481,2.108049180317893,1.9970297018923284,-4.120813260581374,19.10824691992465,0.7563484484267924,2.65944481966277,0,37.28909698584084,0,0,0,0,-0.4805011266230994,-5.06647839764107,-4.121090733717153,15.568413834981932,-0.9198426334822,-9.570747155182474,-41.01250314945368,15.518601110575371,-0.6588029712869057,-5.1116081368260655,-4.101273433538403,6.89343663886498,-0.07618672171120577,-9.394470581286136,-4.1000000000000005,3.7113916186007767,-0.30866292823734404,-5.100897737173867,-4.101249153633649,14.137307881543293,4.30990611079725,0,-0.19999587515018008,0,-5.157375,-5.11139733328735,-4.1012375,-0.0228669365150895,10.533541254941255,-5.157448064636483,-7.742209539435163,-0.23704402164052435,-0.21796382936877629,45.432499809389085,0,0,-1.0961964700650768,21.96648181126422,0,0,-5.255514353846094,44.44482484055709,0,0,-10.21711583626222,11.122501869268321,-3.102965566417773,0,-0.9823992950720415,35.442876304604205,0,0,-9.833745733451686,6.1260993436880415,0,0,-5.612113749576917,2.4786081532252777,0,0,0,0,0,0,-6.1000000000000005,-1.5668810138186473,-3.7228259335718996,18.113758296170715,-5.189848828072267,0,0,0,-0.4637251196786443,-3.0698375066169508,-2.8375470771737974,26.561004695668373,0,0,0,0,-1.1115088442239964,-1.5444224453084971,-0.20173820624891123,3.848615793918452,-2.906686558920877,0,0,0,-1.0229580509097822,-5.1000000000000005,0,0,0,0,0,0,-1.1638893927963225,20.215404226741597,0,0,-1.2923351103466882,-0.626217455544804,-0.7932880701457713,10.403937890383418,-9.92124250228627,5.828812907724483,0,0,-1.1,-0.5820596591179553,-4.1000000000000005,0,1.1292686294990237,0,0,0,0,0,0,0,1.448471679009025,0,0,0,0,0,0,0,-6.106862647699644,-5.1000000000000005,-0.6915594416139321,1.7617304773814626,0,0,0,0,0,0,0,0,0,0,0,0,-1.1510228465859351,-3.75936315342055,0,0,-1.0826770465300222,0,0,0,0,0,0,0,0,0,0,0,-0.007961977312255009,30.93491278814494,0,0,-3.339441723319675,7.411187152248978,0,0,-10.213625,6.222401578147952,0,0,2.4507839817903476,0,0,0,-2.3950918724713146,6.532651234545185,0,0,-3.9736863207974062,2.7941019978407144,0,0,-1.0242418185563609,0.8537499235868276,0,0,0.9114939077003851,0,0,0,-0.6056994188657336,-1.3221613095816878,-0.2770994760278683,0,-0.14347651271974318,0,0,-0.10582150712646098,-6.1016346481010615,-4.586624488206005,0,0,0,0,0,0,-10.213625,-2.76868948417879,-0.22489164346961346,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1115091637395125,6.082922676340928,-4.108442106932514,-0.20122136366197274,0.8812369186182654,0,0,0,0.009307219500571052,0,0,0,0,0,0,0,1.568961292387591,0,0,0,0.8532020113770837,0,0,0,0,0,0,0,-4.657317401203608,0,0,0,-1.479147317490818,-4.884482487364231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6008859873797219,0,0,0,-1.1053822323932772,0,0,0,0,0,0,0,0,0,0,0,29.531023204879105,37.486063218029514,51.1327389624952,-10.16013533545251,36.903605532772296,43.93306654202924,51.82577926901691,-10.958439145520076,37.255633341946435,44.072457176269275,50.10312392429657,-9.297484798427018,14.12948295358301,32.677205079078774,52.16180296417484,-6.584643473961842,26.21770416468075,34.77692578555733,44.772258019112385,-12.4836060679499,14.847578017208274,28.244067982219388,50.679444362034275,-7.255229803611459,19.558411454536056,36.14992040534687,48.87940676211736,-10.919573165651585,25.115013603067467,31.19168752648669,5.4697747030013995,-4.093406070228651,30.69998893579039,-8.579423419891933,48.91040721149554,-14.196211929397709,21.841132056068698,-6.1993661819215635,50.89075947106707,-10.064763069038937,25.81486659216194,-6.879835063390666,40.88179937011354,-17.295845924478343,11.319148737281356,-5.008138170685432,47.00618507337737,0,20.90788766254539,-9.452575149320278,50.8278827039428,-13.091180236774347,8.921350609234779,-6.730583383205883,49.391855382788236,-4.194248924114207,4.881350581801758,-5.648268819213394,45.63617140060676,-1.3918206085288618,0.8879542490570402,-2.8131066458925122,51.315651257744456,-5.963735610222869,22.98069955985577,35.64977417086584,49.895465637305,-16.42351637434668,19.365980323720763,29.121441407613123,54.4569069560122,-20.531569074031584,21.299443710915114,21.51292496137316,45.91300125362589,-15.846544533976303,-7.738672256899637,8.562222923503159,48.40248830979859,-6.379025346206585,27.6946114670232,39.108829457373126,52.37797635149625,-15.749432931393637,-9.681836503460508,12.351180618849268,51.502970065803005,-5.738116249810821,-7.071914888691666,6.723761369133001,48.27381814167836,-7.782044841730597,3.29533820018453,2.4729863976650646,52.79632254399034,-4.902274280344807,18.82648878033191,-12.136958821552087,52.75601020751049,-33.50002089139077,10.414825995297328,-8.690774437457636,54.239659343749686,-9.043557452692774,8.988629719743082,-11.797319840289148,54.81704320292116,-4.734411952954644,-1.0231990878310862,-5.1000000000000005,48.03115734167914,0,12.01337288035585,-4.80882800950402,47.30613784867844,-2.6898685928019717,-0.9883642994032753,-5.817889846277195,49.09255272846901,-13.775760778553286,-1.0278187752284171,-4.928085770533329,51.5849757774142,-1.377576077857259,1.4276453892197551,0,43.952858643350474,0,28.934963498049978,36.789713212118826,50.31807665148812,-25.658710399818347,20.659878405913616,42.38396894159655,30.829025481092245,-23.525553231405688,21.834040745339497,22.131807577921048,46.89708733993763,-21.87817560048777,11.219256916431364,29.953997001960147,38.21522209785107,-8.635339069433702,30.77855749836706,35.420930359250804,10.214835080716355,-34.58476401968189,15.13375776390436,28.07339544300434,51.45623762427318,-6.178762269780343,-1.7771807996485771,30.970317379374983,53.08653450682604,-5.791289559206337,-1.1056503232956405,22.560762789444382,9.922663218434318,-1.9962188729237245,19.15583329021194,-11.771237747696912,35.922479932305365,-7.900031513656567,8.913863308923116,-3.0684194732668786,51.05168798739675,0,5.6700626056131895,-5.601414403482482,50.01187078884161,-10.188976385729642,-3.279995181136559,-4.817626985906477,49.2536873072575,-5.355461966811604,13.787315180996933,-4.326754970247203,50.62050033144436,-14.519705672403928,6.2292607952468515,-5.1000000000000005,54.77438393338588,-4.376434568224411,1.2505732272052328,0,52.79289233868127,0,-1.0277984150602173,-43.201614402248524,54.68204772747826,0,7.124630404408,17.639990413537202,36.66350058515741,-20.348562458935245,7.979344816240468,1.464740998073863,50.543783081065236,-17.430471422879023,-6.410167553878786,16.551600832937698,51.49190579468899,-16.020347781901485,-0.9867932617167763,8.316692869452579,52.05651405739327,-4.886310738252437,6.5746319067801,8.716177431755808,53.5177367720918,-16.41380804448867,3.30091444061015,0.92359808030632,45.33824755739945,-1.3057969893190937,-0.08935058963498044,3.433257114284088,50.18050795212403,0,-6.041768950438471,0,44.654126429877685,-1.0375513245195762,-2.3598508655766675,-8.15472401130694,48.958991725740134,-11.979715079168987,-5.157375,-10.429585849732424,48.12632706150235,-13.236924280591321,2.4187622612168087,0,47.604462661661316,0,25.027360089084723,-5.1000000000000005,53.79290884079021,0,-5.8081061233199485,-4.6557739341425375,51.78817555742998,0,-2.5820001093401364,-4.046996197303862,55.176172698425304,-3.853804304998448,-0.8944534296328606,-5.106863951864053,55.67995099636602,0,-0.7573881153754495,-43.922705577720706,35.192118048643735,0,-10.213625,46.2635815675584,0,-7.445953061254847,-9.799967256580546,34.25328821750768,0,-1.0532127339947566,-1.1058776067148108,45.19042508678729,14.410188515088677,-1.2385647130142035,-1.2168881156089955,33.16935203879892,0,0,-7.417168891794154,43.2919451310695,0,-3.726470291841392,-1.4329239608011917,11.16820425668278,0,-1.6869776788083883,-10.213625,44.265720802426245,5.406172197702971,0,-10.213625,41.79722056967659,0,0,-10.446631302059066,-4.498295103390462,49.109545168472124,0,-6.10590069307441,-1.6358415898223386,38.28055659639777,0,-1.4768283849726769,-0.6171009118337865,27.460516905404184,0,-1.4939697920526767,-1.1824383884674454,9.641843401113634,0,-11.430042002505058,-6.930719338374262,30.143947643311787,0,-10.213625,-0.6899097927402735,8.732786429947415,0,-1.8122344554527403,-3.106078372102381,1.3886384844696071,0,-6.116221514062882,0,0,0,-17.308078865358095,38.63376791938383,0,0,-1.1057971222802094,0,57.73854146368185,0,2.796428798337054,0.07105822326797873,0,0,-1.1012149186007958,-0.013698559402861066,25.492737167578362,0,-10.213625,4.858766848076053,0,0,-1.1048210307728166,-11.538539454793941,34.470831065694775,0,-1.2625446120766106,2.824482866697688,0,0,0,0,0,0,-1.1069639701593894,-5.1000000000000005,40.772616508035846,0,-6.1062232775151575,-5.102042653302364,25.444050548160288,0,-1.1054016565019606,-5.133907630199723,10.395191448453879,0,-1.4042128158279126,0,0,0,-10.213625,-2.185328702431375,0,0,-0.8372351586260689,0,0,0,0,0,0,0,-1.105425082965459,0,0,0,-1.1192921890625,41.168208090249,0,0,-9.582351393201266,30.36452356866502,0,0,23.217949604428803,28.656342295591166,0,0,-3.7118738843392833,8.204803928510529,0,0,-10.213625,37.283984281146004,0,0,7.219389151247266,0,0,-1.8076596347441125,-10.213625,14.06416427441188,0,-5.117229244729177,0,0,0,0,-1.4840027380010405,-2.1560787582228653,46.08950901711411,0,-6.106960441293767,-0.972136905334078,5.240526930420015,0,-1.7083610118509662,-1.2279274303887597,10.4781972687606,0,-0.8583286796288981,0,0,0,-0.012396764189949061,-23.642047243254765,19.196169185449733,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1714107370201183,17.10125418991649,0,0,-1.6511428592349235,-15.497427107825704,28.962041924745403,0,-5.70263018551014,5.687405054953322,0,0,0,0,0,0,-10.213757273283113,-0.1175762516548395,10.461898008899754,-5.101249992996197,-10.213625,-0.7760783491399844,0,0,-0.8955851393363282,0,0,0,-1.4647305864236855,0,0,0,-10.213625,-1.6978990711657227,4.762157538847037,0,-0.9396089852208341,-5.69308057357694,6.1750027301523165,0,-10.213625,-5.121387097159682,0,0,0,0,0,0,-1.475720274722721,-5.1007209413925665,4.980812607411218,0,-1.635981748968564,-55.56453152394933,0,0,-1.3121498910400342,-4.3143611239644235,0,0,-1.2441998706165833,0,0,0,22.063356549259215,43.803573978188155,1.1422203287429185,-14.41746703005623,7.197269892593104,45.253301737681674,0.3565431970801948,-12.201559374097183,4.358728306968038,47.74179039943172,-5.363356352849521,-4.267316434818013,2.041618411281337,44.713657405249464,-0.40006082472696325,-2.4970940379878974,13.124200461935006,42.89724217629883,-0.5430801364780556,-6.25473242901255,8.185404676686591,42.32594554614374,-1.5177512947533438,-11.559266665749654,-3.3238416844913603,43.961977100323395,-0.6510551489357752,0,-0.9580713181408034,40.989356153719726,-0.044871263417302035,0,-15.10728982920283,-7.9977680683100445,4.146375723153607,-18.94926684284305,-8.387851055150769,-5.000480305006759,-8.968338417683333,-13.146521834769102,-6.219294191030897,-4.207058172251883,-6.340495771703651,-11.19962771422803,-5.13609485412589,-4.55266782981092,-5.35967431537387,-7.2940404056013035,-9.615474448398798,-36.53156631424028,-3.420700635657203,-7.25591025172066,-4.844680493341739,-4.411984551987685,-4.224590991641984,-4.456680929455754,-8.887957182528265,-4.808791117858329,-4.863251526603197,-7.029603991981074,-5.6544993317745655,-10.408729692897214,-5.580250545736472,-8.766606467622895,0.7992189238360021,39.541052631526995,-1.9253706414629141,-8.54774912790171,-56.22537988838327,-4.722080606337011,-8.489678632859953,-14.64348485913447,-5.443348960385578,14.787046735863603,-6.567097738203554,-9.643719776509142,-1.6972410657682744,-0.39979569910269425,-3.2382193309940663,-4.850447087767062,-11.155509924051174,25.43164229601257,-4.9855541749057934,-6.794849256528027,-14.584549174770478,-10.324207144373348,-11.022366207800365,-12.86632913304393,-50.86822068121298,0.9536145273771001,-11.017090467354986,-12.90079774835342,-10.20686321947026,-10.650100552512884,-11.443316180371362,-9.021902687977118,-5.482485515611308,-7.046358688109499,-0.6669591832219022,-12.293962989481194,-5.192376409943128,-10.04952288985584,-1.8098256858993764,-9.441226769755733,-10.01512809425549,-14.0691590898022,-14.259974554668755,-18.761648809215206,-5.511704409566157,-5.1987841461414455,-2.7978199833193487,-8.40503647587597,-6.788080324196857,-8.831731683221593,-31.537226825992626,-15.013750042799938,-9.213814760365537,-14.139351990835967,-11.63068853617121,-13.094595111988884,-3.341622319846681,-5.418552787902791,-3.2412393845838854,-4.616668731999701,-4.721567177018558,-5.207631452353608,0.10979982192934729,0,12.691775097751302,34.48676786838248,-0.40502677194241943,-10.05750768589697,22.147266989584196,32.50514257863285,-14.686259883894468,-24.045960710055997,-5.838549335256451,14.83769655928625,-3.4721051582927944,-8.98822030133092,24.65224660239906,-6.113287403737962,-3.811560806594055,-14.211026000892232,0.6670016505621055,24.16838219560489,-4.17626357930361,-19.22501322443645,0.10194144720989629,8.186070288378275,-2.7805967634696067,-8.869214193238644,11.382471216634158,14.096127709218745,-0.7938002363394754,-4.746064072772962,-6.058870455655816,0,0,0,-12.639738383925463,-13.297319455451529,-12.926115335461674,-24.875923139923167,-6.760041879278396,-7.7902934340952275,-10.753434426924498,-9.691228940991522,-1.8934772547751528,-5.1615377226150265,1.9008343532366825,-5.101426737128801,-8.933984705363292,-12.996998030591179,-7.255760030424133,-8.849923292765428,-6.240906901353862,-3.547029378453931,-4.12403133633474,-5.100859890076343,-1.5899118805809405,-4.878255642856319,-0.6968393321465777,-4.6527470344915,-3.2097074883027226,-4.336817688817513,-6.435087832530924,-40.32219696549364,-7.210717764416358,-5.1000000000000005,-6.5891912485937265,-5.1012375,-1.092167462710567,17.928598593391815,-2.020771013561587,0,-17.441787191748574,-10.968132414146307,1.9746960173800472,-15.51490712433033,-7.780388543157672,-6.675066597564654,-11.213053426775742,-9.762997257902184,-10.329599093463273,-9.994602439202835,-12.843759511515458,-34.31110251676939,-3.2423306149799824,0.29391411288122404,0,-5.048391858482966,-37.48836316307319,-4.485341270089341,-6.671073061501495,-8.165751445219147,-0.012385322720474257,-0.4419329361330926,-3.85709197532431,-1.1063885818683687,0,0,0,0,-12.046374440892823,-9.278934453103922,-8.056374910119334,-9.701602828125,-4.642210245476471,-10.185739910536025,-3.8919896929551245,-7.685444684947961,-10.488250938153888,-17.907592402473313,-28.66214776121911,-37.0346574136958,-5.650184996293252,-5.110968356099125,-2.899178333153709,-5.101370017077721,-0.988204124389169,-4.624691673946275,-3.110272453774439,0,-7.2394474446328765,-9.86051154079826,-7.781744012263347,-9.226041006516777,-0.7326740127823037,-5.1162405376900875,-0.17107838874836717,0,-9.381557731169615,-14.103379854573861,-7.790000000000001,-9.470582130078075,-1.0480975677212523,45.516462171470735,0,0,-8.765005812070598,32.12947832715257,0,0,-1.1106444602912258,19.72928994146713,0,-4.675336302870095,-98.18822598289762,8.8829570353282,0,0,-6.10123317693482,21.140019361506276,0,0,-10.213625,1.5013996460211794,0,0,-0.28323528332947256,12.452562759630805,0,0,-0.11252322169006579,0,0,0,-10.213625,-5.442227295643565,-6.420282008315452,-13.146465658372357,-1.1096847957617764,-4.612663778707985,-1.5380865119860243,-3.197065743942463,-6.101640868580111,-1.957333346137572,-1.6885734682321756,0,-6.104612500000001,-3.308897609069414,0,0,-10.213625,-2.474003541438415,-1.656766438081637,0,0,0,0,0,0,0,0,0,-1.032851257886668,0,0,0,-10.213625,38.84604825477936,0,0,-102.15132010219145,-0.18824453821460235,0,0,-10.213625,3.889260121396423,0,0,-1.0861892425229942,0,0,0,-0.9118358559061681,4.8273621980278545,0,0,-1.438514154071527,0,0,0,-0.2681556888794763,0,0,0,0,0,0,0,-10.213625,-1.977928809772764,1.006611101997612,0,-1.1052102756254933,-5.153569967177902,1.4276376026062634,0,-1.1048488315660423,-4.4895043856634755,0,0,0,0,0,0,-10.213625,-3.7917577912992173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,18.73167009657376,0,0,-9.536816666639393,5.824637477244703,0,0,-9.766333047450425,-0.12377078870974395,-2.121382487479349,-5.11262111746008,0,0,0,0,-10.213625,10.500788773536195,0,0,-1.754302965196824,-0.1577494669205809,-0.8451307890461379,0,0,0,0,0,0,0,0,0,-10.213625,-2.4945485105868803,1.112798956172743,0,-1.164777607201143,-2.9433643068680624,-0.8640089870697111,-44.50087270856286,-6.105623237960147,0,0,-5.1000000000000005,-1.1113034902226786,-4.9966589542228705,0,0,1.7563473294643623,0,0,0,-17.43767690496093,-5.106869437356396,0,0,0,0,0,0,0,0,0,0,1.8971822595795544,0,0,0,-1.1015372819589038,0,0,0,0,0,0,0,0.25085817776313013,0,0,0,-1.584416738091798,2.7202454387860726,0,0,0,0,0,0,-1.53452572504596,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1051721451993775,0,0,0,0,0,0,0,-1.1198434152293297,0,0,0,-10.213625,-5.1000000000000005,0,0,-1.1110373111777467,0,0,0,18.181178556699304,30.88630195619219,46.47661493492876,-20.686707942855715,18.23670714131502,33.244035296836884,45.64773639426263,-9.437525607024192,20.196828808284266,21.99649279620773,45.875378400288284,-15.874183327430899,1.0331536381650992,42.830028224135894,0,-4.9299152043296015,24.287131939317415,37.901585285712734,33.54707367888355,-20.04653492787826,21.74156407584426,28.95314363404227,24.417307978470692,-18.459317807978024,2.9044502833024297,32.56006404849181,20.336533463101798,-6.445911067146785,-0.8408168355381236,3.8313377158264417,43.269682193367885,0,7.906659411517115,-7.738237944246751,43.240579267292325,-32.093470122073356,9.88661424106003,0,46.549048572432724,-10.648188221124704,14.219133072893811,-7.620503880813194,45.75998640866459,-14.795083174931142,5.074289657542419,-5.106995802217519,44.852951830898284,-8.844178115717078,17.92257472899063,-21.005847934576575,46.70026371849014,-7.732091263135809,3.2018643079672575,-3.826748343968209,37.8540882199498,-8.603110340436693,4.465126236840041,0,46.86882215549343,-5.1014249873108435,-0.2552316629430939,-4.218863021780003,32.68826419627555,0,24.324520283565914,26.411850993513927,39.86054038690009,-24.947372582089947,1.2057209494048062,1.7353900100185395,39.42436018901836,-42.34438035210689,10.621946191904463,13.2225326759077,34.35852374587136,-16.497472000946182,-4.195453857856149,19.59563172076428,12.572832329643777,-26.0281755620907,-8.55432277389588,9.29369486311171,45.83130494133331,-24.85154601911618,2.6963532344134373,-0.12719344466476093,44.39008855995893,-4.850570790422688,-3.594218205776995,-0.10047305977082044,41.462329088010506,-6.823567824847429,-1.041356783969169,-0.11063122278261461,42.74223067544473,-5.101197860264379,3.056208899697405,-9.912359524099847,24.33507900889115,-8.610967371725373,-0.45672108383554716,-6.95178325986476,44.702543870633946,0,-0.8897401391367655,-44.30769810024209,42.22870149373297,-2.8416448734718713,-0.015131272144154233,-5.106994380348073,37.37581846826799,0,1.462527493261431,-7.3912617134761,33.51933082845713,-9.690763540938079,-0.044459357509970945,-51.09736324683895,34.08007543385707,0,-0.41248657447692233,-5.101187900951166,45.87881389755026,0,-0.024059508261487554,-5.1000000000000005,1.556921602370479,0,10.937055248028166,18.831864926546753,49.28122270050162,-23.953804339251537,11.592717920306567,38.04969978016249,45.648162796450556,-7.790906979648115,1.628750696343943,37.26639531920238,11.020529549452679,-31.89324233210808,5.49634103427934,32.34159340182016,13.18736143927268,-9.780644438743582,16.290272997636986,21.484609308596085,35.31149149917566,-21.432733388291837,-1.9302105174528572,0,26.433669749730587,-5.1000000000000005,-2.3438474673767296,27.052639643189355,9.18477734161891,-12.371262782379096,-5.124065244064444,11.045903109928679,0,0,-5.157375,-8.706826358510014,44.105783484246345,-16.058784888587653,2.779272340264454,-8.237870031318305,45.326955805119454,0,15.66781286470982,-7.994646937667273,31.70984831145678,-16.75796702014577,4.347298933536173,-8.227111093362202,21.928419058926675,-4.992463237828535,0.45719556032210185,-4.087298578470343,48.890014002416166,-9.247148184429719,1.244415730798483,-4.28031794111168,35.692336698499844,0,1.4939197407984908,-9.213607931069186,24.42213531386706,-4.060781987588923,0.12258388755034494,-5.100514654074785,8.69989353852349,-5.1000000000000005,8.656408882493354,29.789230371517373,13.464199761669546,-33.25199981389839,0.7749056965479957,6.536387083129327,39.03843812221663,-9.70154956688212,-0.691713976298522,2.38350902177955,46.11468880248193,-4.994006040616402,-1.3169061956760952,1.2801145573987798,22.134524256702875,-10.716488542166948,0,1.5459450178971736,39.46021706524495,0,2.257997403498034,1.6382213163981836,29.22451461560888,-5.409141182812177,0,4.25628318116102,20.935354279987756,-6.3745640148286835,-6.011506218178302,-2.2043384635734293,17.43597087458361,0,-1.5418494712904511,0,38.11744184088374,0,-0.7807044595557936,-4.344468323245889,17.020557869032114,-5.1000000000000005,9.403398948576902,-4.454456279772724,29.17794335843093,-5.00378380978794,15.489395506493526,0,5.96207504816252,0,-1.5086315718838597,-8.692484287400767,16.47212239332836,-5.1000000000000005,-0.8811662068780496,-5.1000000000000005,3.3356387163229155,0,-3.375415145478265,-13.835915867042111,13.09075424077755,0,-0.7964604114557368,-5.158271017962888,2.629537465840298,0,-6.105838910600518,39.74549501455406,0,0,-1.484733917128904,41.24776978122148,0,-46.21331178602816,-10.213625,30.191797530745994,0,0,5.518332735499291,0,0,0,-6.949333619015655,32.976862322938516,0,0,-10.213625,10.362092036475943,0,0,-6.100529496008202,43.32644270685411,0,0,3.0325666308438026,0,0,0,-6.036367858881534,-1.7385418843991751,37.70454986320928,0,-10.213625,-1.0373432043920645,22.800536390353912,0,-10.213625,-0.31829630488079563,8.679694452764608,0,-1.1110706171829083,-5.1000000000000005,0,0,-10.213625,-3.5328390730886627,18.964761441686893,0,-1.3674565880402145,0,0,0,-1.1973277967191736,-1.8323363346009438,0,0,-1.6101297940280865,0,0,0,-2.1594279311677593,22.835622609924023,0,0,-1.1073526851446158,-0.13127825729270634,24.510335025874298,-5.1000000000000005,-10.213625,4.443506722644689,0,0,-1.1108404152491904,0,0,0,-1.3330785688915419,10.059578828670013,0,0,-1.0471721494397603,0,8.780358016783536,0,0,0,0,0,0,0,0,0,-10.213625,-1.8121707826512408,16.449616400212367,0,0,0,0,0,0,0,0,0,-1.0898374397794361,-5.1000000000000005,0,0,-1.1110296708049894,-3.744789049347734,1.0587992178030916,0,-1.105758101836275,-5.116896644264674,0,0,0,0,0,0,0,0,0,0,-1.576208521475702,36.854782240864076,0,0,-7.5478498768790026,3.9033268377559853,0,0,-10.213625,28.34266519069001,0,0,-2.1433969407723388,0,0,0,-8.211921441124183,15.103668389511393,0,0,-1.4197260494439417,3.3115826667743695,0,0,0,0,0,0,0,0,0,0,-1.569703004536233,-14.108900970804275,9.241344945519243,0,-10.213625,-3.885616919778022,5.146288951136663,0,0,0,0,-5.106981156191546,0,0,0,0,0,0,0,0,-1.4608971188998188,-3.9044082615858415,9.322151552971183,0,0,0,0,0,0,0,0,0,-10.213625,6.888897631924365,0,0,-0.3007901839956092,0,0,0,-1.1426437729073526,-0.4544397645178167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4884970514312845,-2.1171155064768885,4.820088491883073,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.17180468406003,43.97618532372588,-4.638639101686691,-16.778812462011707,2.4733412795563936,42.499123838302516,0,0,1.1716776554910373,31.36108021995044,-0.9564254059772626,0,6.073154085687505,37.931244669482865,0,-4.343009959085408,6.477565677776956,22.683852983675557,-12.362197123078474,-12.357071266132085,-2.094226593688699,25.46806175492655,-2.4520880476343034,0,-4.560460175938353,37.02057055212276,-4.264246589708517,-9.680265407271914,-0.05267446626132202,14.868568927070225,0,0,-9.148486476900175,-7.347943167759916,-8.865960956705399,-17.497417929907726,-5.714917612345209,-5.304644407396795,-6.053631488212547,-8.748985673990227,-5.157375,-6.245297458575104,-5.610572023869993,-7.900659421645251,-7.261662712151857,-9.687577499502051,-6.7516419749970815,-8.712296333919326,-7.8972012999051175,-7.990211786728722,-8.555216907878597,-8.682970623853235,-0.7893307904607658,-1.57049377950217,-0.7827811405820764,-3.7881579325172887,-0.8021604141830108,-1.3423790442232937,-4.111659478252035,0,-3.536889233606954,-5.691769722855867,-35.64682730454804,-6.322274577437902,5.53468003064776,36.87723431988256,-6.445605018887827,-12.449740641169978,-14.159131629293174,-2.1619533373489346,-13.249588769155798,-47.737984990017644,-9.022086308145315,-0.6582248032621967,-11.5522900663854,-12.86440197775245,-6.164261864799418,-10.903733488376561,-7.6443070784702485,-8.935901769917594,-1.0279026633529522,22.60651039022713,0,0,-5.157375,-3.774236653452944,-6.419816699292692,-5.001603953407643,0.8919768702652464,-7.668094536209589,-7.798069508554564,-9.140702379619462,-7.938968387007921,-7.921361265269656,-9.499604494241783,-8.604073168429796,-12.332219186127968,-30.06326896410517,-7.305891344669166,-13.71730780545489,-2.367492637073516,-5.198070696345565,-6.006201745603011,-5.10674485671818,-6.100224548022183,0,0,0,-0.351593521612686,-5.3893214507657525,0,0,-7.017975465291878,-7.803422357343542,-7.791249886926133,-13.833244738282232,-0.4376741550567985,-5.115064505104022,-1.5625061914580483,0,-0.761681721464155,-5.154336314278058,-2.9340958465709743,0,0,0,0,0,12.606930252966333,32.76041390678614,-0.17700380721351863,-9.568944481140846,-2.0924948937675114,38.865020189504904,0,-5.1000000000000005,-2.5973530358806114,15.436768620488383,-4.1000000000000005,-5.1000000000000005,-3.5825970091277566,0.3808028217305143,-2.890655343962957,-49.256277903582784,1.0533540341796273,20.212327334448744,-9.288527602697602,-17.245409493284562,23.013548711725765,0,-7.307827709157785,0,-0.013811190238756654,15.828765167027667,0,0,2.40302851499404,-3.381421794253894,-4.084428337212867,-9.160377802986169,-5.963038876513131,-6.372981975791609,-7.6481263344626065,-9.697033015347479,-9.227353398133125,-11.090085480989721,-9.391968187127842,-9.690598128468562,-0.7348513819520983,-2.398787031318938,0,0,0,0,0,0,-0.8313208578838808,-3.487178905318638,-0.24546824758090438,-5.1000000000000005,0.23439993962630742,0,0,0,0,0,0,0,0,0,0,0,-4.252906059150454,27.411442880901646,0,0,-8.861582984346164,-7.483020947510397,-7.829699619837226,-8.768170079739729,-0.42239459144233865,3.756294578945827,-4.161366585842003,-5.1000000000000005,-7.885015255857497,-7.715991722493655,-10.996427326496049,-8.686695378313825,-0.4467409463652433,1.291091331653436,0,-4.43668523495652,-1.1079565673485037,-0.45485306005497467,-0.18462873115591805,0,0.7206126141789566,-2.2362314926917874,-4.1000000000000005,-9.69026377001171,0,0,0,0,-1.0468690870178161,-2.7139000981713597,-0.14235573011422034,-5.1069910020717355,-5.157375,-51.212850476386635,-0.1621590210328769,-4.929120988250603,0,0,0,0,0,0,0,0,-0.065293277110157,0,0,0,-0.5271865095654722,-5.121112453811792,-0.19069494659923053,0,-6.0279995480221835,-5.10512894917162,0,0,-0.8095036027521036,-5.158285691553097,-4.13687107179964,0,-1.110761479080316,18.6198146082058,0,0,-10.213625,13.159800436083145,0,0,-10.213625,18.440550754737394,0,0,0,0,0,0,-14.684701635659497,0,0,0,1.7545702262077842,0,0,0,-1.1,0,0,0,0,0,0,0,-6.060738843455786,-14.829796332904165,0,-5.11260262489915,0,0,0,0,-1.1108591205449954,0,0,0,0,0,0,0,-1.1052257016509015,-5.1068639102143365,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.525325053807264,8.997264171192544,-3.517354799665482,0,-11.755174136846863,-0.693423832979129,-0.21093399173639116,0,-0.40413606462020024,0.552666346361423,0,0,0,0,0,0,-1.53797597795225,0.6888804981352019,0,0,-1.6598559467101721,-0.7077082634241008,0,0,0,0,0,0,0,0,0,0,-1.1050284413591467,-5.106457067945147,-0.6595276211859016,0,-0.9834556750163301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.029980202083836,32.99215327282195,0,0,-1.4766997257266348,2.4836194390009245,0,0,0,0,0,0,-1.3238336294095454,0,0,0,0,0,0,0,0,0,0,0,2.3687488605785063,0,0,0,-10.213625,0.027106129234879074,0,0,-1.489428674136794,-4.452086240341392,0,0,-10.213625,-51.172423140004675,-3.5872312033905547,0,-10.213625,-4.051876125199334,-3.816199037922322,-5.1061350604903835,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33.16967404366288,41.23617462745888,45.31801400205368,35.80768010851571,37.140009933882126,47.11700660466776,16.608957083827743,32.08450846083984,15.579834093071558,39.76052958887942,54.6811574327259,33.75495307686405,16.913974808720482,33.97124921029976,51.35135978492518,26.562515590108347,7.032581021685988,37.60940866480857,51.379604588441254,39.66257756954168,20.07844592543076,39.417341170016584,53.85512034941959,28.558976111816804,19.63837593730664,40.30168010685509,50.382637243718136,30.357567908743825,5.459740674976153,43.26524098894416,19.30913256885358,24.188710982314667,32.53758968664808,-4.98867903581889,51.104277653757116,35.61314329740594,28.83930767922682,-7.23274974176239,54.07492011664305,29.61117138011024,30.57896256310897,-4.671588715387601,52.161685085465834,19.036504658851197,7.063912366125136,-4.03352308129443,51.92850715740277,12.229913560160645,22.564148732699202,-4.590240394484516,51.41762282193467,16.7839228210336,32.814653292795185,-5.281861577381251,56.711629228372686,7.082162589603911,5.872506177081677,-9.489732887503047,48.16114575125946,9.490157336617694,-0.16641243778463313,-6.9585277946572095,46.651130640782185,5.4618567190887495,17.57035299333206,38.914920184902435,47.238347685067275,35.87721876833439,8.480403579187152,38.14536576093592,49.43828190940795,30.701486620378855,13.689399946092049,26.34065475117509,51.94083097221566,23.580278017478047,-9.240122267518053,12.394493750456899,50.523627198416,10.044298104205424,-7.937746976989782,37.64141011507235,45.36768627498588,25.16946255321586,7.78125420639933,9.874650271128269,52.750346112592474,14.69765577122934,-33.267433601318714,39.31557358985654,53.259903669325425,0.9445425964384514,-6.796648361950418,-0.12024120922208754,53.86955635982186,20.222866416640418,31.261511104687287,-10.653553897320323,51.35590822860406,18.849781103157955,9.186042344942843,-6.0302513631044885,51.64331959068453,18.100499987197544,7.384841594407555,-9.377601739212958,51.796167450717334,5.740633243403945,-0.3044303857131555,-6.4676631598358,53.682408566983646,0,-0.13119952214851907,-4.139511168471869,53.65611956853342,6.16026477550156,-0.7424315452335501,-5.117115457494097,55.544450816943474,0,2.518510471312495,-6.846665907201729,57.41895312415417,0,-0.8355638149821211,-5.11675775100077,54.69856381809005,0,28.80129249859354,34.025486822948984,50.46100104155441,33.48521644308101,17.32348677736884,29.78102383398692,52.285883565039924,13.028426169134917,15.180572447500486,32.812681445076194,50.430947872934,23.290509714919992,-3.0257881856483517,34.00786059345016,34.16327981902037,18.838462431683812,4.840662314872912,30.843352075743656,48.161526180037555,21.51526722019635,-15.461482562108333,19.967439088594436,53.29717272385897,6.771480526186281,16.63592104419463,21.468067864835163,51.32803997163958,12.456044691227095,-1.5432331367178729,7.791532890858026,52.84585175307983,3.6536965809367823,1.139827792326296,-10.278123628128343,48.66476074629202,21.63020835846518,3.236956049088062,-7.710085577709627,48.657142718927346,12.202784717476284,6.079917745073875,-9.218033191938014,50.895324670007696,11.832612549397377,-5.840441794277191,-3.106601414828585,52.61693363511962,0,21.6181586755128,-19.034478784957567,53.397120215291665,6.66273888755519,0,-6.31108761106991,54.201030008433655,3.5358260206772734,6.280388539729733,-14.05874355378189,50.35566644790474,0,0.757254973471279,-2.0375993646483233,56.30936591751663,0,9.836881655066207,23.42704981523783,50.1108291010848,21.99185736219876,-2.1211523297767862,12.552190501359838,42.97786053854649,9.320213973661298,0.15688436273117512,13.159621963585163,49.56268617657687,14.728107855021758,0.5434190385923016,-0.11520107968604565,51.143926641729294,7.241288574392934,15.164960143232863,18.328719982404944,52.686040015230304,18.062635406789,1.759416513884947,4.155314291283403,54.110465426840385,0,4.517158151913369,8.645392406789387,33.403416447627016,1.090642262655483,-0.9579829818630303,6.837588734882395,13.584797081429528,3.38683524105807,11.087263934391313,-8.01307947270218,51.5385171336728,9.076060957697235,7.061510352223733,-6.454712949852169,42.899319111331266,6.75669540800352,-6.1000000000000005,-4.657127339644664,52.47586943791098,3.6583254857673837,-1.1002121513393865,-5.135922156892147,29.1193004783669,0,2.008026182405283,-6.060551909371867,51.141962131458016,0,-0.7808863308873062,-5.105092292585258,56.28052655266583,0,-13.597733399555565,-5.100212904873726,30.568433369377498,0,-0.6193586364890775,-5.15807177846605,16.01078475940108,-0.10682615004460161,-10.213625,4.499011201090537,51.60332757978746,-0.8323487962441743,-10.213625,42.21058857420111,0,0,-6.142795970689825,45.00362553416096,0,0,-1.1115952428278726,45.33130060758895,0,0,-0.17284894274540702,42.840167339247564,0,-1.6423950573714752,-8.44417955345946,39.80559466781862,0,0,-1.1,29.20144739862492,0,0,-4.901774015681668,15.948111864583533,0,0,-0.845859829995518,-4.3895775869970555,51.34403408667632,-0.39249864065417284,-11.76838181370657,-2.5747839812740807,49.31400485274551,0,-1.4819643648421883,-3.2585283925820097,41.97337638938854,0,-11.072476339162888,-0.5927453454665645,11.157964545015567,0,0,0,41.7544663790844,0,-0.8726855905079121,0,34.60521410850911,0,-1.0488991572851571,-3.8203336820846445,22.773428715135978,0,-0.5228759432248954,-1.1905646779160357,0,0,-1.1113546910723089,30.24459825388344,52.355287267415555,-1.4738090083584283,-1.1529121929110144,-1.2939322189399953,49.31083426533511,-0.46918706515623704,-7.185167000203393,-0.3359413332859029,52.2137591062162,0,-0.6319334739199846,-1.161328792967798,56.090935565766465,-1.0060712112325187,-1.1112524916174582,19.442585952798613,0,0,-10.213625,-0.9991024999870732,40.52268998276432,-0.1503675037037717,-1.1,-1.1543301039052973,21.941436653056083,0,-1.0938639590101562,-0.7349726996065642,0,0,0.3457423663087402,-4.73173002389505,46.02387212785519,-0.7209038469176688,-1.2174968331942781,-5.554065085752548,31.076334034076865,0,-1.1151107672629592,-3.28344473900644,23.915812108591044,0,-1.1116382236940072,-5.1000000000000005,4.304917912887492,0,-4.297838479869274,-4.9017040167953425,18.873071598135905,0,-1.2070581276916061,-5.1060433503653435,15.61745890015347,0,0,0,0,0,0,0,0,0,-1.1008926144909779,41.70412786395144,0,0,-0.36713506791014494,22.324898056258053,0,0,-0.19127222916788345,37.52176560534968,0,0,4.049268198579979,0,0,-0.7276386376446229,-0.6827712024980079,39.86021327742988,0,0,-1.1,0,0,0,-6.121830403809064,37.67333006314501,0,0,-0.7038888986298336,5.145354833639537,0,0,-6.074103104910684,-40.64929272759691,41.99798723680526,0,-1.1268813521526384,-4.545432091566013,33.09520002664206,0,-0.8241930059023755,-5.0275547160856755,23.90386095924154,0,0,0,0,0,-1.0695610759814227,-2.789462396135411,22.6818457906266,0,-0.7343549450409524,-2.490650977150335,4.689811671155998,0,-1.0863119524971931,-33.84529215302176,0,0,-5.862254474486065,0,0,0,-1.061048645228262,34.49124990837545,0,0,-6.1000000000000005,-1.4995281370254068,53.588914847934184,0,-0.7515921583824312,-11.623519199171442,14.946446464462028,0,0.6290325005005625,0,0,0,-2.131919990899398,5.701088286064956,0,0,-1.0879704180964997,-0.41607191815920574,5.496856486743346,0,0,0,0,0,-1.1190628800244509,-0.10855673820663143,9.466214020497418,0,-1.1051397495246504,0,26.5423855866217,0,-0.7675608857217858,0,0,0,-0.15240750712889545,0,0,0,0,0,0,0,-1.0052248455434374,0,0,0,-102.20720606741432,-5.1000000000000005,0,0,0,0,0,0,-1.1115724486236966,-10.214875519004702,3.7193575873528997,0,-21.39968874387355,44.18527969525319,2.9388259715385003,31.08699550373006,17.469342872294902,41.720704610853936,-3.379321035523412,14.910249045016753,1.324130250448225,48.163591896226094,-8.020418069369384,8.399399432333256,-7.8314598847630155,42.42881119962685,-1.8168980575283598,5.476460022417461,8.299361302112336,42.360813039233655,-2.753059109866045,26.437921360036736,2.200598351715646,42.37601823060791,-32.47812362830299,5.653625755061446,-5.022714197535816,43.83456850395711,0,8.691930928682467,-1.023328792700209,40.41788664732694,0,0,-11.102178785493326,-13.146461393592798,-2.3778316373751154,-11.800483903701856,-6.807583069470624,-4.2396294252330575,-9.590636624078018,-7.768300288003751,-11.286687986621498,-5.17841761076024,-11.08309350301005,-9.062769574257748,-8.12828293217778,-7.971848195888981,-5.450933393979154,-6.022023174896323,-19.583048300203043,-12.390166293496224,-13.21591914797384,-11.102721608618562,-9.710316661040391,-9.88884219626993,-10.379105173147755,-9.599535694396145,-8.714674937522005,-5.876475494233244,-6.6971659231917595,-6.164334130077456,-6.227389059450568,-4.259463857603403,-7.204455534059399,-4.022440227352861,-15.969937361148045,38.715011375441215,0.10798554201039554,1.0416532756697758,-15.706036153180861,-3.3852394292037964,-0.05823977126540386,-4.46478552277253,-16.53355807137878,6.600438929712771,-7.688932472220773,-6.097289584191233,-9.001712772280355,-0.8655187638225621,-12.222210262337711,-6.898167848187216,-3.650842734863831,6.609631595320889,-4.940504459482712,-0.8092458914287928,-10.71577094584172,-4.5526961726876,-15.058388518049835,-8.008783981223225,-16.17142813057514,-0.9243967182616541,-33.51153863608181,-8.54460060466928,-14.340103004497529,-6.7940245309877465,-10.330670050635018,-6.768932275298992,-9.628937674946421,-10.574532206387207,-0.16446788369911158,-9.397398088453192,-6.489818308381376,-9.926496970393334,0.8780431989675366,-7.132302741678004,-12.668749110608069,-14.211793279789296,-12.598758280354971,-9.232511265697624,-5.450791795485584,-9.655341347270696,-26.36145507622128,-5.171349878091061,-14.17869401350277,-8.53659241949444,-7.142513131936768,-7.106381319503733,-19.488083146225264,-14.05322549252707,-11.112495288739787,-4.541109712213368,-0.2764078938282215,-8.035087469398128,-0.8536977194286479,-0.9481368639419907,-3.048926957993525,-9.691090048529711,-4.1205224752250045,-1.0811244246967984,6.479008913564768,32.31770006591177,-12.122066906680681,1.9505966489897855,-5.157375,24.894197407327628,-34.24827486934863,1.7676052490378518,9.611296950332207,0.7798155207582809,-4.073729831245612,-0.17592733031815,-12.128452474240804,10.45277180039314,-7.066384116101297,-4.577434241710222,6.833776811509418,10.07290616729099,-4.410063142209536,3.9478046165791487,-5.586974529606135,7.268843159122222,-2.4077879515252625,0.9747295974535235,2.94250472005817,6.650870582814194,-5.872890667317712,0.8801103600066781,7.544719110395452,-0.28142828553960786,-3.447127762093538,-1.0625844966254423,-12.54005360759948,-25.527577385484488,-13.18906355037941,0.15081334972019061,-12.713211126005259,-9.394676806095509,-32.96375812376823,-5.4679950061167935,-7.143203518257203,-4.750108605484615,-3.3035659990108033,-4.328240201209117,-6.657440308619921,-5.106863701456747,-1.2736372688963031,-6.336593002704074,-29.712989889220783,-9.165196295379625,-8.305563123701209,-3.866666105410218,-4.2745890105015505,-6.799554833078552,-3.1653565764086946,-4.163178132190542,-12.010495968285799,-8.744484580608685,-7.357386616844719,-4.391662669207236,-3.5474065690512253,-5.107244996457823,-4.101254277662754,-4.265381840909477,0.7639900293134708,26.790679409170536,-3.0549507420262194,-0.43242607847554737,-13.134380179452503,-8.557116408632169,-12.454172601026597,-8.567009181643957,-7.787477131878038,17.262193895528263,-16.005939812044375,-7.118679596580404,-20.8152332658673,-9.776946884962392,-20.259595780866007,-11.083565158542372,-6.1000000000000005,-1.3009991102092,-6.9332961592227536,-1.38455549971509,-5.6197592710377355,-3.454769374536734,-0.13311371142052075,-4.454206840998502,-5.649281595395721,-6.909561786916582,-7.790000000000001,-2.2759082259670134,-5.0831747602297535,-6.211215904134657,-6.934545367397858,-5.527953656233193,-9.938593700667662,-10.402951416943253,-8.146118680732974,-7.189992588473774,-20.433176708126524,-19.499932914460736,-9.95147630766462,-6.981835919126495,-6.395567283368824,-4.4129969881106526,-3.7374677778632406,-3.3344511930529617,-6.707936911085749,-5.215571618391565,-4.653375056954267,-4.541079307017133,-4.805453260260373,-5.106863621261156,-5.626084748221825,-6.16907352531701,0.6286881583803368,0,0,0,0,0,0,0,-0.5152723674238018,-5.157954681413352,-3.963964859719147,-0.10096891337042674,3.556525755143192,44.344300971031515,-35.53942834035397,-0.48789998994441275,-3.466097674723491,41.309882008218935,0,0,-0.9018181420220099,27.036248414510986,0,0,-6.1000000000000005,3.5383563716549022,0,0,-1.111020887814756,36.086889356682846,0,0,-0.4706631184014424,10.67150448003825,0,0,-1.1110489751042187,2.5013377771152303,0,0.372115795442621,-0.40001114410139493,1.607462045921745,0,0,-6.1000000000000005,-4.718485735241927,-5.944226701976174,3.319632881388922,-1.563663754835171,-3.669517735089889,-1.5788090707602107,-1.0448992835043003,-1.10738249085339,-0.9745144248468898,0,0,-0.9149500044580411,0,0,0,-10.213625,-2.849066725349389,-0.46213751325546826,0,-6.10650354065281,0,0,0,-12.71868396870662,-4.3190468451474855,-4.1000000000000005,-4.264857922571955,0,0,0,0,-1.1056677160775767,38.244412415247474,0,0,-1.269029467316876,-1.6738635659588135,-2.9771211847594934,-1.582320486811767,-0.644264722003272,25.25941885796733,0,0,-6.104612500000001,0,0,0,-6.120480912242101,2.4995404774366303,0,0,-0.7773259595149717,0,0,0,-0.9899167868687914,3.756331377669997,0,0,0,0,0,0,-6.111442060444757,-4.809954748697842,-4.101770658350937,-2.676893431565463,-1.020015466539919,0,0,0,-13.317234305819014,-2.6799586214792943,0,0,0,0,0,0,-6.1000000000000005,-4.709105583874858,0,0,0,0,0,0,-0.709779309598475,0,0,0,-6.1000000000000005,0,0,0,-1.1115075481998875,24.799735265303276,-0.7545544665324478,0,-5.908377308026576,35.58248051480672,0,0,-10.213625,-0.03579762072172421,-1.3450493491533115,0,-1.1109649893680107,0.5726791999146226,0,0,-10.95722296746419,10.364848193295355,0,0,0.9394486231483342,0,0,0,0.10531595034852491,0,0,0,0,0,0,0,-13.52319997185297,-3.016312756396882,-3.525222683396678,-0.10654695328932876,-0.7608186910555143,-4.053252918328702,0,0,-1.1249962956023118,-5.101296206676648,-4.1000000000000005,-0.6867623543775688,-6.1000000000000005,0,0,-0.04127617539112444,-5.361155048109802,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.9787460570909206,13.41573457410175,0,0,-0.7575442491563328,0,0,0,-0.40197299190363456,-0.6830180936853965,0.4578994764827016,0,-10.213625,-1.2658012442878375,-4.1000000000000005,-0.111539546875,-5.706017318657676,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.409215554622414,0,0,0,0,0,0,0,0,0,0,0,-1.6290685320390197,0,0,0,0,0,0,0,0,0,0,0,-1.1105569480728261,-10.214874376566582,-4.1000000000000005,-0.851417945552918,5.974968084228248,43.642961504413634,26.617283204787338,20.937744364853167,8.700590645110088,21.543218783886527,46.60694885967743,22.419665799811767,23.729515463074264,22.536963116933784,45.55483451644883,26.665583494622613,4.527436754864507,20.873702475979044,43.41987494472083,30.808368703060054,6.289955225160393,27.30268770505902,22.697285409083513,21.778013281416804,0.0830088048038835,14.939241473041179,17.468785349967817,18.943557252872385,6.851164425772506,36.61774001198101,11.539301713034737,11.483898394948039,5.622807949858264,24.156775652750323,27.92870916874473,6.865889578795322,14.777142660046835,-16.37719235293019,47.86177513785931,18.37010091953436,8.730950071321551,-7.117493077543992,40.530729310873255,5.493998298297428,2.519970180103483,-7.023175006684186,45.42275275710779,32.93888434581827,2.748781771807427,-5.101256414392493,49.64015471049757,-0.003897183447542241,5.664558865072034,-23.321886338362177,31.13572620796743,4.620693021146664,34.22555871249739,-7.528880340390188,39.04810600002597,0,-0.19209968894826127,-9.880648343435539,35.49910602097196,0,-1.0222801099171908,-7.78748657822907,40.72630722898239,3.0556228397718503,10.565947016156045,19.236637104888423,4.610904075425992,4.953494806748041,0.13047473734574133,-0.986099016642966,4.499965174397544,1.1192231548538905,-36.50952582424891,15.684822073359234,1.4068734808681043,0.2783015681161638,3.4854735911306456,-0.8067010625111479,5.046274363290365,1.5953771992733883,-27.921057319298555,1.4851701095365684,4.266609896836803,2.417365674520017,-1.6446842196462124,-0.5416886124297432,8.20282204335061,-0.09774255961785028,-58.77256574865266,-1.8020075695850564,7.566587289059309,2.4616267991859795,-1.7097029777515593,-0.7974511904160461,6.3663131879876484,0,-1.781506653936146,-10.133888276823999,4.52063395726512,-2.84521370913439,-2.918869572144432,-13.382741550320137,4.096655557036731,-3.5340776201433113,2.10023826202871,-18.899377684480232,5.145780529638702,0.5419623488619711,-6.1000000000000005,-5.0858190721683245,5.846704306556117,0,-50.511601605966014,-3.3869922787532363,5.556774439101894,-0.4236806316836941,0.8291661048944363,-9.304032387885552,7.4989736622605045,0,-2.623310785811621,-6.982199375048607,3.6967956539341533,-0.3477831509420445,-6.101112302642703,-5.102076425346694,2.017217717404493,-0.07442687004327926,5.110063148450511,32.77094932228371,16.859880382340403,5.122030887652406,4.945055809863476,8.152497961110834,33.946470192599385,4.26848086372542,24.35577673962767,13.415650994034017,2.2314142615306016,2.0557857267636446,-3.8537719748219166,1.9486758659115755,9.998661566062673,2.170098922979167,-2.04677717652715,23.643625918719998,4.09605130320468,5.440700075264111,11.168315985167421,2.1546291248190634,4.49743214838605,1.5616167615859453,-27.602640369921936,11.082068732479394,-0.7821774141991196,0.8448856683093637,-1.1,-0.09065861278361219,3.011188209030206,1.4699995825636352,-30.87984379718848,-11.326545070948029,38.72604597922016,5.259098082955655,3.4227240619531822,-7.1335191662604895,36.50629420258525,1.3961722794279205,-3.929081391300339,-23.69141805006703,12.55318027417249,0.3779359858598573,-3.2436654273935503,-5.0246104785115016,4.223001276374515,0,1.720062829972187,-20.201085361111687,6.509167164119947,4.409199139890095,-5.157375,-4.865052485784976,6.531948829882552,0,-2.215338041065446,-12.933631427447086,4.1353591806532615,0.27036286582276847,-0.09880567345942398,-5.106542084450496,1.460407077918505,0,-32.60863821174363,33.08871539714751,-0.12519236067920267,0.8280380339054759,1.968615200505921,2.4438915561172454,6.3409495552841575,2.3036158651862815,-7.225525973349779,4.077009579494396,0.9518722817300316,0.22658089065220566,16.45486190598512,0.2787755086263871,3.473960695514876,2.3153548204206587,-5.157375,13.156223870668224,0.7679381238718305,1.0971339411826857,-1.6393277645084174,0.5002890166848059,4.004217417173105,0.7718966029490107,-0.4009095924065855,-0.5870989667664073,4.807222286664781,0,-4.075320172916854,0,4.247467804905615,-0.2823196379689603,-0.8654741125075556,-8.882637715926903,6.911037474580039,-2.9057576812394625,-1.9525387251335609,-51.00094563004698,4.375264729819234,-3.281544666930587,-2.5938967500224592,-9.208326471509016,3.0855532198991753,-0.5954689118512165,-1.6950028370624595,0,3.029820547875132,0,25.71724209222274,-12.271472318222951,0.8900777477142411,-0.5748651331619924,-0.6816525863670626,-5.101250892296836,0.2434451779304003,0,0.1777322226503105,-50.472698978023104,0,-2.6265162808452884,-16.93532098883496,-18.157315663556986,-7.858590031106054,-4.689757935323137,-2.657920128364545,37.63940707705328,0,-0.09946480998021306,-1.2039994506843992,21.94746705726969,0,0,-10.213625,20.361470271176245,0,0,1.2085595169629275,0,0,0,-3.285073153772936,27.500751300354903,0,-0.4639307583854687,2.7755645925426182,0,0,0,-10.187590935506877,40.57280038931084,0,0,-6.1000000000000005,4.190602724046033,0,0,-1.1543588319912537,-4.301686399298528,38.019063579225275,0,-1.1109252432557377,-4.2971211761410375,46.395557453209335,0,-0.9751687549017982,-0.5514087125292605,12.60928548030342,0,-1.1088380330905843,-3.389134655243135,9.028934829524978,0,-0.0038115206719780415,-1.7947940525563184,11.489226208279792,0,-0.6602788056094253,-1.0397520444273958,0,0,0,0,0,0,-0.029500625598663534,0,0,0,-2.6103297864249275,23.70655114935025,0,0,-6.1005339755225805,-1.3097518020202918,-0.1926411135156535,-1.188631278631194,-0.5885420557201865,-4.1309772674765455,2.1856927747285146,0,-0.8390300414975909,0,0,0,-1.0798978154956203,-0.15209512620398322,3.065334433210536,0,-2.0873985464468836,-1.3772035067658095,0.611457846923764,-0.5614012478520913,0,0,0,0,-0.8924558955864955,0,0,0,-1.0121526785111468,-3.967385049513032,1.3591368092217408,0,-1.4308681309009348,-5.497929744025363,15.216866906710532,0,0,0,0,0,0,0,0,0,-1.143854094258898,-5.1000000000000005,0.1769262100879921,-0.5657262115708364,0,0,0,0,-0.027005558080957216,0,0,0,0,0,0,0,-1.144968967461044,27.448252058894955,0,-1.7416744178597634,-0.9715776063611344,7.768684798031321,0,-0.8048977375729074,-1.1104409887467683,-0.10082960019080472,3.0497520087969208,0,4.7016130369520805,0,0,0,2.905104058738127,0,0,0,0,0,0,0,-10.213625,7.029628374407058,0,0,-0.5035911583021402,0,0,0,-4.053337758115059,-1.9681886170598764,36.972342807800054,0,-1.0503733391141756,-5.100248912024964,0,0,-10.213625,-5.1014324619715445,2.7740272639171653,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,33.540022126166434,0,0,-10.213625,-0.6548294611739055,0.5024999492303279,0,-0.4797806637904183,-1.0741933207699004,7.885106749995634,0,0,0,0,0,-10.213625,2.3540060263722027,0,0,-0.7840103581288053,-5.578013748320304,1.4229188808963946,0,0,0,0,0,0,0,0,0,-0.6154033068599762,-5.119365277650514,0,0,-6.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.7304368279848679,-5.1000000000000005,0.8573254982082468,0,-0.27141472491159674,0,0,0,-1.1114356416099926,-10.214875365096812,0.23198684337901465,0,7.74260603431892,44.233833946784266,-5.052280216797678,10.129413992351983,7.034796662352818,42.30841394292544,-0.12748440471450806,0,0.7444161565988572,37.83724589319244,-3.9670415831552517,4.891218119309729,-5.157375,37.96340811140511,-0.7542106520192142,0,4.3154859367198695,21.78644685198817,-7.791249475017828,5.422288893203801,0.9954887528648955,44.64254619609281,0,0,-42.36771644085354,29.08511444471943,-4.100415783453513,0,-0.048708459978070634,22.73981488125361,0,0,-22.245894898571745,-12.535325212168715,-22.760290581536392,-12.888563742730357,-12.967091985344695,-9.399373413042898,-10.88214657748249,-10.32350478208652,-8.509944226399929,-7.19806765536724,-9.256963473093448,-8.020074250609362,-3.1197743606735333,-5.486485162455891,-4.975704767796374,-3.3300142065703664,-12.139582566091114,-30.62241476034011,-11.032586193039666,-6.493508264429668,-6.191495276668621,-8.186395873340878,-6.293092557680879,-5.018536275478891,0,0,0,0,-4.386007435128475,-9.702517082273715,-7.7707488961183016,-8.344512546399187,-2.125089377895214,38.17190493731485,0,0,-9.207707324058878,-6.435211761329278,-41.674770434228144,-8.60317636452942,-13.05264165221455,8.303055366857828,-16.947698634903993,-2.8645717035155513,-26.418879440334337,-5.4080748315159255,-11.220752375304556,-8.312318275152126,8.381553734690659,12.559370247717837,-7.435236674868753,-0.689808839405067,-3.126311739146812,-7.061045380451916,-44.52976776615111,-6.9268355140568705,-3.8611311225314124,-1.0521258158776157,-7.791243347236881,-3.079275393299133,-9.199439278725318,-7.283910609918558,-14.080199311854678,-7.323504857655119,-8.467617705256393,-23.73018770774013,-8.226568920970664,-4.761940539664058,-6.0220375,-9.752423731687784,-41.015930307406386,-4.374462923491347,-7.372150453700777,-15.777985925450658,-16.871010330861097,-4.353409853846859,-3.7177849671527943,-9.78992868533352,-4.108336247204865,-3.7673943432600137,-3.5161512882159,-11.026053226172928,-7.796864345977154,-3.496961195751623,-1.6013990923028998,-9.695357806429792,-4.1000000000000005,-2.0457937567437643,0,0,0,0,0,0,0,0,3.50228780121528,31.99204521583387,-6.899117326740868,1.116197883766281,-3.2690263843049987,35.16922281595236,0,0,-4.020449647862588,18.486623453456865,-40.966793713101644,-0.9110902435248176,-1.717330958205993,0,0,1.8325571949376203,2.389930380051083,21.86182786090682,-4.113283457627975,0.4515796994517228,-4.676198406029947,20.160175958056552,-4.1012375,0,-0.5333692443102249,7.935978996314091,-4.1000000000000005,-2.3913329942531716,4.787121175330396,0,0,0,-9.268703647108424,-8.747099310948549,-19.512970945934295,-5.042610174241712,-7.028509308974435,-7.930245999989296,-3.1824446878425783,-7.15449912163741,-2.189949157699099,-5.101011008796519,-4.1000000000000005,-5.490049095516211,-1.497287897140315,-5.046738052856801,-7.863162286025598,-1.6392463253834637,-12.283016705383316,-11.20545763444784,-11.112767186415574,-6.960479887791548,-1.9779398815896443,-5.1062995128904305,-4.348213755571585,-2.336909758542138,-4.67933253774161,-4.688656119551443,0,0,0,0,0,0,-9.062458887316138,37.23624209710132,0,0,-8.355293522747637,-4.7441324853659355,-7.986553385717813,-2.161573542523284,0.9861631349496667,-4.142939651061529,-11.112119025404072,-2.369270858274259,1.9685406446579472,0,0,0,-3.3826410299192045,3.6233538825877285,-4.297744888869887,-0.27147857972073497,2.146058216335807,-0.538828633293695,0,0,-4.788302556167358,-0.25453479825346753,-4.106994873913929,0,0,0,0,0,-0.7996478388559787,-4.505333857780611,-4.1000000000000005,-0.28304365568466333,-0.34793661217668187,-5.106556024346999,-4.10124315699653,0,0,0,0,0,0,0,0,0,-7.501352614390137,-5.1000000000000005,-7.7969888698511625,-4.267874281937251,-0.6732655975023407,-5.106053286815166,-4.30298584908022,-0.1,-1.3367549282715379,-5.100416265863827,-7.7912496472368975,-2.274560750606925,0,0,0,0,0,35.128709430098674,0,0,-5.647030635486448,17.737425559361498,0,0,-5.116525260560813,13.405928388025352,0,0,-0.6119011245797367,0,-7.422734881460104,0,-1.23426453557353,8.736091056998317,0,0,2.203777775486459,0,0,0,-10.213625,3.5406825850708294,0,0,0,0,0,0,2.2652787023261,-4.937258846431748,-1.3429531506294858,-1.2633682537857673,0.006858504438771895,0,0,0,-0.4165679000691982,-1.9601239696311112,0,0,0,0,0,0,-10.213625,-4.212518001977229,0,0,-1.0561332820626184,0,0,0,0,0,0,0,0,0,0,0,-10.213625,8.450069074908061,0,0,-0.8415920431731699,-1.203463495489049,-4.117227828125,-1.09168761260508,-10.213625,-0.4452367410768878,0,0,-1.1046125,0,0,0,-10.968364475359639,5.412992011928237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1640303015296387,-2.2068098618911103,-5.021643121216669,-0.10668364254764864,-0.9349813267874151,-5.101266519539861,-4.1125700091518995,0,-5.966517606499999,0,0,0,0,0,0,0,-0.6449507921627262,-5.109611563764646,-4.1068625,0,0,0,0,0,0,0,0,0,-1.191830779382415,0,0,0,-4.564558348335973,5.329941679230438,-3.9217254267154757,0,-1.1109662836688567,7.202121561396881,-4.1000000000000005,-0.1,0,0,0,0,0,0,0,0,-1.250972796494778,5.559382128478749,0,0,0,0,0,0,0,0,0,0,-0.35717415531877506,0,0,0,-1.0911527968124615,-2.815737714231837,0,0,-1.1166443579834704,-1.4217114433137377,0,0,-1.1136719584904122,0,0,0,-1.1,0,0,0,0,0,0,0,-0.6593201747653192,0,0,0,0,0,0,0,0,0,0,0,-6.045771689244962,3.8479435006094946,0,0,-10.213625,-0.5642601622876101,-4.561526769954976,-0.20258823860722597,-0.7601013298918518,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1192428332041975,0,0,0,28.986831046812668,37.90030222686309,33.20473991701743,-21.610698890791696,13.800121066775143,44.81538850704443,26.350570801508304,-13.20471975460413,15.344511900290112,46.030564322394426,29.93442094006771,-19.679502275820482,-3.68499056753497,43.42475011669175,9.315673570652134,-1.146018337390691,16.605345254627075,31.915342488400345,50.14144674442865,-23.459977531389427,0,0,56.43937355338011,0,0.9155938197595193,25.92797859506086,9.835469293742317,-5.32011707477963,-3.12639996320517,44.92850910150688,0,0,21.5275537119442,-7.509945912462304,52.23222914510944,-25.059397350235027,3.5834731100215897,-6.724135277270352,49.673755034660964,-13.225878852731132,2.2028693787398677,-7.405386283632154,51.5558517145436,-4.076786408293746,-1.0230390394587647,-5.125227210282668,52.822809648894506,0,9.134070960414977,-7.184937929568434,51.5424559668788,-5.082361938366021,2.490380269055501,-5.101076575186001,52.732226819794796,0,-0.34052219085858715,-4.071535065786797,49.76680236453331,0,-0.6948535468379252,-1.2244532484860102,37.4976086114143,0,16.486085781631097,35.415548187991796,51.64147866502824,-14.994279589390766,0.2704150864038606,12.297232453712187,53.61727733135662,-1.6183080902270923,0.9196544545327456,17.349817133645384,53.29868631960515,-18.67870639667548,-1.0858358534238461,-2.100695420704161,52.594094463426416,-5.117229348085628,6.173209160549385,26.351623246982783,54.70229102423433,-24.981778838604182,-0.8891903602267801,7.056736649483051,52.844978257000115,0,-9.931530231150987,5.204419661575636,50.64991220601604,-9.441237007489946,4.772896220838605,1.5238542464450373,39.765121526363004,-6.662931305902676,3.2754974463006414,-4.419260707065111,50.530944235247304,-5.10386995037835,0.7708959544600553,-4.432419696858868,53.62543423927347,-4.946464696404052,9.586587839330356,0,53.85605254618584,-8.62997583366137,0.3283634599876071,-4.8780795036487605,42.257492510725,0,0,0,46.36603470710097,0,-5.943378639819217,-41.07429560361905,29.820741156609966,0,-6.023207960998721,-1.6528271264982928,34.480706288042775,0,0.802071992308899,-4.79975647234715,14.525153827230056,0,17.34365384195879,30.656567214298622,52.54071649532239,-9.224282432191213,-6.98034882801469,39.839239395014616,13.25559565652613,0,1.282757811810104,19.979129393810055,53.71694513304329,-15.730122378040456,-0.6209324780781524,33.31967753933053,0,-4.72869915498035,1.0212410579169315,35.74964800531712,18.449962821677353,-13.873679253811336,0.9057939465068225,31.543503309697257,10.109983318668032,-4.833470386849002,1.617445932110439,26.447778240257293,0,0,-4.274253041729839,20.477406036062845,0,0,-8.630189581988235,-4.571788328134275,48.68238152878005,-8.742702369935621,-0.3237622701264111,-2.627811057717872,51.5072683401447,-4.7901063819512535,3.622165832599477,-11.964346050911928,50.89528237741389,-9.690164167893492,-2.761551567070455,-5.107159174286223,42.492601128223015,0,3.247995713930424,-5.0323700661417625,51.802720759103195,0,-0.846726995788112,-5.1000000000000005,28.38311258888344,0,-0.05197821500133237,-5.1023703613039935,35.384658087984704,0,-1.0345211995213501,-4.959362947085064,15.345224602536991,0,9.47649060702316,30.245610657354206,50.23947947004805,-9.252710519362424,2.6496771269052393,6.857890585059062,55.18300400180987,-9.647274628374788,2.774992985465596,1.664892496221907,52.369598931173776,-22.035681835866985,-0.2809617274912048,6.914103464129273,39.48800255049569,0,1.3372559055739912,-0.1012593452475408,46.80279602709175,-5.027587178187498,-0.013161443860748002,0.3975037089042881,37.86654093399214,-5.1000000000000005,3.6088506979118478,-0.6508660148257552,54.43933290977071,-4.100946913560711,-2.2706805712254674,1.3710467717897001,18.42802131025999,-48.11482693114339,-2.6741942213171486,-5.252296850665268,37.57490773206371,-5.05391063390709,-0.6994178374547486,-2.4709434055815818,27.43315288363985,0,-0.009293530633962904,-4.828729550571571,35.103079001401184,0,-1.1231667353654378,-4.795234267609119,0,0,-0.2813494235470417,-5.085288642539494,20.077588079899428,0,-1.879386001328438,0,1.5446163060201747,0,0,0,0,0,-1.028997232358708,-9.538552486105381,13.947484405034764,-5.1012375,-1.1085421744090478,48.088554949818516,5.5443715168393215,-5.4416773914626955,-6.1000000000000005,19.692844894776766,0,0,-10.213625,30.518626751118422,3.1287061410048462,0,-1.1104977881130567,14.57439853951515,0,0,-10.213625,22.63604938759535,50.20465591819247,0,4.045748691046941,0,0,0,-1.5429037064796383,8.64839950099122,0,0,-1.1113514402898057,7.570714300158981,0,0,-1.1,-5.111602828125001,51.834165321415966,0,0,0,23.168850539519774,0,-1.4621330774023813,-0.36285853698154896,15.018670941497335,0,-1.2723028585806284,-0.6297808220181565,0,0,-1.6064918682415616,-1.6767302158021147,5.030491532148758,0,-1.1183808950671332,-2.8025281932042896,0,0,-1.1094676955633502,-3.4621708608357418,6.862452451098195,0,0,0,0,0,-1.117142071166676,24.85468591356555,4.570796736846113,0,-1.130864271915004,-1.695936156008151,19.099877185205134,0,-0.5355468184760043,-0.8348387794367543,5.680346452071203,0,-0.4989460585384964,-0.6690611678948586,5.436213571197259,0,-7.550916632644276,2.9134952474480964,0,0,-0.5963108981423387,0,0,0,-6.163692612642315,0,0,0,-0.5418530420539563,-0.1484602448794309,5.364640277260098,0,-1.1048125012474512,0,0,0,-1.1007526190606547,-5.098563824557204,5.476879343188402,0,-0.49382820267449046,-5.102064064734767,7.790559449583487,0,-1.1101743122557488,0,0,0,-10.213625,-1.857406661711049,0,0,-1.120373042625279,0,0,0,0,0,0,0,0,0,0,0,-5.6135451966543926,28.783189263777224,0,-5.119088983280392,-10.213625,12.622359016306437,0,0,-6.600732106972591,38.689647763525954,0,0,-1.495631014981147,0,0,0,-2.3075017375176063,4.094589848645948,0,0,0,0,0,0,-4.423493686834968,0,0,0,0,0,0,0,-10.213625,-3.3716156467794742,0,0,0,0,0,0,-10.213625,-5.1000000000000005,5.819920378965845,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.15773330223763615,0,0,-5.101317050102857,0,0,0,0,-9.96475872658457,6.2317249694203305,0,0,-1.5093134682398857,-0.8670788338368283,0.962606912134027,0,-10.213625,-0.6416472785910136,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.5628711469947084,53.665826861657614,0,0,0,0,0,0,0,0,0,-10.640465039406113,-5.1011737755625886,51.95293607216795,0,-1.1056469606449875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.9590115739279232,46.836922892830856,-3.784061546865605,-3.473451318129882,-0.5338406760799488,45.197171077614776,0,-5.105325398296744,-5.157375,43.02943363584261,0,0,-5.157375,19.449861971597024,0,0,2.245242748677341,42.58910083963178,-0.16286497079723433,-11.879833525484482,-0.14098362373356757,35.268144551861184,0,0,-1.7347380764291689,20.006349744296408,-7.748403948580824,-4.190169512007063,-1.0745039274737953,46.02976429631211,0,0,-10.152314921517004,-9.872989282259878,-7.478494458775175,-9.696463453221282,-11.960494351640609,-9.116245468837015,-2.5629219360877036,-51.01147507587078,-9.911442671635683,-10.032267239554953,-8.113156010714512,-13.67151553970365,-3.0028486780304835,-4.0398512488570555,-18.239984829977864,-4.986841529952481,-5.169013123268973,-3.8304154768377843,-3.1049663992685623,-5.150017775478158,-16.100291108977885,-11.877339501037204,-9.997435127532201,-17.623786310984073,-3.7325087611964385,-5.5875449758866935,-4.7579392354443195,-5.1000000000000005,-0.5706262126673645,-3.5770770666295735,0,0,-5.075744533649127,39.080299651419864,0,0,-9.066561088742613,-9.056456007980278,-8.169718329809543,-16.98565137032276,-10.7416375,-0.5714192944693086,-6.5965268634620795,-17.345497124216884,-4.505497936140886,-6.526934234985244,-1.770793436773882,-4.917170836500979,0.2525431657398731,5.289336128527318,-3.3645025656761254,-17.244253320079583,-5.706095097469176,-6.356373777719661,-5.922317880407747,-9.39753651252331,-13.02725446639218,-4.716035049484046,-33.671156776833634,-17.911911072269017,-2.3717364472010503,-2.0080684262881556,-3.703360657761989,-5.214649884963828,-4.569749971580582,-5.1068625,-2.0802562061892633,-5.1000000000000005,-1.1521738056631445,-5.183946536177565,-1.949848285029248,-5.139302576598788,-5.157375,-2.1236326405407664,-1.7269312248033843,0,-0.6991914482115271,-47.63282906933693,0,0,-5.965540404024494,-7.7662073674139185,-28.58835920232677,-9.70173311045051,-5.157375,-5.028922797785004,0,0,-5.157375,-5.100256861783446,-13.890650545154257,0,-9.533656070958074,-5.117201258452955,-6.99302435498321,-5.111602828125001,-2.8069414359244367,36.258342360139665,-4.917548542007238,-5.1000000000000005,-0.8176657544005939,36.53506155533222,0,0,-1.1,4.49162346988356,0.4505040912515834,0,-5.157375,1.2354639622163044,0,0,-1.3361735808255606,20.978144686404907,-2.4433954911389173,-5.1000000000000005,0,0,0,0,7.2794623057263115,0.529066929929205,0,0,-0.7197318006592501,-0.0887697386835663,-2.854774250882524,-4.605514463860319,-14.077414869885548,-11.024551851271433,-10.52776742451713,-13.821419778811752,-8.147837863226096,-11.330866865413304,-9.53953511308037,-13.780390602948257,-2.1463212539410286,-51.08094400286513,-1.1598991442717126,-5.1000000000000005,-0.9611778908007559,-5.025933808816582,0.3878673346407797,0,-0.7722050247835512,-3.10326202067848,0,0,-0.2933600075670803,0,0,0,0,0,0,0,-0.5228071543740814,-5.101384319256429,-4.011733192316554,-5.021397792373173,-2.038484641273369,23.545952100437482,0,-49.21562227149914,-11.491037918917119,-11.253786903505677,-8.23122091640809,-51.012374999685875,-5.710775483081064,1.0736822062021516,-4.100423910332004,-5.0371893660593345,-6.1000000000000005,-4.129925101156327,-5.393692990476869,-5.1000000000000005,2.1251805240200987,0,0,0,-6.578648481946588,-4.251228310567137,-6.266812820453145,-4.921562227152084,0,0,0,0,2.652005980401499,0,0,0,-0.6121036210642367,-3.8075817561958796,-4.1000000000000005,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-0.879004128877567,-5.106698808432551,0,0,0,0,0,0,-0.8949147880955026,-5.1000000000000005,0,0,0,0,0,0,-0.44574139817068564,37.9663567702582,0,0,-1.375033331411685,15.796727497342124,0,0,-10.213625,5.807047035080341,0,0,-1.1105865067501517,0,0,0,-10.213625,4.392297255109554,0,0,0,0,0,0,-1.0443484438576525,0.21021247873093835,0,0,0,0,0,0,-6.106027441047324,-2.251913395686356,0,0,-102.20725601022548,-5.104389372547654,0,0,0,0,0,0,-6.105972246810672,0,0,0,0,0,0,0,-1.1056519726540246,0,0,0,0,0,0,0,0,0,0,0,-10.213625,10.404662396560566,0,0,1.8126555759238352,0,0,0,-1.1,3.241308926328582,-2.7333488341228547,-5.116584937810067,-1.0025785647560645,0,0,0,-10.213625,1.3298409776334494,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.814502274224177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,3.978547277815019,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-99.81896926762137,6.6187424725514505,0,0,-10.213625,2.6787890895455115,0,0,0,0,-4.0804527728744615,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0562675373695416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,6.3510403455898246,0,0,-0.9841118423812905,0,0,0,-102.16053464995575,-0.9981015032838079,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1110077916579626,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26.489342015760574,25.54911105186669,45.48217591876074,-21.61623136217365,-0.9390902421331677,34.234986551558585,0,-3.518422435734273,-4.628323748384818,7.0840393960741155,42.12116974699149,-4.632715897022977,-2.2296699941855582,36.84272083934268,0,0,3.4541460962526984,4.944481113139881,37.769808666113306,-8.667373063247169,6.536230188727474,18.651752234464503,0,-10.324113400466524,-6.105745354424142,17.022678529264002,7.936081314326575,-7.954801791211998,-0.9536688060508873,21.863147670870582,0,0,3.0843114636249434,-5.904264806893557,43.162714434319675,-9.132475452951969,-0.33581386273244657,-3.7834673943041253,42.09734685205313,-4.874537959937397,-5.157375,-0.8458611497188223,37.4352982798129,-5.9371991743917345,-0.8384305343831819,-5.1000000000000005,28.122525002148457,0,2.461863337595034,-4.9632799974046975,44.80368795915167,0,-3.1737449656731425,-2.6167718352661193,31.791517700196785,0,0,0,22.162866949808606,0,0.42156301086824033,0,42.04274564844116,0,-1.0261693077117113,36.93709106106801,-0.3701814674150639,-13.663034671041169,0.8691712695986635,-2.764646727779412,3.073614601757238,-17.35240048942224,-1.9750511814656582,-2.781689578349601,3.104556055007277,-19.718155019609178,-5.157375,-0.132768580865437,4.42987543782534,0,-0.4612237209142288,-1.426937912689845,4.333244442548461,-9.690000000000001,-51.321415611256064,-0.14166975217518543,2.1797730239725595,0,-3.3258380594364856,-0.2889758859202251,5.0004035085024094,0,-1.1,-0.12813820794091146,5.201690497378294,0,-1.105818206797746,-2.959746134282255,4.4228795660394065,-5.1000000000000005,-5.157375,-9.699501923017785,1.21237211342194,-5.1009298904262454,-0.4175374786348718,-4.357986363910669,2.083527521858845,0,-0.47474659824571364,-5.1000000000000005,2.9734609381717396,0,-2.724452111526029,0,2.7132910128592025,-5.090374927444517,-3.89446253561652,-9.69703141217231,0.07820146981028475,-9.661006805772228,-0.6043593108479257,-5.100598792796701,1.9085036893220877,0,0,0,0,0,2.9484310391737916,32.31145044169871,10.468253914360568,0,-5.157375,28.337729751537427,0,0,-1.0240107721698937,2.9304300534898515,-0.11553264600095958,-5.1000000000000005,-3.285173026310676,0.6181876336981383,-0.057672398846982637,-5.1000000000000005,23.4700346320178,28.06404065186115,0,-9.421739157865185,-0.4221176251003343,9.736591992488473,1.2376638772541781,-5.069167921608077,-0.26245653561583826,0,2.6777424892815054,-5.024122362865327,3.768124488070057,0,0,-4.984422249886144,-1.8325708297659766,-5.509597403936736,29.31015686561466,-9.690000000000001,-3.3729235168886986,-6.374100089876076,25.218768815815736,-13.824583981478263,-4.163854794069171,-5.077055373288045,3.1702832807199486,0,6.564856145385405,-13.728928223337192,0.40772826116137006,0,-0.39954962051735116,-4.685281661808764,8.487758369851111,0,-0.119893809414926,-5.106863740825084,1.627651822517999,0,-0.28319574194708697,-3.1731301284826996,0.7619558356243329,-51.045896911396454,3.996362456057681,0,0,0,1.4861129565778919,32.50344822951633,0,-9.690000000000001,0.9350177586992685,0,4.631698713994114,0,0.7500157084835348,0,5.1452600302396165,0,-2.2797443093081426,-0.07131201403494353,3.1153844301522775,0,-2.582915171545782,-0.4600246553491452,-0.07057552829143045,-5.1000000000000005,-5.018142799299602,0.16540348094525614,1.1012867167333285,-5.100572786049057,-5.157375,-0.5408802744540046,0.8930980158133031,0,0,0,0,0,-0.7606096827207467,-1.943268875277591,1.6420056864945751,0,-5.157375,-5.0008086906119535,0.856202792375875,0,-1.1,-2.4959727660565543,1.3982676747411193,-5.10135,-0.01739212681476779,-5.1000000000000005,2.8931520327694535,-9.536601758078602,-2.6101578478253744,-9.524603455355349,0.8854610178405903,0,0,0,0,0,0,0,0,0,-1.0287021738038884,-5.15853228994553,4.030294847074271,0,-10.213625,36.193776730039794,0,-5.1000000000000005,-1.6727374003276658,41.51925419876878,0,0,-10.213625,13.255279502837412,0,0,-0.7001857341885934,0,0,0,-10.213625,23.257104242125042,0,0,0,0,0,0,4.914687648163838,0,0,0,0,0,0,0,-6.119979294978808,0,0,0,-1.1058760617963537,-5.1000000000000005,8.922805728431985,0,-1.110696550944159,-5.089604904895558,4.82724174144532,0,0,0,0,0,0,0,0,0,-0.9720412546839203,-4.312312956927744,0,0,0,0,0,0,0,0,0,0,-10.213625,9.86327485839031,0,0,-11.009429673104544,-0.7131152300800436,0.36998027372663134,0,-10.213625,4.9730278952517875,0,0,0,0,0,0,-10.213625,0.5336160258297896,0,0,-0.5932056829403899,-0.16602534311136782,0,0,0,0,0,0,0,0,0,0,-10.213625,-1.804963469090845,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.5261202826030547,0,0,0,0,0,0,0,-1.72588477615627,3.828195199105224,0,0,0,0,0,0,-6.106798489568018,0.46277869360303736,0,0,0,0,0,0,-1.7332992374044496,2.831542725028106,0,0,-6.1000000000000005,0.4221033824735166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.09431424061884212,0.27048681630166893,0,-1.1052575927433759,-0.45999123521667906,1.218668333176112,0,0,0,0,0,-8.309675818051659,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.157375,34.453535587444314,-3.4300722208063874,-9.606001307106672,-0.9327069426304834,33.142631398165065,0,0,-0.23379068497193103,34.149552589224875,0,0,-0.3297489611332283,4.328704997131956,0,-5.111602828125001,1.8035767235536948,39.139600967863544,0,0,-6.022208580320731,14.592588918702472,0,-5.062693857663268,-0.46364749892765195,42.40805917561371,0,0,-5.157375,3.8928951348925978,0,0,-9.946100726100099,-15.797538081331647,-8.195259342354614,-9.69748502179819,-0.651833346427599,-21.122308395304138,0,0,-5.345833580914635,-7.930557571160005,-6.798587560951221,-9.69111375,-0.643238375226938,-4.23934415946847,-2.7528074786509364,0,-0.8386065919019766,-3.9142908163834145,0,-5.1000000000000005,0,0,0,0,-0.5198507641705735,-1.802127145089925,0,0,0,0,0,0,-0.208300407418483,29.124189628738613,0,0,-8.27951711436912,-5.951876105532417,-7.807682015534965,-9.691122809928066,-8.083660944502004,-8.956192963735418,-11.137580827757839,-9.707561613974466,-6.066682194697685,0,0,0,-0.06394725919114812,8.561300166231822,0,0,-6.1000000000000005,-4.373735617890789,-7.818587451900033,-5.1257236466834435,-0.3309487668347593,0.33428780695807064,0,0,-0.5619085536955873,-2.039243271074088,-4.011992165489218,-5.1000000000000005,-11.142769990182412,-10.973305868298743,-15.159771211530096,-13.82717625,-0.6522908607844987,-5.111466044697725,-4.6889801945940395,-5.064393948361406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.3110080292243322,34.605263258393805,0,-9.520941916271703,-0.8529166320673525,13.382527593427769,0,-5.101250438092841,-5.157375,4.4741463346014525,0,0,-5.157375,0.213240315263646,0,0,18.331725094077726,0,-7.454736669506733,-9.551218073262433,0,0,0,0,-1.4407692974368596,2.482007179554973,0,0,-0.8247636805275058,-0.1,0,0,-0.47395548659743647,-4.348496981828734,-1.4674988434583114,0,-5.157375,-5.112051297867704,-2.4712979918686653,0,0,0,0,0,-51.68618460072859,-5.185136314725039,-4.122865818258943,0,-1.1016777379962102,-4.031418109367172,0,0,0,0,0,0,0,0,0,0,-0.6570666434110375,-5.106881299536954,0,0,0,8.504129812048475,0,0,0,-0.7008489030395006,0,0,-6.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.17419057628525875,-3.987542375126344,0,0,0,0,0,0,-6.295829041964986,-5.1000000000000005,-7.713820233936888,-5.1000000000000005,0,0,0,0,-2.115952531363803,-5.1000000000000005,-11.622726898611724,-51.0113434417906,0,0,0,0,0,0,0,0,0,0,0,0,0.9685336121767293,0,0,0,0,0,0,0,-98.22314875542949,4.481225590739805,0,0,0,0,0,0,0,0,0,0,-6.026282010202024,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-4.826289700660165,0,0,-0.5377237253810532,0,0,0,-0.605288768490508,-3.0067127045549826,0,0,-1.104661736475974,-4.7139006243155945,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.100915241393545,0,0,0,-1.1050861927058404,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.101758609071473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.4927195855458284,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,0,-1.2187047707807683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26.389924199184975,38.789738623405256,49.03518129234885,33.81491738740835,17.717617428695053,37.67621354896554,49.329291482613314,31.719834587856383,27.412035591370604,31.944292033010207,51.00022689278475,26.231691599958044,31.631324860555686,29.46475068542589,54.493551190840485,17.846952700444366,31.788922444301267,36.06167528968204,23.8361455374009,29.6857585438091,21.068379027978093,27.354724387876725,53.37378626723929,24.74135653029727,18.7810711001241,30.235307225080852,23.914319422260697,24.587934503105423,3.03114441942001,17.417272759188307,58.74430411307057,19.082665497463122,32.59151393515538,-10.36418827650854,57.40075049528227,35.13060369752817,13.420237533008317,-10.913800813472355,51.91547467317605,34.6830108496313,29.13018910234669,-13.861339761202766,51.780693167292576,21.14141140995513,6.413589146987808,-6.904733638872434,48.09799251858052,5.011254206398556,17.98597719141811,-14.477905710281597,43.67031469781082,24.321654680087505,17.635114035396757,-0.8327158608088402,25.12365708926806,14.33666699764102,6.50019490565274,-9.329736310413171,25.187896211301062,12.753795967637508,-0.5554145477133107,-4.077709049794298,50.03366704094802,0,-14.038416733516378,27.69016320437595,51.56490736068136,33.66695591653626,31.490510167729674,17.948417471336043,48.85943996447172,20.327725500723698,28.88237548812834,24.977960291518134,54.30773437787907,27.53992546168992,6.4590617396703465,6.2715092313513665,52.321227723331454,0,5.392862986744976,19.83548136649714,54.10539743969878,18.83269770437336,7.686456754216087,14.46822543653467,50.57127118908862,37.50289176271127,-9.882863781123017,12.511546355147667,51.233987901267234,7.902339967780158,5.960798618897455,6.777547036154905,50.09074406656585,3.729854465904195,17.631392015772153,-10.216707626928889,57.99298034112134,22.60106928891997,2.5180213676847347,-15.744431800306671,45.20126630801328,15.54025781391599,1.3143672804852864,-14.288796996880743,53.78319298093372,0,6.366034178441893,0,55.03624047480613,3.787870174961174,14.45540998882692,-6.193557038185546,11.703730514925036,2.786696611319238,1.4308811250750468,-6.25001514140258,50.25980128037005,3.81034292727076,-0.8386638038300049,-8.012241150239152,10.907798596309938,1.0523435979768272,-0.0998715936293964,-4.7887044006914925,53.7550021682787,3.2979772405083896,29.092346071889,36.8645386535966,30.04880160166984,24.24271687157343,24.113723874928926,34.00469716638767,51.072387998782446,16.829802472869417,6.873737580992527,23.740012992825182,15.06100150357331,16.971487042159985,18.0476738687887,25.4342866751214,49.93837203769261,18.115545846363624,-0.013105052710864484,15.914571084429694,14.446744631639277,14.656565944812101,-13.253886145780497,27.551832017032037,16.360918038301897,13.698259187631418,-13.05400392249915,19.09223686023659,52.44961962104647,17.965372924852673,-18.40636889631213,24.730244443218634,9.633710480437786,9.737409415072271,11.62859593923083,-13.966355507344083,47.06070966242764,15.001675683628001,14.479431145313487,-3.6477341539928902,49.74961835968936,24.910592033195563,5.63086797612484,-6.372389801296284,40.282908151234956,4.92720884514263,12.538657176596999,-15.583124183533933,62.38901733282405,2.5006172787720207,37.00103245208615,-10.20435143248508,19.378846157822018,18.680439636502463,2.9243689858348914,-6.265487097831006,47.279967886937264,6.76556872451761,2.302262457155808,-5.059715303163246,34.28238299701092,0,-6.010625964475741,-4.970341432163454,13.553815776568289,0,20.277932747524442,25.13824391340188,35.78531327159478,24.14593292627029,-0.05531812524259161,7.962161625426267,45.87135987667929,10.854256841114598,11.78707448223905,9.509909576043183,39.18894255029687,8.091495866679086,9.082875612395956,10.351828763858528,42.86025093433508,7.004412797233931,4.62091290189226,4.075815011980411,48.56950561416956,7.870601435286123,-0.08430604539756845,1.5666480184907374,46.49757240678685,3.291752571721841,3.0818207330172402,12.437019297488563,35.77655264695838,0,-6.1000000000000005,-0.07591551794642526,42.84932579277498,1.613290810066685,21.65446581703419,-20.511180362165927,21.21976550102589,10.27215464671116,-2.7091256874254843,-17.243218336039725,55.5103514837803,1.6759819365867523,6.830263896615856,-5.1073580670342835,49.06025992481668,0.5830178857960272,-0.578416507985413,-4.754987392165858,35.01455423109185,2.854733310605874,-38.26759076614868,-3.6579094210973184,53.702839870365814,1.389575399520006,10.568238832038993,-46.9920900020171,2.0602984984386663,6.401744819687783,1.9937886686062067,-10.844402495172815,5.684461935473294,2.214860182238852,-1.0289984721922585,-9.31308817745191,24.90347104499624,0,0.002906844526790131,41.41502691499464,16.669956389193622,8.87509158687472,-0.8384272617163758,41.448494133564324,4.144278828192503,3.901254678749397,-0.47830569932360545,41.89752011177829,9.022539549555612,1.4397848272436167,-6.111668064518286,19.225277058099426,0,0,-0.5751641343902054,38.340023416488606,13.461801852019661,3.585747946375154,-0.009514644724087341,37.92368874740021,3.4624954263397374,3.52304233097792,-2.267666305072268,36.31090514697989,0,0,-1.1,10.366836758592756,0,0,-1.1068625,-5.111610585047145,44.619397521452285,3.8465546446970964,2.314582230116744,-4.299068825365249,54.32883337196055,0,-6.101084834437806,-4.604866476056035,26.63697147409058,3.601478498802883,-14.93023687280795,-2.620756063030967,10.653892099205848,0,-0.8603867426039642,-5.234999765864124,30.642173727345902,0,10.698922963525124,0,0,0,-10.213625,-1.0032930474106898,25.511951295409823,0,-10.218809034350771,-4.608030534018273,4.987696579748317,0,-2.665157167081299,40.079665210251186,0,0.49921633240926316,-1.110389990989385,-0.9363829359182976,44.10561129693267,-0.10587691326681135,-6.1000000000000005,-0.9286386095140116,38.029232732024624,3.7338714381783613,-1.0987090282853438,-2.310395397329415,21.909949946581758,0,-7.78064551150481,25.848405335947113,0,0,-6.101243818919131,-1.5078433819408934,6.24910147821845,0,12.18874383148195,0,0,0,0,0,0,0,-6.748042936505157,-1.7601610261138632,53.967448952662146,0,-10.213625,-5.150016543708845,8.63666382351835,0,-1.00274808192044,-1.9976820941407274,5.3848654278257015,0,-10.40444161443584,-5.1000000000000005,0,0,-0.9510085317953543,-5.118298343978658,18.016478697043592,0,-0.9616966920150578,0,0,0,0,0,0,0,0,0,0,0,-6.868610075718853,38.61800881719721,0,0,-6.533807983032185,6.905331225250629,0,0,-0.7355034298398593,28.524615019209875,5.823153343318232,0,-0.8996068427134072,3.824797598711502,0,0,-6.121840328125,30.85616658944362,0,25.747732362514505,-0.5528591222301465,10.948151544335854,0,0,-0.09953723164248052,18.50330690978717,0,0,2.549822472765343,0,0,0,-4.662314622342273,-3.407292044908178,55.3847335280659,0,-0.0776434027610945,-1.6778884323943666,0,0,-5.848391474636378,-5.100055641307222,7.742876324014012,0,-1.01774634293594,-3.2937812696674955,1.7274416958583858,0,-10.213625,-4.9029254950239824,9.325248692905134,0,0,0,0,0,0,0,0,0,-15.801927510611492,-5.101839461871868,0.9260818092008384,0,-0.55140855370802,34.69257572006137,0,0,-5.461005467893925,-0.9124456439228736,9.651666121695943,0,2.6979587859640883,0,11.363308667799025,0,0,0,0,4.1408023781271135,-4.996077810235028,7.157160554559875,0,0,-10.213625,-1.1148152759868264,5.91210516033554,0,0,0,0,0,0,0,0,0,-1.0329993943217468,-6.119034984103365,6.862610452407497,0,-10.213625,-5.1000000000000005,10.204629513560386,0,-10.213625,-4.817438592453531,5.3761619864053385,0,0,0,0,0,0.775679101091799,0,0,0,-0.6264792391874289,0,0,0,0,0,0,0,-1.5183374913693364,0,0,0,23.27296424722421,41.963452169272614,-0.20903791570601188,27.901125845952812,13.292334761918944,45.02440844541322,4.475811347588339,26.369225057148526,19.433959467191535,45.50875779613951,-16.326516302783425,20.449040914098806,-0.8895444535706907,42.99074205847818,0.10587561497454873,7.857988540521051,8.984052670494773,43.05853682731725,-9.33139019224868,19.369682164030728,4.4750836993582315,37.556188076273266,0,8.297682867517853,-22.634520595374735,46.51547077777483,-7.25086480855312,7.533527587049804,0.8547777009971869,42.95155001487085,-7.7165569785288195,0,-6.856209006547624,-10.149164805044217,0.6154482371733403,-4.343488999328889,-6.164921669607065,-5.34178111140462,-5.227112826634733,-1.0505838768156086,17.2865721934269,-4.51598635539533,-8.942920641227444,-2.751107737542867,-6.756925439243032,-9.259871030413139,-4.414815104718932,-2.079302065247229,-37.97017145990434,-8.235230584333623,-5.8928733715687205,-0.3328988958139426,-2.2790009254425123,-10.73147039776763,-25.826829439073897,-0.08973218151283885,10.429613964359879,-6.678068295886706,-5.840569168383782,-3.6998251197693137,7.147988129660963,-4.9029947297388645,-1.38716840114285,-1.0952969431336357,4.940233127625138,37.85852763455635,-1.941829046519009,2.78947531717314,13.913900680991038,6.706495089687746,0.0335076719356473,5.0758040940396745,4.8135375832467755,4.521908106475199,-5.06427001400584,-1.8868301427363008,-5.06118914676561,-3.7095997235174387,-10.671988353655086,-1.8606809303958627,6.740388757849685,15.76642771430884,-14.096184599074675,-2.603610380935774,-28.173133788095882,-3.14335461051098,-6.401418363414983,5.529482935427525,-2.953333277545612,0.4066416201114627,-14.872405660192053,3.821021817303324,5.53390167178915,-4.169354040467119,-8.678836991796096,-3.523199641295852,-9.856431239340369,-4.773843842692642,-2.047899815335919,-4.879715546156178,-0.8778554276056836,-5.10125736422965,-0.8111027932839087,-1.0027048096717617,1.6500271440774286,-6.596472872282813,-3.526859224699436,-0.8676117842598647,-0.31315971088879274,-4.6202565444092425,-3.022087939327644,1.1750095704873795,-4.000896608105856,-22.753988411687466,-31.362537371076417,0.5611725820426765,-3.339499931090999,-5.117227828125,-2.9061858635999154,-2.3023845155928178,-5.157375,-4.91417381275895,-4.1000000000000005,0.4688720458530422,-3.238307551722887,-4.8234395591661325,-3.124001148654145,-0.13107710358090982,7.65520632019448,26.68979354707239,-9.888495858344307,9.118253314914153,20.233253397668868,38.51555095313883,-4.933071246199628,8.005234114614888,1.5244247130568291,4.119785537684753,-12.793896348785054,6.537226056459782,-43.22049976462534,6.18167689352952,-6.023186541602223,0.16634989944156955,5.230217233180342,36.00919049497095,-3.6588086554258035,3.9677841626565753,4.914126972039345,11.781729877155058,-14.938033606614491,1.4504777481253146,4.952295877578468,18.10300157975672,-10.518029831038767,1.9683493997621042,-57.726863649021126,1.423713576734111,0.861487543108988,1.0326790095005265,-5.843984323521564,-39.83150454811492,-7.369365764854539,0.6056236176608258,-51.988376268618055,-5.100512767011525,-21.096230279434568,0.710870804835687,9.21707381993493,-15.990699196009498,-5.823462214978808,-2.7989971203264066,-5.004962567150177,-5.112677422317603,-1.7392584417974981,1.0400027088699957,-1.9754149841113953,-30.341972644896853,-9.792310875511397,0.12467211411599048,-31.487635479035156,-4.452056091124476,-3.0734271326361142,-5.6171225056701335,-7.744782243956202,-5.1000000000000005,-4.1000000000000005,1.2205492936786118,-0.5863693590759914,-9.265425654670835,-23.99342785541411,0,-16.02713291499497,27.66207113134331,-36.87408579503883,0.5113903390411313,-1.4459383650917075,-3.1179418685024762,-13.933641172945862,-0.9248879107230867,-4.019255304975283,-3.427764098165324,-13.221814087028168,-1.5341213818954857,-1.0295700217232504,4.352414485857125,-4.965426786077316,0.27674649887234654,16.53183520066904,10.124983569487334,-10.115667832540307,1.5782869519652016,12.88717135420995,7.132528657853987,-4.106961584727638,-0.7539903467965478,-4.668799900268699,-0.517201541675125,-7.796988093001657,-2.5897986180890396,3.7731962913815043,0,0,0,-2.390188520426004,-7.664450632140737,-14.12467605839012,8.433831669299137,-3.506019631132326,-5.012482237266004,0.006253005211428797,-1.6379913141982432,-5.455610527292679,-12.176778728504086,-4.678712149432641,-2.7196249481666097,-4.168016516792883,-9.553548477859469,-6.946677824379627,1.3871196654974232,21.601793377737,-2.2846680420950043,-3.3183846467118303,0,-5.955724044045437,-5.111273167479013,-4.1000000000000005,-1.174340285673095,-0.45783585905018476,-5.1098533954261125,-4.1000000000000005,2.181039295032575,-0.5446924086965119,-5.157695024242857,-3.7632279034366714,-0.1779580647717215,-2.683811937869909,41.35329813204501,0,0,-6.101165147148689,45.06689024462676,-0.8677494694169327,0,-0.9037129216351638,45.09922885165474,0,0,-3.5291027025591184,14.288138063826647,0,0,-0.5497416173664254,47.04396276040351,0,0,2.9260491972860088,0,0,0,1.0830386722978493,0,0,0,2.436670902278282,0,0,0,-1.027572909123292,-1.7279590147291168,-0.5981254855351551,0.5564367566011902,-0.39480916711143116,-3.6402534526460912,-1.1341288475774547,2.1349949953777942,-0.4496117917673029,-4.273658560613058,-0.2612270692766018,0.31882056032729056,-1.043512336646178,-5.10124916678366,-0.25602346536399667,0,-10.213625,-5.091178385834375,-4.1000000000000005,-0.045342739237133806,-1.0757796700135545,-5.1000000000000005,-2.8310825345488295,0.6765395735014073,0.07819741586358386,0,0,0,1.3054320466397593,0,0,0,-6.106783727727344,25.233070617287094,0,0.27177256064886024,-0.9592582984986902,-1.1824680942086707,-1.345245516101245,0,-3.714570172939649,5.091651600231415,0.022426997494350332,0,-58.87082722712844,0,0,0,-0.695894023344478,3.3245152999577137,0,0,1.3188491008236527,0,0,0,-5.940340442677667,2.158981595529835,0,3.322997367606386,0,0,0,0,2.398895258088577,0,0,0,-6.1000000000000005,-5.118509855831002,-30.67046053722269,-0.04333191806564102,0,0,0,0,-1.1095130314819204,0,0,0,-1.0321219595393525,-3.5899311693558986,-1.4095124740766047,0,0,0,0,0,-0.9357376456801894,0,0,0,0,0,0,0,-2.418772389454298,29.410733404891783,0,0.2708379184190458,-0.11594423182897824,11.865951088217331,0,0,-1.1069417329010756,-0.5506234029737586,-3.3643389405409283,0.6923657200384387,-0.4426933054793158,-0.10037885888874121,-2.4797319248166017,0,-1.074229760729688,12.967044323123377,-4.101200535379518,-0.5074511230996925,1.4734303220341596,0,0,0,0.12011354576209606,0,0,0,0,0,0,0,-6.100716380446936,-4.436924927329778,-5.775884129627222,1.0269292752690458,-6.268368179187662,-5.1000000000000005,-2.3869613903464977,-0.422401632227425,0,0,0,0,24.168555370440906,0,0,0,-7.801098421091352,-2.3385075150465524,0.023328727284877004,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6516939269365305,23.713820918359403,0,0,-0.9948681577548021,-0.14391210609210012,0,0,2.070018925386477,0,0,0,1.7497828206632144,0,0,0,1.1970647114730786,0,0,0,-10.213625,-0.5403301234257197,-4.1000000000000005,-0.06619691973391188,0,0,0,0,0,0,0,0,-5.735082945678258,-2.4027851425964846,0.5004701512662599,0,0,0,0,0,2.295739779287552,0,0,0,0,0,0,0,0.06566495166617145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37.869663439190404,31.77040809692772,45.96628473217361,22.854370905081602,27.152424958666668,43.73569001557362,27.320922321118488,20.848543336112463,17.73027196500479,28.942018231208326,47.2202564294612,17.228962260731173,9.684508903004344,40.81798148174696,4.736859346931808,11.330040127554435,-1.6755674046649718,22.16331615694055,44.52047127783494,22.96370076338072,5.911736830104877,21.559794510142925,37.88504226237632,4.317024119223362,3.8029634598693574,24.072587241627513,12.588416762225382,10.315582818806263,-2.5986431893167286,26.77668334826376,10.976796425811855,3.0043959475600612,30.87499781601557,-13.176385736446791,44.52092055087774,27.187488611586105,7.223622708648459,-10.387043814778345,48.39447155265355,10.979515312725594,9.054573138065768,-7.016675796692951,43.535288328183135,3.4150005552299922,15.960442810686335,-10.739916557950687,25.665414508325796,5.2962081068613385,-0.8194946220691937,-12.84775061470313,40.66534468481563,9.556002729302584,0.07826904510569443,-0.7559648715170759,43.57867554848642,0,-0.7712462708602029,-5.1000000000000005,48.3774985331137,0,21.137503868165624,-29.55652859204835,0,6.35433884472047,19.539565563310145,38.98491388375394,3.269482592354378,5.3134891810773635,-46.00152633845571,-1.170313140351029,5.8286092587945255,-0.6397718099255545,21.137876180495777,13.486325690167552,3.1276551760760047,0.923804208146838,2.942217593381058,0.9833921015518261,2.6861967829077464,3.9200729001548447,-25.103505379726954,9.900205916962063,3.4285602023222213,5.177298381654476,-5.213991416465147,-1.2673653141394534,2.427892098624795,0.9857654655755783,-10.77786946613199,2.1635634388679583,3.5796161980225443,3.10591034010113,-2.505144009195902,0.6493063694821224,4.463474918541326,0.8822008735973201,-6.162100279504115,-13.145003044063753,4.501519145335863,-0.06033489507404377,-2.2252149992486214,-26.426223707777126,2.287863003581842,0.668770896105085,0.1133770737980484,-5.107033346839082,4.954842912032773,-0.7509868608656407,-3.328899768507056,-5.106406399691629,3.6046639788975634,0,-29.269968104079386,-18.420755371012277,3.328090993370238,-3.119533344055486,-4.8165076535651234,-7.979639837764372,0.7980193608949815,-1.5693298914268803,-2.814643448383151,-41.2006137438196,2.966902552756191,0.9038716422208958,-6.024275147400532,-4.492496701146459,0,-0.1,7.2875658788787785,25.461899102124267,19.058116997691585,13.822426559651403,18.82295938067458,19.33174246250715,41.91780417176465,12.535125076288795,0.8297207124455221,14.202888297047153,3.0814810036370575,3.8857984470159277,24.72203587339298,14.472541966171814,2.4231715149698476,7.667015964257582,2.8273791932617414,20.70386567873826,10.15502858779287,10.970353585819742,5.560853609308245,21.382629137111877,4.33405562107211,2.9838341206064007,-20.477593643291954,20.277842788790736,1.9817990074543481,4.670395968208096,32.03427882506423,10.212964220530395,3.374308322091912,1.9030600560818138,-22.249910410338494,-11.749447381430778,36.90586076929491,0,-0.7243736834880754,-10.401120153930748,5.632202542796509,0.22901145050565305,3.2195466029910413,-8.846581615113905,5.8161874906129984,0.5853768516751305,-0.5595984890052592,-5.100740310798248,6.29975248550447,0,-4.527883679009619,-5.1000000000000005,8.564927212837743,0,-2.5354392538688844,-46.831174245324796,4.171593672677334,0,-2.7121065850118438,-4.285628793846118,0,0,-2.3309193815151197,-2.234397094346615,0,0,12.413784907499473,36.789416507531186,4.1035626638182405,7.078853804865072,-0.269924563502534,15.5849755011485,4.044415106103276,0.7349152784094211,18.00411532050217,4.412878981021936,4.461976956283618,4.396689839475057,-0.39378586118603087,1.857037882970223,4.065635691264209,2.7621509381121605,2.674722253005491,3.2261808354442625,2.2312413265500894,3.048662190443605,22.454026487543278,19.036586735180066,0.6652424748766874,3.662622477723852,18.725962876419658,0,18.423133324379577,0,-10.708066500333022,0.7661316380435181,4.159683344960228,0.3969358945472937,9.368767843682242,-25.987330457640205,5.853337246226363,2.947385058421526,-0.8139132616573331,-11.221539777600414,7.05367866803367,0.004108513762988886,13.823764079309495,-22.35112065084903,0.250981464406427,2.979534551428777,11.425278914175685,-5.1168605110631376,0.9827698882157423,6.738309684896563,16.836770257452205,-10.40727284002648,0.9366023736386715,1.5807545635766518,-0.16964397629864583,-50.565869624626814,3.6836405977281306,0,8.223854898617203,0,0,0,-0.18095617481074183,-5.157578575696663,6.110942435061539,0,-1.1103244030802204,39.49129165983026,0,0,-10.068317852751925,6.439819399489327,42.12240004264119,0,-6.08116740377885,34.51081719810828,0,0,-1.1012375,4.715577716781688,0,0,-2.5565130811439314,31.413022743605843,0,0,7.99344289701877,0,0,0,-7.464817246704745,16.470106160542727,0,0,0,0,0,0,-0.35332311571547426,-2.308643099153478,36.19266598624412,0,-0.6513963959777125,-46.12121369730753,19.826238986228603,0,3.8150377093759533,0,0,0,0,0,0,0,2.052206908594802,0,0,0,0,0,4.646400417002602,0,-5.086440739314666,-4.014451826831601,0,0,0,0,0,0,-0.5532883754757834,35.46623875213887,0,0,-1.1010336154008207,-2.069708518739699,6.724097372389613,0,-6.034445200337221,-0.18041953714684517,3.5788057490857277,0,1.705509527213312,0,0,0,-10.213625,2.5189048448984686,0.5797388460432791,0,1.5165345317550627,0,0,0,-0.7336372172708491,-0.10532602467785018,-0.40877871682640393,3.1181311677133046,3.375423126272179,0,-0.0763531637432438,0,9.739521793079714,0,0,0,-5.8708950591318185,-5.1000000000000005,0.8310496899404057,0,-3.6099307982581177,0,0,0,0,0,0,0,-6.10155815258171,-5.1000000000000005,3.21342399518805,0,0,0,0,0,-10.213625,-5.120103747111003,0.41328622045086344,0,0,0,0,0,-6.987489341182075,33.94019310824028,0,0,-1.1114764804914739,13.092024632090272,0,0,-1.9903898774893167,5.879733667170245,0,0,12.820693488081893,0,0,0,-4.2423759933643055,13.85268971010794,0,0,7.20909798854089,0,0,0,0,0,0,3.3658375661390254,0.36133655658932673,0,0,0,-0.045418072720119884,-1.7197558004259343,0,0.5806148156747739,-1.4964797198070734,-5.107327329947589,7.988230587625125,0,0,-4.850920337878681,0,-0.033472652548189805,-6.103415121631713,-5.0218551033395045,0,0,0,0,6.859131154340664,0,0,0,0,0,11.478898478205716,0,0,0,0,0,0,0,-0.4771740511071119,34.91856437859066,0,0,-6.0655629392149635,-0.10631743341370888,0.6781580031363179,0,29.620035839752553,0,0,0,1.4807676406804668,0,0,0,0,0,0,0,0,0,0,0,1.4198709804795133,0,0,0,0,0,0,0,-4.252269852030018,-28.21936940627358,-0.25472055662780824,0,0,0,0,0,0,0,1.7032252078124999,0,-1.105903960949053,-5.1000000000000005,1.3930606797134943,0,-4.458573991926137,-4.191589925103611,0.5167932593704503,0,0,0,0,0,7.832699543029522,0,0,0,-6.101242181099547,-10.220488897453738,0.9,-0.10689478590759934,12.949919573658885,43.39275424113315,-10.019314375289012,13.32576661155258,6.5962712506600445,42.77599151200376,-2.0936925226323795,11.358556895222133,6.425113061193895,43.197166844666874,-6.81212821697526,6.694266042142246,4.563129025104774,42.484692628957056,-4.105974837069128,5.578562775077537,22.20514922057756,33.01225237187311,-8.04193541336724,8.985463507214837,6.923695614474576,36.88963816622276,-4.065165230087426,2.123801484746879,-47.81939688158679,39.87226106146855,0,2.543493102301646,-40.01914544105261,21.171401239008606,-0.3833690405196777,0,-4.49971340578141,-7.724840616330896,-15.727863802594644,0.21182746401922434,-55.16371607891715,-6.883408886379579,-5.56874655454229,0.8077843735614041,5.6950751394646035,-10.259052008588412,-7.216111877273701,-3.558019833102435,-2.1141092902984493,-5.256343713736303,-6.300550604090847,-1.4530353878232372,-1.0559526544802798,-5.2572000986140335,-5.226363531102905,3.475369195896821,-54.177656433418136,-9.695789546203397,-35.229160306155414,-2.243598629730469,13.25550153144416,-4.729026693491056,-4.1000000000000005,5.251244179196762,-4.967581394468579,-4.554667826249523,-3.030366173284296,-2.166095975052384,5.116984258116629,38.354347625685,-4.204827135703345,0.7012372404065892,-16.935808519680457,-4.176387335446566,-30.62604386061332,5.966190219928145,3.5555816664012783,3.112249292552365,-41.15068195950481,4.381948504610892,-1.279927966282533,1.2206803163471474,-19.4585635692225,2.8537149081329445,-24.28136164036926,18.102459812880586,-17.525912745512343,1.958647760601435,-4.57875635791024,-1.5709110794209429,-17.5349354296172,5.959526570180861,-2.292590326027516,-1.0274943635506613,-4.163858242231957,0.9813887779793666,0.25549703686353054,-0.2548734225857791,-41.07002982105778,3.3089783466856355,-11.532724709589269,-46.99526450045019,-11.291946640057938,-6.391595403491518,-3.32133164331892,-5.106875818373225,-8.17475355421882,-0.18344145399701445,-6.1000000000000005,-9.690000000000001,-4.1000000000000005,1.3753016891399406,-0.7802263068001227,-5.111622373839344,-4.1000000000000005,-0.8338383557376949,-3.2544306710611512,-4.798421320416299,-7.791245805302211,-0.8423840753505912,7.482537728073224,0,0,-0.4165171470152167,9.938417078581843,0,0,0.36482337395008585,0,0,0,0,-0.6281400600520347,34.0919508293059,-4.827717277721519,1.799959760814301,0.5187201827860596,23.335093675339426,-2.1051875948016314,1.1504295319769964,-4.024148644451028,12.703580274795707,-14.194414393959494,3.2630870891497494,17.006864535085697,10.152744033608776,-19.177505452224665,10.248985942921099,3.034061067679535,28.771142484548005,-33.06876460820909,3.3195389962540003,19.055385831732647,2.5891895822119215,-8.970652933390337,0.9915917970659045,-3.4968238260220263,11.58561648966851,-11.212701744356941,-1.1607032303744127,32.70325644365832,2.1549911466427596,-4.101141114593256,-0.06002037293446283,14.41061185962009,-10.772127144136977,-8.181683074400809,-0.9253873640215363,9.513316228632071,-9.769894223500568,-5.805950888660857,0.4224374675523425,8.909997806412765,-4.7940734473266655,-4.105147951649312,-0.751661430614919,-3.1635706261210146,-5.0417216636370235,-4.101251480823405,-0.1,-0.9578403137865212,-7.513546745013334,-7.8244800082265495,1.824165940118847,-3.135750261817367,-4.452709028677519,0,-0.03737260481191082,-3.3089736971226005,0,0,0,-3.4367637849542083,-4.959440476914582,-7.772309370301638,-0.9196683328364483,-0.34991217285609255,26.69300657194244,-11.042265044587062,-0.9259797012795481,-3.5987774384714206,-3.629286314552563,-7.791045055414662,0.9750865674262448,-0.1360613274034817,-0.1,-4.1000000000000005,8.800853605374673,0.08119623662109993,1.305069264746784,-4.1067907788271185,0.4039654675828501,18.899774353757188,2.553109673932969,0,0,1.891067005408273,0,0,0,6.24886708207873,0,0,-0.027211414979207083,0,0,0,0,-4.2014119722901455,-2.9357047838254418,-8.016992348444287,1.3703867265180423,-6.159953738572371,-5.100487197333738,-4.1000000000000005,0.05644546383637943,10.096043935822744,0,-4.1000000000000005,0.19741021253284857,0,0,0,0,-2.621707334193467,0,0,2.292552755769869,0,0,0,0,0,0,0,0,0,0,0,0,-0.04427509672689478,33.12363400606981,0,0.6147302957102126,-6.03554327376722,20.348694453434963,0,0,-0.6368514479374492,18.793475345891196,0,0,0,0,0,0,-10.213625,31.70158713118936,0,0,-4.33145472766219,0,0,0,1.7636440229889339,0,0,0,0,0,0,0,-4.6385873300613065,-4.9549056803475295,-2.8871133040761503,1.8108004790287524,-0.2564712776995551,-0.6977517503974234,0,0,-0.24239375600746343,-5.102351552171933,-32.50822882580262,0.22687165629131964,0,0,0,0,-0.9447441323859312,0,0,0,0,0,0,0,-1.1110106010061116,-5.090895361463431,0,0,0,0,0,0,-8.770642111157034,17.568734046839197,0,0,-1.0398350524157025,-0.6036580821182298,-4.115321524060691,0.4918638347730278,-10.213625,-0.4280161154947214,-4.106127240446105,1.3065735508324765,0,0,0,0,-7.13197031503794,-0.10082871526587248,-4.106871654011273,0.09941012308022004,0,0,0,0,-6.1000000000000005,2.578670152964122,0,0,1.9455381089712436,0,0,0,-1.1011777277228951,-3.6358256116925443,-4.248978767965593,0,2.2344927349580694,0,0,0,1.6610935359184553,0,0,0,0,0,0,0,-6.1000000000000005,0,0,0,-1.3342150485144035,0,0,0,-10.213625,-5.1068625,0,0,0,0,0,0,-1.035582082519952,18.09444955602241,0,1.0690365977361478,3.1958406550079728,0,0,0,3.4883501181032868,0,0,0,0,0,0,0,24.77255634350434,0,0,0.06966490513867528,2.580790891876495,0,0,0,0,0,0,0,1.7102104637644109,0,0,0,-1.1201361828874747,-4.8280931141600325,-4.1000000000000005,0.29237470814505623,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.6595150132088836,0,0,0,0,0,0,0,0,0,0,0,1.6383958811720634,0,0,0,-6.101661287191443,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1,-5.120676063944798,0,0,1.2632980980909563,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32.222905733753535,37.5700626471686,51.094068635292764,-15.115883962126983,16.86742383720282,31.769199342917737,52.60600694290337,-12.756786409552468,6.111041206340866,36.253465090922084,51.3680991593594,-26.71132034695316,5.400685824805066,12.927934880190426,55.51279909948227,-1.2689028669537337,15.406043630495212,30.167417745350072,34.030278085424435,-19.27696755933616,22.851648028061142,33.26405051212087,19.75994385438485,-13.150001082283568,15.60648868115776,33.86627540857119,13.355118853893783,-9.821363228740708,-0.2364151194476282,44.09103312898132,0,-4.997252608191233,32.81767846526418,-11.211309939508078,51.58873036814059,-14.147676150167781,7.400892799066302,-5.106975,50.669782881222076,-19.668646885169863,26.570737827514776,-6.384525383947551,54.457420933375296,-17.873499487063924,2.411635527329242,-5.988765826274729,51.07515464573625,0,-1.1595158761732671,-8.842621382601536,49.78104611347584,-5.3535893226763065,7.52674301886503,-5.106981305222784,53.28392890376401,-8.418358720824898,0.5408122484141624,-2.3550355159174052,50.41909731705937,-4.538480759918866,0.41783995351922854,-2.632256555320929,47.835430923614496,0,19.438430589165065,28.841216508905237,44.47944867449498,-20.924174078190614,15.89445361928571,24.909910767220936,49.67656332714591,-40.482963496259245,22.1225329084864,19.046474721811624,49.47314168378044,-14.393226695667911,4.267483182190432,0,53.071097750355115,-5.078171033693994,1.093171459758719,6.194804326073612,51.70216013596729,-3.0796359506188615,-1.4374095217176228,11.541296212734894,48.905686483660546,-37.17216262824941,-0.983374909572519,2.473481361923057,51.50641719895332,-9.151850953841395,3.0866195493042508,0,54.38874240615296,0,-1.0290125,-5.10043101725411,45.42301320128519,-12.001180391032827,-0.14507196834993816,-5.84863631752061,53.238585514112735,-12.707863329555146,-3.2402207875460496,-28.955706725444333,52.27467809637764,-4.878460266059511,-0.5574530706411822,-4.899057045357679,41.99392059861608,0,3.4957006065071963,-9.337542160145823,50.45681649352111,-5.1000000000000005,-0.9908537950263557,-5.117267478423898,51.71325944409507,0,-6.37403930123153,0,29.949664759953716,-5.1000000000000005,0.8720779329716986,-9.690624596140637,5.407221623538456,0,14.475627406996434,21.868678247070644,52.43635350973315,-23.865183643004457,10.8819868766755,40.43609584810577,14.733302630842966,-14.395853449539786,8.131578529627626,12.70619386992562,50.09752571183059,-8.504990813666687,10.39216309842132,5.315683338864649,49.35964191961264,-11.510718096310882,9.532464095437463,22.27156100316495,17.862921001575053,-13.186015236730139,-0.04564955834316957,3.8551883535171463,31.665288647123926,0,8.640222260493859,2.1915456496030425,25.361154729468694,-14.407440591784315,21.904661862126446,4.846128742019166,0,-42.99976465536779,-0.8331753530820306,-11.453786026950086,46.4187385442264,-13.359630128061173,-1.028938245905478,-6.219057992184923,51.28879576410593,-5.1000000000000005,0.8308750646313183,-4.816703026650467,45.807901517454546,-12.588283808434134,1.1062956435675826,-8.864258957216746,45.92320811631664,0,-0.645164120504525,-6.645254538627803,48.07504088435684,0,-3.294633083044606,-1.6776659428497958,38.97209460944423,0,-1.1,-5.1000000000000005,37.46057352898921,0,-1.6094845301933112,-5.1172293635556505,10.545339396498221,0,10.778675271499512,28.30981864144823,14.028035700180656,-46.89012055492019,6.503234302485723,9.948676229492808,43.90944371568308,-26.60982606771321,6.664600831776671,13.329754805733558,51.91220836784956,-20.102290550413084,2.34186411910455,-0.05281312753742329,42.035742938184875,-4.7079643094440184,-2.349956422308534,10.506361983740385,49.344620774717306,-12.169870066100959,-1.5117885126313908,2.0518251491756727,26.50871694009451,0,-0.22811140093902696,-1.2729739404196367,34.564194788450315,0,-4.160195837094998,-0.05299384629371956,48.30806393032927,-5.1000000000000005,-3.2007939933059673,-4.1177200789960535,46.786067319089135,0,-1.841841369690406,-5.106598116813731,32.82221265978891,-5.1000000000000005,-0.5865549074630904,-9.391139991509803,19.112443006598753,0,-1.9404868230999912,-4.231684621717359,14.196454666225723,0,1.0917732802632747,-9.123813261208722,5.876252638991552,-9.145160037096495,0.21284402082519488,-5.106221812289541,6.869851432196158,-13.432776814755533,-3.301033049482447,-5.100596127833504,9.544817709793955,-9.689378348430681,-1.0289984710860258,-5.158532623279972,3.7391826167499866,0,-1.1742524465647735,2.691336185770376,50.62305374890799,0,-6.1000000000000005,33.41125393813204,0,0,-10.213625,30.698378889640622,0,0,3.020471206085275,0,0,0,-1.6157942412579664,31.48056113784065,0,0,-3.9248351281201304,0,0,0,-27.95967897847738,0,0,0,0,0,0,0,-10.213625,-4.163807721440621,48.65297320833678,0,-1.0004510858540256,-2.983127845678293,16.401984751971604,0,-1.8090943659620464,-1.8055551209585745,17.4972520141647,0,-1.6554457165830052,-4.827416561974049,10.355206841569654,0,-1.2308361634149125,0,0,0,-1.0536481695021862,-3.21537978375127,0,0,0.09186767408330124,0,0,0,0,0,0,0,-6.479160070402239,22.744107533670924,0,0,-1.1057386292134195,-0.43555511620869364,24.2933965568491,0,-1.1664121030113275,3.2346797275144024,0,0,-10.213625,-0.306360113946184,0,0,0,7.9516092311634,0,0,-6.1059879886459,-0.45157136820446314,0,0,-10.213625,2.1574680076331725,0,0,0,0,0,0,-1.1113845807970353,-5.1000000000000005,10.285747151280336,0,-1.1,-51.06867304026124,10.663503229169834,0,-1.1079289451404113,0,0,-5.101285989702477,0,0,0,0,0,0,0,0,-1.1460139420661588,-5.105319916165252,0,0,0,0,0,0,0,0,4.467381181819569,0,-1.4814354865807227,33.52197434390029,0,0,-10.213625,11.458956680768134,0,0,-10.213625,23.76416150641982,0,0,-10.213625,8.976043172992474,0,0,-11.445637032903896,39.224286077515806,0,0,-7.160107888159445,3.8233039731024756,0,0,-10.1487191237326,3.550834803146672,0,0,0,0,0,0,-1.5739185341659914,-3.1552785240851726,19.153216536153597,0,-2.0112386200387187,-2.92497524535138,50.594762803487846,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1077130369909562,-5.1000000000000005,10.506477383071015,0,0,0,0,0,0,0,0,0,-10.213625,8.3292248812555,0,0,0,0,0,0,0.3509617311260233,0,0,-5.117227828125,-0.4099541742731601,0,0,0,-10.213625,1.214428221734219,0,0,0,0,0,0,-51.37766887689955,0,0,0,-1.0595436084876446,0,0,0,-10.213625,-2.8266107229280033,5.262939325521711,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-3.827871213315678,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.763079962615455,40.986961701982594,-1.397693011767031,-14.515465865129,-5.157375,44.21269156689632,0.376289998365102,-3.239195452183232,-3.760339062977494,28.79157274367366,0,-2.3417140945195754,-0.2705854528976607,44.29288050944145,0,0,2.570199130240832,40.08651211197201,-3.110651740263925,-8.960817504310246,-0.20175306084298958,45.03547622818423,0,0,1.4031537958386253,38.78953737895774,-1.7777302600908196,0,-3.324517832808195,3.835875624287336,-6.985877766423306,-4.930635805561786,-7.598079732425539,-8.266651694789749,-1.8320403458214216,-9.69124410369012,-7.581763642574819,-7.031956039689406,-0.8799546948705174,-9.513487159866168,-2.556444880819021,-2.117751615915319,-1.3571891335659667,-4.736469851566784,-6.623764503170644,-6.288890358420164,-5.378720117690284,-9.208681951967783,-4.3789967597607315,-5.590246584227332,-5.242451732899557,-4.933629682259087,-2.2029059444545225,-4.635916942856919,-3.059556711876243,-5.101109386123239,-6.066637033205078,-6.719169110114972,-7.059917573063453,-9.47259452868722,-6.1000000000000005,-5.1069808289673855,-3.776745294249458,0,-0.023981542627052654,37.75581976439139,0,0,-5.5400893670160265,-5.445278070276083,2.079035016758851,-13.546802009364516,-6.164484685118078,9.582007110804726,-6.435769712930613,-13.767072608179692,-8.29394931787246,-4.215193413633433,-5.412268583668849,-9.63699527255956,9.809849630618206,3.728960304761192,-3.415375964326873,-9.115371590190767,-10.488156517738565,-8.988368203579348,-1.9491378908594346,-9.523691171019204,-4.860814410487082,-0.0746743819200959,-4.100970094960461,-9.690999309776068,-1.7183483263655233,-2.987230042930594,-7.488281230763481,-5.150155928499949,-5.700399169811334,-5.0221776657888695,-4.054611619193374,-5.1000000000000005,-7.758660762576952,-10.073837860233194,-4.337834946362731,-13.821000000000002,-0.39225928805352483,-2.538283161123882,0.49848683809011274,-5.100718640010027,-0.774599757565511,-5.20808603210849,-2.178661490271221,0,-5.157375,-4.046814159200805,0,0,-0.5512215650876401,-5.178476168130911,0.4107987592010076,0,0,0,0,0,0,0,0,0,8.81961396328972,40.01544863283956,-8.952062495715312,-13.282917294638121,1.2678726037914936,38.326496390141884,-0.01955456002066285,0,-5.157375,4.814771690532689,-1.8275761405337834,-4.715696338906457,-3.715139633227742,0.512168658532469,-10.292944697297074,-4.974469855360568,-3.450472113718612,1.430267182151693,-8.561117328970376,-13.61394785331864,-1.8694741139518445,7.5502493445919985,-0.3661900734944055,0,0.6901132433860386,3.8635915513968895,-7.7399147034278375,-4.365730578287352,4.8794888430191605,0,0,0,-8.9733670463353,-9.007830389633916,-8.685522762018795,-9.690000000000001,-2.38492507700937,-3.865567779897547,-3.100270315700361,-5.1000000000000005,-0.7492107271980373,-2.0548382167676897,-3.4378204056928827,0,-0.8478884546935369,-5.020726698448378,0.7256206350647454,0,-0.7907772332377032,-2.8866865410738587,-0.0280779963971981,-5.101361370605234,-0.7188355169252036,-3.4070167696086844,0,0,0,0,0,0,0,0,0,0,-0.3973404237911242,32.24237634711489,-3.26457805056843,-5.110291709579817,-0.1997029468384799,-1.0003167940883881,-2.06199139504213,-5.110427059984708,-0.10595054438967254,1.7575204254440542,0,0,-11.013938430861252,-9.982500792572411,-10.806011101868364,-13.821980046152417,-0.0376528885863846,3.051877246892424,0,0,-5.166783819193293,0,0,0,-6.112606400023434,1.5491695019680705,-41.06988092997859,-5.1000000000000005,0,0,0,0,-0.9926963775473685,-3.174725515257871,0.4376209121511025,-5.1000000000000005,-0.7986982737778643,-5.1068631124597905,0.7156369341394458,0,-0.6081944227766851,-4.3545917768784435,1.122752645695646,0,0.25876859358447035,0,0,0,-0.4499803096671124,-3.5573222287357056,0,0,-0.8450320492452097,-5.1000000000000005,-29.266517000104407,0,0,0,0,0,0,0,0,0,-2.6470097933179777,27.167557085896046,0,0,-1.1,4.25399848242304,0.3969330388282515,0,8.659665329490391,0,0,0,0.6282137874035986,0,0,0,-0.18454670587834787,15.37348060697568,0,0,-10.213625,4.1919644282563855,0,0,-87.75749612131787,2.605426266130764,0,0,-10.213625,4.605640724642681,0,0,-1.3225183160519398,-2.2247894253333342,-0.9390207388321742,-5.1075724331744805,-1.1097802967054642,-3.874271790509207,0,0,-1.1112056863511544,0,0,0,-1.1154594158524023,0,0,0,-1.1109421996410884,-6.262190297623165,-0.07107870314567465,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.101112954315406,3.6246639115873056,-2.2157527495051266,-5.1000000000000005,-6.106892902982601,-0.9481418540017466,0.7180556494534095,0,-10.213625,0.3808290010637218,0,0,0,0,0,0,-10.2193625,27.884456330701404,0,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.1088896671217965,-1.7574681368708516,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.023111672619583,0,0,0,-4.79251823301167,0,0,0,0,0,0,0,-10.642538814696469,3.5359702132031483,-2.879937225978116,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-2.100373338737334,0.5674658732807742,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1111207920392914,0,0,0,0,0,0,0,-10.213625,3.229195358191592,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,2.863928754614201,0,0,-0.8911565411140888,0,0,0,-0.42595405451447266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23.998558286467343,28.895512751181148,42.89082262182058,-30.188956676677424,2.720144350729751,24.69455582712201,3.7702067766847054,-3.682625434535611,4.368199372232265,20.976152858625614,38.27230324445436,-40.46878099079693,-0.615330026418121,35.55817226596888,0,0,12.255872521651272,23.598571812838113,38.3351309171031,-6.6344516917077225,1.0656047424171784,4.912498840999213,36.92411574779256,0,-0.0044949513602144725,29.989559817035605,20.42160210420597,-2.1996917702695646,2.1410651703505454,22.403557142170527,0,0,-1.0233987052194726,-7.602136166844909,44.44354771454792,-17.11497825400177,6.452837612320165,-2.8367017674752466,43.01598002881631,-4.995144756771655,5.978265109443282,0,46.410539252910304,0,-0.17741759506738308,-5.1000000000000005,32.03602666666084,0,-0.3869019541671237,-5.10128687369226,32.13771254339748,-4.863102627091802,10.688786901788143,-7.6664354991606505,17.724446021803914,-16.144507401122684,3.5986317230221694,-2.9584331045898136,32.12285939278046,-5.1000000000000005,1.7864827307480309,-1.6053288133906713,0,0,2.426304513748687,37.5715355657059,0.7185646316364415,-3.40128372694973,2.5690287462275148,8.83152036554894,4.779890253155371,-27.239659430122984,8.098277154901702,3.8862921186509283,5.086523375613504,-24.04972679537052,-5.116244228476162,-2.831929229755981,2.3594013031210066,-7.664113502228268,-0.3904777400187678,-1.699347330879242,3.7435761911002317,-19.32726336099347,-0.8105437487932795,0.41315108759064956,3.9700537197227694,-8.80711418121128,-4.507754495637563,-0.7530317030263347,5.25537489562131,0,0,0,0,0,-5.155854911591984,-6.590185060419567,8.498667206621484,-51.00506009076329,-2.6857561795600144,-4.924545458218405,3.2263140184039947,0,-2.38907287720547,-4.175557973082806,3.6437933078195464,0,-2.4270997577477367,-11.985266560982744,0.5227002694133971,0,34.96423394419081,-4.632194176234721,-0.49082888678568976,-5.116574030614429,-0.30775897696071486,-5.033442004223193,1.708843447855008,0,-3.2583864913415037,-9.69127552619289,1.8723059075667192,-9.710489030585276,-3.3272615386951907,-5.1000000000000005,0,-4.953443073730419,7.514517289407397,7.660866209013223,32.76296053488031,-24.774015157510803,20.01631598213729,26.386935884205357,3.8874409109699517,-48.22252025201028,1.6576769115761878,6.534656146185372,2.5417478115097136,-42.83602372761307,-1.798469667736642,0,0.38502982160617827,0,0.5338498431555272,30.40647232228478,0.22443332850439202,-21.909880535987167,2.2976798333552138,6.281114551574836,0,-8.479736981018245,-6.892663208391222,1.0810791725241549,6.290752271699164,0,0,0,0,0,7.766873363612175,-13.149914527473737,36.347823950832016,-17.36314281203251,2.3871189664489267,-5.1000000000000005,35.46559011160511,0,-3.3662870945140204,-6.267315600058627,4.82920166658795,0,-3.0668258012568774,-4.5848475633383465,0,0,-1.222462099954329,-27.39258246890887,8.051295399758661,-5.1000000000000005,17.8522922488028,-5.1000000000000005,0.9049161930743834,0,21.099447841683837,-15.437905296427255,3.779009499844255,0,-6.707393714489225,-4.883711563377052,0.6929488598286414,-4.882306543242963,23.48512160825011,11.246436915827907,2.8504082807708726,-9.690000000000001,14.714714062524287,6.460630039552094,2.0289800458100955,-19.02296657204208,2.5439277301704704,1.1135581898667273,7.083122926565472,-16.422321040982396,-5.194143332411109,-0.13418153622256065,5.714738546736151,0,4.742521476586609,7.416267214158361,0,-8.638873274380096,13.20103791996393,0,0.5913637161572386,-20.488393294830466,-2.6444355572391745,-0.10345366785609572,1.3980548337034844,0,0,0,0,0,-0.13840247873928557,-4.116510684392871,4.643350714725036,-5.1000000000000005,-0.39413739669665404,-4.874427722569358,1.6666714222791033,0,-3.2029150555135844,-4.8164552867720465,-1.1969176294107364,-4.889854060035005,8.260637899297896,0,0,0,0,0,6.043526740318873,0,-3.620368527929277,-13.557406265634825,-0.30318908054167315,-5.1000000000000005,0,0,0,0,0,0,0,0,-0.08610272248748051,40.32955021789745,0,0,-10.213625,23.677733919099524,0,0,23.849966481865728,0,0,0,-19.213878531635896,0,0,0,-10.213625,8.001886583330748,0,0,0,0,0,0,0,0,0,0,-0.2518022595575605,0.0935792844261171,0,0,-1.5541663596589403,-1.5116135104893935,17.172155562678338,0,0,0,0,0,-1.7704076497518895,0,0,0,0,0,0,0,-0.02398404194762027,-2.535466731948819,0,0,-6.111265757500901,-5.101244123450592,0,0,0,0,0,0,-0.7367815660550723,0,0,0,-10.213625,6.504898808454601,0,0,-10.213625,-0.8778547125508269,0,0,-10.213625,5.603564524026684,0,0,0,0,0,0,-10.213625,5.577797134072207,0,0,-61.20857161948016,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-5.232732535993257,-0.123809715571576,-5.107639949432102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.67179757024658,0,0,0,0,0,0,0,4.32384795879028,0,0,0,0,0,0,0,-2.299970759198256,2.538440573547599,0.7862756545843717,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6140803253472542,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-57.93116358827761,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.3489949743585585,41.67926072381293,-5.2914479915096875,-5.1000000000000005,0.3040832570761578,43.14995526537789,0,0,-5.157375,43.081614850509084,-2.7389523184983218,-5.1019084197041105,-6.1000000000000005,18.069855136059953,0,0,-0.521705034626853,31.689060096818356,0,0,-5.157375,18.936239627248383,0,0,-5.157375,15.21181560064704,0,0,-0.25477370175524583,13.613456225938489,0,0,-9.305759690679018,-3.6630190310263178,-5.211679717274167,-5.1000000000000005,-11.614356773349051,-10.507436121775598,-6.593452303659129,-9.690000000000001,-51.606242023625285,-2.281937860632059,0,0,-0.6965880915122771,-3.8767089662434877,-4.345030414078043,-5.107084760924475,-0.8621335325875541,-1.9015511819154622,-0.10445552344497884,-5.112125329511811,-0.666747083268912,-1.3844310709260854,0,0,-0.591451521480175,-3.7757497417484367,0,0,-4.136431580904711,-5.1000000000000005,-7.79124983561304,-5.100453213031854,-0.8174403666103912,34.145705046012125,0,-5.023694025164357,-6.100357240047308,-4.896929693342494,-7.854183145598297,-5.1000000000000005,-9.417628294493541,32.34966270790447,-7.798562748936806,-9.6968625,-0.9586266429974851,-0.10000687324892454,0,0,3.9200847647487906,1.0283885635522203,0,-9.427563000812189,-4.8088799862928715,-4.438529631526606,-8.100520391416168,-5.1068625,-0.2685404992002338,3.2767754633383266,0,0,0,0,0,0,-3.8019644824203227,-4.731417414319809,-3.922577177986555,-5.1000000000000005,0,0,0,0,0,0,0,0,-0.7216328864111603,-5.1000000000000005,0,0,0,0,0,0,-5.44065016848981,-9.824262500062789,-8.416344186773074,-5.1068625,0,0,0,0,0,0,0,0,7.986239117425612,32.4093470084749,0,0,17.659707340669705,3.462277411704381,0,0,0.4595962253579379,4.612625870727433,-4.100490691902084,-9.557054519348787,-3.3741482427210348,-0.11395022067459314,-4.069095747199386,-5.1000000000000005,25.994123883652694,0,0,0,-2.077549837231293,1.981218923194016,0,0,10.28678944972819,0.07950082038970052,0,0,0,0,0,0,-6.447914152419594,-4.46415108125102,-3.792109384052133,-5.1009920343030295,-0.6873144611528647,-5.1000000000000005,-1.014378159804273,0,-0.6198344743822178,-5.10015261544889,-4.1000000000000005,-5.1000000000000005,0,0,0,0,-2.9552165509118344,-5.1000000000000005,-7.649029600364181,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,-2.3850822952805237,13.855012541638494,0,-5.1000000000000005,-7.925913009180837,-6.981362702435944,-8.082866931886354,-9.526412135146481,-5.013929414770651,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5341956353092979,0,0,0,-0.810587728432492,-4.764521915369381,-4.129113412743196,-5.111615110032306,-0.4179379827153012,-5.2746316287149675,-4.016136319007109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,13.766874724090144,0,0,-1.1,4.434534502569298,0,0,-7.164075786382889,7.055048419744304,0,0,0,0,0,0,-1.1012375,-0.1,0,0,0,0,0,0,0,0,0,0,-10.213625,3.870990042462316,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,2.1249564045371407,0,0,-0.8133210276159428,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,2.9954191840947892,0,0,0,0,0,0,1.8927994280510771,0,0,0,0,0,0,0,2.177339340818246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1161520468750001,0.2873404710771836,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30.547339329144595,36.37583021636915,36.50153857009583,32.95841722307464,14.148687324078907,35.31481893072788,51.01002523217217,25.467476059871,16.77964697754509,39.2486024832454,44.946856928240386,37.44261008003813,10.074493096763815,32.080600083734424,18.420494749643442,13.7237005638883,24.20852214454856,35.92289582038999,52.197167454292334,23.685725645236577,14.271666308955568,22.095664266991708,46.48382941147338,13.857104512676003,-2.0360096885023777,17.562743380317606,44.051699096112635,8.915914273979597,-1.1,6.87845447890491,39.79379336629957,0,17.63114853437396,-11.449214026333356,47.33402265920521,21.785214988440135,16.35458713181671,-5.056449513272549,50.71604486896009,36.377608015485826,2.772825532524973,-7.193118693215588,40.17328442540016,5.9509413983396495,0.3177188315949837,-7.3208707567768005,55.64965641793485,2.9480505936905015,8.46603691423353,-7.2215745874727135,53.10338365837763,15.42701005971555,6.847786878945675,-9.676261687549598,50.68927548621272,8.876590115831718,6.864911816970549,-5.1000000000000005,43.31113114993394,3.0484892031798547,-0.6181564041315015,-5.0887127580483105,43.068317539477974,0,8.017043592555286,27.452066390715874,48.98046941261279,16.473708471144274,-3.688319956871527,11.739738182489921,50.78989069182518,0,-6.407027140681808,14.92884676303593,53.197919842141154,7.4861281815637,-6.1012388921875,6.752304744962876,53.21305482651694,5.832865971671945,-8.431539733529974,12.565143961302484,47.963074057547274,6.730578465348878,-0.8536439278998128,9.56709396525834,51.405136367649156,0,7.39353773012749,12.33255783779246,54.08505688817306,12.803111365791075,-0.7596646007308614,-0.029344050596403073,33.48252868391179,0,-3.818919888875099,-11.659044855723923,52.46217449963435,5.405327648340458,1.3577468018082497,-6.41185427362589,45.99560704021356,0,-0.47639634294124983,-9.276882913518087,50.57652448118722,0.5724449667534172,-1.7557640357804338,-4.488074505100875,54.05622422029005,0,27.816178701445832,-9.778696580580542,46.83399130376401,0,12.317026793560121,-8.790585422367354,40.104318560203644,7.494379359486386,-2.6619121901865284,0,39.13279512305557,0.8599212800186684,0.8053234114969032,-5.1000000000000005,22.51126797052423,2.534409880685791,23.537029356363124,24.867931853067137,45.7844024522023,12.694499061079515,4.016276594043336,24.565863533113607,20.661718338045752,15.277989603476282,3.6594498068978396,17.01104010704886,56.928213305068724,14.132055636631689,-8.879475088679648,13.522314036887117,49.270140055196734,0.8756763058223526,14.098178787664768,20.564658054506797,16.637200555782858,13.883949231494999,3.1748612237178273,15.6907823283663,5.658371597983921,5.222732492615694,0.06403913070296081,5.238190941405959,42.57944561587924,4.620097743976833,-0.7131791456214344,17.862467642976096,5.67864658668659,0,24.593312109309657,-9.30060435027733,46.22712069219443,7.765158492156489,-1.6479140661468992,-20.760615379850595,40.776852911359676,1.6722673035581324,-0.08327974527863075,-5.0502174070691925,51.8928790971006,0,-0.08891550381388433,-4.278844287408276,45.72010296142305,0,2.1766845831374377,-8.236412414599846,38.1806236021305,1.1853994684612852,0.3658016219620004,-8.02312688175203,26.04955254396208,0,-0.6118106784386892,-49.552703526316755,53.094593714142704,1.7694374793211152,-1.0233785115185314,-42.64813964299971,12.159725391957236,0,5.649516787705497,10.78375554592861,50.050786633516644,2.5681414548629413,-7.008116190577711,16.736865590232565,39.58095902251168,1.5686761305265737,-23.824603520363524,0.5724471291445403,44.18469803401544,2.480284276096931,-6.808531903774729,-0.0673507792894651,41.832814446743015,0,-0.3829387255778842,0.6213796967441878,51.56351908575378,1.20075201274088,-1.3367569488066255,4.891776316176712,32.79741454428916,1.6714261757292812,0.7096560590986009,4.034972150462087,54.14974308274426,0,-1.939394038475754,-0.10575999560444034,4.204639959961709,0,-0.07046172862539937,-5.101277647148689,54.449294802735565,0.30409708511385247,-8.229438004127216,0,51.03632503171456,0.21425135854048788,-0.36552468107956826,-4.946743932337228,31.446173958418548,0,-0.1756448563631796,-47.502782693576066,8.806928031379677,0.9040638068354098,-3.14304050695518,-4.364511411559316,55.64524057492655,-0.05258443146103946,-5.661603740275366,-46.195809174318924,15.028537155576812,-0.13132395523370713,-3.6973706926972527,-4.753670206768722,0,-0.16002800815550078,-0.7659178347810235,-5.158236657564129,13.031921151035021,0,-5.797733439777356,42.99189527741112,0,-1.1211334723959672,-1.1,35.627810750185425,0,-1.3857357146034808,-1.174899369086455,37.40301952903116,0,0,-1.0811559855803432,17.339648703601735,0,0,-1.7327391986023684,42.395065388874684,0,0,0.392468994231775,0,20.39839895808574,0,-10.213625,10.064817572913379,0,0,-6.1000000000000005,0,0,0,-1.1112371286284646,-4.741961014869621,43.88379527197788,0,-2.0084539440387523,-0.38823583641876813,0,-0.849848681306363,-10.213625,-4.344056439332044,43.35495839737537,0,-9.152656245743577,-5.106988321414325,0,0,-0.8484159212391664,-31.424245236221395,11.27436267297521,-0.590889205761312,-1.1688618357278011,0,0,0,6.938725376031655,0,0,0,-6.1000000000000005,0,0,0,-0.9551268062761962,29.88593441980595,0,0,-1.111253258605508,-0.9554204451001701,21.371668162407754,-0.572637193075084,-0.2898722545863297,-0.3799811769094387,26.278863872827504,0,-0.8481141662789347,-0.6960114920467277,5.4730349057742105,0,-1.0293485693806255,24.13181657385416,0,0,0.6375211498121743,0,0,0,0,0,0,0,-0.9943877472986018,-0.5650622150090795,0,0,-1.0531060256219893,-28.582008551064053,18.80920317131079,0,-14.76608569097847,-5.100843851781381,5.657487918800628,0,-0.793281337206337,-5.0087660422460285,10.338099445888243,0,-1.1108761504112858,-5.1012434328694125,9.42383217724145,0,0,0,0,-0.10686385017607664,0,0,0,0,0,0,0,0,0,0,0,0,-98.63677452033592,28.866835201065236,5.841226630832156,0,-5.931119923418833,41.52837481947411,0,0,-10.213625,17.872536961349038,0,0,-0.6908477724159292,8.732093369633425,0,0,-4.892741379978787,12.403997538117059,0,0,-2.4197702853983842,3.191016247879914,0,0,2.3938133190827986,0,0,0,0,0,0,0,-0.9594966124975131,-3.7462931509533393,23.35188905068622,0,-10.213625,-34.10333474334869,0,0,-1.1030477870568216,-1.8780016303700984,5.821774580790435,0,-6.901958519883227,-5.1000000000000005,0,0,-1.1133414666659047,-5.10650991715983,21.764361552612044,0,0,0,0,0,0,0,0,0,-0.2010160573354144,-5.1000000000000005,5.436595557059979,0,-0.9291533632079974,13.939207103897905,0,0,-6.1000000000000005,-1.909736327070437,12.088484003156127,0,0,0,0,0,0,0,0,0,-4.630877271219313,5.377546175214061,0,0,0,0,0,0,0,0,0,0,-0.4459133316455294,0,0,0,-6.1001790365750805,-4.907812207453552,0,0,0,0,0,0,-0.5635533062317241,-5.108587412128476,0,0,0,0,0,0,-1.3036763608772788,-5.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.191448273787827,43.46433296851774,-7.157484942433131,28.06337467294267,-0.6366472916467893,44.84116614732615,-3.6122191589005785,8.242719164569962,3.71085002904427,45.724048549483214,-2.309567622728739,5.512372931622622,-5.157375,42.86793085384178,0,0,-0.8523212352515821,39.81709138626017,-3.1087680561181408,5.798012704432971,-0.09466724389392431,35.64473365459493,-4.568899625493995,0,0.37171809570882886,39.18570162618315,-4.1000000000000005,1.7190311343912943,-0.8855404140856005,13.056208899899216,0,0,-17.5571016039367,-15.573797979260489,-11.440565436647343,-11.833858592860093,-10.47200810325964,-8.451813728640584,-8.417059851234376,-7.519224718051052,-12.301859436087344,-12.818953812242023,-12.093137823224122,-11.555600731262176,-0.31101099976193125,-20.871861814649787,-11.072522704954066,-11.022709351385233,-11.970857736205552,-11.168561838311136,-11.321718060080235,-11.134835110443994,-50.020690587089035,-40.26929779498984,-15.314624375493814,-14.904324877707003,-8.847330628700567,-8.554696627001217,-14.406490909264818,-8.857239518190976,-4.596391771378659,-5.1000000000000005,-4.84670913320943,-4.888978970231485,-3.346891479290148,38.35361795380275,0,0,-10.354138467274653,-9.011554700639852,-14.219217206383036,-5.033669868230905,-8.578217986665724,4.009396700615943,-36.26191243192556,-7.7236862205272505,-9.553221852200654,-8.76400926731302,-11.112666615828878,-8.171464283601933,-1.127212111768029,7.541732046924326,-11.636145086169012,-1.265217232468509,-5.236634039979222,-4.581633714491474,-16.909248615465902,-5.5184814585418795,-9.157985749869772,1.359834229941971,-7.791247832795349,-3.8764291647318556,-6.103618260895204,-6.185766554531597,-8.910262679632897,-6.6320661206991485,-8.946548115619718,-10.539723940240545,-7.805441906778059,-8.357651102615696,-5.595172592263374,-9.650643470973232,-0.8759267994308919,-3.389589123664532,-5.550834029162798,-9.135096715044131,-5.184994700132515,-5.531912163553722,-1.9390974636951794,-9.403879863006992,-3.584300143940599,-1.9455534266587182,-5.329588517689454,-6.316513428689765,-6.898712942390843,-4.253485299654091,-0.3224516174548326,-5.654449000595331,-4.1000000000000005,-0.35947342889581996,0,0,0,0,-0.6904218862702107,-5.1000000000000005,-3.626859644768181,0,-0.9169065348335329,35.22914988448901,-11.264752979425069,1.2233878736529276,2.249266662510016,28.89821566600177,-3.822528429904315,1.6775892917685213,1.1247013373064794,18.319610822502607,-7.34833821083053,0.9129005507597564,-7.096717663434693,0.5622878998577143,-4.101134438558697,-2.2603150633939193,-7.080828954380744,20.022804576031028,-2.497014250886826,1.9389193782037009,-2.1509536231148476,25.40876125494649,-3.173663874212825,0,10.820377089846353,7.340826721991299,-3.2418232075264117,1.6494174421424805,-3.3566809853823276,-0.019452823632480437,-7.791244457570813,-2.1468436672837603,-6.193062331076953,-7.261683573576844,-10.779158222917296,-5.62166310070249,-4.46790988560742,-8.189632838203993,-10.026262616397405,-5.041761713813132,-51.90044787760229,-5.121946325075214,-7.024964304788207,-4.356624091032667,1.6016006297228067,-5.1012422972614155,-2.2067335159918664,-0.10079420982949412,17.720314685692134,-2.5067343522348224,-4.1000000000000005,-0.8982316132559207,-1.1058963144920966,-4.967500160100069,-3.9807083260445646,0,-1.0477984180307953,-9.586423652430678,-4.100609584672311,-1.9021349693514473,0,0,0,0,-4.846830865081662,34.462871957870334,-3.2030736103279667,0,-5.524662715773195,-6.139267715664512,-7.796869222088975,-5.673260914258729,8.878588291210804,-6.185229909942954,-14.107380184687727,-3.205706628193284,-1.7562299029863444,0.055181691083350914,-7.017259482001704,-1.6474503491526278,-1.4414307143024483,2.501293718235054,-3.876394836478289,-0.08478700283512569,-0.6391614814005556,-0.7408048732466745,-41.069815297048684,-0.45137746704010906,0,0,0,0,0,0,0,0,-6.005999260909309,-4.400009448203835,0,0,0,0,0,0,-0.7642178730572488,-5.1075155716743055,-4.1000000000000005,-0.3608270544408907,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.7480364739048396,-5.157375,-4.1000000000000005,-0.10106971531559748,-0.6971834999661654,33.384391219933924,-2.1645124735009564,0,-4.847797687573212,0,0,0,-10.213625,12.914363180350533,0,-0.6076406300909264,0,0,0,0,-5.414421487170077,7.25789650480284,0,-0.10623927778404987,-10.213625,0,-3.432190134214045,0,-6.1000000000000005,8.914359534821628,0,0,-0.7708063292134233,0,0,0,-9.541515394352695,-22.501535137635027,-7.401075341898732,-8.591038742205242,-1.0762732608967198,-4.37016269119627,-0.2720186508423545,-0.10610496155962035,-5.955665715953575,-48.267395618799334,0,0,-10.213625,-5.101259685834299,0,0,-5.7659558071775425,-34.900182594185914,-0.4885758349196365,0,-1.1490268550036207,0,0,0,-10.213625,-2.1952801666471675,0,0,0,0,0,0,-1.089197082389008,18.121587869173553,0,0,-0.8916591775781483,-0.5718708634689954,-2.1100709335211705,-1.0619813438744257,-0.5464296152721655,0,0,0,-10.213625,-1.028037126674391,0,0,-5.801910970837792,0,0,0,1.4993308791445488,0,0,0,0.05249975587594396,0,0,0,0,0,0,0,-1.1469498795667028,0,0,-0.10661978621129596,0.25800399445960703,0,0,0,0,0,0,0,-0.5120828418156363,-5.116960069817595,0,0,-1.2199694432352415,-4.793116358833816,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1,37.93275342739957,0,0,-6.101242287903901,6.373866261103084,0,0,-3.3878612039123426,0,0,0,0,0,0,0,-10.213625,2.6512136996506532,0,0,0,0,0,0,0,0,0,0,-0.65221470477937,0,0,0,-6.094967396198007,-3.9440441383240854,0,0,0.29178391596942016,0,0,0,0,0,0,0,-0.468351523525231,0,0,0,0,0,0,0,-0.7779678099462306,0,0,0,0,0,0,0,0,0,0,0,-0.8214698984268097,2.566006829328181,0,0,0,0,0,0,-1.0773544680400886,0,0,0,0,0,0,0,-10.213625,3.0809559954153665,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22.404025462476273,24.57795302617175,34.50790219572269,10.88387588328822,2.8554850494093325,38.61496199477979,19.467076771804297,6.395774068887315,9.531405064863872,47.88309536345907,16.83819778276357,7.5729197062324864,-2.418310250812215,35.88854829459634,43.37754893105847,2.049415943393878,-0.4838441349407301,29.84890103255019,13.65789223987721,2.371694741234612,-0.9584601727939339,0,45.20286369257434,1.8945221764808187,-5.868381451114084,29.14279041745117,0,0.9462563536823085,-3.1739081066660573,27.968319398946036,0,0,-3.3340994839368165,-7.361574154851288,48.5398881536489,0,2.4115185307746376,-9.02237393113155,42.65937949854188,0,-0.9188541459356303,-4.095471406472936,46.70316498909947,-0.119393498529933,-0.26395193878872053,-5.00196508796889,36.0262337179439,0,-2.8682136841366983,-6.523526688296391,34.321852778015725,3.1426764127470714,0,0,37.078263709280826,0.9931854945071804,-6.1000000000000005,-4.899490401425741,14.57437624736508,0,-50.441500655234314,-3.6468332491099584,0,0,0.6560456069806376,35.62124973420782,7.459161707698296,1.4975744627486443,-2.359915736662057,-1.6666896507762199,-2.799708200992983,1.0473077252849519,-34.95958805579853,3.4972143685600803,4.988510512804641,0.825513772480375,-2.83467221517276,-0.2517196733770024,1.1736664426062682,0.15192870133990416,34.31568389139665,8.222955196352554,0.931661805449956,1.3457410226464772,-2.1440772376452633,-0.13344615534981052,1.444354435893585,-2.373539774309271,-1.1301460080916153,0.12111878231108916,4.770759887600816,2.2596512518112726,-6.1001119793855985,-1.1238269325580188,0.0763336574774046,0,1.120373461599953,-8.100617617372041,2.800134205770948,-0.06952313910963712,0.5097041850000181,-5.106551262325757,1.9022397968581348,-0.5210311966832474,-0.8900876903951412,-5.1011061922264975,2.6135558348649326,0,-0.8168569119301741,-5.1000000000000005,1.3181621732578366,0,26.236707223416904,-2.418841701838547,5.125078000771207,0.02771531531967456,0,0,0,0,21.211153477378744,-12.923392319293924,0.48289596922064587,-0.10839602721037796,0,0,0,0,15.067319862263938,18.87619681652758,11.861127442780228,3.301345963509498,-1.8555574713460312,32.89065175259042,0,0,-26.533924780396504,14.101540033062593,1.4312372240791034,3.797003973596342,-51.25051954443869,-0.7370118293366292,6.226113546662767,-2.0175519958373207,-15.132794860145045,21.92021459594018,2.0537384486322665,1.6409192304094349,10.19009883220063,5.8065052135426285,0.49454004654418837,0,30.736018293693117,6.160000053070168,6.813269304081011,3.779155268812068,-2.361411561380498,0.38883578319558315,2.1645793073155346,0,-3.754138410435469,-5.086435513418117,35.75986053832317,0.5960344940192932,1.3030397039972408,-35.588106152502114,29.419252674914503,0.8379516560106153,-3.479418371894107,-3.5363298252700215,5.450380972770885,-0.1552498252454584,-0.006820229144096246,-5.094357049609039,4.4941329803353405,0,13.666496045102255,-9.158772429800017,2.063663434471681,2.5913610980605926,-5.747392044053274,-5.101865277258788,1.8217141374123706,0,14.661987599400128,-5.023250667239715,0.8991163393541938,-0.1,0,0,0,0,3.546071725787942,36.16787034137015,2.192894656976771,0,-21.32673047834473,-0.30783519456860664,0.8855606393225983,-1.153490296072357,35.291872540275975,0.18838850988785893,25.419868999696952,0,-9.301629946110765,-2.319352885484205,1.758397615511471,0,-11.594720593555122,-0.5969761580916503,5.582999697763857,0.44924961509903594,-2.5116429801311844,-0.013329413626359822,2.043439800372194,0,16.161270199082878,-0.05199960256297527,0.8417307145249122,0.4105901202100185,6.186558307449113,0,8.992134096157791,-0.1,-5.157375,-5.10210791470094,-1.491463109725156,-1.3483214477065526,-2.2223195113065577,-5.123823277602749,4.560287787579247,-0.21054633747419413,-3.9091880870741167,-50.932942934895095,0,0,5.973216168360239,0,0.9531416545365494,-0.0516587767138442,3.367333874904235,0,1.3579193481746576,0,0,0,0,0,3.137888835984889,0,1.7091819467928622,0,15.440804349382162,-5.15743048518994,0.4779066190594834,-0.35132430332010656,-7.934125473239775,33.62540524564156,0,0,-2.4540009746925295,15.417497598692922,0,0,0,12.995674384363424,0,0,-10.213625,3.5539377047816423,0,0,-2.0605564328439305,7.866913583065145,0,0,-6.116024556458516,4.202447475228098,0,-8.608055917598321,-0.5229677673981866,0,0,0,0,0,0,0,-1.6897326410283253,-5.288107357041292,47.570360876578555,0,-0.8113016287796566,-2.5626550357024747,0,0,-1.1950533566221848,-4.736700277242361,5.049472679737691,0,-0.6896405404041326,0,0,0,0,0,0,0,-1.0445736146905695,0,0,0,-10.213625,-4.818256877775497,0,0,0,0,0,0,-1.1789803879432423,37.49507236259862,0,0,-0.5410390608062331,-0.6898457087983467,0.274383144911209,0,0,0,0,0,0,0,0,0,-6.101650679905391,5.352721603275021,0,0,0,0,0,0,-6.109528536761194,0,0,0,-1.7693071265770621,0,0,0,-1.025285217085247,-3.316529506435453,-0.03267851145168752,-0.20370524296951534,-59.20684610526831,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.238631169005121,20.607147375894954,0,0,0,0,0,0,-5.1683821169320066,2.4806997104377047,0,0,0.5183849416408141,0,0,0,3.2162756870163527,0,0,0,0,0,0,0,1.866166920753283,0,0,0,0,0,0,0,-0.6189752765870731,-4.726704272752512,42.30000682757559,0,-10.213625,-5.1000000000000005,4.392054061154769,0,-0.45948801825390206,-5.111599322948001,0,0,0,0,0,0,-5.096776319928655,-3.481910811320559,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,4.982286552487656,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,0.3939167396077166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.4194343095499904,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0563096495176925,0,0,0,4.168757618705195,38.045208287702884,-3.0328086647257546,1.8951276610509311,-3.5086639084791775,37.07252043123638,0,1.1899974810655416,0.8739877973593315,37.45518141506093,-0.22615129800923414,0,-1.0335365682856879,25.080908743832673,0,0,-4.434744844718468,23.56110103294479,0,0,-5.084122019639979,23.641744038607058,-2.8333336426099036,0,-2.103074020998555,15.884774089462615,0,0,0.9854712917444504,0,-7.790321162015884,-1.375893532059634,-14.18747881626215,-8.544491441066775,-38.2196914633931,-7.524920128922759,-0.5349423352081146,-1.133229535464826,-2.913918815707339,0,-0.705559522285467,-3.783679759498005,0,0,-60.954553740598264,-5.1000000000000005,-9.64276631339401,-5.056153712333711,-52.29876255639387,-3.6020277082115686,-4.101765394911971,-1.997993565468276,-58.237620006275485,-3.009674368161323,0,0,-2.9138971895480106,-7.842214875933137,-3.7102568552724655,-2.8430803616214453,-6.3842198799179135,-5.112040039568741,-4.101244389723017,-4.742838696775013,-4.186279666937816,33.24210267041345,0,0,-5.731999611035026,-2.8253381231857224,-7.806100176933667,-5.6819288776716865,-0.5421444479405231,-2.4415566664748334,-11.120053131091518,-1.9659108686458704,-1.7179875700373053,-2.343221872088173,-4.1000000000000005,-1.4942549719020364,13.460794780373778,0.8972144748789972,0,0,-1.34199699287289,-3.0722991341600734,-4.1000000000000005,-1.2868498723144253,2.7885010787280997,-0.48518881315020457,-11.111669265589027,-0.3151378650006386,-6.1000000000000005,-5.357805278991909,-7.790000000000001,-3.826115396447393,-0.7095187781973935,-7.302517259252025,-8.267123305559686,-2.2043850486918823,0,0,0,0,-0.8112490143280624,-9.672662784332777,-4.1000000000000005,-0.10142152245244299,-0.9699137655398848,-52.10066451846865,0,0,-0.5530912991326712,-2.13112559284238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.3833646944464442,32.02678334365226,-22.41868361320353,0,-5.181212459465439,21.94653564781009,0,0,18.40904928367545,1.6220087135299912,-4.1000000000000005,1.2970358942811573,12.744731781584505,0,-4.1000000000000005,0.24481643674378498,-6.1065071205991694,10.106638847972384,0,0,-2.544874394514593,3.881526759833701,0,0,0,0,0,0,0,0,0,0,-1.055652180606381,-4.598240408002089,-3.0496478380096352,0,0,0,0,0,-5.720423319735382,0,0,0,-0.9525823714742888,-5.1000000000000005,0,0,-3.6692239649472507,-4.689529725949908,-4.120556749027215,0,-0.7723758389604053,-51.0069136364695,-4.1000000000000005,-0.10115892323609554,0,0,0,0,0,0,0,0,-5.119036113868107,3.899002095993245,0,0,-0.3844424343712561,8.152058387019217,-10.92805370045329,-0.10103103343919417,-0.36595158602438094,2.9586564941642357,0,0,-1.1561494205491156,-1.0269069385944232,-4.101243058948375,-0.272522423294095,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.49614966638227564,-5.116178130600844,-7.7912497921648685,-0.45124806477054474,0,0,0,0,0,0,0,0,0,0,0,0,-0.5847036959666013,-5.1000000000000005,-4.1000000000000005,1.3916282720738395,-1.2257486107876048,10.483223873915048,0,-0.1053797041640705,-10.213625,3.8717625296225915,0,0,7.003284478680271,0,0,-0.9743397107246964,0,0,0,0,-10.213625,-0.01019414406865763,-4.1068754395211045,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,0,-0.862647723384071,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6490053600217547,0,0,0,-7.683184090263734,0,0,0,0,0,0,0,0,0,0,0,-13.862764050592657,9.433899583122692,0,0,-0.7890708372265817,-0.9344379739643378,0,0,0,0,0,0,0,0,0,0,-10.213625,1.2144394814865453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.8613956200868664,-4.148720651370219,0,0,-0.5050665166498479,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.8440885324164888,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.6333581411747113,-0.45547658342596054,-4.1000000000000005,0,-6.1000000000000005,3.1453026950052654,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.507546516717248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21.365799863862794,28.49993344221168,42.31044581389764,-17.96847105172346,6.075849480182011,33.23719485132558,21.58303709025179,-9.449712292023527,2.478818085750037,40.82889757419723,13.359952035540733,-5.774188514900988,0,44.57232578124721,0,0,12.926976914043017,32.93959162300115,11.642552363224087,-9.283981810494708,5.606830699140007,32.029624344927676,4.704981795727653,-7.725096898524462,0.3689028487403633,0,45.952824755511486,-3.8565663277760303,-0.42483530219416465,23.93545676675836,0,-4.117733867536118,5.632119765161824,-3.6347444575263044,55.62425935558183,-12.494393480753457,-3.286898745606291,-5.105903671411755,49.748485889213825,-8.521603525611994,12.190739163636573,-4.7841907499524545,45.500257138913305,-10.870266670701865,-0.35960854472738774,0,39.669195184848235,-5.1000000000000005,4.390106164446383,-8.264969320016935,48.78367714967383,-9.717524869404617,0.6889696117028254,0,40.83729964676511,-51.25916347076489,-0.850276672346389,-0.4408167775799058,45.03438896656084,0,-0.02018715486699807,-4.891128091377906,14.564294996317786,-4.611922109978409,13.275321666834095,25.554601572860427,0,-9.3179597390046,-0.5884275137519861,4.318168960963123,55.346251596928646,-5.1000000000000005,-12.12782910352851,33.92509711663571,47.60910087449019,0,1.8059383756257645,-0.06035785611197016,38.54147905066573,0,3.5510658978148593,-1.2393610530303476,41.58184112862871,-12.930168357382874,-0.8832687748359096,1.678915786248036,31.986087727800008,-9.00819755847779,3.5752084438097738,9.20823118018585,43.02311126247326,0,1.9378642303625986,-0.10986410889660057,18.904370301205677,-5.059123514556868,3.1164809643515894,-1.3211494602039537,52.390370301100546,0,-6.1000000000000005,-4.676664026760894,44.67669862645202,0,-0.2024279916063117,-5.10090359619554,55.554272229119576,0,-0.18667147948902213,-5.1202641838359035,24.304017101805375,0,-0.23615392869853782,-8.42215938615534,51.794137913509886,0,-0.20821106951740787,-5.108541314317328,20.26976121114403,0,-1.0837534813933631,-4.87441361255782,14.865765714675838,-5.100546735407413,0,0,0,0,-1.103745859223267,35.87780010589176,9.105387624837494,-20.7005612219798,-4.218534901374058,39.96401216479385,0,0,1.477312241300485,3.062720154267433,47.89194801056508,-3.757483401578773,-1.7184506789761507,10.113590354811658,0,0,2.517600791485998,0,37.512016353082785,-4.176347385413226,-0.8945783552164681,20.643401855031414,0,0,-1.1,20.32522691242846,0.89919335438824,0,11.813603483416298,0,0,0,-0.7449185936309572,0,45.57235664372611,-5.1000000000000005,-3.384186922695005,-7.456166008285703,37.16017224731842,-9.690000000000001,5.207572334982677,0,36.09969940631302,0,1.7503931901377578,0,22.81589193831023,-5.030307380247917,-1.0242916522441616,-5.0584380138943805,23.58863165301801,0,-0.1588095668843863,-9.517653300546815,31.269332314460378,-11.543791328537774,-1.0273368127597846,-5.007928765229469,17.593885747491825,0,0.48038579949490556,0,0,0,2.0205223532189196,19.89666900123787,0,0,-0.4661992381708759,0.923431738848799,28.539927442003368,-4.835078462391066,-4.749263952110704,1.4249350419357398,27.015085675090134,-47.83124174832959,-1.4061380368523984,1.37229354196606,21.100700248924458,0,-1.1,-0.12278092661701304,17.151899227098788,0,9.344099271900413,0,40.458549281359424,0,-17.123479987129056,5.938230165198167,0.9,-13.57660417198464,-0.013361971717350013,-0.07262435401745847,2.0673619886088033,-9.507756431168467,1.6268784630536424,-51.03490836208997,20.88737093142379,0,-1.0279751325713558,-7.142931316802768,19.434629052798517,0,-0.8198438196033653,-5.100229745870782,53.89239913597152,0,-5.157375,-5.10129490070241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.087509532671888,29.447581189482644,0,0,-2.746098468510936,0,0,0,-0.621447222483079,13.361300545305067,0,0,-6.106592157525153,0,0,0,-1.277482424635754,16.215067493989054,0,-5.106981710348219,-5.631243992246482,4.6440364492333,0,0,-1.3999658218249118,0,0,0,0,0,0,0,-1.1116387578011886,-3.3314298902121777,27.280498443564483,0,-1.117283519048611,-5.108709460068259,8.868146398888717,0,-102.16951024778542,-3.3851006370098657,0,0,-12.286186683158132,0,0,0,-1.5667095080876767,-1.9772074660555572,5.706745173984217,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.889958425393796,-0.09916102497012592,14.022827244106214,0,-1.0083898299523726,-1.140713895587652,0,0,0,0,0,0,-1.1002612633161777,0,0,0,1.783558037471416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1058390074714606,-1.7286606300991423,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2917168177962206,9.118648073292967,0,0,-6.111595228524028,0,0,0,-10.081008820460164,10.716834139145371,0,0,0,0,0,0,-1.4994201433126022,10.235661191027559,0,0,0,0,0,0,0,0,0,0,0.011915815242307382,0,0,0,-12.144824111134898,0,0,0,0,0,0,0,-6.1000000000000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59.48752150269937,6.3083455942404445,0,0,0,0,0,0,-6.1000000000000005,0,0,0,-1.1,0,0,0,-5.928188096756791,0,0,0,-5.841182915061162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1115004192138724,-5.06976350161333,0,0,0,0,0,0,0,0,0,0,-1.1049055312699128,-5.101675607258404,0,0,0,0,0,0,-1.1167215473591108,-10.214881311740779,1.7032108662526313,0,-3.528571077700367,41.394015796580035,-1.8612008755417548,-46.30763284320382,-0.44008949481397863,42.86300506432359,0,-2.2897668590033464,-1.0337310520874483,37.87620867455256,0,-11.940397092452088,-0.04392694260145494,12.002290670249504,0,0,-1.0144381115223648,35.48001718166527,-4.1000000000000005,0,-0.32618225795561284,22.228271797288276,0,0,-1.4062744781967216,36.58298757832829,-4.1000000000000005,0,-0.5915571283006094,1.534458466127854,0,0,-12.454322846818892,-26.830480621054384,-32.87338159232806,-30.235983316202468,-11.429061332875003,-14.893101012357485,-10.768568560856945,-14.275556409332484,-2.6823693695532906,-2.497798553820149,-4.663542435289829,-5.126397535820425,-0.8430643738218255,-3.5144062790696284,-3.3586166325582902,0,-5.227329213061601,-6.329073472246698,-6.854736042795041,-5.111653366492282,-7.863092993622392,-10.792332279066466,-7.422144432287209,-9.74115441855053,-0.4727565724796433,0,0,0,0,0,0,0,-0.3491203075514342,30.34540737976524,-4.101762548196599,0,-7.053894730121388,-5.2802635684003825,-5.773577245044423,-9.690000000000001,-2.2188834933145265,-4.767562101768931,-9.261924698009663,-5.25927213475719,-0.09758201606406978,-0.5198662056289208,-2.4196116589337002,0,-1.0417086789935783,11.552308112486916,0,0,-4.171376210471912,-6.713203255888518,-7.803261129985297,-5.138928352818283,-1.3335223961299627,-2.337454904289242,-4.1000000000000005,-5.209025765043694,0,0,0,0,-10.90425082147306,-16.338527480763595,-14.123775029673473,-18.060197115108657,-11.394626154607824,-17.836099237994553,-22.43746079454946,-62.02141335698261,-5.157375,-4.545422916235867,-3.1098107384422997,0,0,0,0,0,-8.620762312851697,-2.033806156857456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.157375,30.204238590680927,0,0,-5.492134853777586,15.922420973459243,0,0,-0.33001540001770585,3.0797528451583243,0,0,0,0,0,0,3.71324120765056,1.9921226331579294,-4.100420424665118,-5.1000000000000005,0,0,0,0,7.114121034731265,0,0,0,-0.2322340588245041,0.031536242711461805,0,0,-3.9639222067944,-5.330946932747116,-4.979645128866849,-10.044252561481791,0,0,0,0,0.015218559603972183,0,0,0,0,0,0,0,-1.0227520726237533,-5.007857279352,0,0,0,0,0,0,-1.0191863582091334,-2.1713602686733764,0,0,0,0,0,0,-0.6949843988757981,13.61051781763042,0,0,-5.157375,-1.3253882071765173,-4.112302125697066,0,-8.531863877257104,-4.11879968678409,-41.069824037736986,-5.164232749964617,0,0,0,0,0,0,0,0,-7.890307038883622,-4.36744886944174,-41.0318881208018,-13.898537725728648,-0.4654757756235559,0,0,0,0,0,0,0,-0.7477535700904788,-4.390708534135,0,-5.1000000000000005,0,0,0,0,-5.157375,-5.1000000000000005,0,0,0,0,0,0,-4.310965257451241,-51.014073443871844,-7.791250437971616,-5.256307279468164,0,0,0,0,0,0,0,0,0,0,0,0,1.3809893047775919,20.248186655588697,0,0,0,11.550453527097437,0,0,-6.1000000000000005,9.422773052350273,0,0,0,0,0,0,-1.4579690737074513,3.1685770912140194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1054187167193326,-5.100776602447801,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.2522008998889575,0,0,0,0,0,0,-1.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1047975372822596,0,0,-10.213625,0,0,0,0,4.795219782762525,0,0,0,-6.111501796537078,-0.019626110814120624,0,0,-0.2854773474512408,0.3540755993305368,0,0,-1.1,0,0,0,0,0,0,0,-0.11669276300016147,0,0,0,0,0,0,0,-1.1060941999420104,0,0,0,-10.213625,-4.736848668960132,0,0,-0.8480498091861822,-4.79818143911104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.1068625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7.401042453813927,40.40655042487672,7.037910415586529,-5.055096199854589,3.2529778058081886,38.377588129126494,0,-4.9591142659634695,-4.259326622000799,39.00924461855142,0,0,7.489007887567128,0,19.870404735725288,0,-2.689980920729729,31.146919916282354,5.010046026161355,0,21.01979742600105,4.1487812611545785,3.911522318095315,-8.388186548768521,3.3885071761542385,17.85931478555329,0,-5.105580087429448,0,0,0,0,-5.157375,-44.533612974769824,42.666646630851304,0,2.9408086113795804,-5.104748907429144,44.58178524218213,0,-3.1999512291420293,-3.5538994977519813,14.435547526116235,-3.219929527513169,-3.253787962505735,-4.209496068240216,12.620880864004182,0,-3.3940959941335955,-4.212770216470751,10.929145366296462,-5.106869208572266,0.7690718192092425,-4.993808404206873,11.739203217339456,0,-2.170593600214563,-5.107170132500794,10.456819475671155,0,-0.040408429559277974,-46.596415991592025,1.7087911830815918,0,0,28.00781912011296,0,-9.017608848192486,-2.9040909043467344,-2.101207317102542,5.33726038635546,-25.886264065150613,-1.2516477275965074,0.2172862351549612,5.053032059956204,-5.1000000000000005,-5.794200722665234,-0.2929274478640138,4.513300201597485,0,-0.050175257941910134,10.870029584352226,0.9,-5.1000000000000005,-3.2588071858264875,0,0,0,1.1424766498836343,0,2.2660094027808304,0,-0.7170183215644294,-0.24874183581674877,0,0,-3.3692141040306067,-8.928153133345774,1.2668381212391253,-5.1000000000000005,-7.831242289680269,-9.696912856691359,-4.6439110061604385,-9.72073798787999,-2.941461224416866,-5.1000000000000005,1.3487458995081942,-9.264214976704793,-1.508381084376127,-5.105199809770007,0,0,-0.06031455184218415,-5.100610956184915,4.094443748094183,-5.1000000000000005,-1.0545228764450263,-5.1000000000000005,1.2841006682329872,0,-0.26796608975613223,-5.1000000000000005,-0.19313691352413767,-5.1000000000000005,-0.6903316388550108,-5.06471656960106,0,0,3.47256553074197,33.03103030310173,0,0,-0.6664431388243147,12.691796015859744,2.249570480538288,0,-2.6980138925613675,11.488855661122988,0.9708002791622707,0,-1.0518707761239723,2.219456203839582,0,-9.416717517050824,-4.7556935761240196,6.325744812339418,2.774100826008271,-9.085303057906117,0,0,0,0,-3.030309838265516,3.3635839917947,0.40639212665079116,-49.67524138865717,4.32242018867243,0,0,0,-5.157375,-1.471612344811645,10.67953422000706,0,1.7134948961852807,-4.4377350469214845,11.449933979016603,-1.7646891351990548,-2.0548086635593927,0,2.724267313225818,0,-0.47977412141578607,0,0.5808250533764667,-48.60369887150148,15.253696901409889,0,0,0,-0.14301560717275166,-5.1000000000000005,2.317633660650734,0,-2.62732971285849,0,6.389110786975165,0,-0.0935253172970967,-51.36817154784562,0,0,-6.10107943368906,13.280314382452762,0,0,-2.587748790426097,-2.349416148784469,-2.1965049618565198,-9.690000000000001,-0.19031043666350345,-0.07961389758928866,6.259922274833951,0,-4.667249590026486,-0.26552387887560086,-2.0214133570607964,-7.943878789076475,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.386843573596714,-3.5585592088727434,1.034804628309222,-12.370287630675136,0,0,0,0,-1.0234131285424442,-5.101169814433968,0.8987547485747127,0,-0.167258026920325,-5.101238824943689,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.742412801140264,43.92863295857878,0,0,1.757674743889541,0,0,0,-10.213625,7.122896837635972,0,0,0,0,0,0,-99.23114855970722,3.330680359568828,0,0,0,0,0,0,2.2781548108053338,0,0,0,0,0,0,0,-1.1083547632238537,-4.451630983060296,1.7187141920871882,0,0,0,0,0,-1.1113365131953064,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.1,0.5980362859423848,0,-0.9975167300006996,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.061908535565691,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.3656585803602446,0,0,0,2.229450575887543,0,0,0,1.7596852796981413,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,-0.1,0,0,0,0,0,0,-6.11085656441521,-0.1057375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.7260355547557625,41.38049408251675,0,-5.101513668998261,-1.33141226068852,13.616818565488074,0,0,-0.002353767831532544,8.07809428462315,0,0,-0.6578742839762086,10.435297024510055,0,0,-2.885322038959199,5.450663859169822,0,0,0,0,0,0,-6.1000000000000005,3.7854092032381605,-4.1000000000000005,-5.095083044053422,0,0,0,0,-6.427548217221343,-14.549897341662646,-7.545057104258692,-9.8316204009394,-8.306244252010087,-50.168238664933114,-9.708348353091768,-13.777144702720804,-4.1014253137490835,-5.0505788725820855,-7.791250026990236,-5.1000000000000005,-0.6220265881392395,-5.122350295735605,0,0,-5.157375,-4.610630729985579,0,0,-0.6893045291677554,-3.3473803612344883,0,0,0,0,0,0,0,0,0,0,-1.1,15.89559560681419,0,0,-5.356625963312432,-5.357301669578316,-8.084486309981981,-9.69026058433036,-5.64303624270379,2.5486141215868843,-4.1000000000000005,-5.1000000000000005,-0.8627126196765638,0,0,0,9.543842018578033,0.30563472429995286,0,-5.1068625,-1.1297988194639763,-0.8583770302050937,-7.79124359605631,-5.173701313317835,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.157375,5.868176955080502,0,0,-0.9453361879441498,4.433256944557173,0,0,-2.1907831115668044,5.216061311992918,-41.02709928842128,-5.162439878515559,0,0,0,0,0,0,0,0,4.45858775316686,3.397571074931083,0,0,0.324844837649677,0,0,0,0,0,0,0,-4.471393036508665,-5.10231812598695,-7.791250766958123,-5.278626378325486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.13199514514364,5.848877901415776,0,0,-0.5574640219580635,0,0,0,-1.891206026145247,-1.7518310107521549,-7.7980952046875,-5.1000000000000005,0,0,0,0,-0.8410000657878632,-0.1,0,0,0,0,0,0,0,0,0,0,2.8828829423638114,-0.1274701481482569,-4.1000000000000005,-5.165336673067312,0,0,0,0,0,0,0,0,0.4547646095981964,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.213625,8.00541741337615,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.3878434604900969,3.201413670293249,0,0,-10.213625,3.7452660387124888,0,0,0,0,0,0,-1.0495522100472412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.1117928516636022,3.2962341532425903,0,0,-1.1048752527325927,-1.3039505694351654,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.1000000000000005,0.10456265995927382,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"initializedQ":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}');

/***/ },
/* 224 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Data model that holds what the agent gets to see about the environment
	 */
	var AgentObservation =
	/**
	 *
	 * @param {Array} tileTypes
	 * @param {int} score
	 * @param {Array} position
	 */
	function AgentObservation(tileTypes, score, position) {
	  _classCallCheck(this, AgentObservation);
	
	  /**
	   * @type {Array}
	   */
	  this.tileTypes = tileTypes;
	
	  /**
	   * @type {Number}
	   */
	  this.score = score;
	
	  /**
	   *
	   * @type {Array} A vector contained the X and Y of the current agent position
	   */
	  this.position = position;
	};
	
	exports.default = AgentObservation;

/***/ },
/* 225 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Data model that holds the environment's full internal state
	 */
	var State =
	/**
	 * @param {Array} tileTypes
	 * @param {Array} position [x,y]
	 * @param {Number} score
	 * @param {Boolean} isComplete
	 */
	function State(tileTypes, position, score, isComplete) {
	  _classCallCheck(this, State);
	
	  /**
	   * @type {Array}
	   */
	  this.tileTypes = tileTypes;
	  /**
	   * @type {Array} position [x,y]
	   */
	  this.position = position;
	  /**
	   * @type {Number}
	   */
	  this.score = score;
	  /**
	   * @type {Boolean}
	   */
	  this.isComplete = isComplete;
	};
	
	exports.default = State;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.generateInitialState = undefined;
	
	var _State = __webpack_require__(225);
	
	var _State2 = _interopRequireDefault(_State);
	
	var _index = __webpack_require__(21);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Returns a random initial starting state
	 *
	 * @returns {State}
	 */
	var generateInitialState = exports.generateInitialState = function generateInitialState() {
	    return new _State2.default(generateRandomTileTypes(_index.config.size), [Math.floor(_index.config.size[0] / 2), 0], 0, false);
	};
	
	/**
	 * Generates a random set of tileTypes for generated random environment states
	 *
	 * @param {Array} size
	 * @returns {Array}
	 */
	function generateRandomTileTypes(size) {
	    var tileTypes = [];
	    var xLen = size[0];
	    var yLen = size[1];
	    for (var xi = 0; xi < xLen; xi++) {
	        tileTypes[xi] = new Array(yLen);
	        for (var yi = 0; yi < size[1]; yi++) {
	            // tileTypes[xi][yi] = Math.random() < 0.7 ? 0 : 1;
	            tileTypes[xi][yi] = Math.random() < 0.2 ? 1 : 0;
	        }
	    }
	    return tileTypes;
	}

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(14);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(296);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _App = __webpack_require__(34);
	
	var _App2 = _interopRequireDefault(_App);
	
	__webpack_require__(276);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_reactDom2.default.render(_react2.default.createElement(_App2.default, null), document.getElementById('root'));

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @namespace Chart
	 */
	var Chart = __webpack_require__(249)();
	
	__webpack_require__(247)(Chart);
	__webpack_require__(263)(Chart);
	__webpack_require__(243)(Chart);
	__webpack_require__(252)(Chart);
	__webpack_require__(246)(Chart);
	__webpack_require__(242)(Chart);
	__webpack_require__(244)(Chart);
	__webpack_require__(245)(Chart);
	__webpack_require__(250)(Chart);
	__webpack_require__(254)(Chart);
	__webpack_require__(255)(Chart);
	__webpack_require__(253)(Chart);
	__webpack_require__(256)(Chart);
	__webpack_require__(251)(Chart);
	__webpack_require__(248)(Chart);
	__webpack_require__(257)(Chart);
	
	__webpack_require__(258)(Chart);
	__webpack_require__(259)(Chart);
	__webpack_require__(260)(Chart);
	__webpack_require__(261)(Chart);
	
	__webpack_require__(266)(Chart);
	__webpack_require__(264)(Chart);
	__webpack_require__(265)(Chart);
	__webpack_require__(267)(Chart);
	__webpack_require__(268)(Chart);
	__webpack_require__(269)(Chart);
	
	// Controllers must be loaded after elements
	// See Chart.core.datasetController.dataElementType
	__webpack_require__(236)(Chart);
	__webpack_require__(237)(Chart);
	__webpack_require__(238)(Chart);
	__webpack_require__(239)(Chart);
	__webpack_require__(240)(Chart);
	__webpack_require__(241)(Chart);
	
	__webpack_require__(229)(Chart);
	__webpack_require__(230)(Chart);
	__webpack_require__(231)(Chart);
	__webpack_require__(232)(Chart);
	__webpack_require__(233)(Chart);
	__webpack_require__(234)(Chart);
	__webpack_require__(235)(Chart);
	
	window.Chart = module.exports = Chart;


/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Bar = function(context, config) {
			config.type = 'bar';
	
			return new Chart(context, config);
		};
	
	};


/***/ },
/* 230 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Bubble = function(context, config) {
			config.type = 'bubble';
			return new Chart(context, config);
		};
	
	};


/***/ },
/* 231 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Doughnut = function(context, config) {
			config.type = 'doughnut';
	
			return new Chart(context, config);
		};
	
	};


/***/ },
/* 232 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Line = function(context, config) {
			config.type = 'line';
	
			return new Chart(context, config);
		};
	
	};


/***/ },
/* 233 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.PolarArea = function(context, config) {
			config.type = 'polarArea';
	
			return new Chart(context, config);
		};
	
	};


/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Radar = function(context, config) {
			config.type = 'radar';
	
			return new Chart(context, config);
		};
	
	};


/***/ },
/* 235 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var defaultConfig = {
			hover: {
				mode: 'single'
			},
	
			scales: {
				xAxes: [{
					type: 'linear', // scatter should not use a category axis
					position: 'bottom',
					id: 'x-axis-1' // need an ID so datasets can reference the scale
				}],
				yAxes: [{
					type: 'linear',
					position: 'left',
					id: 'y-axis-1'
				}]
			},
	
			tooltips: {
				callbacks: {
					title: function() {
						// Title doesn't make sense for scatter since we format the data as a point
						return '';
					},
					label: function(tooltipItem) {
						return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
					}
				}
			}
		};
	
		// Register the default config for this type
		Chart.defaults.scatter = defaultConfig;
	
		// Scatter charts use line controllers
		Chart.controllers.scatter = Chart.controllers.line;
	
		Chart.Scatter = function(context, config) {
			config.type = 'scatter';
			return new Chart(context, config);
		};
	
	};


/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.bar = {
			hover: {
				mode: 'label'
			},
	
			scales: {
				xAxes: [{
					type: 'category',
	
					// Specific to Bar Controller
					categoryPercentage: 0.8,
					barPercentage: 0.9,
	
					// grid line settings
					gridLines: {
						offsetGridLines: true
					}
				}],
				yAxes: [{
					type: 'linear'
				}]
			}
		};
	
		Chart.controllers.bar = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Rectangle,
	
			initialize: function(chart, datasetIndex) {
				Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);
	
				var me = this;
				var meta = me.getMeta();
				var dataset = me.getDataset();
	
				meta.stack = dataset.stack;
				// Use this to indicate that this is a bar dataset.
				meta.bar = true;
			},
	
			// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible
			getStackCount: function() {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
	
				var stacks = [];
				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var dsMeta = me.chart.getDatasetMeta(datasetIndex);
					if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&
						(yScale.options.stacked === false ||
						(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}, me);
	
				return stacks.length;
			},
	
			update: function(reset) {
				var me = this;
				helpers.each(me.getMeta().data, function(rectangle, index) {
					me.updateElement(rectangle, index, reset);
				}, me);
			},
	
			updateElement: function(rectangle, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
				var scaleBase = yScale.getBasePixel();
				var rectangleElementOptions = me.chart.options.elements.rectangle;
				var custom = rectangle.custom || {};
				var dataset = me.getDataset();
	
				rectangle._xScale = xScale;
				rectangle._yScale = yScale;
				rectangle._datasetIndex = me.index;
				rectangle._index = index;
	
				var ruler = me.getRuler(index); // The index argument for compatible
				rectangle._model = {
					x: me.calculateBarX(index, me.index, ruler),
					y: reset ? scaleBase : me.calculateBarY(index, me.index),
	
					// Tooltip
					label: me.chart.data.labels[index],
					datasetLabel: dataset.label,
	
					// Appearance
					horizontal: false,
					base: reset ? scaleBase : me.calculateBarBase(me.index, index),
					width: me.calculateBarWidth(ruler),
					backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
					borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
					borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
					borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
				};
	
				rectangle.pivot();
			},
	
			calculateBarBase: function(datasetIndex, index) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var base = yScale.getBaseValue();
				var original = base;
	
				if ((yScale.options.stacked === true) ||
					(yScale.options.stacked === undefined && meta.stack !== undefined)) {
					var chart = me.chart;
					var datasets = chart.data.datasets;
					var value = Number(datasets[datasetIndex].data[index]);
	
					for (var i = 0; i < datasetIndex; i++) {
						var currentDs = datasets[i];
						var currentDsMeta = chart.getDatasetMeta(i);
						if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) &&
							meta.stack === currentDsMeta.stack) {
							var currentVal = Number(currentDs.data[index]);
							base += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);
						}
					}
	
					return yScale.getPixelForValue(base);
				}
	
				return yScale.getBasePixel();
			},
	
			getRuler: function() {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var stackCount = me.getStackCount();
	
				var tickWidth = xScale.width / xScale.ticks.length;
				var categoryWidth = tickWidth * xScale.options.categoryPercentage;
				var categorySpacing = (tickWidth - (tickWidth * xScale.options.categoryPercentage)) / 2;
				var fullBarWidth = categoryWidth / stackCount;
	
				var barWidth = fullBarWidth * xScale.options.barPercentage;
				var barSpacing = fullBarWidth - (fullBarWidth * xScale.options.barPercentage);
	
				return {
					stackCount: stackCount,
					tickWidth: tickWidth,
					categoryWidth: categoryWidth,
					categorySpacing: categorySpacing,
					fullBarWidth: fullBarWidth,
					barWidth: barWidth,
					barSpacing: barSpacing
				};
			},
	
			calculateBarWidth: function(ruler) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				if (xScale.options.barThickness) {
					return xScale.options.barThickness;
				}
				return ruler.barWidth;
			},
	
			// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible
			getStackIndex: function(datasetIndex) {
				var me = this;
				var meta = me.chart.getDatasetMeta(datasetIndex);
				var yScale = me.getScaleForId(meta.yAxisID);
				var dsMeta, j;
				var stacks = [meta.stack];
	
				for (j = 0; j < datasetIndex; ++j) {
					dsMeta = this.chart.getDatasetMeta(j);
					if (dsMeta.bar && this.chart.isDatasetVisible(j) &&
						(yScale.options.stacked === false ||
						(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}
	
				return stacks.length - 1;
			},
	
			calculateBarX: function(index, datasetIndex, ruler) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var stackIndex = me.getStackIndex(datasetIndex);
				var leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
				leftTick -= me.chart.isCombo ? (ruler.tickWidth / 2) : 0;
	
				return leftTick +
					(ruler.barWidth / 2) +
					ruler.categorySpacing +
					(ruler.barWidth * stackIndex) +
					(ruler.barSpacing / 2) +
					(ruler.barSpacing * stackIndex);
			},
	
			calculateBarY: function(index, datasetIndex) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var value = Number(me.getDataset().data[index]);
	
				if (yScale.options.stacked ||
					(yScale.options.stacked === undefined && meta.stack !== undefined)) {
					var base = yScale.getBaseValue();
					var sumPos = base,
						sumNeg = base;
	
					for (var i = 0; i < datasetIndex; i++) {
						var ds = me.chart.data.datasets[i];
						var dsMeta = me.chart.getDatasetMeta(i);
						if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) &&
							meta.stack === dsMeta.stack) {
							var stackedVal = Number(ds.data[index]);
							if (stackedVal < 0) {
								sumNeg += stackedVal || 0;
							} else {
								sumPos += stackedVal || 0;
							}
						}
					}
	
					if (value < 0) {
						return yScale.getPixelForValue(sumNeg + value);
					}
					return yScale.getPixelForValue(sumPos + value);
				}
	
				return yScale.getPixelForValue(value);
			},
	
			draw: function(ease) {
				var me = this;
				var easingDecimal = ease || 1;
				var metaData = me.getMeta().data;
				var dataset = me.getDataset();
				var i, len;
	
				Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
				for (i = 0, len = metaData.length; i < len; ++i) {
					var d = dataset.data[i];
					if (d !== null && d !== undefined && !isNaN(d)) {
						metaData[i].transition(easingDecimal).draw();
					}
				}
				Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
			},
	
			setHoverStyle: function(rectangle) {
				var dataset = this.chart.data.datasets[rectangle._datasetIndex];
				var index = rectangle._index;
	
				var custom = rectangle.custom || {};
				var model = rectangle._model;
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
			},
	
			removeHoverStyle: function(rectangle) {
				var dataset = this.chart.data.datasets[rectangle._datasetIndex];
				var index = rectangle._index;
				var custom = rectangle.custom || {};
				var model = rectangle._model;
				var rectangleElementOptions = this.chart.options.elements.rectangle;
	
				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
			}
	
		});
	
	
		// including horizontalBar in the bar file, instead of a file of its own
		// it extends bar (like pie extends doughnut)
		Chart.defaults.horizontalBar = {
			hover: {
				mode: 'label'
			},
	
			scales: {
				xAxes: [{
					type: 'linear',
					position: 'bottom'
				}],
				yAxes: [{
					position: 'left',
					type: 'category',
	
					// Specific to Horizontal Bar Controller
					categoryPercentage: 0.8,
					barPercentage: 0.9,
	
					// grid line settings
					gridLines: {
						offsetGridLines: true
					}
				}]
			},
			elements: {
				rectangle: {
					borderSkipped: 'left'
				}
			},
			tooltips: {
				callbacks: {
					title: function(tooltipItems, data) {
						// Pick first xLabel for now
						var title = '';
	
						if (tooltipItems.length > 0) {
							if (tooltipItems[0].yLabel) {
								title = tooltipItems[0].yLabel;
							} else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
								title = data.labels[tooltipItems[0].index];
							}
						}
	
						return title;
					},
					label: function(tooltipItem, data) {
						var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
						return datasetLabel + ': ' + tooltipItem.xLabel;
					}
				}
			}
		};
	
		Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
	
			// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible
			getStackCount: function() {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
	
				var stacks = [];
				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var dsMeta = me.chart.getDatasetMeta(datasetIndex);
					if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&
						(xScale.options.stacked === false ||
						(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}, me);
	
				return stacks.length;
			},
	
			updateElement: function(rectangle, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
				var scaleBase = xScale.getBasePixel();
				var custom = rectangle.custom || {};
				var dataset = me.getDataset();
				var rectangleElementOptions = me.chart.options.elements.rectangle;
	
				rectangle._xScale = xScale;
				rectangle._yScale = yScale;
				rectangle._datasetIndex = me.index;
				rectangle._index = index;
	
				var ruler = me.getRuler(index); // The index argument for compatible
				rectangle._model = {
					x: reset ? scaleBase : me.calculateBarX(index, me.index),
					y: me.calculateBarY(index, me.index, ruler),
	
					// Tooltip
					label: me.chart.data.labels[index],
					datasetLabel: dataset.label,
	
					// Appearance
					horizontal: true,
					base: reset ? scaleBase : me.calculateBarBase(me.index, index),
					height: me.calculateBarHeight(ruler),
					backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
					borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
					borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
					borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
				};
	
				rectangle.pivot();
			},
	
			calculateBarBase: function(datasetIndex, index) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var base = xScale.getBaseValue();
				var originalBase = base;
	
				if (xScale.options.stacked ||
					(xScale.options.stacked === undefined && meta.stack !== undefined)) {
					var chart = me.chart;
					var datasets = chart.data.datasets;
					var value = Number(datasets[datasetIndex].data[index]);
	
					for (var i = 0; i < datasetIndex; i++) {
						var currentDs = datasets[i];
						var currentDsMeta = chart.getDatasetMeta(i);
						if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) &&
							meta.stack === currentDsMeta.stack) {
							var currentVal = Number(currentDs.data[index]);
							base += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);
						}
					}
	
					return xScale.getPixelForValue(base);
				}
	
				return xScale.getBasePixel();
			},
	
			getRuler: function() {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var stackCount = me.getStackCount();
	
				var tickHeight = yScale.height / yScale.ticks.length;
				var categoryHeight = tickHeight * yScale.options.categoryPercentage;
				var categorySpacing = (tickHeight - (tickHeight * yScale.options.categoryPercentage)) / 2;
				var fullBarHeight = categoryHeight / stackCount;
	
				var barHeight = fullBarHeight * yScale.options.barPercentage;
				var barSpacing = fullBarHeight - (fullBarHeight * yScale.options.barPercentage);
	
				return {
					stackCount: stackCount,
					tickHeight: tickHeight,
					categoryHeight: categoryHeight,
					categorySpacing: categorySpacing,
					fullBarHeight: fullBarHeight,
					barHeight: barHeight,
					barSpacing: barSpacing
				};
			},
	
			calculateBarHeight: function(ruler) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				if (yScale.options.barThickness) {
					return yScale.options.barThickness;
				}
				return ruler.barHeight;
			},
	
			// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible
			getStackIndex: function(datasetIndex) {
				var me = this;
				var meta = me.chart.getDatasetMeta(datasetIndex);
				var xScale = me.getScaleForId(meta.xAxisID);
				var dsMeta, j;
				var stacks = [meta.stack];
	
				for (j = 0; j < datasetIndex; ++j) {
					dsMeta = this.chart.getDatasetMeta(j);
					if (dsMeta.bar && this.chart.isDatasetVisible(j) &&
						(xScale.options.stacked === false ||
						(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}
	
				return stacks.length - 1;
			},
	
			calculateBarX: function(index, datasetIndex) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var value = Number(me.getDataset().data[index]);
	
				if (xScale.options.stacked ||
					(xScale.options.stacked === undefined && meta.stack !== undefined)) {
					var base = xScale.getBaseValue();
					var sumPos = base,
						sumNeg = base;
	
					for (var i = 0; i < datasetIndex; i++) {
						var ds = me.chart.data.datasets[i];
						var dsMeta = me.chart.getDatasetMeta(i);
						if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) &&
							meta.stack === dsMeta.stack) {
							var stackedVal = Number(ds.data[index]);
							if (stackedVal < 0) {
								sumNeg += stackedVal || 0;
							} else {
								sumPos += stackedVal || 0;
							}
						}
					}
	
					if (value < 0) {
						return xScale.getPixelForValue(sumNeg + value);
					}
					return xScale.getPixelForValue(sumPos + value);
				}
	
				return xScale.getPixelForValue(value);
			},
	
			calculateBarY: function(index, datasetIndex, ruler) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var stackIndex = me.getStackIndex(datasetIndex);
				var topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
				topTick -= me.chart.isCombo ? (ruler.tickHeight / 2) : 0;
	
				return topTick +
					(ruler.barHeight / 2) +
					ruler.categorySpacing +
					(ruler.barHeight * stackIndex) +
					(ruler.barSpacing / 2) +
					(ruler.barSpacing * stackIndex);
			}
		});
	};


/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.bubble = {
			hover: {
				mode: 'single'
			},
	
			scales: {
				xAxes: [{
					type: 'linear', // bubble should probably use a linear scale by default
					position: 'bottom',
					id: 'x-axis-0' // need an ID so datasets can reference the scale
				}],
				yAxes: [{
					type: 'linear',
					position: 'left',
					id: 'y-axis-0'
				}]
			},
	
			tooltips: {
				callbacks: {
					title: function() {
						// Title doesn't make sense for scatter since we format the data as a point
						return '';
					},
					label: function(tooltipItem, data) {
						var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
						var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
						return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';
					}
				}
			}
		};
	
		Chart.controllers.bubble = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Point,
	
			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var points = meta.data;
	
				// Update Points
				helpers.each(points, function(point, index) {
					me.updateElement(point, index, reset);
				});
			},
	
			updateElement: function(point, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
	
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var data = dataset.data[index];
				var pointElementOptions = me.chart.options.elements.point;
				var dsIndex = me.index;
	
				helpers.extend(point, {
					// Utility
					_xScale: xScale,
					_yScale: yScale,
					_datasetIndex: dsIndex,
					_index: index,
	
					// Desired view properties
					_model: {
						x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
						y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
						// Appearance
						radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),
	
						// Tooltip
						hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
					}
				});
	
				// Trick to reset the styles of the point
				Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);
	
				var model = point._model;
				model.skip = custom.skip ? custom.skip : (isNaN(model.x) || isNaN(model.y));
	
				point.pivot();
			},
	
			getRadius: function(value) {
				return value.r || this.chart.options.elements.point.radius;
			},
	
			setHoverStyle: function(point) {
				var me = this;
				Chart.DatasetController.prototype.setHoverStyle.call(me, point);
	
				// Radius
				var dataset = me.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;
				model.radius = custom.hoverRadius ? custom.hoverRadius : (helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius)) + me.getRadius(dataset.data[index]);
			},
	
			removeHoverStyle: function(point) {
				var me = this;
				Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);
	
				var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
				var custom = point.custom || {};
				var model = point._model;
	
				model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);
			}
		});
	};


/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			defaults = Chart.defaults;
	
		defaults.doughnut = {
			animation: {
				// Boolean - Whether we animate the rotation of the Doughnut
				animateRotate: true,
				// Boolean - Whether we animate scaling the Doughnut from the centre
				animateScale: false
			},
			aspectRatio: 1,
			hover: {
				mode: 'single'
			},
			legendCallback: function(chart) {
				var text = [];
				text.push('<ul class="' + chart.id + '-legend">');
	
				var data = chart.data;
				var datasets = data.datasets;
				var labels = data.labels;
	
				if (datasets.length) {
					for (var i = 0; i < datasets[0].data.length; ++i) {
						text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
						if (labels[i]) {
							text.push(labels[i]);
						}
						text.push('</li>');
					}
				}
	
				text.push('</ul>');
				return text.join('');
			},
			legend: {
				labels: {
					generateLabels: function(chart) {
						var data = chart.data;
						if (data.labels.length && data.datasets.length) {
							return data.labels.map(function(label, i) {
								var meta = chart.getDatasetMeta(0);
								var ds = data.datasets[0];
								var arc = meta.data[i];
								var custom = arc && arc.custom || {};
								var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
								var arcOpts = chart.options.elements.arc;
								var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
								var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
								var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
	
								return {
									text: label,
									fillStyle: fill,
									strokeStyle: stroke,
									lineWidth: bw,
									hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
	
									// Extra data used for toggling the correct item
									index: i
								};
							});
						}
						return [];
					}
				},
	
				onClick: function(e, legendItem) {
					var index = legendItem.index;
					var chart = this.chart;
					var i, ilen, meta;
	
					for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
						meta = chart.getDatasetMeta(i);
						// toggle visibility of index if exists
						if (meta.data[index]) {
							meta.data[index].hidden = !meta.data[index].hidden;
						}
					}
	
					chart.update();
				}
			},
	
			// The percentage of the chart that we cut out of the middle.
			cutoutPercentage: 50,
	
			// The rotation of the chart, where the first data arc begins.
			rotation: Math.PI * -0.5,
	
			// The total circumference of the chart.
			circumference: Math.PI * 2.0,
	
			// Need to override these to give a nice default
			tooltips: {
				callbacks: {
					title: function() {
						return '';
					},
					label: function(tooltipItem, data) {
						var dataLabel = data.labels[tooltipItem.index];
						var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
	
						if (helpers.isArray(dataLabel)) {
							// show value on first line of multiline label
							// need to clone because we are changing the value
							dataLabel = dataLabel.slice();
							dataLabel[0] += value;
						} else {
							dataLabel += value;
						}
	
						return dataLabel;
					}
				}
			}
		};
	
		defaults.pie = helpers.clone(defaults.doughnut);
		helpers.extend(defaults.pie, {
			cutoutPercentage: 0
		});
	
	
		Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Arc,
	
			linkScales: helpers.noop,
	
			// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
			getRingIndex: function(datasetIndex) {
				var ringIndex = 0;
	
				for (var j = 0; j < datasetIndex; ++j) {
					if (this.chart.isDatasetVisible(j)) {
						++ringIndex;
					}
				}
	
				return ringIndex;
			},
	
			update: function(reset) {
				var me = this;
				var chart = me.chart,
					chartArea = chart.chartArea,
					opts = chart.options,
					arcOpts = opts.elements.arc,
					availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,
					availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,
					minSize = Math.min(availableWidth, availableHeight),
					offset = {
						x: 0,
						y: 0
					},
					meta = me.getMeta(),
					cutoutPercentage = opts.cutoutPercentage,
					circumference = opts.circumference;
	
				// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
				if (circumference < Math.PI * 2.0) {
					var startAngle = opts.rotation % (Math.PI * 2.0);
					startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
					var endAngle = startAngle + circumference;
					var start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};
					var end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};
					var contains0 = (startAngle <= 0 && 0 <= endAngle) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);
					var contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);
					var contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);
					var contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);
					var cutout = cutoutPercentage / 100.0;
					var min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};
					var max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};
					var size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};
					minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
					offset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};
				}
	
				chart.borderWidth = me.getMaxBorderWidth(meta.data);
				chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
				chart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);
				chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
				chart.offsetX = offset.x * chart.outerRadius;
				chart.offsetY = offset.y * chart.outerRadius;
	
				meta.total = me.calculateTotal();
	
				me.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));
				me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
	
				helpers.each(meta.data, function(arc, index) {
					me.updateElement(arc, index, reset);
				});
			},
	
			updateElement: function(arc, index, reset) {
				var me = this;
				var chart = me.chart,
					chartArea = chart.chartArea,
					opts = chart.options,
					animationOpts = opts.animation,
					centerX = (chartArea.left + chartArea.right) / 2,
					centerY = (chartArea.top + chartArea.bottom) / 2,
					startAngle = opts.rotation, // non reset case handled later
					endAngle = opts.rotation, // non reset case handled later
					dataset = me.getDataset(),
					circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),
					innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,
					outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,
					valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
	
				helpers.extend(arc, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
	
					// Desired view properties
					_model: {
						x: centerX + chart.offsetX,
						y: centerY + chart.offsetY,
						startAngle: startAngle,
						endAngle: endAngle,
						circumference: circumference,
						outerRadius: outerRadius,
						innerRadius: innerRadius,
						label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
					}
				});
	
				var model = arc._model;
				// Resets the visual styles
				this.removeHoverStyle(arc);
	
				// Set correct angles if not resetting
				if (!reset || !animationOpts.animateRotate) {
					if (index === 0) {
						model.startAngle = opts.rotation;
					} else {
						model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
					}
	
					model.endAngle = model.startAngle + model.circumference;
				}
	
				arc.pivot();
			},
	
			removeHoverStyle: function(arc) {
				Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
			},
	
			calculateTotal: function() {
				var dataset = this.getDataset();
				var meta = this.getMeta();
				var total = 0;
				var value;
	
				helpers.each(meta.data, function(element, index) {
					value = dataset.data[index];
					if (!isNaN(value) && !element.hidden) {
						total += Math.abs(value);
					}
				});
	
				/* if (total === 0) {
					total = NaN;
				}*/
	
				return total;
			},
	
			calculateCircumference: function(value) {
				var total = this.getMeta().total;
				if (total > 0 && !isNaN(value)) {
					return (Math.PI * 2.0) * (value / total);
				}
				return 0;
			},
	
			// gets the max border or hover width to properly scale pie charts
			getMaxBorderWidth: function(elements) {
				var max = 0,
					index = this.index,
					length = elements.length,
					borderWidth,
					hoverWidth;
	
				for (var i = 0; i < length; i++) {
					borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
					hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
	
					max = borderWidth > max ? borderWidth : max;
					max = hoverWidth > max ? hoverWidth : max;
				}
				return max;
			}
		});
	};


/***/ },
/* 239 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.line = {
			showLines: true,
			spanGaps: false,
	
			hover: {
				mode: 'label'
			},
	
			scales: {
				xAxes: [{
					type: 'category',
					id: 'x-axis-0'
				}],
				yAxes: [{
					type: 'linear',
					id: 'y-axis-0'
				}]
			}
		};
	
		function lineEnabled(dataset, options) {
			return helpers.getValueOrDefault(dataset.showLine, options.showLines);
		}
	
		Chart.controllers.line = Chart.DatasetController.extend({
	
			datasetElementType: Chart.elements.Line,
	
			dataElementType: Chart.elements.Point,
	
			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var line = meta.dataset;
				var points = meta.data || [];
				var options = me.chart.options;
				var lineElementOptions = options.elements.line;
				var scale = me.getScaleForId(meta.yAxisID);
				var i, ilen, custom;
				var dataset = me.getDataset();
				var showLine = lineEnabled(dataset, options);
	
				// Update Line
				if (showLine) {
					custom = line.custom || {};
	
					// Compatibility: If the properties are defined with only the old name, use those values
					if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
						dataset.lineTension = dataset.tension;
					}
	
					// Utility
					line._scale = scale;
					line._datasetIndex = me.index;
					// Data
					line._children = points;
					// Model
					line._model = {
						// Appearance
						// The default behavior of lines is to break at null values, according
						// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
						// This option gives lines the ability to span gaps
						spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
						borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
						borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
						borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
						borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
						borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
						fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
						steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
						cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
						// Scale
						scaleTop: scale.top,
						scaleBottom: scale.bottom,
						scaleZero: scale.getBasePixel()
					};
	
					line.pivot();
				}
	
				// Update Points
				for (i=0, ilen=points.length; i<ilen; ++i) {
					me.updateElement(points[i], i, reset);
				}
	
				if (showLine && line._model.tension !== 0) {
					me.updateBezierControlPoints();
				}
	
				// Now pivot the point for animation
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].pivot();
				}
			},
	
			getPointBackgroundColor: function(point, index) {
				var backgroundColor = this.chart.options.elements.point.backgroundColor;
				var dataset = this.getDataset();
				var custom = point.custom || {};
	
				if (custom.backgroundColor) {
					backgroundColor = custom.backgroundColor;
				} else if (dataset.pointBackgroundColor) {
					backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
				} else if (dataset.backgroundColor) {
					backgroundColor = dataset.backgroundColor;
				}
	
				return backgroundColor;
			},
	
			getPointBorderColor: function(point, index) {
				var borderColor = this.chart.options.elements.point.borderColor;
				var dataset = this.getDataset();
				var custom = point.custom || {};
	
				if (custom.borderColor) {
					borderColor = custom.borderColor;
				} else if (dataset.pointBorderColor) {
					borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
				} else if (dataset.borderColor) {
					borderColor = dataset.borderColor;
				}
	
				return borderColor;
			},
	
			getPointBorderWidth: function(point, index) {
				var borderWidth = this.chart.options.elements.point.borderWidth;
				var dataset = this.getDataset();
				var custom = point.custom || {};
	
				if (!isNaN(custom.borderWidth)) {
					borderWidth = custom.borderWidth;
				} else if (!isNaN(dataset.pointBorderWidth)) {
					borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
				} else if (!isNaN(dataset.borderWidth)) {
					borderWidth = dataset.borderWidth;
				}
	
				return borderWidth;
			},
	
			updateElement: function(point, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var datasetIndex = me.index;
				var value = dataset.data[index];
				var yScale = me.getScaleForId(meta.yAxisID);
				var xScale = me.getScaleForId(meta.xAxisID);
				var pointOptions = me.chart.options.elements.point;
				var x, y;
				var labels = me.chart.data.labels || [];
				var includeOffset = (labels.length === 1 || dataset.data.length === 1) || me.chart.isCombo;
	
				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
					dataset.pointRadius = dataset.radius;
				}
				if ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {
					dataset.pointHitRadius = dataset.hitRadius;
				}
	
				x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
				y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
	
				// Utility
				point._xScale = xScale;
				point._yScale = yScale;
				point._datasetIndex = datasetIndex;
				point._index = index;
	
				// Desired view properties
				point._model = {
					x: x,
					y: y,
					skip: custom.skip || isNaN(x) || isNaN(y),
					// Appearance
					radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
					pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
					backgroundColor: me.getPointBackgroundColor(point, index),
					borderColor: me.getPointBorderColor(point, index),
					borderWidth: me.getPointBorderWidth(point, index),
					tension: meta.dataset._model ? meta.dataset._model.tension : 0,
					steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
					// Tooltip
					hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
				};
			},
	
			calculatePointY: function(value, index, datasetIndex) {
				var me = this;
				var chart = me.chart;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var sumPos = 0;
				var sumNeg = 0;
				var i, ds, dsMeta;
	
				if (yScale.options.stacked) {
					for (i = 0; i < datasetIndex; i++) {
						ds = chart.data.datasets[i];
						dsMeta = chart.getDatasetMeta(i);
						if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
							var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
							if (stackedRightValue < 0) {
								sumNeg += stackedRightValue || 0;
							} else {
								sumPos += stackedRightValue || 0;
							}
						}
					}
	
					var rightValue = Number(yScale.getRightValue(value));
					if (rightValue < 0) {
						return yScale.getPixelForValue(sumNeg + rightValue);
					}
					return yScale.getPixelForValue(sumPos + rightValue);
				}
	
				return yScale.getPixelForValue(value);
			},
	
			updateBezierControlPoints: function() {
				var me = this;
				var meta = me.getMeta();
				var area = me.chart.chartArea;
				var points = (meta.data || []);
				var i, ilen, point, model, controlPoints;
	
				// Only consider points that are drawn in case the spanGaps option is used
				if (meta.dataset._model.spanGaps) {
					points = points.filter(function(pt) {
						return !pt._model.skip;
					});
				}
	
				function capControlPoint(pt, min, max) {
					return Math.max(Math.min(pt, max), min);
				}
	
				if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
					helpers.splineCurveMonotone(points);
				} else {
					for (i = 0, ilen = points.length; i < ilen; ++i) {
						point = points[i];
						model = point._model;
						controlPoints = helpers.splineCurve(
							helpers.previousItem(points, i)._model,
							model,
							helpers.nextItem(points, i)._model,
							meta.dataset._model.tension
						);
						model.controlPointPreviousX = controlPoints.previous.x;
						model.controlPointPreviousY = controlPoints.previous.y;
						model.controlPointNextX = controlPoints.next.x;
						model.controlPointNextY = controlPoints.next.y;
					}
				}
	
				if (me.chart.options.elements.line.capBezierPoints) {
					for (i = 0, ilen = points.length; i < ilen; ++i) {
						model = points[i]._model;
						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
					}
				}
			},
	
			draw: function(ease) {
				var me = this;
				var meta = me.getMeta();
				var points = meta.data || [];
				var easingDecimal = ease || 1;
				var i, ilen;
	
				// Transition Point Locations
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].transition(easingDecimal);
				}
	
				Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
				// Transition and Draw the line
				if (lineEnabled(me.getDataset(), me.chart.options)) {
					meta.dataset.transition(easingDecimal).draw();
				}
				Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
	
				// Draw the points
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].draw(me.chart.chartArea);
				}
			},
	
			setHoverStyle: function(point) {
				// Point
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;
	
				model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
				model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
			},
	
			removeHoverStyle: function(point) {
				var me = this;
				var dataset = me.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;
	
				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
					dataset.pointRadius = dataset.radius;
				}
	
				model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
				model.backgroundColor = me.getPointBackgroundColor(point, index);
				model.borderColor = me.getPointBorderColor(point, index);
				model.borderWidth = me.getPointBorderWidth(point, index);
			}
		});
	};


/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.polarArea = {
	
			scale: {
				type: 'radialLinear',
				lineArc: true, // so that lines are circular
				ticks: {
					beginAtZero: true
				}
			},
	
			// Boolean - Whether to animate the rotation of the chart
			animation: {
				animateRotate: true,
				animateScale: true
			},
	
			startAngle: -0.5 * Math.PI,
			aspectRatio: 1,
			legendCallback: function(chart) {
				var text = [];
				text.push('<ul class="' + chart.id + '-legend">');
	
				var data = chart.data;
				var datasets = data.datasets;
				var labels = data.labels;
	
				if (datasets.length) {
					for (var i = 0; i < datasets[0].data.length; ++i) {
						text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
						if (labels[i]) {
							text.push(labels[i]);
						}
						text.push('</li>');
					}
				}
	
				text.push('</ul>');
				return text.join('');
			},
			legend: {
				labels: {
					generateLabels: function(chart) {
						var data = chart.data;
						if (data.labels.length && data.datasets.length) {
							return data.labels.map(function(label, i) {
								var meta = chart.getDatasetMeta(0);
								var ds = data.datasets[0];
								var arc = meta.data[i];
								var custom = arc.custom || {};
								var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
								var arcOpts = chart.options.elements.arc;
								var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
								var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
								var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
	
								return {
									text: label,
									fillStyle: fill,
									strokeStyle: stroke,
									lineWidth: bw,
									hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
	
									// Extra data used for toggling the correct item
									index: i
								};
							});
						}
						return [];
					}
				},
	
				onClick: function(e, legendItem) {
					var index = legendItem.index;
					var chart = this.chart;
					var i, ilen, meta;
	
					for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
						meta = chart.getDatasetMeta(i);
						meta.data[index].hidden = !meta.data[index].hidden;
					}
	
					chart.update();
				}
			},
	
			// Need to override these to give a nice default
			tooltips: {
				callbacks: {
					title: function() {
						return '';
					},
					label: function(tooltipItem, data) {
						return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
					}
				}
			}
		};
	
		Chart.controllers.polarArea = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Arc,
	
			linkScales: helpers.noop,
	
			update: function(reset) {
				var me = this;
				var chart = me.chart;
				var chartArea = chart.chartArea;
				var meta = me.getMeta();
				var opts = chart.options;
				var arcOpts = opts.elements.arc;
				var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
				chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
				chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
				chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
	
				me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
				me.innerRadius = me.outerRadius - chart.radiusLength;
	
				meta.count = me.countVisibleElements();
	
				helpers.each(meta.data, function(arc, index) {
					me.updateElement(arc, index, reset);
				});
			},
	
			updateElement: function(arc, index, reset) {
				var me = this;
				var chart = me.chart;
				var dataset = me.getDataset();
				var opts = chart.options;
				var animationOpts = opts.animation;
				var scale = chart.scale;
				var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
				var labels = chart.data.labels;
	
				var circumference = me.calculateCircumference(dataset.data[index]);
				var centerX = scale.xCenter;
				var centerY = scale.yCenter;
	
				// If there is NaN data before us, we need to calculate the starting angle correctly.
				// We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data
				var visibleCount = 0;
				var meta = me.getMeta();
				for (var i = 0; i < index; ++i) {
					if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
						++visibleCount;
					}
				}
	
				// var negHalfPI = -0.5 * Math.PI;
				var datasetStartAngle = opts.startAngle;
				var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
				var startAngle = datasetStartAngle + (circumference * visibleCount);
				var endAngle = startAngle + (arc.hidden ? 0 : circumference);
	
				var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
	
				helpers.extend(arc, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
					_scale: scale,
	
					// Desired view properties
					_model: {
						x: centerX,
						y: centerY,
						innerRadius: 0,
						outerRadius: reset ? resetRadius : distance,
						startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
						endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
						label: getValueAtIndexOrDefault(labels, index, labels[index])
					}
				});
	
				// Apply border and fill style
				me.removeHoverStyle(arc);
	
				arc.pivot();
			},
	
			removeHoverStyle: function(arc) {
				Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
			},
	
			countVisibleElements: function() {
				var dataset = this.getDataset();
				var meta = this.getMeta();
				var count = 0;
	
				helpers.each(meta.data, function(element, index) {
					if (!isNaN(dataset.data[index]) && !element.hidden) {
						count++;
					}
				});
	
				return count;
			},
	
			calculateCircumference: function(value) {
				var count = this.getMeta().count;
				if (count > 0 && !isNaN(value)) {
					return (2 * Math.PI) / count;
				}
				return 0;
			}
		});
	};


/***/ },
/* 241 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.radar = {
			aspectRatio: 1,
			scale: {
				type: 'radialLinear'
			},
			elements: {
				line: {
					tension: 0 // no bezier in radar
				}
			}
		};
	
		Chart.controllers.radar = Chart.DatasetController.extend({
	
			datasetElementType: Chart.elements.Line,
	
			dataElementType: Chart.elements.Point,
	
			linkScales: helpers.noop,
	
			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var line = meta.dataset;
				var points = meta.data;
				var custom = line.custom || {};
				var dataset = me.getDataset();
				var lineElementOptions = me.chart.options.elements.line;
				var scale = me.chart.scale;
	
				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
					dataset.lineTension = dataset.tension;
				}
	
				helpers.extend(meta.dataset, {
					// Utility
					_datasetIndex: me.index,
					// Data
					_children: points,
					_loop: true,
					// Model
					_model: {
						// Appearance
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
						borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
						fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
						borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
						borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
						borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
						borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
	
						// Scale
						scaleTop: scale.top,
						scaleBottom: scale.bottom,
						scaleZero: scale.getBasePosition()
					}
				});
	
				meta.dataset.pivot();
	
				// Update Points
				helpers.each(points, function(point, index) {
					me.updateElement(point, index, reset);
				}, me);
	
				// Update bezier control points
				me.updateBezierControlPoints();
			},
			updateElement: function(point, index, reset) {
				var me = this;
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var scale = me.chart.scale;
				var pointElementOptions = me.chart.options.elements.point;
				var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
	
				helpers.extend(point, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
					_scale: scale,
	
					// Desired view properties
					_model: {
						x: reset ? scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales
						y: reset ? scale.yCenter : pointPosition.y,
	
						// Appearance
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
						radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
						borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
						pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
	
						// Tooltip
						hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
					}
				});
	
				point._model.skip = custom.skip ? custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));
			},
			updateBezierControlPoints: function() {
				var chartArea = this.chart.chartArea;
				var meta = this.getMeta();
	
				helpers.each(meta.data, function(point, index) {
					var model = point._model;
					var controlPoints = helpers.splineCurve(
						helpers.previousItem(meta.data, index, true)._model,
						model,
						helpers.nextItem(meta.data, index, true)._model,
						model.tension
					);
	
					// Prevent the bezier going outside of the bounds of the graph
					model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
					model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
	
					model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
					model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
	
					// Now pivot the point for animation
					point.pivot();
				});
			},
	
			draw: function(ease) {
				var meta = this.getMeta();
				var easingDecimal = ease || 1;
	
				// Transition Point Locations
				helpers.each(meta.data, function(point) {
					point.transition(easingDecimal);
				});
	
				// Transition and Draw the line
				meta.dataset.transition(easingDecimal).draw();
	
				// Draw the points
				helpers.each(meta.data, function(point) {
					point.draw();
				});
			},
	
			setHoverStyle: function(point) {
				// Point
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var custom = point.custom || {};
				var index = point._index;
				var model = point._model;
	
				model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
			},
	
			removeHoverStyle: function(point) {
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var custom = point.custom || {};
				var index = point._index;
				var model = point._model;
				var pointElementOptions = this.chart.options.elements.point;
	
				model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
			}
		});
	};


/***/ },
/* 242 */
/***/ function(module, exports) {

	/* global window: false */
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.global.animation = {
			duration: 1000,
			easing: 'easeOutQuart',
			onProgress: helpers.noop,
			onComplete: helpers.noop
		};
	
		Chart.Animation = Chart.Element.extend({
			currentStep: null, // the current animation step
			numSteps: 60, // default number of steps
			easing: '', // the easing to use for this animation
			render: null, // render function used by the animation service
	
			onAnimationProgress: null, // user specified callback to fire on each step of the animation
			onAnimationComplete: null // user specified callback to fire when the animation finishes
		});
	
		Chart.animationService = {
			frameDuration: 17,
			animations: [],
			dropFrames: 0,
			request: null,
	
			/**
			 * @function Chart.animationService.addAnimation
			 * @param chartInstance {ChartController} the chart to animate
			 * @param animationObject {IAnimation} the animation that we will animate
			 * @param duration {Number} length of animation in ms
			 * @param lazy {Boolean} if true, the chart is not marked as animating to enable more responsive interactions
			 */
			addAnimation: function(chartInstance, animationObject, duration, lazy) {
				var me = this;
	
				if (!lazy) {
					chartInstance.animating = true;
				}
	
				for (var index = 0; index < me.animations.length; ++index) {
					if (me.animations[index].chartInstance === chartInstance) {
						// replacing an in progress animation
						me.animations[index].animationObject = animationObject;
						return;
					}
				}
	
				me.animations.push({
					chartInstance: chartInstance,
					animationObject: animationObject
				});
	
				// If there are no animations queued, manually kickstart a digest, for lack of a better word
				if (me.animations.length === 1) {
					me.requestAnimationFrame();
				}
			},
			// Cancel the animation for a given chart instance
			cancelAnimation: function(chartInstance) {
				var index = helpers.findIndex(this.animations, function(animationWrapper) {
					return animationWrapper.chartInstance === chartInstance;
				});
	
				if (index !== -1) {
					this.animations.splice(index, 1);
					chartInstance.animating = false;
				}
			},
			requestAnimationFrame: function() {
				var me = this;
				if (me.request === null) {
					// Skip animation frame requests until the active one is executed.
					// This can happen when processing mouse events, e.g. 'mousemove'
					// and 'mouseout' events will trigger multiple renders.
					me.request = helpers.requestAnimFrame.call(window, function() {
						me.request = null;
						me.startDigest();
					});
				}
			},
			startDigest: function() {
				var me = this;
	
				var startTime = Date.now();
				var framesToDrop = 0;
	
				if (me.dropFrames > 1) {
					framesToDrop = Math.floor(me.dropFrames);
					me.dropFrames = me.dropFrames % 1;
				}
	
				var i = 0;
				while (i < me.animations.length) {
					if (me.animations[i].animationObject.currentStep === null) {
						me.animations[i].animationObject.currentStep = 0;
					}
	
					me.animations[i].animationObject.currentStep += 1 + framesToDrop;
	
					if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
						me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
					}
	
					me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);
					if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
						me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
					}
	
					if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
						if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
							me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
						}
	
						// executed the last frame. Remove the animation.
						me.animations[i].chartInstance.animating = false;
	
						me.animations.splice(i, 1);
					} else {
						++i;
					}
				}
	
				var endTime = Date.now();
				var dropFrames = (endTime - startTime) / me.frameDuration;
	
				me.dropFrames += dropFrames;
	
				// Do we have more stuff to animate?
				if (me.animations.length > 0) {
					me.requestAnimationFrame();
				}
			}
		};
	};


/***/ },
/* 243 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
		// Global Chart canvas helpers object for drawing items to canvas
		var helpers = Chart.canvasHelpers = {};
	
		helpers.drawPoint = function(ctx, pointStyle, radius, x, y) {
			var type, edgeLength, xOffset, yOffset, height, size;
	
			if (typeof pointStyle === 'object') {
				type = pointStyle.toString();
				if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
					ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
					return;
				}
			}
	
			if (isNaN(radius) || radius <= 0) {
				return;
			}
	
			switch (pointStyle) {
			// Default includes circle
			default:
				ctx.beginPath();
				ctx.arc(x, y, radius, 0, Math.PI * 2);
				ctx.closePath();
				ctx.fill();
				break;
			case 'triangle':
				ctx.beginPath();
				edgeLength = 3 * radius / Math.sqrt(3);
				height = edgeLength * Math.sqrt(3) / 2;
				ctx.moveTo(x - edgeLength / 2, y + height / 3);
				ctx.lineTo(x + edgeLength / 2, y + height / 3);
				ctx.lineTo(x, y - 2 * height / 3);
				ctx.closePath();
				ctx.fill();
				break;
			case 'rect':
				size = 1 / Math.SQRT2 * radius;
				ctx.beginPath();
				ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
				ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
				break;
			case 'rectRounded':
				var offset = radius / Math.SQRT2;
				var leftX = x - offset;
				var topY = y - offset;
				var sideSize = Math.SQRT2 * radius;
				Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);
				ctx.fill();
				break;
			case 'rectRot':
				size = 1 / Math.SQRT2 * radius;
				ctx.beginPath();
				ctx.moveTo(x - size, y);
				ctx.lineTo(x, y + size);
				ctx.lineTo(x + size, y);
				ctx.lineTo(x, y - size);
				ctx.closePath();
				ctx.fill();
				break;
			case 'cross':
				ctx.beginPath();
				ctx.moveTo(x, y + radius);
				ctx.lineTo(x, y - radius);
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			case 'crossRot':
				ctx.beginPath();
				xOffset = Math.cos(Math.PI / 4) * radius;
				yOffset = Math.sin(Math.PI / 4) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x - xOffset, y + yOffset);
				ctx.lineTo(x + xOffset, y - yOffset);
				ctx.closePath();
				break;
			case 'star':
				ctx.beginPath();
				ctx.moveTo(x, y + radius);
				ctx.lineTo(x, y - radius);
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				xOffset = Math.cos(Math.PI / 4) * radius;
				yOffset = Math.sin(Math.PI / 4) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x - xOffset, y + yOffset);
				ctx.lineTo(x + xOffset, y - yOffset);
				ctx.closePath();
				break;
			case 'line':
				ctx.beginPath();
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			case 'dash':
				ctx.beginPath();
				ctx.moveTo(x, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			}
	
			ctx.stroke();
		};
	
		helpers.clipArea = function(ctx, clipArea) {
			ctx.save();
			ctx.beginPath();
			ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);
			ctx.clip();
		};
	
		helpers.unclipArea = function(ctx) {
			ctx.restore();
		};
	
	};


/***/ },
/* 244 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var plugins = Chart.plugins;
		var platform = Chart.platform;
	
		// Create a dictionary of chart types, to allow for extension of existing types
		Chart.types = {};
	
		// Store a reference to each instance - allowing us to globally resize chart instances on window resize.
		// Destroy method on the chart will remove the instance of the chart from this reference.
		Chart.instances = {};
	
		// Controllers available for dataset visualization eg. bar, line, slice, etc.
		Chart.controllers = {};
	
		/**
		 * Initializes the given config with global and chart default values.
		 */
		function initConfig(config) {
			config = config || {};
	
			// Do NOT use configMerge() for the data object because this method merges arrays
			// and so would change references to labels and datasets, preventing data updates.
			var data = config.data = config.data || {};
			data.datasets = data.datasets || [];
			data.labels = data.labels || [];
	
			config.options = helpers.configMerge(
				Chart.defaults.global,
				Chart.defaults[config.type],
				config.options || {});
	
			return config;
		}
	
		/**
		 * Updates the config of the chart
		 * @param chart {Chart.Controller} chart to update the options for
		 */
		function updateConfig(chart) {
			var newOptions = chart.options;
	
			// Update Scale(s) with options
			if (newOptions.scale) {
				chart.scale.options = newOptions.scale;
			} else if (newOptions.scales) {
				newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function(scaleOptions) {
					chart.scales[scaleOptions.id].options = scaleOptions;
				});
			}
	
			// Tooltip
			chart.tooltip._options = newOptions.tooltips;
		}
	
		/**
		 * @class Chart.Controller
		 * The main controller of a chart.
		 */
		Chart.Controller = function(item, config, instance) {
			var me = this;
	
			config = initConfig(config);
	
			var context = platform.acquireContext(item, config);
			var canvas = context && context.canvas;
			var height = canvas && canvas.height;
			var width = canvas && canvas.width;
	
			instance.ctx = context;
			instance.canvas = canvas;
			instance.config = config;
			instance.width = width;
			instance.height = height;
			instance.aspectRatio = height? width / height : null;
	
			me.id = helpers.uid();
			me.chart = instance;
			me.config = config;
			me.options = config.options;
			me._bufferedRender = false;
	
			// Add the chart instance to the global namespace
			Chart.instances[me.id] = me;
	
			Object.defineProperty(me, 'data', {
				get: function() {
					return me.config.data;
				}
			});
	
			if (!context || !canvas) {
				// The given item is not a compatible context2d element, let's return before finalizing
				// the chart initialization but after setting basic chart / controller properties that
				// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
				// https://github.com/chartjs/Chart.js/issues/2807
				console.error("Failed to create chart: can't acquire context from the given item");
				return me;
			}
	
			me.initialize();
			me.update();
	
			return me;
		};
	
		helpers.extend(Chart.Controller.prototype, /** @lends Chart.Controller.prototype */ {
			initialize: function() {
				var me = this;
	
				// Before init plugin notification
				plugins.notify(me, 'beforeInit');
	
				helpers.retinaScale(me.chart);
	
				me.bindEvents();
	
				if (me.options.responsive) {
					// Initial resize before chart draws (must be silent to preserve initial animations).
					me.resize(true);
				}
	
				// Make sure scales have IDs and are built before we build any controllers.
				me.ensureScalesHaveIDs();
				me.buildScales();
				me.initToolTip();
	
				// After init plugin notification
				plugins.notify(me, 'afterInit');
	
				return me;
			},
	
			clear: function() {
				helpers.clear(this.chart);
				return this;
			},
	
			stop: function() {
				// Stops any current animation loop occurring
				Chart.animationService.cancelAnimation(this);
				return this;
			},
	
			resize: function(silent) {
				var me = this;
				var chart = me.chart;
				var options = me.options;
				var canvas = chart.canvas;
				var aspectRatio = (options.maintainAspectRatio && chart.aspectRatio) || null;
	
				// the canvas render width and height will be casted to integers so make sure that
				// the canvas display style uses the same integer values to avoid blurring effect.
				var newWidth = Math.floor(helpers.getMaximumWidth(canvas));
				var newHeight = Math.floor(aspectRatio? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));
	
				if (chart.width === newWidth && chart.height === newHeight) {
					return;
				}
	
				canvas.width = chart.width = newWidth;
				canvas.height = chart.height = newHeight;
				canvas.style.width = newWidth + 'px';
				canvas.style.height = newHeight + 'px';
	
				helpers.retinaScale(chart);
	
				if (!silent) {
					// Notify any plugins about the resize
					var newSize = {width: newWidth, height: newHeight};
					plugins.notify(me, 'resize', [newSize]);
	
					// Notify of resize
					if (me.options.onResize) {
						me.options.onResize(me, newSize);
					}
	
					me.stop();
					me.update(me.options.responsiveAnimationDuration);
				}
			},
	
			ensureScalesHaveIDs: function() {
				var options = this.options;
				var scalesOptions = options.scales || {};
				var scaleOptions = options.scale;
	
				helpers.each(scalesOptions.xAxes, function(xAxisOptions, index) {
					xAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);
				});
	
				helpers.each(scalesOptions.yAxes, function(yAxisOptions, index) {
					yAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);
				});
	
				if (scaleOptions) {
					scaleOptions.id = scaleOptions.id || 'scale';
				}
			},
	
			/**
			 * Builds a map of scale ID to scale object for future lookup.
			 */
			buildScales: function() {
				var me = this;
				var options = me.options;
				var scales = me.scales = {};
				var items = [];
	
				if (options.scales) {
					items = items.concat(
						(options.scales.xAxes || []).map(function(xAxisOptions) {
							return {options: xAxisOptions, dtype: 'category'};
						}),
						(options.scales.yAxes || []).map(function(yAxisOptions) {
							return {options: yAxisOptions, dtype: 'linear'};
						})
					);
				}
	
				if (options.scale) {
					items.push({options: options.scale, dtype: 'radialLinear', isDefault: true});
				}
	
				helpers.each(items, function(item) {
					var scaleOptions = item.options;
					var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
					var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
					if (!scaleClass) {
						return;
					}
	
					var scale = new scaleClass({
						id: scaleOptions.id,
						options: scaleOptions,
						ctx: me.chart.ctx,
						chart: me
					});
	
					scales[scale.id] = scale;
	
					// TODO(SB): I think we should be able to remove this custom case (options.scale)
					// and consider it as a regular scale part of the "scales"" map only! This would
					// make the logic easier and remove some useless? custom code.
					if (item.isDefault) {
						me.scale = scale;
					}
				});
	
				Chart.scaleService.addScalesToLayout(this);
			},
	
			buildOrUpdateControllers: function() {
				var me = this;
				var types = [];
				var newControllers = [];
	
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					var meta = me.getDatasetMeta(datasetIndex);
					if (!meta.type) {
						meta.type = dataset.type || me.config.type;
					}
	
					types.push(meta.type);
	
					if (meta.controller) {
						meta.controller.updateIndex(datasetIndex);
					} else {
						meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
						newControllers.push(meta.controller);
					}
				}, me);
	
				if (types.length > 1) {
					for (var i = 1; i < types.length; i++) {
						if (types[i] !== types[i - 1]) {
							me.isCombo = true;
							break;
						}
					}
				}
	
				return newControllers;
			},
	
			/**
			 * Reset the elements of all datasets
			 * @private
			 */
			resetElements: function() {
				var me = this;
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					me.getDatasetMeta(datasetIndex).controller.reset();
				}, me);
			},
	
			/**
			* Resets the chart back to it's state before the initial animation
			*/
			reset: function() {
				this.resetElements();
				this.tooltip.initialize();
			},
	
			update: function(animationDuration, lazy) {
				var me = this;
	
				updateConfig(me);
	
				if (plugins.notify(me, 'beforeUpdate') === false) {
					return;
				}
	
				// In case the entire data object changed
				me.tooltip._data = me.data;
	
				// Make sure dataset controllers are updated and new controllers are reset
				var newControllers = me.buildOrUpdateControllers();
	
				// Make sure all dataset controllers have correct meta data counts
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
				}, me);
	
				me.updateLayout();
	
				// Can only reset the new controllers after the scales have been updated
				helpers.each(newControllers, function(controller) {
					controller.reset();
				});
	
				me.updateDatasets();
	
				// Do this before render so that any plugins that need final scale updates can use it
				plugins.notify(me, 'afterUpdate');
	
				if (me._bufferedRender) {
					me._bufferedRequest = {
						lazy: lazy,
						duration: animationDuration
					};
				} else {
					me.render(animationDuration, lazy);
				}
			},
	
			/**
			 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
			 * hook, in which case, plugins will not be called on `afterLayout`.
			 * @private
			 */
			updateLayout: function() {
				var me = this;
	
				if (plugins.notify(me, 'beforeLayout') === false) {
					return;
				}
	
				Chart.layoutService.update(this, this.chart.width, this.chart.height);
	
				/**
				 * Provided for backward compatibility, use `afterLayout` instead.
				 * @method IPlugin#afterScaleUpdate
				 * @deprecated since version 2.5.0
				 * @todo remove at version 3
				 */
				plugins.notify(me, 'afterScaleUpdate');
				plugins.notify(me, 'afterLayout');
			},
	
			/**
			 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
			 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
			 * @private
			 */
			updateDatasets: function() {
				var me = this;
	
				if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
					return;
				}
	
				for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
					me.getDatasetMeta(i).controller.update();
				}
	
				plugins.notify(me, 'afterDatasetsUpdate');
			},
	
			render: function(duration, lazy) {
				var me = this;
	
				if (plugins.notify(me, 'beforeRender') === false) {
					return;
				}
	
				var animationOptions = me.options.animation;
				var onComplete = function() {
					plugins.notify(me, 'afterRender');
					var callback = animationOptions && animationOptions.onComplete;
					if (callback && callback.call) {
						callback.call(me);
					}
				};
	
				if (animationOptions && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && animationOptions.duration !== 0))) {
					var animation = new Chart.Animation();
					animation.numSteps = (duration || animationOptions.duration) / 16.66; // 60 fps
					animation.easing = animationOptions.easing;
	
					// render function
					animation.render = function(chartInstance, animationObject) {
						var easingFunction = helpers.easingEffects[animationObject.easing];
						var stepDecimal = animationObject.currentStep / animationObject.numSteps;
						var easeDecimal = easingFunction(stepDecimal);
	
						chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
					};
	
					// user events
					animation.onAnimationProgress = animationOptions.onProgress;
					animation.onAnimationComplete = onComplete;
	
					Chart.animationService.addAnimation(me, animation, duration, lazy);
				} else {
					me.draw();
					onComplete();
				}
	
				return me;
			},
	
			draw: function(easingValue) {
				var me = this;
	
				me.clear();
	
				if (easingValue === undefined || easingValue === null) {
					easingValue = 1;
				}
	
				if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
					return;
				}
	
				// Draw all the scales
				helpers.each(me.boxes, function(box) {
					box.draw(me.chartArea);
				}, me);
	
				if (me.scale) {
					me.scale.draw();
				}
	
				me.drawDatasets(easingValue);
	
				// Finally draw the tooltip
				me.tooltip.transition(easingValue).draw();
	
				plugins.notify(me, 'afterDraw', [easingValue]);
			},
	
			/**
			 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
			 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
			 * @private
			 */
			drawDatasets: function(easingValue) {
				var me = this;
	
				if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
					return;
				}
	
				// Draw each dataset via its respective controller (reversed to support proper line stacking)
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					if (me.isDatasetVisible(datasetIndex)) {
						me.getDatasetMeta(datasetIndex).controller.draw(easingValue);
					}
				}, me, true);
	
				plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
			},
	
			// Get the single element that was clicked on
			// @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
			getElementAtEvent: function(e) {
				return Chart.Interaction.modes.single(this, e);
			},
	
			getElementsAtEvent: function(e) {
				return Chart.Interaction.modes.label(this, e, {intersect: true});
			},
	
			getElementsAtXAxis: function(e) {
				return Chart.Interaction.modes['x-axis'](this, e, {intersect: true});
			},
	
			getElementsAtEventForMode: function(e, mode, options) {
				var method = Chart.Interaction.modes[mode];
				if (typeof method === 'function') {
					return method(this, e, options);
				}
	
				return [];
			},
	
			getDatasetAtEvent: function(e) {
				return Chart.Interaction.modes.dataset(this, e, {intersect: true});
			},
	
			getDatasetMeta: function(datasetIndex) {
				var me = this;
				var dataset = me.data.datasets[datasetIndex];
				if (!dataset._meta) {
					dataset._meta = {};
				}
	
				var meta = dataset._meta[me.id];
				if (!meta) {
					meta = dataset._meta[me.id] = {
						type: null,
						data: [],
						dataset: null,
						controller: null,
						hidden: null,			// See isDatasetVisible() comment
						xAxisID: null,
						yAxisID: null
					};
				}
	
				return meta;
			},
	
			getVisibleDatasetCount: function() {
				var count = 0;
				for (var i = 0, ilen = this.data.datasets.length; i<ilen; ++i) {
					if (this.isDatasetVisible(i)) {
						count++;
					}
				}
				return count;
			},
	
			isDatasetVisible: function(datasetIndex) {
				var meta = this.getDatasetMeta(datasetIndex);
	
				// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
				// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
				return typeof meta.hidden === 'boolean'? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
			},
	
			generateLegend: function() {
				return this.options.legendCallback(this);
			},
	
			destroy: function() {
				var me = this;
				var canvas = me.chart.canvas;
				var meta, i, ilen;
	
				me.stop();
	
				// dataset controllers need to cleanup associated data
				for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
					meta = me.getDatasetMeta(i);
					if (meta.controller) {
						meta.controller.destroy();
						meta.controller = null;
					}
				}
	
				if (canvas) {
					me.unbindEvents();
					helpers.clear(me.chart);
					platform.releaseContext(me.chart.ctx);
					me.chart.canvas = null;
					me.chart.ctx = null;
				}
	
				plugins.notify(me, 'destroy');
	
				delete Chart.instances[me.id];
			},
	
			toBase64Image: function() {
				return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
			},
	
			initToolTip: function() {
				var me = this;
				me.tooltip = new Chart.Tooltip({
					_chart: me.chart,
					_chartInstance: me,
					_data: me.data,
					_options: me.options.tooltips
				}, me);
				me.tooltip.initialize();
			},
	
			/**
			 * @private
			 */
			bindEvents: function() {
				var me = this;
				var listeners = me._listeners = {};
				var listener = function() {
					me.eventHandler.apply(me, arguments);
				};
	
				helpers.each(me.options.events, function(type) {
					platform.addEventListener(me, type, listener);
					listeners[type] = listener;
				});
	
				// Responsiveness is currently based on the use of an iframe, however this method causes
				// performance issues and could be troublesome when used with ad blockers. So make sure
				// that the user is still able to create a chart without iframe when responsive is false.
				// See https://github.com/chartjs/Chart.js/issues/2210
				if (me.options.responsive) {
					listener = function() {
						me.resize();
					};
	
					platform.addEventListener(me, 'resize', listener);
					listeners.resize = listener;
				}
			},
	
			/**
			 * @private
			 */
			unbindEvents: function() {
				var me = this;
				var listeners = me._listeners;
				if (!listeners) {
					return;
				}
	
				delete me._listeners;
				helpers.each(listeners, function(listener, type) {
					platform.removeEventListener(me, type, listener);
				});
			},
	
			updateHoverStyle: function(elements, mode, enabled) {
				var method = enabled? 'setHoverStyle' : 'removeHoverStyle';
				var element, i, ilen;
	
				for (i=0, ilen=elements.length; i<ilen; ++i) {
					element = elements[i];
					if (element) {
						this.getDatasetMeta(element._datasetIndex).controller[method](element);
					}
				}
			},
	
			/**
			 * @private
			 */
			eventHandler: function(e) {
				var me = this;
				var tooltip = me.tooltip;
	
				if (plugins.notify(me, 'beforeEvent', [e]) === false) {
					return;
				}
	
				// Buffer any update calls so that renders do not occur
				me._bufferedRender = true;
				me._bufferedRequest = null;
	
				var changed = me.handleEvent(e);
				changed |= tooltip && tooltip.handleEvent(e);
	
				plugins.notify(me, 'afterEvent', [e]);
	
				var bufferedRequest = me._bufferedRequest;
				if (bufferedRequest) {
					// If we have an update that was triggered, we need to do a normal render
					me.render(bufferedRequest.duration, bufferedRequest.lazy);
				} else if (changed && !me.animating) {
					// If entering, leaving, or changing elements, animate the change via pivot
					me.stop();
	
					// We only need to render at this point. Updating will cause scales to be
					// recomputed generating flicker & using more memory than necessary.
					me.render(me.options.hover.animationDuration, true);
				}
	
				me._bufferedRender = false;
				me._bufferedRequest = null;
	
				return me;
			},
	
			/**
			 * Handle an event
			 * @private
			 * @param {IEvent} event the event to handle
			 * @return {Boolean} true if the chart needs to re-render
			 */
			handleEvent: function(e) {
				var me = this;
				var options = me.options || {};
				var hoverOptions = options.hover;
				var changed = false;
	
				me.lastActive = me.lastActive || [];
	
				// Find Active Elements for hover and tooltips
				if (e.type === 'mouseout') {
					me.active = [];
				} else {
					me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
				}
	
				// On Hover hook
				if (hoverOptions.onHover) {
					// Need to call with native event here to not break backwards compatibility
					hoverOptions.onHover.call(me, e.native, me.active);
				}
	
				if (e.type === 'mouseup' || e.type === 'click') {
					if (options.onClick) {
						// Use e.native here for backwards compatibility
						options.onClick.call(me, e.native, me.active);
					}
				}
	
				// Remove styling for last active (even if it may still be active)
				if (me.lastActive.length) {
					me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
				}
	
				// Built in hover styling
				if (me.active.length && hoverOptions.mode) {
					me.updateHoverStyle(me.active, hoverOptions.mode, true);
				}
	
				changed = !helpers.arrayEquals(me.active, me.lastActive);
	
				// Remember Last Actives
				me.lastActive = me.active;
	
				return changed;
			}
		});
	};


/***/ },
/* 245 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
	
		/**
		 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
		 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
		 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
		 */
		function listenArrayEvents(array, listener) {
			if (array._chartjs) {
				array._chartjs.listeners.push(listener);
				return;
			}
	
			Object.defineProperty(array, '_chartjs', {
				configurable: true,
				enumerable: false,
				value: {
					listeners: [listener]
				}
			});
	
			arrayEvents.forEach(function(key) {
				var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
				var base = array[key];
	
				Object.defineProperty(array, key, {
					configurable: true,
					enumerable: false,
					value: function() {
						var args = Array.prototype.slice.call(arguments);
						var res = base.apply(this, args);
	
						helpers.each(array._chartjs.listeners, function(object) {
							if (typeof object[method] === 'function') {
								object[method].apply(object, args);
							}
						});
	
						return res;
					}
				});
			});
		}
	
		/**
		 * Removes the given array event listener and cleanup extra attached properties (such as
		 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
		 */
		function unlistenArrayEvents(array, listener) {
			var stub = array._chartjs;
			if (!stub) {
				return;
			}
	
			var listeners = stub.listeners;
			var index = listeners.indexOf(listener);
			if (index !== -1) {
				listeners.splice(index, 1);
			}
	
			if (listeners.length > 0) {
				return;
			}
	
			arrayEvents.forEach(function(key) {
				delete array[key];
			});
	
			delete array._chartjs;
		}
	
		// Base class for all dataset controllers (line, bar, etc)
		Chart.DatasetController = function(chart, datasetIndex) {
			this.initialize(chart, datasetIndex);
		};
	
		helpers.extend(Chart.DatasetController.prototype, {
	
			/**
			 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
			 * @type {Chart.core.element}
			 */
			datasetElementType: null,
	
			/**
			 * Element type used to generate a meta data (e.g. Chart.element.Point).
			 * @type {Chart.core.element}
			 */
			dataElementType: null,
	
			initialize: function(chart, datasetIndex) {
				var me = this;
				me.chart = chart;
				me.index = datasetIndex;
				me.linkScales();
				me.addElements();
			},
	
			updateIndex: function(datasetIndex) {
				this.index = datasetIndex;
			},
	
			linkScales: function() {
				var me = this;
				var meta = me.getMeta();
				var dataset = me.getDataset();
	
				if (meta.xAxisID === null) {
					meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
				}
				if (meta.yAxisID === null) {
					meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
				}
			},
	
			getDataset: function() {
				return this.chart.data.datasets[this.index];
			},
	
			getMeta: function() {
				return this.chart.getDatasetMeta(this.index);
			},
	
			getScaleForId: function(scaleID) {
				return this.chart.scales[scaleID];
			},
	
			reset: function() {
				this.update(true);
			},
	
			/**
			 * @private
			 */
			destroy: function() {
				if (this._data) {
					unlistenArrayEvents(this._data, this);
				}
			},
	
			createMetaDataset: function() {
				var me = this;
				var type = me.datasetElementType;
				return type && new type({
					_chart: me.chart.chart,
					_datasetIndex: me.index
				});
			},
	
			createMetaData: function(index) {
				var me = this;
				var type = me.dataElementType;
				return type && new type({
					_chart: me.chart.chart,
					_datasetIndex: me.index,
					_index: index
				});
			},
	
			addElements: function() {
				var me = this;
				var meta = me.getMeta();
				var data = me.getDataset().data || [];
				var metaData = meta.data;
				var i, ilen;
	
				for (i=0, ilen=data.length; i<ilen; ++i) {
					metaData[i] = metaData[i] || me.createMetaData(i);
				}
	
				meta.dataset = meta.dataset || me.createMetaDataset();
			},
	
			addElementAndReset: function(index) {
				var element = this.createMetaData(index);
				this.getMeta().data.splice(index, 0, element);
				this.updateElement(element, index, true);
			},
	
			buildOrUpdateElements: function() {
				var me = this;
				var dataset = me.getDataset();
				var data = dataset.data || (dataset.data = []);
	
				// In order to correctly handle data addition/deletion animation (an thus simulate
				// real-time charts), we need to monitor these data modifications and synchronize
				// the internal meta data accordingly.
				if (me._data !== data) {
					if (me._data) {
						// This case happens when the user replaced the data array instance.
						unlistenArrayEvents(me._data, me);
					}
	
					listenArrayEvents(data, me);
					me._data = data;
				}
	
				// Re-sync meta data in case the user replaced the data array or if we missed
				// any updates and so make sure that we handle number of datapoints changing.
				me.resyncElements();
			},
	
			update: helpers.noop,
	
			draw: function(ease) {
				var easingDecimal = ease || 1;
				var i, len;
				var metaData = this.getMeta().data;
				for (i = 0, len = metaData.length; i < len; ++i) {
					metaData[i].transition(easingDecimal).draw();
				}
			},
	
			removeHoverStyle: function(element, elementOpts) {
				var dataset = this.chart.data.datasets[element._datasetIndex],
					index = element._index,
					custom = element.custom || {},
					valueOrDefault = helpers.getValueAtIndexOrDefault,
					model = element._model;
	
				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
			},
	
			setHoverStyle: function(element) {
				var dataset = this.chart.data.datasets[element._datasetIndex],
					index = element._index,
					custom = element.custom || {},
					valueOrDefault = helpers.getValueAtIndexOrDefault,
					getHoverColor = helpers.getHoverColor,
					model = element._model;
	
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
			},
	
			/**
			 * @private
			 */
			resyncElements: function() {
				var me = this;
				var meta = me.getMeta();
				var data = me.getDataset().data;
				var numMeta = meta.data.length;
				var numData = data.length;
	
				if (numData < numMeta) {
					meta.data.splice(numData, numMeta - numData);
				} else if (numData > numMeta) {
					me.insertElements(numMeta, numData - numMeta);
				}
			},
	
			/**
			 * @private
			 */
			insertElements: function(start, count) {
				for (var i=0; i<count; ++i) {
					this.addElementAndReset(start + i);
				}
			},
	
			/**
			 * @private
			 */
			onDataPush: function() {
				this.insertElements(this.getDataset().data.length-1, arguments.length);
			},
	
			/**
			 * @private
			 */
			onDataPop: function() {
				this.getMeta().data.pop();
			},
	
			/**
			 * @private
			 */
			onDataShift: function() {
				this.getMeta().data.shift();
			},
	
			/**
			 * @private
			 */
			onDataSplice: function(start, count) {
				this.getMeta().data.splice(start, count);
				this.insertElements(start, arguments.length - 2);
			},
	
			/**
			 * @private
			 */
			onDataUnshift: function() {
				this.insertElements(0, arguments.length);
			}
		});
	
		Chart.DatasetController.extend = helpers.inherits;
	};


/***/ },
/* 246 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.elements = {};
	
		Chart.Element = function(configuration) {
			helpers.extend(this, configuration);
			this.initialize.apply(this, arguments);
		};
	
		helpers.extend(Chart.Element.prototype, {
	
			initialize: function() {
				this.hidden = false;
			},
	
			pivot: function() {
				var me = this;
				if (!me._view) {
					me._view = helpers.clone(me._model);
				}
				me._start = helpers.clone(me._view);
				return me;
			},
	
			transition: function(ease) {
				var me = this;
	
				if (!me._view) {
					me._view = helpers.clone(me._model);
				}
	
				// No animation -> No Transition
				if (ease === 1) {
					me._view = me._model;
					me._start = null;
					return me;
				}
	
				if (!me._start) {
					me.pivot();
				}
	
				helpers.each(me._model, function(value, key) {
	
					if (key[0] === '_') {
						// Only non-underscored properties
					// Init if doesn't exist
					} else if (!me._view.hasOwnProperty(key)) {
						if (typeof value === 'number' && !isNaN(me._view[key])) {
							me._view[key] = value * ease;
						} else {
							me._view[key] = value;
						}
					// No unnecessary computations
					} else if (value === me._view[key]) {
						// It's the same! Woohoo!
					// Color transitions if possible
					} else if (typeof value === 'string') {
						try {
							var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
							me._view[key] = color.rgbString();
						} catch (err) {
							me._view[key] = value;
						}
					// Number transitions
					} else if (typeof value === 'number') {
						var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
						me._view[key] = ((me._model[key] - startVal) * ease) + startVal;
					// Everything else
					} else {
						me._view[key] = value;
					}
				}, me);
	
				return me;
			},
	
			tooltipPosition: function() {
				return {
					x: this._model.x,
					y: this._model.y
				};
			},
	
			hasValue: function() {
				return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
			}
		});
	
		Chart.Element.extend = helpers.inherits;
	
	};


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* global window: false */
	/* global document: false */
	'use strict';
	
	var color = __webpack_require__(271);
	
	module.exports = function(Chart) {
		// Global Chart helpers object for utility methods and classes
		var helpers = Chart.helpers = {};
	
		// -- Basic js utility methods
		helpers.each = function(loopable, callback, self, reverse) {
			// Check to see if null or undefined firstly.
			var i, len;
			if (helpers.isArray(loopable)) {
				len = loopable.length;
				if (reverse) {
					for (i = len - 1; i >= 0; i--) {
						callback.call(self, loopable[i], i);
					}
				} else {
					for (i = 0; i < len; i++) {
						callback.call(self, loopable[i], i);
					}
				}
			} else if (typeof loopable === 'object') {
				var keys = Object.keys(loopable);
				len = keys.length;
				for (i = 0; i < len; i++) {
					callback.call(self, loopable[keys[i]], keys[i]);
				}
			}
		};
		helpers.clone = function(obj) {
			var objClone = {};
			helpers.each(obj, function(value, key) {
				if (helpers.isArray(value)) {
					objClone[key] = value.slice(0);
				} else if (typeof value === 'object' && value !== null) {
					objClone[key] = helpers.clone(value);
				} else {
					objClone[key] = value;
				}
			});
			return objClone;
		};
		helpers.extend = function(base) {
			var setFn = function(value, key) {
				base[key] = value;
			};
			for (var i = 1, ilen = arguments.length; i < ilen; i++) {
				helpers.each(arguments[i], setFn);
			}
			return base;
		};
		// Need a special merge function to chart configs since they are now grouped
		helpers.configMerge = function(_base) {
			var base = helpers.clone(_base);
			helpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {
				helpers.each(extension, function(value, key) {
					var baseHasProperty = base.hasOwnProperty(key);
					var baseVal = baseHasProperty ? base[key] : {};
	
					if (key === 'scales') {
						// Scale config merging is complex. Add our own function here for that
						base[key] = helpers.scaleMerge(baseVal, value);
					} else if (key === 'scale') {
						// Used in polar area & radar charts since there is only one scale
						base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
					} else if (baseHasProperty
							&& typeof baseVal === 'object'
							&& !helpers.isArray(baseVal)
							&& baseVal !== null
							&& typeof value === 'object'
							&& !helpers.isArray(value)) {
						// If we are overwriting an object with an object, do a merge of the properties.
						base[key] = helpers.configMerge(baseVal, value);
					} else {
						// can just overwrite the value in this case
						base[key] = value;
					}
				});
			});
	
			return base;
		};
		helpers.scaleMerge = function(_base, extension) {
			var base = helpers.clone(_base);
	
			helpers.each(extension, function(value, key) {
				if (key === 'xAxes' || key === 'yAxes') {
					// These properties are arrays of items
					if (base.hasOwnProperty(key)) {
						helpers.each(value, function(valueObj, index) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
							if (index >= base[key].length || !base[key][index].type) {
								base[key].push(helpers.configMerge(axisDefaults, valueObj));
							} else if (valueObj.type && valueObj.type !== base[key][index].type) {
								// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
								base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
							} else {
								// Type is the same
								base[key][index] = helpers.configMerge(base[key][index], valueObj);
							}
						});
					} else {
						base[key] = [];
						helpers.each(value, function(valueObj) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
						});
					}
				} else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
					// If we are overwriting an object with an object, do a merge of the properties.
					base[key] = helpers.configMerge(base[key], value);
	
				} else {
					// can just overwrite the value in this case
					base[key] = value;
				}
			});
	
			return base;
		};
		helpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {
			if (value === undefined || value === null) {
				return defaultValue;
			}
	
			if (helpers.isArray(value)) {
				return index < value.length ? value[index] : defaultValue;
			}
	
			return value;
		};
		helpers.getValueOrDefault = function(value, defaultValue) {
			return value === undefined ? defaultValue : value;
		};
		helpers.indexOf = Array.prototype.indexOf?
			function(array, item) {
				return array.indexOf(item);
			}:
			function(array, item) {
				for (var i = 0, ilen = array.length; i < ilen; ++i) {
					if (array[i] === item) {
						return i;
					}
				}
				return -1;
			};
		helpers.where = function(collection, filterCallback) {
			if (helpers.isArray(collection) && Array.prototype.filter) {
				return collection.filter(filterCallback);
			}
			var filtered = [];
	
			helpers.each(collection, function(item) {
				if (filterCallback(item)) {
					filtered.push(item);
				}
			});
	
			return filtered;
		};
		helpers.findIndex = Array.prototype.findIndex?
			function(array, callback, scope) {
				return array.findIndex(callback, scope);
			} :
			function(array, callback, scope) {
				scope = scope === undefined? array : scope;
				for (var i = 0, ilen = array.length; i < ilen; ++i) {
					if (callback.call(scope, array[i], i, array)) {
						return i;
					}
				}
				return -1;
			};
		helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to start of the array
			if (startIndex === undefined || startIndex === null) {
				startIndex = -1;
			}
			for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
		helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to end of the array
			if (startIndex === undefined || startIndex === null) {
				startIndex = arrayToSearch.length;
			}
			for (var i = startIndex - 1; i >= 0; i--) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
		helpers.inherits = function(extensions) {
			// Basic javascript inheritance based on the model created in Backbone.js
			var me = this;
			var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
				return me.apply(this, arguments);
			};
	
			var Surrogate = function() {
				this.constructor = ChartElement;
			};
			Surrogate.prototype = me.prototype;
			ChartElement.prototype = new Surrogate();
	
			ChartElement.extend = helpers.inherits;
	
			if (extensions) {
				helpers.extend(ChartElement.prototype, extensions);
			}
	
			ChartElement.__super__ = me.prototype;
	
			return ChartElement;
		};
		helpers.noop = function() {};
		helpers.uid = (function() {
			var id = 0;
			return function() {
				return id++;
			};
		}());
		// -- Math methods
		helpers.isNumber = function(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		};
		helpers.almostEquals = function(x, y, epsilon) {
			return Math.abs(x - y) < epsilon;
		};
		helpers.almostWhole = function(x, epsilon) {
			var rounded = Math.round(x);
			return (((rounded - epsilon) < x) && ((rounded + epsilon) > x));
		};
		helpers.max = function(array) {
			return array.reduce(function(max, value) {
				if (!isNaN(value)) {
					return Math.max(max, value);
				}
				return max;
			}, Number.NEGATIVE_INFINITY);
		};
		helpers.min = function(array) {
			return array.reduce(function(min, value) {
				if (!isNaN(value)) {
					return Math.min(min, value);
				}
				return min;
			}, Number.POSITIVE_INFINITY);
		};
		helpers.sign = Math.sign?
			function(x) {
				return Math.sign(x);
			} :
			function(x) {
				x = +x; // convert to a number
				if (x === 0 || isNaN(x)) {
					return x;
				}
				return x > 0 ? 1 : -1;
			};
		helpers.log10 = Math.log10?
			function(x) {
				return Math.log10(x);
			} :
			function(x) {
				return Math.log(x) / Math.LN10;
			};
		helpers.toRadians = function(degrees) {
			return degrees * (Math.PI / 180);
		};
		helpers.toDegrees = function(radians) {
			return radians * (180 / Math.PI);
		};
		// Gets the angle from vertical upright to the point about a centre.
		helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
			var distanceFromXCenter = anglePoint.x - centrePoint.x,
				distanceFromYCenter = anglePoint.y - centrePoint.y,
				radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
	
			var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
	
			if (angle < (-0.5 * Math.PI)) {
				angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
			}
	
			return {
				angle: angle,
				distance: radialDistanceFromCenter
			};
		};
		helpers.distanceBetweenPoints = function(pt1, pt2) {
			return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
		};
		helpers.aliasPixel = function(pixelWidth) {
			return (pixelWidth % 2 === 0) ? 0 : 0.5;
		};
		helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
			// Props to Rob Spencer at scaled innovation for his post on splining between points
			// http://scaledinnovation.com/analytics/splines/aboutSplines.html
	
			// This function must also respect "skipped" points
	
			var previous = firstPoint.skip ? middlePoint : firstPoint,
				current = middlePoint,
				next = afterPoint.skip ? middlePoint : afterPoint;
	
			var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
			var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
	
			var s01 = d01 / (d01 + d12);
			var s12 = d12 / (d01 + d12);
	
			// If all points are the same, s01 & s02 will be inf
			s01 = isNaN(s01) ? 0 : s01;
			s12 = isNaN(s12) ? 0 : s12;
	
			var fa = t * s01; // scaling factor for triangle Ta
			var fb = t * s12;
	
			return {
				previous: {
					x: current.x - fa * (next.x - previous.x),
					y: current.y - fa * (next.y - previous.y)
				},
				next: {
					x: current.x + fb * (next.x - previous.x),
					y: current.y + fb * (next.y - previous.y)
				}
			};
		};
		helpers.EPSILON = Number.EPSILON || 1e-14;
		helpers.splineCurveMonotone = function(points) {
			// This function calculates Bézier control points in a similar way than |splineCurve|,
			// but preserves monotonicity of the provided data and ensures no local extremums are added
			// between the dataset discrete points due to the interpolation.
			// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
	
			var pointsWithTangents = (points || []).map(function(point) {
				return {
					model: point._model,
					deltaK: 0,
					mK: 0
				};
			});
	
			// Calculate slopes (deltaK) and initialize tangents (mK)
			var pointsLen = pointsWithTangents.length;
			var i, pointBefore, pointCurrent, pointAfter;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}
	
				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointAfter && !pointAfter.model.skip) {
					var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);
	
					// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
					pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
				}
	
				if (!pointBefore || pointBefore.model.skip) {
					pointCurrent.mK = pointCurrent.deltaK;
				} else if (!pointAfter || pointAfter.model.skip) {
					pointCurrent.mK = pointBefore.deltaK;
				} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
					pointCurrent.mK = 0;
				} else {
					pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
				}
			}
	
			// Adjust tangents to ensure monotonic properties
			var alphaK, betaK, tauK, squaredMagnitude;
			for (i = 0; i < pointsLen - 1; ++i) {
				pointCurrent = pointsWithTangents[i];
				pointAfter = pointsWithTangents[i + 1];
				if (pointCurrent.model.skip || pointAfter.model.skip) {
					continue;
				}
	
				if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
					pointCurrent.mK = pointAfter.mK = 0;
					continue;
				}
	
				alphaK = pointCurrent.mK / pointCurrent.deltaK;
				betaK = pointAfter.mK / pointCurrent.deltaK;
				squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
				if (squaredMagnitude <= 9) {
					continue;
				}
	
				tauK = 3 / Math.sqrt(squaredMagnitude);
				pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
				pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
			}
	
			// Compute control points
			var deltaX;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}
	
				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointBefore && !pointBefore.model.skip) {
					deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
					pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
					pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
				}
				if (pointAfter && !pointAfter.model.skip) {
					deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
					pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
					pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
				}
			}
		};
		helpers.nextItem = function(collection, index, loop) {
			if (loop) {
				return index >= collection.length - 1 ? collection[0] : collection[index + 1];
			}
			return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
		};
		helpers.previousItem = function(collection, index, loop) {
			if (loop) {
				return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
			}
			return index <= 0 ? collection[0] : collection[index - 1];
		};
		// Implementation of the nice number algorithm used in determining where axis labels will go
		helpers.niceNum = function(range, round) {
			var exponent = Math.floor(helpers.log10(range));
			var fraction = range / Math.pow(10, exponent);
			var niceFraction;
	
			if (round) {
				if (fraction < 1.5) {
					niceFraction = 1;
				} else if (fraction < 3) {
					niceFraction = 2;
				} else if (fraction < 7) {
					niceFraction = 5;
				} else {
					niceFraction = 10;
				}
			} else if (fraction <= 1.0) {
				niceFraction = 1;
			} else if (fraction <= 2) {
				niceFraction = 2;
			} else if (fraction <= 5) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
	
			return niceFraction * Math.pow(10, exponent);
		};
		// Easing functions adapted from Robert Penner's easing equations
		// http://www.robertpenner.com/easing/
		var easingEffects = helpers.easingEffects = {
			linear: function(t) {
				return t;
			},
			easeInQuad: function(t) {
				return t * t;
			},
			easeOutQuad: function(t) {
				return -1 * t * (t - 2);
			},
			easeInOutQuad: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t;
				}
				return -1 / 2 * ((--t) * (t - 2) - 1);
			},
			easeInCubic: function(t) {
				return t * t * t;
			},
			easeOutCubic: function(t) {
				return 1 * ((t = t / 1 - 1) * t * t + 1);
			},
			easeInOutCubic: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t;
				}
				return 1 / 2 * ((t -= 2) * t * t + 2);
			},
			easeInQuart: function(t) {
				return t * t * t * t;
			},
			easeOutQuart: function(t) {
				return -1 * ((t = t / 1 - 1) * t * t * t - 1);
			},
			easeInOutQuart: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t * t;
				}
				return -1 / 2 * ((t -= 2) * t * t * t - 2);
			},
			easeInQuint: function(t) {
				return 1 * (t /= 1) * t * t * t * t;
			},
			easeOutQuint: function(t) {
				return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
			},
			easeInOutQuint: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t * t * t;
				}
				return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
			},
			easeInSine: function(t) {
				return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
			},
			easeOutSine: function(t) {
				return 1 * Math.sin(t / 1 * (Math.PI / 2));
			},
			easeInOutSine: function(t) {
				return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
			},
			easeInExpo: function(t) {
				return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
			},
			easeOutExpo: function(t) {
				return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
			},
			easeInOutExpo: function(t) {
				if (t === 0) {
					return 0;
				}
				if (t === 1) {
					return 1;
				}
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * Math.pow(2, 10 * (t - 1));
				}
				return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
			},
			easeInCirc: function(t) {
				if (t >= 1) {
					return t;
				}
				return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
			},
			easeOutCirc: function(t) {
				return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
			},
			easeInOutCirc: function(t) {
				if ((t /= 1 / 2) < 1) {
					return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
				}
				return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
			},
			easeInElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1) === 1) {
					return 1;
				}
				if (!p) {
					p = 1 * 0.3;
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
			},
			easeOutElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1) === 1) {
					return 1;
				}
				if (!p) {
					p = 1 * 0.3;
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
			},
			easeInOutElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1 / 2) === 2) {
					return 1;
				}
				if (!p) {
					p = 1 * (0.3 * 1.5);
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				if (t < 1) {
					return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
				}
				return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
			},
			easeInBack: function(t) {
				var s = 1.70158;
				return 1 * (t /= 1) * t * ((s + 1) * t - s);
			},
			easeOutBack: function(t) {
				var s = 1.70158;
				return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
			},
			easeInOutBack: function(t) {
				var s = 1.70158;
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
				}
				return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
			},
			easeInBounce: function(t) {
				return 1 - easingEffects.easeOutBounce(1 - t);
			},
			easeOutBounce: function(t) {
				if ((t /= 1) < (1 / 2.75)) {
					return 1 * (7.5625 * t * t);
				} else if (t < (2 / 2.75)) {
					return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
				} else if (t < (2.5 / 2.75)) {
					return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
				}
				return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
			},
			easeInOutBounce: function(t) {
				if (t < 1 / 2) {
					return easingEffects.easeInBounce(t * 2) * 0.5;
				}
				return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
			}
		};
		// Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
		helpers.requestAnimFrame = (function() {
			return window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				window.oRequestAnimationFrame ||
				window.msRequestAnimationFrame ||
				function(callback) {
					return window.setTimeout(callback, 1000 / 60);
				};
		}());
		// -- DOM methods
		helpers.getRelativePosition = function(evt, chart) {
			var mouseX, mouseY;
			var e = evt.originalEvent || evt,
				canvas = evt.currentTarget || evt.srcElement,
				boundingRect = canvas.getBoundingClientRect();
	
			var touches = e.touches;
			if (touches && touches.length > 0) {
				mouseX = touches[0].clientX;
				mouseY = touches[0].clientY;
	
			} else {
				mouseX = e.clientX;
				mouseY = e.clientY;
			}
	
			// Scale mouse coordinates into canvas coordinates
			// by following the pattern laid out by 'jerryj' in the comments of
			// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
			var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
			var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
			var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
			var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
			var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
			var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
	
			// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
			// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
			mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
			mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);
	
			return {
				x: mouseX,
				y: mouseY
			};
	
		};
		helpers.addEvent = function(node, eventType, method) {
			if (node.addEventListener) {
				node.addEventListener(eventType, method);
			} else if (node.attachEvent) {
				node.attachEvent('on' + eventType, method);
			} else {
				node['on' + eventType] = method;
			}
		};
		helpers.removeEvent = function(node, eventType, handler) {
			if (node.removeEventListener) {
				node.removeEventListener(eventType, handler, false);
			} else if (node.detachEvent) {
				node.detachEvent('on' + eventType, handler);
			} else {
				node['on' + eventType] = helpers.noop;
			}
		};
	
		// Private helper function to convert max-width/max-height values that may be percentages into a number
		function parseMaxStyle(styleValue, node, parentProperty) {
			var valueInPixels;
			if (typeof(styleValue) === 'string') {
				valueInPixels = parseInt(styleValue, 10);
	
				if (styleValue.indexOf('%') !== -1) {
					// percentage * size in dimension
					valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
				}
			} else {
				valueInPixels = styleValue;
			}
	
			return valueInPixels;
		}
	
		/**
		 * Returns if the given value contains an effective constraint.
		 * @private
		 */
		function isConstrainedValue(value) {
			return value !== undefined && value !== null && value !== 'none';
		}
	
		// Private helper to get a constraint dimension
		// @param domNode : the node to check the constraint on
		// @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
		// @param percentageProperty : property of parent to use when calculating width as a percentage
		// @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
		function getConstraintDimension(domNode, maxStyle, percentageProperty) {
			var view = document.defaultView;
			var parentNode = domNode.parentNode;
			var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
			var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
			var hasCNode = isConstrainedValue(constrainedNode);
			var hasCContainer = isConstrainedValue(constrainedContainer);
			var infinity = Number.POSITIVE_INFINITY;
	
			if (hasCNode || hasCContainer) {
				return Math.min(
					hasCNode? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
					hasCContainer? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
			}
	
			return 'none';
		}
		// returns Number or undefined if no constraint
		helpers.getConstraintWidth = function(domNode) {
			return getConstraintDimension(domNode, 'max-width', 'clientWidth');
		};
		// returns Number or undefined if no constraint
		helpers.getConstraintHeight = function(domNode) {
			return getConstraintDimension(domNode, 'max-height', 'clientHeight');
		};
		helpers.getMaximumWidth = function(domNode) {
			var container = domNode.parentNode;
			var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
			var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
			var w = container.clientWidth - paddingLeft - paddingRight;
			var cw = helpers.getConstraintWidth(domNode);
			return isNaN(cw)? w : Math.min(w, cw);
		};
		helpers.getMaximumHeight = function(domNode) {
			var container = domNode.parentNode;
			var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
			var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
			var h = container.clientHeight - paddingTop - paddingBottom;
			var ch = helpers.getConstraintHeight(domNode);
			return isNaN(ch)? h : Math.min(h, ch);
		};
		helpers.getStyle = function(el, property) {
			return el.currentStyle ?
				el.currentStyle[property] :
				document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
		};
		helpers.retinaScale = function(chart) {
			var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
			if (pixelRatio === 1) {
				return;
			}
	
			var canvas = chart.canvas;
			var height = chart.height;
			var width = chart.width;
	
			canvas.height = height * pixelRatio;
			canvas.width = width * pixelRatio;
			chart.ctx.scale(pixelRatio, pixelRatio);
	
			// If no style has been set on the canvas, the render size is used as display size,
			// making the chart visually bigger, so let's enforce it to the "correct" values.
			// See https://github.com/chartjs/Chart.js/issues/3575
			canvas.style.height = height + 'px';
			canvas.style.width = width + 'px';
		};
		// -- Canvas methods
		helpers.clear = function(chart) {
			chart.ctx.clearRect(0, 0, chart.width, chart.height);
		};
		helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
			return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
		};
		helpers.longestText = function(ctx, font, arrayOfThings, cache) {
			cache = cache || {};
			var data = cache.data = cache.data || {};
			var gc = cache.garbageCollect = cache.garbageCollect || [];
	
			if (cache.font !== font) {
				data = cache.data = {};
				gc = cache.garbageCollect = [];
				cache.font = font;
			}
	
			ctx.font = font;
			var longest = 0;
			helpers.each(arrayOfThings, function(thing) {
				// Undefined strings and arrays should not be measured
				if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
					longest = helpers.measureText(ctx, data, gc, longest, thing);
				} else if (helpers.isArray(thing)) {
					// if it is an array lets measure each element
					// to do maybe simplify this function a bit so we can do this more recursively?
					helpers.each(thing, function(nestedThing) {
						// Undefined strings and arrays should not be measured
						if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
							longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
						}
					});
				}
			});
	
			var gcLen = gc.length / 2;
			if (gcLen > arrayOfThings.length) {
				for (var i = 0; i < gcLen; i++) {
					delete data[gc[i]];
				}
				gc.splice(0, gcLen);
			}
			return longest;
		};
		helpers.measureText = function(ctx, data, gc, longest, string) {
			var textWidth = data[string];
			if (!textWidth) {
				textWidth = data[string] = ctx.measureText(string).width;
				gc.push(string);
			}
			if (textWidth > longest) {
				longest = textWidth;
			}
			return longest;
		};
		helpers.numberOfLabelLines = function(arrayOfThings) {
			var numberOfLines = 1;
			helpers.each(arrayOfThings, function(thing) {
				if (helpers.isArray(thing)) {
					if (thing.length > numberOfLines) {
						numberOfLines = thing.length;
					}
				}
			});
			return numberOfLines;
		};
		helpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {
			ctx.beginPath();
			ctx.moveTo(x + radius, y);
			ctx.lineTo(x + width - radius, y);
			ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
			ctx.lineTo(x + width, y + height - radius);
			ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
			ctx.lineTo(x + radius, y + height);
			ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
			ctx.lineTo(x, y + radius);
			ctx.quadraticCurveTo(x, y, x + radius, y);
			ctx.closePath();
		};
		helpers.color = function(c) {
			if (!color) {
				console.error('Color.js not found!');
				return c;
			}
	
			/* global CanvasGradient */
			if (c instanceof CanvasGradient) {
				return color(Chart.defaults.global.defaultColor);
			}
	
			return color(c);
		};
		helpers.isArray = Array.isArray?
			function(obj) {
				return Array.isArray(obj);
			} :
			function(obj) {
				return Object.prototype.toString.call(obj) === '[object Array]';
			};
		// ! @see http://stackoverflow.com/a/14853974
		helpers.arrayEquals = function(a0, a1) {
			var i, ilen, v0, v1;
	
			if (!a0 || !a1 || a0.length !== a1.length) {
				return false;
			}
	
			for (i = 0, ilen=a0.length; i < ilen; ++i) {
				v0 = a0[i];
				v1 = a1[i];
	
				if (v0 instanceof Array && v1 instanceof Array) {
					if (!helpers.arrayEquals(v0, v1)) {
						return false;
					}
				} else if (v0 !== v1) {
					// NOTE: two different object instances will never be equal: {x:20} != {x:20}
					return false;
				}
			}
	
			return true;
		};
		helpers.callCallback = function(fn, args, _tArg) {
			if (fn && typeof fn.call === 'function') {
				fn.apply(_tArg, args);
			}
		};
		helpers.getHoverColor = function(colorValue) {
			/* global CanvasPattern */
			return (colorValue instanceof CanvasPattern) ?
				colorValue :
				helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
		};
	};


/***/ },
/* 248 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
		var helpers = Chart.helpers;
	
		/**
		 * Helper function to get relative position for an event
		 * @param {Event|IEvent} event - The event to get the position for
		 * @param {Chart} chart - The chart
		 * @returns {Point} the event position
		 */
		function getRelativePosition(e, chart) {
			if (e.native) {
				return {
					x: e.x,
					y: e.y
				};
			}
	
			return helpers.getRelativePosition(e, chart);
		}
	
		/**
		 * Helper function to traverse all of the visible elements in the chart
		 * @param chart {chart} the chart
		 * @param handler {Function} the callback to execute for each visible item
		 */
		function parseVisibleItems(chart, handler) {
			var datasets = chart.data.datasets;
			var meta, i, j, ilen, jlen;
	
			for (i = 0, ilen = datasets.length; i < ilen; ++i) {
				if (!chart.isDatasetVisible(i)) {
					continue;
				}
	
				meta = chart.getDatasetMeta(i);
				for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
					var element = meta.data[j];
					if (!element._view.skip) {
						handler(element);
					}
				}
			}
		}
	
		/**
		 * Helper function to get the items that intersect the event position
		 * @param items {ChartElement[]} elements to filter
		 * @param position {Point} the point to be nearest to
		 * @return {ChartElement[]} the nearest items
		 */
		function getIntersectItems(chart, position) {
			var elements = [];
	
			parseVisibleItems(chart, function(element) {
				if (element.inRange(position.x, position.y)) {
					elements.push(element);
				}
			});
	
			return elements;
		}
	
		/**
		 * Helper function to get the items nearest to the event position considering all visible items in teh chart
		 * @param chart {Chart} the chart to look at elements from
		 * @param position {Point} the point to be nearest to
		 * @param intersect {Boolean} if true, only consider items that intersect the position
		 * @param distanceMetric {Function} Optional function to provide the distance between
		 * @return {ChartElement[]} the nearest items
		 */
		function getNearestItems(chart, position, intersect, distanceMetric) {
			var minDistance = Number.POSITIVE_INFINITY;
			var nearestItems = [];
	
			if (!distanceMetric) {
				distanceMetric = helpers.distanceBetweenPoints;
			}
	
			parseVisibleItems(chart, function(element) {
				if (intersect && !element.inRange(position.x, position.y)) {
					return;
				}
	
				var center = element.getCenterPoint();
				var distance = distanceMetric(position, center);
	
				if (distance < minDistance) {
					nearestItems = [element];
					minDistance = distance;
				} else if (distance === minDistance) {
					// Can have multiple items at the same distance in which case we sort by size
					nearestItems.push(element);
				}
			});
	
			return nearestItems;
		}
	
		function indexMode(chart, e, options) {
			var position = getRelativePosition(e, chart.chart);
			var distanceMetric = function(pt1, pt2) {
				return Math.abs(pt1.x - pt2.x);
			};
			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
			var elements = [];
	
			if (!items.length) {
				return [];
			}
	
			chart.data.datasets.forEach(function(dataset, datasetIndex) {
				if (chart.isDatasetVisible(datasetIndex)) {
					var meta = chart.getDatasetMeta(datasetIndex),
						element = meta.data[items[0]._index];
	
					// don't count items that are skipped (null data)
					if (element && !element._view.skip) {
						elements.push(element);
					}
				}
			});
	
			return elements;
		}
	
		/**
		 * @interface IInteractionOptions
		 */
		/**
		 * If true, only consider items that intersect the point
		 * @name IInterfaceOptions#boolean
		 * @type Boolean
		 */
	
		/**
		 * Contains interaction related functions
		 * @namespace Chart.Interaction
		 */
		Chart.Interaction = {
			// Helper function for different modes
			modes: {
				single: function(chart, e) {
					var position = getRelativePosition(e, chart.chart);
					var elements = [];
	
					parseVisibleItems(chart, function(element) {
						if (element.inRange(position.x, position.y)) {
							elements.push(element);
							return elements;
						}
					});
	
					return elements.slice(0, 1);
				},
	
				/**
				 * @function Chart.Interaction.modes.label
				 * @deprecated since version 2.4.0
				 */
				label: indexMode,
	
				/**
				 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
				 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
				 * @function Chart.Interaction.modes.index
				 * @since v2.4.0
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use during interaction
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				index: indexMode,
	
				/**
				 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
				 * If the options.intersect is false, we find the nearest item and return the items in that dataset
				 * @function Chart.Interaction.modes.dataset
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use during interaction
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				dataset: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);
	
					if (items.length > 0) {
						items = chart.getDatasetMeta(items[0]._datasetIndex).data;
					}
	
					return items;
				},
	
				/**
				 * @function Chart.Interaction.modes.x-axis
				 * @deprecated since version 2.4.0. Use index mode and intersect == true
				 */
				'x-axis': function(chart, e) {
					return indexMode(chart, e, true);
				},
	
				/**
				 * Point mode returns all elements that hit test based on the event position
				 * of the event
				 * @function Chart.Interaction.modes.intersect
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				point: function(chart, e) {
					var position = getRelativePosition(e, chart.chart);
					return getIntersectItems(chart, position);
				},
	
				/**
				 * nearest mode returns the element closest to the point
				 * @function Chart.Interaction.modes.intersect
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				nearest: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var nearestItems = getNearestItems(chart, position, options.intersect);
	
					// We have multiple items at the same distance from the event. Now sort by smallest
					if (nearestItems.length > 1) {
						nearestItems.sort(function(a, b) {
							var sizeA = a.getArea();
							var sizeB = b.getArea();
							var ret = sizeA - sizeB;
	
							if (ret === 0) {
								// if equal sort by dataset index
								ret = a._datasetIndex - b._datasetIndex;
							}
	
							return ret;
						});
					}
	
					// Return only 1 item
					return nearestItems.slice(0, 1);
				},
	
				/**
				 * x mode returns the elements that hit-test at the current x coordinate
				 * @function Chart.Interaction.modes.x
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				x: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var items = [];
					var intersectsItem = false;
	
					parseVisibleItems(chart, function(element) {
						if (element.inXRange(position.x)) {
							items.push(element);
						}
	
						if (element.inRange(position.x, position.y)) {
							intersectsItem = true;
						}
					});
	
					// If we want to trigger on an intersect and we don't have any items
					// that intersect the position, return nothing
					if (options.intersect && !intersectsItem) {
						items = [];
					}
					return items;
				},
	
				/**
				 * y mode returns the elements that hit-test at the current y coordinate
				 * @function Chart.Interaction.modes.y
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				y: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var items = [];
					var intersectsItem = false;
	
					parseVisibleItems(chart, function(element) {
						if (element.inYRange(position.y)) {
							items.push(element);
						}
	
						if (element.inRange(position.x, position.y)) {
							intersectsItem = true;
						}
					});
	
					// If we want to trigger on an intersect and we don't have any items
					// that intersect the position, return nothing
					if (options.intersect && !intersectsItem) {
						items = [];
					}
					return items;
				}
			}
		};
	};


/***/ },
/* 249 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function() {
	
		// Occupy the global variable of Chart, and create a simple base class
		var Chart = function(item, config) {
			this.controller = new Chart.Controller(item, config, this);
			return this.controller;
		};
	
		// Globally expose the defaults to allow for user updating/changing
		Chart.defaults = {
			global: {
				responsive: true,
				responsiveAnimationDuration: 0,
				maintainAspectRatio: true,
				events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
				hover: {
					onHover: null,
					mode: 'nearest',
					intersect: true,
					animationDuration: 400
				},
				onClick: null,
				defaultColor: 'rgba(0,0,0,0.1)',
				defaultFontColor: '#666',
				defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
				defaultFontSize: 12,
				defaultFontStyle: 'normal',
				showLines: true,
	
				// Element defaults defined in element extensions
				elements: {},
	
				// Legend callback string
				legendCallback: function(chart) {
					var text = [];
					text.push('<ul class="' + chart.id + '-legend">');
					for (var i = 0; i < chart.data.datasets.length; i++) {
						text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
						if (chart.data.datasets[i].label) {
							text.push(chart.data.datasets[i].label);
						}
						text.push('</li>');
					}
					text.push('</ul>');
	
					return text.join('');
				}
			}
		};
	
		Chart.Chart = Chart;
	
		return Chart;
	};


/***/ },
/* 250 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		// The layout service is very self explanatory.  It's responsible for the layout within a chart.
		// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
		// It is this service's responsibility of carrying out that layout.
		Chart.layoutService = {
			defaults: {},
	
			// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.
			addBox: function(chartInstance, box) {
				if (!chartInstance.boxes) {
					chartInstance.boxes = [];
				}
				chartInstance.boxes.push(box);
			},
	
			removeBox: function(chartInstance, box) {
				if (!chartInstance.boxes) {
					return;
				}
				chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
			},
	
			// The most important function
			update: function(chartInstance, width, height) {
	
				if (!chartInstance) {
					return;
				}
	
				var layoutOptions = chartInstance.options.layout;
				var padding = layoutOptions ? layoutOptions.padding : null;
	
				var leftPadding = 0;
				var rightPadding = 0;
				var topPadding = 0;
				var bottomPadding = 0;
	
				if (!isNaN(padding)) {
					// options.layout.padding is a number. assign to all
					leftPadding = padding;
					rightPadding = padding;
					topPadding = padding;
					bottomPadding = padding;
				} else {
					leftPadding = padding.left || 0;
					rightPadding = padding.right || 0;
					topPadding = padding.top || 0;
					bottomPadding = padding.bottom || 0;
				}
	
				var leftBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'left';
				});
				var rightBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'right';
				});
				var topBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'top';
				});
				var bottomBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'bottom';
				});
	
				// Boxes that overlay the chartarea such as the radialLinear scale
				var chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'chartArea';
				});
	
				// Ensure that full width boxes are at the very top / bottom
				topBoxes.sort(function(a, b) {
					return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
				});
				bottomBoxes.sort(function(a, b) {
					return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
				});
	
				// Essentially we now have any number of boxes on each of the 4 sides.
				// Our canvas looks like the following.
				// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
				// B1 is the bottom axis
				// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
				// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
				// an error will be thrown.
				//
				// |----------------------------------------------------|
				// |                  T1 (Full Width)                   |
				// |----------------------------------------------------|
				// |    |    |                 T2                  |    |
				// |    |----|-------------------------------------|----|
				// |    |    | C1 |                           | C2 |    |
				// |    |    |----|                           |----|    |
				// |    |    |                                     |    |
				// | L1 | L2 |           ChartArea (C0)            | R1 |
				// |    |    |                                     |    |
				// |    |    |----|                           |----|    |
				// |    |    | C3 |                           | C4 |    |
				// |    |----|-------------------------------------|----|
				// |    |    |                 B1                  |    |
				// |----------------------------------------------------|
				// |                  B2 (Full Width)                   |
				// |----------------------------------------------------|
				//
				// What we do to find the best sizing, we do the following
				// 1. Determine the minimum size of the chart area.
				// 2. Split the remaining width equally between each vertical axis
				// 3. Split the remaining height equally between each horizontal axis
				// 4. Give each layout the maximum size it can be. The layout will return it's minimum size
				// 5. Adjust the sizes of each axis based on it's minimum reported size.
				// 6. Refit each axis
				// 7. Position each axis in the final location
				// 8. Tell the chart the final location of the chart area
				// 9. Tell any axes that overlay the chart area the positions of the chart area
	
				// Step 1
				var chartWidth = width - leftPadding - rightPadding;
				var chartHeight = height - topPadding - bottomPadding;
				var chartAreaWidth = chartWidth / 2; // min 50%
				var chartAreaHeight = chartHeight / 2; // min 50%
	
				// Step 2
				var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
	
				// Step 3
				var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
	
				// Step 4
				var maxChartAreaWidth = chartWidth;
				var maxChartAreaHeight = chartHeight;
				var minBoxSizes = [];
	
				function getMinimumBoxSize(box) {
					var minSize;
					var isHorizontal = box.isHorizontal();
	
					if (isHorizontal) {
						minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
						maxChartAreaHeight -= minSize.height;
					} else {
						minSize = box.update(verticalBoxWidth, chartAreaHeight);
						maxChartAreaWidth -= minSize.width;
					}
	
					minBoxSizes.push({
						horizontal: isHorizontal,
						minSize: minSize,
						box: box,
					});
				}
	
				helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
	
				// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)
				var maxHorizontalLeftPadding = 0;
				var maxHorizontalRightPadding = 0;
				var maxVerticalTopPadding = 0;
				var maxVerticalBottomPadding = 0;
	
				helpers.each(topBoxes.concat(bottomBoxes), function(horizontalBox) {
					if (horizontalBox.getPadding) {
						var boxPadding = horizontalBox.getPadding();
						maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
						maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
					}
				});
	
				helpers.each(leftBoxes.concat(rightBoxes), function(verticalBox) {
					if (verticalBox.getPadding) {
						var boxPadding = verticalBox.getPadding();
						maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
						maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
					}
				});
	
				// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
				// be if the axes are drawn at their minimum sizes.
				// Steps 5 & 6
				var totalLeftBoxesWidth = leftPadding;
				var totalRightBoxesWidth = rightPadding;
				var totalTopBoxesHeight = topPadding;
				var totalBottomBoxesHeight = bottomPadding;
	
				// Function to fit a box
				function fitBox(box) {
					var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {
						return minBox.box === box;
					});
	
					if (minBoxSize) {
						if (box.isHorizontal()) {
							var scaleMargin = {
								left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
								right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
								top: 0,
								bottom: 0
							};
	
							// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
							// on the margin. Sometimes they need to increase in size slightly
							box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
						} else {
							box.update(minBoxSize.minSize.width, maxChartAreaHeight);
						}
					}
				}
	
				// Update, and calculate the left and right margins for the horizontal boxes
				helpers.each(leftBoxes.concat(rightBoxes), fitBox);
	
				helpers.each(leftBoxes, function(box) {
					totalLeftBoxesWidth += box.width;
				});
	
				helpers.each(rightBoxes, function(box) {
					totalRightBoxesWidth += box.width;
				});
	
				// Set the Left and Right margins for the horizontal boxes
				helpers.each(topBoxes.concat(bottomBoxes), fitBox);
	
				// Figure out how much margin is on the top and bottom of the vertical boxes
				helpers.each(topBoxes, function(box) {
					totalTopBoxesHeight += box.height;
				});
	
				helpers.each(bottomBoxes, function(box) {
					totalBottomBoxesHeight += box.height;
				});
	
				function finalFitVerticalBox(box) {
					var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {
						return minSize.box === box;
					});
	
					var scaleMargin = {
						left: 0,
						right: 0,
						top: totalTopBoxesHeight,
						bottom: totalBottomBoxesHeight
					};
	
					if (minBoxSize) {
						box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
					}
				}
	
				// Let the left layout know the final margin
				helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
	
				// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
				totalLeftBoxesWidth = leftPadding;
				totalRightBoxesWidth = rightPadding;
				totalTopBoxesHeight = topPadding;
				totalBottomBoxesHeight = bottomPadding;
	
				helpers.each(leftBoxes, function(box) {
					totalLeftBoxesWidth += box.width;
				});
	
				helpers.each(rightBoxes, function(box) {
					totalRightBoxesWidth += box.width;
				});
	
				helpers.each(topBoxes, function(box) {
					totalTopBoxesHeight += box.height;
				});
				helpers.each(bottomBoxes, function(box) {
					totalBottomBoxesHeight += box.height;
				});
	
				// We may be adding some padding to account for rotated x axis labels
				var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
				totalLeftBoxesWidth += leftPaddingAddition;
				totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
	
				var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
				totalTopBoxesHeight += topPaddingAddition;
				totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
	
				// Figure out if our chart area changed. This would occur if the dataset layout label rotation
				// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
				// without calling `fit` again
				var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
				var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
	
				if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
					helpers.each(leftBoxes, function(box) {
						box.height = newMaxChartAreaHeight;
					});
	
					helpers.each(rightBoxes, function(box) {
						box.height = newMaxChartAreaHeight;
					});
	
					helpers.each(topBoxes, function(box) {
						if (!box.options.fullWidth) {
							box.width = newMaxChartAreaWidth;
						}
					});
	
					helpers.each(bottomBoxes, function(box) {
						if (!box.options.fullWidth) {
							box.width = newMaxChartAreaWidth;
						}
					});
	
					maxChartAreaHeight = newMaxChartAreaHeight;
					maxChartAreaWidth = newMaxChartAreaWidth;
				}
	
				// Step 7 - Position the boxes
				var left = leftPadding + leftPaddingAddition;
				var top = topPadding + topPaddingAddition;
	
				function placeBox(box) {
					if (box.isHorizontal()) {
						box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
						box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
						box.top = top;
						box.bottom = top + box.height;
	
						// Move to next point
						top = box.bottom;
	
					} else {
	
						box.left = left;
						box.right = left + box.width;
						box.top = totalTopBoxesHeight;
						box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
	
						// Move to next point
						left = box.right;
					}
				}
	
				helpers.each(leftBoxes.concat(topBoxes), placeBox);
	
				// Account for chart width and height
				left += maxChartAreaWidth;
				top += maxChartAreaHeight;
	
				helpers.each(rightBoxes, placeBox);
				helpers.each(bottomBoxes, placeBox);
	
				// Step 8
				chartInstance.chartArea = {
					left: totalLeftBoxesWidth,
					top: totalTopBoxesHeight,
					right: totalLeftBoxesWidth + maxChartAreaWidth,
					bottom: totalTopBoxesHeight + maxChartAreaHeight
				};
	
				// Step 9
				helpers.each(chartAreaBoxes, function(box) {
					box.left = chartInstance.chartArea.left;
					box.top = chartInstance.chartArea.top;
					box.right = chartInstance.chartArea.right;
					box.bottom = chartInstance.chartArea.bottom;
	
					box.update(maxChartAreaWidth, maxChartAreaHeight);
				});
			}
		};
	};


/***/ },
/* 251 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var noop = helpers.noop;
	
		Chart.defaults.global.legend = {
	
			display: true,
			position: 'top',
			fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)
			reverse: false,
	
			// a callback that will handle
			onClick: function(e, legendItem) {
				var index = legendItem.datasetIndex;
				var ci = this.chart;
				var meta = ci.getDatasetMeta(index);
	
				// See controller.isDatasetVisible comment
				meta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;
	
				// We hid a dataset ... rerender the chart
				ci.update();
			},
	
			onHover: null,
	
			labels: {
				boxWidth: 40,
				padding: 10,
				// Generates labels shown in the legend
				// Valid properties to return:
				// text : text to display
				// fillStyle : fill of coloured box
				// strokeStyle: stroke of coloured box
				// hidden : if this legend item refers to a hidden item
				// lineCap : cap style for line
				// lineDash
				// lineDashOffset :
				// lineJoin :
				// lineWidth :
				generateLabels: function(chart) {
					var data = chart.data;
					return helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {
						return {
							text: dataset.label,
							fillStyle: (!helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),
							hidden: !chart.isDatasetVisible(i),
							lineCap: dataset.borderCapStyle,
							lineDash: dataset.borderDash,
							lineDashOffset: dataset.borderDashOffset,
							lineJoin: dataset.borderJoinStyle,
							lineWidth: dataset.borderWidth,
							strokeStyle: dataset.borderColor,
							pointStyle: dataset.pointStyle,
	
							// Below is extra data used for toggling the datasets
							datasetIndex: i
						};
					}, this) : [];
				}
			}
		};
	
		/**
		 * Helper function to get the box width based on the usePointStyle option
		 * @param labelopts {Object} the label options on the legend
		 * @param fontSize {Number} the label font size
		 * @return {Number} width of the color box area
		 */
		function getBoxWidth(labelOpts, fontSize) {
			return labelOpts.usePointStyle ?
				fontSize * Math.SQRT2 :
				labelOpts.boxWidth;
		}
	
		Chart.Legend = Chart.Element.extend({
	
			initialize: function(config) {
				helpers.extend(this, config);
	
				// Contains hit boxes for each dataset (in dataset order)
				this.legendHitBoxes = [];
	
				// Are we in doughnut mode which has a different data type
				this.doughnutMode = false;
			},
	
			// These methods are ordered by lifecycle. Utilities then follow.
			// Any function defined here is inherited by all legend types.
			// Any function can be extended by the legend type
	
			beforeUpdate: noop,
			update: function(maxWidth, maxHeight, margins) {
				var me = this;
	
				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();
	
				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = margins;
	
				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
				// Labels
				me.beforeBuildLabels();
				me.buildLabels();
				me.afterBuildLabels();
	
				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();
	
				return me.minSize;
			},
			afterUpdate: noop,
	
			//
	
			beforeSetDimensions: noop,
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;
	
					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}
	
				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;
	
				// Reset minSize
				me.minSize = {
					width: 0,
					height: 0
				};
			},
			afterSetDimensions: noop,
	
			//
	
			beforeBuildLabels: noop,
			buildLabels: function() {
				var me = this;
				var labelOpts = me.options.labels;
				var legendItems = labelOpts.generateLabels.call(me, me.chart);
	
				if (labelOpts.filter) {
					legendItems = legendItems.filter(function(item) {
						return labelOpts.filter(item, me.chart.data);
					});
				}
	
				if (me.options.reverse) {
					legendItems.reverse();
				}
	
				me.legendItems = legendItems;
			},
			afterBuildLabels: noop,
	
			//
	
			beforeFit: noop,
			fit: function() {
				var me = this;
				var opts = me.options;
				var labelOpts = opts.labels;
				var display = opts.display;
	
				var ctx = me.ctx;
	
				var globalDefault = Chart.defaults.global,
					itemOrDefault = helpers.getValueOrDefault,
					fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
					fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
					fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
					labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
	
				// Reset hit boxes
				var hitboxes = me.legendHitBoxes = [];
	
				var minSize = me.minSize;
				var isHorizontal = me.isHorizontal();
	
				if (isHorizontal) {
					minSize.width = me.maxWidth; // fill all the width
					minSize.height = display ? 10 : 0;
				} else {
					minSize.width = display ? 10 : 0;
					minSize.height = me.maxHeight; // fill all the height
				}
	
				// Increase sizes here
				if (display) {
					ctx.font = labelFont;
	
					if (isHorizontal) {
						// Labels
	
						// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
						var lineWidths = me.lineWidths = [0];
						var totalHeight = me.legendItems.length ? fontSize + (labelOpts.padding) : 0;
	
						ctx.textAlign = 'left';
						ctx.textBaseline = 'top';
	
						helpers.each(me.legendItems, function(legendItem, i) {
							var boxWidth = getBoxWidth(labelOpts, fontSize);
							var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
	
							if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
								totalHeight += fontSize + (labelOpts.padding);
								lineWidths[lineWidths.length] = me.left;
							}
	
							// Store the hitbox width and height here. Final position will be updated in `draw`
							hitboxes[i] = {
								left: 0,
								top: 0,
								width: width,
								height: fontSize
							};
	
							lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
						});
	
						minSize.height += totalHeight;
	
					} else {
						var vPadding = labelOpts.padding;
						var columnWidths = me.columnWidths = [];
						var totalWidth = labelOpts.padding;
						var currentColWidth = 0;
						var currentColHeight = 0;
						var itemHeight = fontSize + vPadding;
	
						helpers.each(me.legendItems, function(legendItem, i) {
							var boxWidth = getBoxWidth(labelOpts, fontSize);
							var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
	
							// If too tall, go to new column
							if (currentColHeight + itemHeight > minSize.height) {
								totalWidth += currentColWidth + labelOpts.padding;
								columnWidths.push(currentColWidth); // previous column width
	
								currentColWidth = 0;
								currentColHeight = 0;
							}
	
							// Get max width
							currentColWidth = Math.max(currentColWidth, itemWidth);
							currentColHeight += itemHeight;
	
							// Store the hitbox width and height here. Final position will be updated in `draw`
							hitboxes[i] = {
								left: 0,
								top: 0,
								width: itemWidth,
								height: fontSize
							};
						});
	
						totalWidth += currentColWidth;
						columnWidths.push(currentColWidth);
						minSize.width += totalWidth;
					}
				}
	
				me.width = minSize.width;
				me.height = minSize.height;
			},
			afterFit: noop,
	
			// Shared Methods
			isHorizontal: function() {
				return this.options.position === 'top' || this.options.position === 'bottom';
			},
	
			// Actually draw the legend on the canvas
			draw: function() {
				var me = this;
				var opts = me.options;
				var labelOpts = opts.labels;
				var globalDefault = Chart.defaults.global,
					lineDefault = globalDefault.elements.line,
					legendWidth = me.width,
					lineWidths = me.lineWidths;
	
				if (opts.display) {
					var ctx = me.ctx,
						cursor,
						itemOrDefault = helpers.getValueOrDefault,
						fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor),
						fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
						fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
						fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
						labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
	
					// Canvas setup
					ctx.textAlign = 'left';
					ctx.textBaseline = 'top';
					ctx.lineWidth = 0.5;
					ctx.strokeStyle = fontColor; // for strikethrough effect
					ctx.fillStyle = fontColor; // render in correct colour
					ctx.font = labelFont;
	
					var boxWidth = getBoxWidth(labelOpts, fontSize),
						hitboxes = me.legendHitBoxes;
	
					// current position
					var drawLegendBox = function(x, y, legendItem) {
						if (isNaN(boxWidth) || boxWidth <= 0) {
							return;
						}
	
						// Set the ctx for the box
						ctx.save();
	
						ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
						ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
						ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
						ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
						ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
						ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
						var isLineWidthZero = (itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0);
	
						if (ctx.setLineDash) {
							// IE 9 and 10 do not support line dash
							ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
						}
	
						if (opts.labels && opts.labels.usePointStyle) {
							// Recalculate x and y for drawPoint() because its expecting
							// x and y to be center of figure (instead of top left)
							var radius = fontSize * Math.SQRT2 / 2;
							var offSet = radius / Math.SQRT2;
							var centerX = x + offSet;
							var centerY = y + offSet;
	
							// Draw pointStyle as legend symbol
							Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
						} else {
							// Draw box as legend symbol
							if (!isLineWidthZero) {
								ctx.strokeRect(x, y, boxWidth, fontSize);
							}
							ctx.fillRect(x, y, boxWidth, fontSize);
						}
	
						ctx.restore();
					};
					var fillText = function(x, y, legendItem, textWidth) {
						ctx.fillText(legendItem.text, boxWidth + (fontSize / 2) + x, y);
	
						if (legendItem.hidden) {
							// Strikethrough the text if hidden
							ctx.beginPath();
							ctx.lineWidth = 2;
							ctx.moveTo(boxWidth + (fontSize / 2) + x, y + (fontSize / 2));
							ctx.lineTo(boxWidth + (fontSize / 2) + x + textWidth, y + (fontSize / 2));
							ctx.stroke();
						}
					};
	
					// Horizontal
					var isHorizontal = me.isHorizontal();
					if (isHorizontal) {
						cursor = {
							x: me.left + ((legendWidth - lineWidths[0]) / 2),
							y: me.top + labelOpts.padding,
							line: 0
						};
					} else {
						cursor = {
							x: me.left + labelOpts.padding,
							y: me.top + labelOpts.padding,
							line: 0
						};
					}
	
					var itemHeight = fontSize + labelOpts.padding;
					helpers.each(me.legendItems, function(legendItem, i) {
						var textWidth = ctx.measureText(legendItem.text).width,
							width = boxWidth + (fontSize / 2) + textWidth,
							x = cursor.x,
							y = cursor.y;
	
						if (isHorizontal) {
							if (x + width >= legendWidth) {
								y = cursor.y += itemHeight;
								cursor.line++;
								x = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2);
							}
						} else if (y + itemHeight > me.bottom) {
							x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
							y = cursor.y = me.top + labelOpts.padding;
							cursor.line++;
						}
	
						drawLegendBox(x, y, legendItem);
	
						hitboxes[i].left = x;
						hitboxes[i].top = y;
	
						// Fill the actual label
						fillText(x, y, legendItem, textWidth);
	
						if (isHorizontal) {
							cursor.x += width + (labelOpts.padding);
						} else {
							cursor.y += itemHeight;
						}
	
					});
				}
			},
	
			/**
			 * Handle an event
			 * @private
			 * @param {IEvent} event - The event to handle
			 * @return {Boolean} true if a change occured
			 */
			handleEvent: function(e) {
				var me = this;
				var opts = me.options;
				var type = e.type === 'mouseup' ? 'click' : e.type;
				var changed = false;
	
				if (type === 'mousemove') {
					if (!opts.onHover) {
						return;
					}
				} else if (type === 'click') {
					if (!opts.onClick) {
						return;
					}
				} else {
					return;
				}
	
				// Chart event already has relative position in it
				var x = e.x,
					y = e.y;
	
				if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
					// See if we are touching one of the dataset boxes
					var lh = me.legendHitBoxes;
					for (var i = 0; i < lh.length; ++i) {
						var hitBox = lh[i];
	
						if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
							// Touching an element
							if (type === 'click') {
								// use e.native for backwards compatibility
								opts.onClick.call(me, e.native, me.legendItems[i]);
								changed = true;
								break;
							} else if (type === 'mousemove') {
								// use e.native for backwards compatibility
								opts.onHover.call(me, e.native, me.legendItems[i]);
								changed = true;
								break;
							}
						}
					}
				}
	
				return changed;
			}
		});
	
		function createNewLegendAndAttach(chartInstance, legendOpts) {
			var legend = new Chart.Legend({
				ctx: chartInstance.chart.ctx,
				options: legendOpts,
				chart: chartInstance
			});
			chartInstance.legend = legend;
			Chart.layoutService.addBox(chartInstance, legend);
		}
	
		// Register the legend plugin
		Chart.plugins.register({
			beforeInit: function(chartInstance) {
				var legendOpts = chartInstance.options.legend;
	
				if (legendOpts) {
					createNewLegendAndAttach(chartInstance, legendOpts);
				}
			},
			beforeUpdate: function(chartInstance) {
				var legendOpts = chartInstance.options.legend;
	
				if (legendOpts) {
					legendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);
	
					if (chartInstance.legend) {
						chartInstance.legend.options = legendOpts;
					} else {
						createNewLegendAndAttach(chartInstance, legendOpts);
					}
				} else {
					Chart.layoutService.removeBox(chartInstance, chartInstance.legend);
					delete chartInstance.legend;
				}
			},
			afterEvent: function(chartInstance, e) {
				var legend = chartInstance.legend;
				if (legend) {
					legend.handleEvent(e);
				}
			}
		});
	};


/***/ },
/* 252 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.global.plugins = {};
	
		/**
		 * The plugin service singleton
		 * @namespace Chart.plugins
		 * @since 2.1.0
		 */
		Chart.plugins = {
			/**
			 * Globally registered plugins.
			 * @private
			 */
			_plugins: [],
	
			/**
			 * This identifier is used to invalidate the descriptors cache attached to each chart
			 * when a global plugin is registered or unregistered. In this case, the cache ID is
			 * incremented and descriptors are regenerated during following API calls.
			 * @private
			 */
			_cacheId: 0,
	
			/**
			 * Registers the given plugin(s) if not already registered.
			 * @param {Array|Object} plugins plugin instance(s).
			 */
			register: function(plugins) {
				var p = this._plugins;
				([]).concat(plugins).forEach(function(plugin) {
					if (p.indexOf(plugin) === -1) {
						p.push(plugin);
					}
				});
	
				this._cacheId++;
			},
	
			/**
			 * Unregisters the given plugin(s) only if registered.
			 * @param {Array|Object} plugins plugin instance(s).
			 */
			unregister: function(plugins) {
				var p = this._plugins;
				([]).concat(plugins).forEach(function(plugin) {
					var idx = p.indexOf(plugin);
					if (idx !== -1) {
						p.splice(idx, 1);
					}
				});
	
				this._cacheId++;
			},
	
			/**
			 * Remove all registered plugins.
			 * @since 2.1.5
			 */
			clear: function() {
				this._plugins = [];
				this._cacheId++;
			},
	
			/**
			 * Returns the number of registered plugins?
			 * @returns {Number}
			 * @since 2.1.5
			 */
			count: function() {
				return this._plugins.length;
			},
	
			/**
			 * Returns all registered plugin instances.
			 * @returns {Array} array of plugin objects.
			 * @since 2.1.5
			 */
			getAll: function() {
				return this._plugins;
			},
	
			/**
			 * Calls enabled plugins for `chart` on the specified hook and with the given args.
			 * This method immediately returns as soon as a plugin explicitly returns false. The
			 * returned value can be used, for instance, to interrupt the current action.
			 * @param {Object} chart - The chart instance for which plugins should be called.
			 * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
			 * @param {Array} [args] - Extra arguments to apply to the hook call.
			 * @returns {Boolean} false if any of the plugins return false, else returns true.
			 */
			notify: function(chart, hook, args) {
				var descriptors = this.descriptors(chart);
				var ilen = descriptors.length;
				var i, descriptor, plugin, params, method;
	
				for (i=0; i<ilen; ++i) {
					descriptor = descriptors[i];
					plugin = descriptor.plugin;
					method = plugin[hook];
					if (typeof method === 'function') {
						params = [chart].concat(args || []);
						params.push(descriptor.options);
						if (method.apply(plugin, params) === false) {
							return false;
						}
					}
				}
	
				return true;
			},
	
			/**
			 * Returns descriptors of enabled plugins for the given chart.
			 * @returns {Array} [{ plugin, options }]
			 * @private
			 */
			descriptors: function(chart) {
				var cache = chart._plugins || (chart._plugins = {});
				if (cache.id === this._cacheId) {
					return cache.descriptors;
				}
	
				var plugins = [];
				var descriptors = [];
				var config = (chart && chart.config) || {};
				var defaults = Chart.defaults.global.plugins;
				var options = (config.options && config.options.plugins) || {};
	
				this._plugins.concat(config.plugins || []).forEach(function(plugin) {
					var idx = plugins.indexOf(plugin);
					if (idx !== -1) {
						return;
					}
	
					var id = plugin.id;
					var opts = options[id];
					if (opts === false) {
						return;
					}
	
					if (opts === true) {
						opts = helpers.clone(defaults[id]);
					}
	
					plugins.push(plugin);
					descriptors.push({
						plugin: plugin,
						options: opts || {}
					});
				});
	
				cache.descriptors = descriptors;
				cache.id = this._cacheId;
				return descriptors;
			}
		};
	
		/**
		 * Plugin extension hooks.
		 * @interface IPlugin
		 * @since 2.1.0
		 */
		/**
		 * @method IPlugin#beforeInit
		 * @desc Called before initializing `chart`.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#afterInit
		 * @desc Called after `chart` has been initialized and before the first update.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeUpdate
		 * @desc Called before updating `chart`. If any plugin returns `false`, the update
		 * is cancelled (and thus subsequent render(s)) until another `update` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart update.
		 */
		/**
		 * @method IPlugin#afterUpdate
		 * @desc Called after `chart` has been updated and before rendering. Note that this
		 * hook will not be called if the chart update has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeDatasetsUpdate
	 	 * @desc Called before updating the `chart` datasets. If any plugin returns `false`,
		 * the datasets update is cancelled until another `update` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} false to cancel the datasets update.
		 * @since version 2.1.5
		 */
		/**
		 * @method IPlugin#afterDatasetsUpdate
		 * @desc Called after the `chart` datasets have been updated. Note that this hook
		 * will not be called if the datasets update has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @since version 2.1.5
		 */
		/**
		 * @method IPlugin#beforeLayout
		 * @desc Called before laying out `chart`. If any plugin returns `false`,
		 * the layout update is cancelled until another `update` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart layout.
		 */
		/**
		 * @method IPlugin#afterLayout
		 * @desc Called after the `chart` has been layed out. Note that this hook will not
		 * be called if the layout update has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeRender
		 * @desc Called before rendering `chart`. If any plugin returns `false`,
		 * the rendering is cancelled until another `render` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart rendering.
		 */
		/**
		 * @method IPlugin#afterRender
		 * @desc Called after the `chart` has been fully rendered (and animation completed). Note
		 * that this hook will not be called if the rendering has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeDraw
		 * @desc Called before drawing `chart` at every animation frame specified by the given
		 * easing value. If any plugin returns `false`, the frame drawing is cancelled until
		 * another `render` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart drawing.
		 */
		/**
		 * @method IPlugin#afterDraw
		 * @desc Called after the `chart` has been drawn for the specific easing value. Note
		 * that this hook will not be called if the drawing has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeDatasetsDraw
	 	 * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,
		 * the datasets drawing is cancelled until another `render` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart datasets drawing.
		 */
		/**
		 * @method IPlugin#afterDatasetsDraw
		 * @desc Called after the `chart` datasets have been drawn. Note that this hook
		 * will not be called if the datasets drawing has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeEvent
	 	 * @desc Called before processing the specified `event`. If any plugin returns `false`,
		 * the event will be discarded.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {IEvent} event - The event object.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#afterEvent
		 * @desc Called after the `event` has been consumed. Note that this hook
		 * will not be called if the `event` has been previously discarded.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {IEvent} event - The event object.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#resize
		 * @desc Called after the chart as been resized.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} size - The new canvas display size (eq. canvas.style width & height).
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#destroy
		 * @desc Called after the chart as been destroyed.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
	
		/**
		 * Provided for backward compatibility, use Chart.plugins instead
		 * @namespace Chart.pluginService
		 * @deprecated since version 2.1.5
		 * @todo remove at version 3
		 * @private
		 */
		Chart.pluginService = Chart.plugins;
	
		/**
		 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
		 * effect, instead simply create/register plugins via plain JavaScript objects.
		 * @interface Chart.PluginBase
		 * @deprecated since version 2.5.0
		 * @todo remove at version 3
		 * @private
		 */
		Chart.PluginBase = helpers.inherits({});
	};


/***/ },
/* 253 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.scale = {
			display: true,
			position: 'left',
	
			// grid line settings
			gridLines: {
				display: true,
				color: 'rgba(0, 0, 0, 0.1)',
				lineWidth: 1,
				drawBorder: true,
				drawOnChartArea: true,
				drawTicks: true,
				tickMarkLength: 10,
				zeroLineWidth: 1,
				zeroLineColor: 'rgba(0,0,0,0.25)',
				offsetGridLines: false,
				borderDash: [],
				borderDashOffset: 0.0
			},
	
			// scale label
			scaleLabel: {
				// actual label
				labelString: '',
	
				// display property
				display: false
			},
	
			// label settings
			ticks: {
				beginAtZero: false,
				minRotation: 0,
				maxRotation: 50,
				mirror: false,
				padding: 0,
				reverse: false,
				display: true,
				autoSkip: true,
				autoSkipPadding: 0,
				labelOffset: 0,
				// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
				callback: Chart.Ticks.formatters.values
			}
		};
	
		function computeTextSize(context, tick, font) {
			return helpers.isArray(tick) ?
				helpers.longestText(context, font, tick) :
				context.measureText(tick).width;
		}
	
		function parseFontOptions(options) {
			var getValueOrDefault = helpers.getValueOrDefault;
			var globalDefaults = Chart.defaults.global;
			var size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
			var style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
			var family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
	
			return {
				size: size,
				style: style,
				family: family,
				font: helpers.fontString(size, style, family)
			};
		}
	
		Chart.Scale = Chart.Element.extend({
			/**
			 * Get the padding needed for the scale
			 * @method getPadding
			 * @private
			 * @returns {Padding} the necessary padding
			 */
			getPadding: function() {
				var me = this;
				return {
					left: me.paddingLeft || 0,
					top: me.paddingTop || 0,
					right: me.paddingRight || 0,
					bottom: me.paddingBottom || 0
				};
			},
	
			// These methods are ordered by lifecyle. Utilities then follow.
			// Any function defined here is inherited by all scale types.
			// Any function can be extended by the scale type
	
			beforeUpdate: function() {
				helpers.callCallback(this.options.beforeUpdate, [this]);
			},
			update: function(maxWidth, maxHeight, margins) {
				var me = this;
	
				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();
	
				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = helpers.extend({
					left: 0,
					right: 0,
					top: 0,
					bottom: 0
				}, margins);
				me.longestTextCache = me.longestTextCache || {};
	
				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
	
				// Data min/max
				me.beforeDataLimits();
				me.determineDataLimits();
				me.afterDataLimits();
	
				// Ticks
				me.beforeBuildTicks();
				me.buildTicks();
				me.afterBuildTicks();
	
				me.beforeTickToLabelConversion();
				me.convertTicksToLabels();
				me.afterTickToLabelConversion();
	
				// Tick Rotation
				me.beforeCalculateTickRotation();
				me.calculateTickRotation();
				me.afterCalculateTickRotation();
				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();
	
				return me.minSize;
	
			},
			afterUpdate: function() {
				helpers.callCallback(this.options.afterUpdate, [this]);
			},
	
			//
	
			beforeSetDimensions: function() {
				helpers.callCallback(this.options.beforeSetDimensions, [this]);
			},
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;
	
					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}
	
				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;
			},
			afterSetDimensions: function() {
				helpers.callCallback(this.options.afterSetDimensions, [this]);
			},
	
			// Data limits
			beforeDataLimits: function() {
				helpers.callCallback(this.options.beforeDataLimits, [this]);
			},
			determineDataLimits: helpers.noop,
			afterDataLimits: function() {
				helpers.callCallback(this.options.afterDataLimits, [this]);
			},
	
			//
			beforeBuildTicks: function() {
				helpers.callCallback(this.options.beforeBuildTicks, [this]);
			},
			buildTicks: helpers.noop,
			afterBuildTicks: function() {
				helpers.callCallback(this.options.afterBuildTicks, [this]);
			},
	
			beforeTickToLabelConversion: function() {
				helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
			},
			convertTicksToLabels: function() {
				var me = this;
				// Convert ticks to strings
				var tickOpts = me.options.ticks;
				me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);
			},
			afterTickToLabelConversion: function() {
				helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
			},
	
			//
	
			beforeCalculateTickRotation: function() {
				helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
			},
			calculateTickRotation: function() {
				var me = this;
				var context = me.ctx;
				var tickOpts = me.options.ticks;
	
				// Get the width of each grid by calculating the difference
				// between x offsets between 0 and 1.
				var tickFont = parseFontOptions(tickOpts);
				context.font = tickFont.font;
	
				var labelRotation = tickOpts.minRotation || 0;
	
				if (me.options.display && me.isHorizontal()) {
					var originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);
					var labelWidth = originalLabelWidth;
					var cosRotation;
					var sinRotation;
	
					// Allow 3 pixels x2 padding either side for label readability
					var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
	
					// Max label rotation can be set or default to 90 - also act as a loop counter
					while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
						var angleRadians = helpers.toRadians(labelRotation);
						cosRotation = Math.cos(angleRadians);
						sinRotation = Math.sin(angleRadians);
	
						if (sinRotation * originalLabelWidth > me.maxHeight) {
							// go back one step
							labelRotation--;
							break;
						}
	
						labelRotation++;
						labelWidth = cosRotation * originalLabelWidth;
					}
				}
	
				me.labelRotation = labelRotation;
			},
			afterCalculateTickRotation: function() {
				helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
			},
	
			//
	
			beforeFit: function() {
				helpers.callCallback(this.options.beforeFit, [this]);
			},
			fit: function() {
				var me = this;
				// Reset
				var minSize = me.minSize = {
					width: 0,
					height: 0
				};
	
				var opts = me.options;
				var tickOpts = opts.ticks;
				var scaleLabelOpts = opts.scaleLabel;
				var gridLineOpts = opts.gridLines;
				var display = opts.display;
				var isHorizontal = me.isHorizontal();
	
				var tickFont = parseFontOptions(tickOpts);
				var scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;
				var tickMarkLength = opts.gridLines.tickMarkLength;
	
				// Width
				if (isHorizontal) {
					// subtract the margins to line up with the chartArea if we are a full width scale
					minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
				} else {
					minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
				}
	
				// height
				if (isHorizontal) {
					minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
				} else {
					minSize.height = me.maxHeight; // fill all the height
				}
	
				// Are we showing a title for the scale?
				if (scaleLabelOpts.display && display) {
					if (isHorizontal) {
						minSize.height += scaleLabelFontSize;
					} else {
						minSize.width += scaleLabelFontSize;
					}
				}
	
				// Don't bother fitting the ticks if we are not showing them
				if (tickOpts.display && display) {
					var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);
					var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
					var lineSpace = tickFont.size * 0.5;
	
					if (isHorizontal) {
						// A horizontal axis is more constrained by the height.
						me.longestLabelWidth = largestTextWidth;
	
						var angleRadians = helpers.toRadians(me.labelRotation);
						var cosRotation = Math.cos(angleRadians);
						var sinRotation = Math.sin(angleRadians);
	
						// TODO - improve this calculation
						var labelHeight = (sinRotation * largestTextWidth)
							+ (tickFont.size * tallestLabelHeightInLines)
							+ (lineSpace * tallestLabelHeightInLines);
	
						minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
						me.ctx.font = tickFont.font;
	
						var firstTick = me.ticks[0];
						var firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);
	
						var lastTick = me.ticks[me.ticks.length - 1];
						var lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);
	
						// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated
						// by the font height
						if (me.labelRotation !== 0) {
							me.paddingLeft = opts.position === 'bottom'? (cosRotation * firstLabelWidth) + 3: (cosRotation * lineSpace) + 3; // add 3 px to move away from canvas edges
							me.paddingRight = opts.position === 'bottom'? (cosRotation * lineSpace) + 3: (cosRotation * lastLabelWidth) + 3;
						} else {
							me.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges
							me.paddingRight = lastLabelWidth / 2 + 3;
						}
					} else {
						// A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first
						// Account for padding
	
						if (tickOpts.mirror) {
							largestTextWidth = 0;
						} else {
							largestTextWidth += me.options.ticks.padding;
						}
						minSize.width += largestTextWidth;
						me.paddingTop = tickFont.size / 2;
						me.paddingBottom = tickFont.size / 2;
					}
				}
	
				me.handleMargins();
	
				me.width = minSize.width;
				me.height = minSize.height;
			},
	
			/**
			 * Handle margins and padding interactions
			 * @private
			 */
			handleMargins: function() {
				var me = this;
				if (me.margins) {
					me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
					me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
					me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
					me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
				}
			},
	
			afterFit: function() {
				helpers.callCallback(this.options.afterFit, [this]);
			},
	
			// Shared Methods
			isHorizontal: function() {
				return this.options.position === 'top' || this.options.position === 'bottom';
			},
			isFullWidth: function() {
				return (this.options.fullWidth);
			},
	
			// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
			getRightValue: function(rawValue) {
				// Null and undefined values first
				if (rawValue === null || typeof(rawValue) === 'undefined') {
					return NaN;
				}
				// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
				if (typeof(rawValue) === 'number' && !isFinite(rawValue)) {
					return NaN;
				}
				// If it is in fact an object, dive in one more level
				if (typeof(rawValue) === 'object') {
					if ((rawValue instanceof Date) || (rawValue.isValid)) {
						return rawValue;
					}
					return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
				}
	
				// Value is good, return it
				return rawValue;
			},
	
			// Used to get the value to display in the tooltip for the data at the given index
			// function getLabelForIndex(index, datasetIndex)
			getLabelForIndex: helpers.noop,
	
			// Used to get data value locations.  Value can either be an index or a numerical value
			getPixelForValue: helpers.noop,
	
			// Used to get the data value from a given pixel. This is the inverse of getPixelForValue
			getValueForPixel: helpers.noop,
	
			// Used for tick location, should
			getPixelForTick: function(index, includeOffset) {
				var me = this;
				if (me.isHorizontal()) {
					var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
					var tickWidth = innerWidth / Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
					var pixel = (tickWidth * index) + me.paddingLeft;
	
					if (includeOffset) {
						pixel += tickWidth / 2;
					}
	
					var finalVal = me.left + Math.round(pixel);
					finalVal += me.isFullWidth() ? me.margins.left : 0;
					return finalVal;
				}
				var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
				return me.top + (index * (innerHeight / (me.ticks.length - 1)));
			},
	
			// Utility for getting the pixel location of a percentage of scale
			getPixelForDecimal: function(decimal /* , includeOffset*/) {
				var me = this;
				if (me.isHorizontal()) {
					var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
					var valueOffset = (innerWidth * decimal) + me.paddingLeft;
	
					var finalVal = me.left + Math.round(valueOffset);
					finalVal += me.isFullWidth() ? me.margins.left : 0;
					return finalVal;
				}
				return me.top + (decimal * me.height);
			},
	
			getBasePixel: function() {
				return this.getPixelForValue(this.getBaseValue());
			},
	
			getBaseValue: function() {
				var me = this;
				var min = me.min;
				var max = me.max;
	
				return me.beginAtZero ? 0:
					min < 0 && max < 0? max :
					min > 0 && max > 0? min :
					0;
			},
	
			// Actually draw the scale on the canvas
			// @param {rectangle} chartArea : the area of the chart to draw full grid lines on
			draw: function(chartArea) {
				var me = this;
				var options = me.options;
				if (!options.display) {
					return;
				}
	
				var context = me.ctx;
				var globalDefaults = Chart.defaults.global;
				var optionTicks = options.ticks;
				var gridLines = options.gridLines;
				var scaleLabel = options.scaleLabel;
	
				var isRotated = me.labelRotation !== 0;
				var skipRatio;
				var useAutoskipper = optionTicks.autoSkip;
				var isHorizontal = me.isHorizontal();
	
				// figure out the maximum number of gridlines to show
				var maxTicks;
				if (optionTicks.maxTicksLimit) {
					maxTicks = optionTicks.maxTicksLimit;
				}
	
				var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
				var tickFont = parseFontOptions(optionTicks);
	
				var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
				var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
				var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
	
				var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
				var scaleLabelFont = parseFontOptions(scaleLabel);
	
				var labelRotationRadians = helpers.toRadians(me.labelRotation);
				var cosRotation = Math.cos(labelRotationRadians);
				var longestRotatedLabel = me.longestLabelWidth * cosRotation;
	
				// Make sure we draw text in the correct color and font
				context.fillStyle = tickFontColor;
	
				var itemsToDraw = [];
	
				if (isHorizontal) {
					skipRatio = false;
	
					// Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation
					// See #2584
					if (isRotated) {
						longestRotatedLabel /= 2;
					}
	
					if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > (me.width - (me.paddingLeft + me.paddingRight))) {
						skipRatio = 1 + Math.floor(((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length) / (me.width - (me.paddingLeft + me.paddingRight)));
					}
	
					// if they defined a max number of optionTicks,
					// increase skipRatio until that number is met
					if (maxTicks && me.ticks.length > maxTicks) {
						while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
							if (!skipRatio) {
								skipRatio = 1;
							}
							skipRatio += 1;
						}
					}
	
					if (!useAutoskipper) {
						skipRatio = false;
					}
				}
	
	
				var xTickStart = options.position === 'right' ? me.left : me.right - tl;
				var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
				var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
				var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
	
				helpers.each(me.ticks, function(label, index) {
					// If the callback returned a null or undefined value, do not draw this line
					if (label === undefined || label === null) {
						return;
					}
	
					var isLastTick = me.ticks.length === index + 1;
	
					// Since we always show the last tick,we need may need to hide the last shown one before
					var shouldSkip = (skipRatio > 1 && index % skipRatio > 0) || (index % skipRatio === 0 && index + skipRatio >= me.ticks.length);
					if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
						return;
					}
	
					var lineWidth, lineColor;
					if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
						// Draw the first index specially
						lineWidth = gridLines.zeroLineWidth;
						lineColor = gridLines.zeroLineColor;
					} else {
						lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
						lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
					}
	
					// Common properties
					var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
					var textAlign = 'middle';
					var textBaseline = 'middle';
	
					if (isHorizontal) {
	
						if (options.position === 'bottom') {
							// bottom
							textBaseline = !isRotated? 'top':'middle';
							textAlign = !isRotated? 'center': 'right';
							labelY = me.top + tl;
						} else {
							// top
							textBaseline = !isRotated? 'bottom':'middle';
							textAlign = !isRotated? 'center': 'left';
							labelY = me.bottom - tl;
						}
	
						var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines
						labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)
	
						tx1 = tx2 = x1 = x2 = xLineValue;
						ty1 = yTickStart;
						ty2 = yTickEnd;
						y1 = chartArea.top;
						y2 = chartArea.bottom;
					} else {
						var isLeft = options.position === 'left';
						var tickPadding = optionTicks.padding;
						var labelXOffset;
	
						if (optionTicks.mirror) {
							textAlign = isLeft ? 'left' : 'right';
							labelXOffset = tickPadding;
						} else {
							textAlign = isLeft ? 'right' : 'left';
							labelXOffset = tl + tickPadding;
						}
	
						labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
	
						var yLineValue = me.getPixelForTick(index); // xvalues for grid lines
						yLineValue += helpers.aliasPixel(lineWidth);
						labelY = me.getPixelForTick(index, gridLines.offsetGridLines);
	
						tx1 = xTickStart;
						tx2 = xTickEnd;
						x1 = chartArea.left;
						x2 = chartArea.right;
						ty1 = ty2 = y1 = y2 = yLineValue;
					}
	
					itemsToDraw.push({
						tx1: tx1,
						ty1: ty1,
						tx2: tx2,
						ty2: ty2,
						x1: x1,
						y1: y1,
						x2: x2,
						y2: y2,
						labelX: labelX,
						labelY: labelY,
						glWidth: lineWidth,
						glColor: lineColor,
						glBorderDash: borderDash,
						glBorderDashOffset: borderDashOffset,
						rotation: -1 * labelRotationRadians,
						label: label,
						textBaseline: textBaseline,
						textAlign: textAlign
					});
				});
	
				// Draw all of the tick labels, tick marks, and grid lines at the correct places
				helpers.each(itemsToDraw, function(itemToDraw) {
					if (gridLines.display) {
						context.save();
						context.lineWidth = itemToDraw.glWidth;
						context.strokeStyle = itemToDraw.glColor;
						if (context.setLineDash) {
							context.setLineDash(itemToDraw.glBorderDash);
							context.lineDashOffset = itemToDraw.glBorderDashOffset;
						}
	
						context.beginPath();
	
						if (gridLines.drawTicks) {
							context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
							context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
						}
	
						if (gridLines.drawOnChartArea) {
							context.moveTo(itemToDraw.x1, itemToDraw.y1);
							context.lineTo(itemToDraw.x2, itemToDraw.y2);
						}
	
						context.stroke();
						context.restore();
					}
	
					if (optionTicks.display) {
						context.save();
						context.translate(itemToDraw.labelX, itemToDraw.labelY);
						context.rotate(itemToDraw.rotation);
						context.font = tickFont.font;
						context.textBaseline = itemToDraw.textBaseline;
						context.textAlign = itemToDraw.textAlign;
	
						var label = itemToDraw.label;
						if (helpers.isArray(label)) {
							for (var i = 0, y = 0; i < label.length; ++i) {
								// We just make sure the multiline element is a string here..
								context.fillText('' + label[i], 0, y);
								// apply same lineSpacing as calculated @ L#320
								y += (tickFont.size * 1.5);
							}
						} else {
							context.fillText(label, 0, 0);
						}
						context.restore();
					}
				});
	
				if (scaleLabel.display) {
					// Draw the scale label
					var scaleLabelX;
					var scaleLabelY;
					var rotation = 0;
	
					if (isHorizontal) {
						scaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width
						scaleLabelY = options.position === 'bottom' ? me.bottom - (scaleLabelFont.size / 2) : me.top + (scaleLabelFont.size / 2);
					} else {
						var isLeft = options.position === 'left';
						scaleLabelX = isLeft ? me.left + (scaleLabelFont.size / 2) : me.right - (scaleLabelFont.size / 2);
						scaleLabelY = me.top + ((me.bottom - me.top) / 2);
						rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
					}
	
					context.save();
					context.translate(scaleLabelX, scaleLabelY);
					context.rotate(rotation);
					context.textAlign = 'center';
					context.textBaseline = 'middle';
					context.fillStyle = scaleLabelFontColor; // render in correct colour
					context.font = scaleLabelFont.font;
					context.fillText(scaleLabel.labelString, 0, 0);
					context.restore();
				}
	
				if (gridLines.drawBorder) {
					// Draw the line at the edge of the axis
					context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
					context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
					var x1 = me.left,
						x2 = me.right,
						y1 = me.top,
						y2 = me.bottom;
	
					var aliasPixel = helpers.aliasPixel(context.lineWidth);
					if (isHorizontal) {
						y1 = y2 = options.position === 'top' ? me.bottom : me.top;
						y1 += aliasPixel;
						y2 += aliasPixel;
					} else {
						x1 = x2 = options.position === 'left' ? me.right : me.left;
						x1 += aliasPixel;
						x2 += aliasPixel;
					}
	
					context.beginPath();
					context.moveTo(x1, y1);
					context.lineTo(x2, y2);
					context.stroke();
				}
			}
		});
	};


/***/ },
/* 254 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.scaleService = {
			// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
			// use the new chart options to grab the correct scale
			constructors: {},
			// Use a registration function so that we can move to an ES6 map when we no longer need to support
			// old browsers
	
			// Scale config defaults
			defaults: {},
			registerScaleType: function(type, scaleConstructor, defaults) {
				this.constructors[type] = scaleConstructor;
				this.defaults[type] = helpers.clone(defaults);
			},
			getScaleConstructor: function(type) {
				return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
			},
			getScaleDefaults: function(type) {
				// Return the scale defaults merged with the global settings so that we always use the latest ones
				return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
			},
			updateScaleDefaults: function(type, additions) {
				var defaults = this.defaults;
				if (defaults.hasOwnProperty(type)) {
					defaults[type] = helpers.extend(defaults[type], additions);
				}
			},
			addScalesToLayout: function(chartInstance) {
				// Adds each scale to the chart.boxes array to be sized accordingly
				helpers.each(chartInstance.scales, function(scale) {
					Chart.layoutService.addBox(chartInstance, scale);
				});
			}
		};
	};


/***/ },
/* 255 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		/**
		 * Namespace to hold static tick generation functions
		 * @namespace Chart.Ticks
		 */
		Chart.Ticks = {
			/**
			 * Namespace to hold generators for different types of ticks
			 * @namespace Chart.Ticks.generators
			 */
			generators: {
				/**
				 * Interface for the options provided to the numeric tick generator
				 * @interface INumericTickGenerationOptions
				 */
				/**
				 * The maximum number of ticks to display
				 * @name INumericTickGenerationOptions#maxTicks
				 * @type Number
				 */
				/**
				 * The distance between each tick.
				 * @name INumericTickGenerationOptions#stepSize
				 * @type Number
				 * @optional
				 */
				/**
				 * Forced minimum for the ticks. If not specified, the minimum of the data range is used to calculate the tick minimum
				 * @name INumericTickGenerationOptions#min
				 * @type Number
				 * @optional
				 */
				/**
				 * The maximum value of the ticks. If not specified, the maximum of the data range is used to calculate the tick maximum
				 * @name INumericTickGenerationOptions#max
				 * @type Number
				 * @optional
				 */
	
				/**
				 * Generate a set of linear ticks
				 * @method Chart.Ticks.generators.linear
				 * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
				 * @param dataRange {IRange} the range of the data
				 * @returns {Array<Number>} array of tick values
				 */
				linear: function(generationOptions, dataRange) {
					var ticks = [];
					// To get a "nice" value for the tick spacing, we will use the appropriately named
					// "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
					// for details.
	
					var spacing;
					if (generationOptions.stepSize && generationOptions.stepSize > 0) {
						spacing = generationOptions.stepSize;
					} else {
						var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
						spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
					}
					var niceMin = Math.floor(dataRange.min / spacing) * spacing;
					var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
	
					// If min, max and stepSize is set and they make an evenly spaced scale use it.
					if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
						// If very close to our whole number, use it.
						if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
							niceMin = generationOptions.min;
							niceMax = generationOptions.max;
						}
					}
	
					var numSpaces = (niceMax - niceMin) / spacing;
					// If very close to our rounded value, use it.
					if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
						numSpaces = Math.round(numSpaces);
					} else {
						numSpaces = Math.ceil(numSpaces);
					}
	
					// Put the values into the ticks array
					ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
					for (var j = 1; j < numSpaces; ++j) {
						ticks.push(niceMin + (j * spacing));
					}
					ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
	
					return ticks;
				},
	
				/**
				 * Generate a set of logarithmic ticks
				 * @method Chart.Ticks.generators.logarithmic
				 * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
				 * @param dataRange {IRange} the range of the data
				 * @returns {Array<Number>} array of tick values
				 */
				logarithmic: function(generationOptions, dataRange) {
					var ticks = [];
					var getValueOrDefault = helpers.getValueOrDefault;
	
					// Figure out what the max number of ticks we can support it is based on the size of
					// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
					// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
					// the graph
					var tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
	
					var endExp = Math.floor(helpers.log10(dataRange.max));
					var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
					var exp;
					var significand;
	
					if (tickVal === 0) {
						exp = Math.floor(helpers.log10(dataRange.minNotZero));
						significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
	
						ticks.push(tickVal);
						tickVal = significand * Math.pow(10, exp);
					} else {
						exp = Math.floor(helpers.log10(tickVal));
						significand = Math.floor(tickVal / Math.pow(10, exp));
					}
	
					do {
						ticks.push(tickVal);
	
						++significand;
						if (significand === 10) {
							significand = 1;
							++exp;
						}
	
						tickVal = significand * Math.pow(10, exp);
					} while (exp < endExp || (exp === endExp && significand < endSignificand));
	
					var lastTick = getValueOrDefault(generationOptions.max, tickVal);
					ticks.push(lastTick);
	
					return ticks;
				}
			},
	
			/**
			 * Namespace to hold formatters for different types of ticks
			 * @namespace Chart.Ticks.formatters
			 */
			formatters: {
				/**
				 * Formatter for value labels
				 * @method Chart.Ticks.formatters.values
				 * @param value the value to display
				 * @return {String|Array} the label to display
				 */
				values: function(value) {
					return helpers.isArray(value) ? value : '' + value;
				},
	
				/**
				 * Formatter for linear numeric ticks
				 * @method Chart.Ticks.formatters.linear
				 * @param tickValue {Number} the value to be formatted
				 * @param index {Number} the position of the tickValue parameter in the ticks array
				 * @param ticks {Array<Number>} the list of ticks being converted
				 * @return {String} string representation of the tickValue parameter
				 */
				linear: function(tickValue, index, ticks) {
					// If we have lots of ticks, don't use the ones
					var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
	
					// If we have a number like 2.5 as the delta, figure out how many decimal places we need
					if (Math.abs(delta) > 1) {
						if (tickValue !== Math.floor(tickValue)) {
							// not an integer
							delta = tickValue - Math.floor(tickValue);
						}
					}
	
					var logDelta = helpers.log10(Math.abs(delta));
					var tickString = '';
	
					if (tickValue !== 0) {
						var numDecimal = -1 * Math.floor(logDelta);
						numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
						tickString = tickValue.toFixed(numDecimal);
					} else {
						tickString = '0'; // never show decimal places for 0
					}
	
					return tickString;
				},
	
				logarithmic: function(tickValue, index, ticks) {
					var remain = tickValue / (Math.pow(10, Math.floor(helpers.log10(tickValue))));
	
					if (tickValue === 0) {
						return '0';
					} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
						return tickValue.toExponential();
					}
					return '';
				}
			}
		};
	};


/***/ },
/* 256 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.global.title = {
			display: false,
			position: 'top',
			fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)
	
			fontStyle: 'bold',
			padding: 10,
	
			// actual title
			text: ''
		};
	
		var noop = helpers.noop;
		Chart.Title = Chart.Element.extend({
	
			initialize: function(config) {
				var me = this;
				helpers.extend(me, config);
	
				// Contains hit boxes for each dataset (in dataset order)
				me.legendHitBoxes = [];
			},
	
			// These methods are ordered by lifecycle. Utilities then follow.
	
			beforeUpdate: noop,
			update: function(maxWidth, maxHeight, margins) {
				var me = this;
	
				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();
	
				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = margins;
	
				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
				// Labels
				me.beforeBuildLabels();
				me.buildLabels();
				me.afterBuildLabels();
	
				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();
	
				return me.minSize;
	
			},
			afterUpdate: noop,
	
			//
	
			beforeSetDimensions: noop,
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;
	
					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}
	
				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;
	
				// Reset minSize
				me.minSize = {
					width: 0,
					height: 0
				};
			},
			afterSetDimensions: noop,
	
			//
	
			beforeBuildLabels: noop,
			buildLabels: noop,
			afterBuildLabels: noop,
	
			//
	
			beforeFit: noop,
			fit: function() {
				var me = this,
					valueOrDefault = helpers.getValueOrDefault,
					opts = me.options,
					globalDefaults = Chart.defaults.global,
					display = opts.display,
					fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
					minSize = me.minSize;
	
				if (me.isHorizontal()) {
					minSize.width = me.maxWidth; // fill all the width
					minSize.height = display ? fontSize + (opts.padding * 2) : 0;
				} else {
					minSize.width = display ? fontSize + (opts.padding * 2) : 0;
					minSize.height = me.maxHeight; // fill all the height
				}
	
				me.width = minSize.width;
				me.height = minSize.height;
	
			},
			afterFit: noop,
	
			// Shared Methods
			isHorizontal: function() {
				var pos = this.options.position;
				return pos === 'top' || pos === 'bottom';
			},
	
			// Actually draw the title block on the canvas
			draw: function() {
				var me = this,
					ctx = me.ctx,
					valueOrDefault = helpers.getValueOrDefault,
					opts = me.options,
					globalDefaults = Chart.defaults.global;
	
				if (opts.display) {
					var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
						fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),
						fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),
						titleFont = helpers.fontString(fontSize, fontStyle, fontFamily),
						rotation = 0,
						titleX,
						titleY,
						top = me.top,
						left = me.left,
						bottom = me.bottom,
						right = me.right,
						maxWidth;
	
					ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour
					ctx.font = titleFont;
	
					// Horizontal
					if (me.isHorizontal()) {
						titleX = left + ((right - left) / 2); // midpoint of the width
						titleY = top + ((bottom - top) / 2); // midpoint of the height
						maxWidth = right - left;
					} else {
						titleX = opts.position === 'left' ? left + (fontSize / 2) : right - (fontSize / 2);
						titleY = top + ((bottom - top) / 2);
						maxWidth = bottom - top;
						rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
					}
	
					ctx.save();
					ctx.translate(titleX, titleY);
					ctx.rotate(rotation);
					ctx.textAlign = 'center';
					ctx.textBaseline = 'middle';
					ctx.fillText(opts.text, 0, 0, maxWidth);
					ctx.restore();
				}
			}
		});
	
		function createNewTitleBlockAndAttach(chartInstance, titleOpts) {
			var title = new Chart.Title({
				ctx: chartInstance.chart.ctx,
				options: titleOpts,
				chart: chartInstance
			});
			chartInstance.titleBlock = title;
			Chart.layoutService.addBox(chartInstance, title);
		}
	
		// Register the title plugin
		Chart.plugins.register({
			beforeInit: function(chartInstance) {
				var titleOpts = chartInstance.options.title;
	
				if (titleOpts) {
					createNewTitleBlockAndAttach(chartInstance, titleOpts);
				}
			},
			beforeUpdate: function(chartInstance) {
				var titleOpts = chartInstance.options.title;
	
				if (titleOpts) {
					titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);
	
					if (chartInstance.titleBlock) {
						chartInstance.titleBlock.options = titleOpts;
					} else {
						createNewTitleBlockAndAttach(chartInstance, titleOpts);
					}
				} else {
					Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);
					delete chartInstance.titleBlock;
				}
			}
		});
	};


/***/ },
/* 257 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		/**
	 	 * Helper method to merge the opacity into a color
	 	 */
		function mergeOpacity(colorString, opacity) {
			var color = helpers.color(colorString);
			return color.alpha(opacity * color.alpha()).rgbaString();
		}
	
		Chart.defaults.global.tooltips = {
			enabled: true,
			custom: null,
			mode: 'nearest',
			position: 'average',
			intersect: true,
			backgroundColor: 'rgba(0,0,0,0.8)',
			titleFontStyle: 'bold',
			titleSpacing: 2,
			titleMarginBottom: 6,
			titleFontColor: '#fff',
			titleAlign: 'left',
			bodySpacing: 2,
			bodyFontColor: '#fff',
			bodyAlign: 'left',
			footerFontStyle: 'bold',
			footerSpacing: 2,
			footerMarginTop: 6,
			footerFontColor: '#fff',
			footerAlign: 'left',
			yPadding: 6,
			xPadding: 6,
			caretSize: 5,
			cornerRadius: 6,
			multiKeyBackground: '#fff',
			displayColors: true,
			callbacks: {
				// Args are: (tooltipItems, data)
				beforeTitle: helpers.noop,
				title: function(tooltipItems, data) {
					// Pick first xLabel for now
					var title = '';
					var labels = data.labels;
					var labelCount = labels ? labels.length : 0;
	
					if (tooltipItems.length > 0) {
						var item = tooltipItems[0];
	
						if (item.xLabel) {
							title = item.xLabel;
						} else if (labelCount > 0 && item.index < labelCount) {
							title = labels[item.index];
						}
					}
	
					return title;
				},
				afterTitle: helpers.noop,
	
				// Args are: (tooltipItems, data)
				beforeBody: helpers.noop,
	
				// Args are: (tooltipItem, data)
				beforeLabel: helpers.noop,
				label: function(tooltipItem, data) {
					var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
					return datasetLabel + ': ' + tooltipItem.yLabel;
				},
				labelColor: function(tooltipItem, chartInstance) {
					var meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
					var activeElement = meta.data[tooltipItem.index];
					var view = activeElement._view;
					return {
						borderColor: view.borderColor,
						backgroundColor: view.backgroundColor
					};
				},
				afterLabel: helpers.noop,
	
				// Args are: (tooltipItems, data)
				afterBody: helpers.noop,
	
				// Args are: (tooltipItems, data)
				beforeFooter: helpers.noop,
				footer: helpers.noop,
				afterFooter: helpers.noop
			}
		};
	
		// Helper to push or concat based on if the 2nd parameter is an array or not
		function pushOrConcat(base, toPush) {
			if (toPush) {
				if (helpers.isArray(toPush)) {
					// base = base.concat(toPush);
					Array.prototype.push.apply(base, toPush);
				} else {
					base.push(toPush);
				}
			}
	
			return base;
		}
	
		// Private helper to create a tooltip item model
		// @param element : the chart element (point, arc, bar) to create the tooltip item for
		// @return : new tooltip item
		function createTooltipItem(element) {
			var xScale = element._xScale;
			var yScale = element._yScale || element._scale; // handle radar || polarArea charts
			var index = element._index,
				datasetIndex = element._datasetIndex;
	
			return {
				xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
				yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
				index: index,
				datasetIndex: datasetIndex,
				x: element._model.x,
				y: element._model.y
			};
		}
	
		/**
		 * Helper to get the reset model for the tooltip
		 * @param tooltipOpts {Object} the tooltip options
		 */
		function getBaseModel(tooltipOpts) {
			var globalDefaults = Chart.defaults.global;
			var getValueOrDefault = helpers.getValueOrDefault;
	
			return {
				// Positioning
				xPadding: tooltipOpts.xPadding,
				yPadding: tooltipOpts.yPadding,
				xAlign: tooltipOpts.xAlign,
				yAlign: tooltipOpts.yAlign,
	
				// Body
				bodyFontColor: tooltipOpts.bodyFontColor,
				_bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
				_bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
				_bodyAlign: tooltipOpts.bodyAlign,
				bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
				bodySpacing: tooltipOpts.bodySpacing,
	
				// Title
				titleFontColor: tooltipOpts.titleFontColor,
				_titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
				_titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
				titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
				_titleAlign: tooltipOpts.titleAlign,
				titleSpacing: tooltipOpts.titleSpacing,
				titleMarginBottom: tooltipOpts.titleMarginBottom,
	
				// Footer
				footerFontColor: tooltipOpts.footerFontColor,
				_footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
				_footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
				footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
				_footerAlign: tooltipOpts.footerAlign,
				footerSpacing: tooltipOpts.footerSpacing,
				footerMarginTop: tooltipOpts.footerMarginTop,
	
				// Appearance
				caretSize: tooltipOpts.caretSize,
				cornerRadius: tooltipOpts.cornerRadius,
				backgroundColor: tooltipOpts.backgroundColor,
				opacity: 0,
				legendColorBackground: tooltipOpts.multiKeyBackground,
				displayColors: tooltipOpts.displayColors
			};
		}
	
		/**
		 * Get the size of the tooltip
		 */
		function getTooltipSize(tooltip, model) {
			var ctx = tooltip._chart.ctx;
	
			var height = model.yPadding * 2; // Tooltip Padding
			var width = 0;
	
			// Count of all lines in the body
			var body = model.body;
			var combinedBodyLength = body.reduce(function(count, bodyItem) {
				return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
			}, 0);
			combinedBodyLength += model.beforeBody.length + model.afterBody.length;
	
			var titleLineCount = model.title.length;
			var footerLineCount = model.footer.length;
			var titleFontSize = model.titleFontSize,
				bodyFontSize = model.bodyFontSize,
				footerFontSize = model.footerFontSize;
	
			height += titleLineCount * titleFontSize; // Title Lines
			height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
			height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
			height += combinedBodyLength * bodyFontSize; // Body Lines
			height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
			height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
			height += footerLineCount * (footerFontSize); // Footer Lines
			height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
	
			// Title width
			var widthPadding = 0;
			var maxLineWidth = function(line) {
				width = Math.max(width, ctx.measureText(line).width + widthPadding);
			};
	
			ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
			helpers.each(model.title, maxLineWidth);
	
			// Body width
			ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
			helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
	
			// Body lines may include some extra width due to the color box
			widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
			helpers.each(body, function(bodyItem) {
				helpers.each(bodyItem.before, maxLineWidth);
				helpers.each(bodyItem.lines, maxLineWidth);
				helpers.each(bodyItem.after, maxLineWidth);
			});
	
			// Reset back to 0
			widthPadding = 0;
	
			// Footer width
			ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
			helpers.each(model.footer, maxLineWidth);
	
			// Add padding
			width += 2 * model.xPadding;
	
			return {
				width: width,
				height: height
			};
		}
	
		/**
		 * Helper to get the alignment of a tooltip given the size
		 */
		function determineAlignment(tooltip, size) {
			var model = tooltip._model;
			var chart = tooltip._chart;
			var chartArea = tooltip._chartInstance.chartArea;
			var xAlign = 'center';
			var yAlign = 'center';
	
			if (model.y < size.height) {
				yAlign = 'top';
			} else if (model.y > (chart.height - size.height)) {
				yAlign = 'bottom';
			}
	
			var lf, rf; // functions to determine left, right alignment
			var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
			var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
			var midX = (chartArea.left + chartArea.right) / 2;
			var midY = (chartArea.top + chartArea.bottom) / 2;
	
			if (yAlign === 'center') {
				lf = function(x) {
					return x <= midX;
				};
				rf = function(x) {
					return x > midX;
				};
			} else {
				lf = function(x) {
					return x <= (size.width / 2);
				};
				rf = function(x) {
					return x >= (chart.width - (size.width / 2));
				};
			}
	
			olf = function(x) {
				return x + size.width > chart.width;
			};
			orf = function(x) {
				return x - size.width < 0;
			};
			yf = function(y) {
				return y <= midY ? 'top' : 'bottom';
			};
	
			if (lf(model.x)) {
				xAlign = 'left';
	
				// Is tooltip too wide and goes over the right side of the chart.?
				if (olf(model.x)) {
					xAlign = 'center';
					yAlign = yf(model.y);
				}
			} else if (rf(model.x)) {
				xAlign = 'right';
	
				// Is tooltip too wide and goes outside left edge of canvas?
				if (orf(model.x)) {
					xAlign = 'center';
					yAlign = yf(model.y);
				}
			}
	
			var opts = tooltip._options;
			return {
				xAlign: opts.xAlign ? opts.xAlign : xAlign,
				yAlign: opts.yAlign ? opts.yAlign : yAlign
			};
		}
	
		/**
		 * @Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
		 */
		function getBackgroundPoint(vm, size, alignment) {
			// Background Position
			var x = vm.x;
			var y = vm.y;
	
			var caretSize = vm.caretSize,
				caretPadding = vm.caretPadding,
				cornerRadius = vm.cornerRadius,
				xAlign = alignment.xAlign,
				yAlign = alignment.yAlign,
				paddingAndSize = caretSize + caretPadding,
				radiusAndPadding = cornerRadius + caretPadding;
	
			if (xAlign === 'right') {
				x -= size.width;
			} else if (xAlign === 'center') {
				x -= (size.width / 2);
			}
	
			if (yAlign === 'top') {
				y += paddingAndSize;
			} else if (yAlign === 'bottom') {
				y -= size.height + paddingAndSize;
			} else {
				y -= (size.height / 2);
			}
	
			if (yAlign === 'center') {
				if (xAlign === 'left') {
					x += paddingAndSize;
				} else if (xAlign === 'right') {
					x -= paddingAndSize;
				}
			} else if (xAlign === 'left') {
				x -= radiusAndPadding;
			} else if (xAlign === 'right') {
				x += radiusAndPadding;
			}
	
			return {
				x: x,
				y: y
			};
		}
	
		Chart.Tooltip = Chart.Element.extend({
			initialize: function() {
				this._model = getBaseModel(this._options);
			},
	
			// Get the title
			// Args are: (tooltipItem, data)
			getTitle: function() {
				var me = this;
				var opts = me._options;
				var callbacks = opts.callbacks;
	
				var beforeTitle = callbacks.beforeTitle.apply(me, arguments),
					title = callbacks.title.apply(me, arguments),
					afterTitle = callbacks.afterTitle.apply(me, arguments);
	
				var lines = [];
				lines = pushOrConcat(lines, beforeTitle);
				lines = pushOrConcat(lines, title);
				lines = pushOrConcat(lines, afterTitle);
	
				return lines;
			},
	
			// Args are: (tooltipItem, data)
			getBeforeBody: function() {
				var lines = this._options.callbacks.beforeBody.apply(this, arguments);
				return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
			},
	
			// Args are: (tooltipItem, data)
			getBody: function(tooltipItems, data) {
				var me = this;
				var callbacks = me._options.callbacks;
				var bodyItems = [];
	
				helpers.each(tooltipItems, function(tooltipItem) {
					var bodyItem = {
						before: [],
						lines: [],
						after: []
					};
					pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
					pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
					pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
	
					bodyItems.push(bodyItem);
				});
	
				return bodyItems;
			},
	
			// Args are: (tooltipItem, data)
			getAfterBody: function() {
				var lines = this._options.callbacks.afterBody.apply(this, arguments);
				return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
			},
	
			// Get the footer and beforeFooter and afterFooter lines
			// Args are: (tooltipItem, data)
			getFooter: function() {
				var me = this;
				var callbacks = me._options.callbacks;
	
				var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
				var footer = callbacks.footer.apply(me, arguments);
				var afterFooter = callbacks.afterFooter.apply(me, arguments);
	
				var lines = [];
				lines = pushOrConcat(lines, beforeFooter);
				lines = pushOrConcat(lines, footer);
				lines = pushOrConcat(lines, afterFooter);
	
				return lines;
			},
	
			update: function(changed) {
				var me = this;
				var opts = me._options;
	
				// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
				// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
				// which breaks any animations.
				var existingModel = me._model;
				var model = me._model = getBaseModel(opts);
				var active = me._active;
	
				var data = me._data;
				var chartInstance = me._chartInstance;
	
				// In the case where active.length === 0 we need to keep these at existing values for good animations
				var alignment = {
					xAlign: existingModel.xAlign,
					yAlign: existingModel.yAlign
				};
				var backgroundPoint = {
					x: existingModel.x,
					y: existingModel.y
				};
				var tooltipSize = {
					width: existingModel.width,
					height: existingModel.height
				};
				var tooltipPosition = {
					x: existingModel.caretX,
					y: existingModel.caretY
				};
	
				var i, len;
	
				if (active.length) {
					model.opacity = 1;
	
					var labelColors = [];
					tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);
	
					var tooltipItems = [];
					for (i = 0, len = active.length; i < len; ++i) {
						tooltipItems.push(createTooltipItem(active[i]));
					}
	
					// If the user provided a filter function, use it to modify the tooltip items
					if (opts.filter) {
						tooltipItems = tooltipItems.filter(function(a) {
							return opts.filter(a, data);
						});
					}
	
					// If the user provided a sorting function, use it to modify the tooltip items
					if (opts.itemSort) {
						tooltipItems = tooltipItems.sort(function(a, b) {
							return opts.itemSort(a, b, data);
						});
					}
	
					// Determine colors for boxes
					helpers.each(tooltipItems, function(tooltipItem) {
						labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
					});
	
					// Build the Text Lines
					model.title = me.getTitle(tooltipItems, data);
					model.beforeBody = me.getBeforeBody(tooltipItems, data);
					model.body = me.getBody(tooltipItems, data);
					model.afterBody = me.getAfterBody(tooltipItems, data);
					model.footer = me.getFooter(tooltipItems, data);
	
					// Initial positioning and colors
					model.x = Math.round(tooltipPosition.x);
					model.y = Math.round(tooltipPosition.y);
					model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
					model.labelColors = labelColors;
	
					// data points
					model.dataPoints = tooltipItems;
	
					// We need to determine alignment of the tooltip
					tooltipSize = getTooltipSize(this, model);
					alignment = determineAlignment(this, tooltipSize);
					// Final Size and Position
					backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
				} else {
					model.opacity = 0;
				}
	
				model.xAlign = alignment.xAlign;
				model.yAlign = alignment.yAlign;
				model.x = backgroundPoint.x;
				model.y = backgroundPoint.y;
				model.width = tooltipSize.width;
				model.height = tooltipSize.height;
	
				// Point where the caret on the tooltip points to
				model.caretX = tooltipPosition.x;
				model.caretY = tooltipPosition.y;
	
				me._model = model;
	
				if (changed && opts.custom) {
					opts.custom.call(me, model);
				}
	
				return me;
			},
			drawCaret: function(tooltipPoint, size, opacity) {
				var vm = this._view;
				var ctx = this._chart.ctx;
				var x1, x2, x3;
				var y1, y2, y3;
				var caretSize = vm.caretSize;
				var cornerRadius = vm.cornerRadius;
				var xAlign = vm.xAlign,
					yAlign = vm.yAlign;
				var ptX = tooltipPoint.x,
					ptY = tooltipPoint.y;
				var width = size.width,
					height = size.height;
	
				if (yAlign === 'center') {
					// Left or right side
					if (xAlign === 'left') {
						x1 = ptX;
						x2 = x1 - caretSize;
						x3 = x1;
					} else {
						x1 = ptX + width;
						x2 = x1 + caretSize;
						x3 = x1;
					}
	
					y2 = ptY + (height / 2);
					y1 = y2 - caretSize;
					y3 = y2 + caretSize;
				} else {
					if (xAlign === 'left') {
						x1 = ptX + cornerRadius;
						x2 = x1 + caretSize;
						x3 = x2 + caretSize;
					} else if (xAlign === 'right') {
						x1 = ptX + width - cornerRadius;
						x2 = x1 - caretSize;
						x3 = x2 - caretSize;
					} else {
						x2 = ptX + (width / 2);
						x1 = x2 - caretSize;
						x3 = x2 + caretSize;
					}
	
					if (yAlign === 'top') {
						y1 = ptY;
						y2 = y1 - caretSize;
						y3 = y1;
					} else {
						y1 = ptY + height;
						y2 = y1 + caretSize;
						y3 = y1;
					}
				}
	
				ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
				ctx.beginPath();
				ctx.moveTo(x1, y1);
				ctx.lineTo(x2, y2);
				ctx.lineTo(x3, y3);
				ctx.closePath();
				ctx.fill();
			},
			drawTitle: function(pt, vm, ctx, opacity) {
				var title = vm.title;
	
				if (title.length) {
					ctx.textAlign = vm._titleAlign;
					ctx.textBaseline = 'top';
	
					var titleFontSize = vm.titleFontSize,
						titleSpacing = vm.titleSpacing;
	
					ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
					ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
	
					var i, len;
					for (i = 0, len = title.length; i < len; ++i) {
						ctx.fillText(title[i], pt.x, pt.y);
						pt.y += titleFontSize + titleSpacing; // Line Height and spacing
	
						if (i + 1 === title.length) {
							pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
						}
					}
				}
			},
			drawBody: function(pt, vm, ctx, opacity) {
				var bodyFontSize = vm.bodyFontSize;
				var bodySpacing = vm.bodySpacing;
				var body = vm.body;
	
				ctx.textAlign = vm._bodyAlign;
				ctx.textBaseline = 'top';
	
				var textColor = mergeOpacity(vm.bodyFontColor, opacity);
				ctx.fillStyle = textColor;
				ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
	
				// Before Body
				var xLinePadding = 0;
				var fillLineOfText = function(line) {
					ctx.fillText(line, pt.x + xLinePadding, pt.y);
					pt.y += bodyFontSize + bodySpacing;
				};
	
				// Before body lines
				helpers.each(vm.beforeBody, fillLineOfText);
	
				var drawColorBoxes = vm.displayColors;
				xLinePadding = drawColorBoxes ? (bodyFontSize + 2) : 0;
	
				// Draw body lines now
				helpers.each(body, function(bodyItem, i) {
					helpers.each(bodyItem.before, fillLineOfText);
	
					helpers.each(bodyItem.lines, function(line) {
						// Draw Legend-like boxes if needed
						if (drawColorBoxes) {
							// Fill a white rect so that colours merge nicely if the opacity is < 1
							ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
							ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
	
							// Border
							ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
							ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
	
							// Inner square
							ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
							ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
	
							ctx.fillStyle = textColor;
						}
	
						fillLineOfText(line);
					});
	
					helpers.each(bodyItem.after, fillLineOfText);
				});
	
				// Reset back to 0 for after body
				xLinePadding = 0;
	
				// After body lines
				helpers.each(vm.afterBody, fillLineOfText);
				pt.y -= bodySpacing; // Remove last body spacing
			},
			drawFooter: function(pt, vm, ctx, opacity) {
				var footer = vm.footer;
	
				if (footer.length) {
					pt.y += vm.footerMarginTop;
	
					ctx.textAlign = vm._footerAlign;
					ctx.textBaseline = 'top';
	
					ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
					ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
	
					helpers.each(footer, function(line) {
						ctx.fillText(line, pt.x, pt.y);
						pt.y += vm.footerFontSize + vm.footerSpacing;
					});
				}
			},
			drawBackground: function(pt, vm, ctx, tooltipSize, opacity) {
				ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
				helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
				ctx.fill();
			},
			draw: function() {
				var ctx = this._chart.ctx;
				var vm = this._view;
	
				if (vm.opacity === 0) {
					return;
				}
	
				var tooltipSize = {
					width: vm.width,
					height: vm.height
				};
				var pt = {
					x: vm.x,
					y: vm.y
				};
	
				// IE11/Edge does not like very small opacities, so snap to 0
				var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
	
				if (this._options.enabled) {
					// Draw Background
					this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
	
					// Draw Caret
					this.drawCaret(pt, tooltipSize, opacity);
	
					// Draw Title, Body, and Footer
					pt.x += vm.xPadding;
					pt.y += vm.yPadding;
	
					// Titles
					this.drawTitle(pt, vm, ctx, opacity);
	
					// Body
					this.drawBody(pt, vm, ctx, opacity);
	
					// Footer
					this.drawFooter(pt, vm, ctx, opacity);
				}
			},
	
			/**
			 * Handle an event
			 * @private
			 * @param {IEvent} event - The event to handle
			 * @returns {Boolean} true if the tooltip changed
			 */
			handleEvent: function(e) {
				var me = this;
				var options = me._options;
				var changed = false;
	
				me._lastActive = me._lastActive || [];
	
				// Find Active Elements for tooltips
				if (e.type === 'mouseout') {
					me._active = [];
				} else {
					me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
				}
	
				// Remember Last Actives
				changed = !helpers.arrayEquals(me._active, me._lastActive);
				me._lastActive = me._active;
	
				if (options.enabled || options.custom) {
					me._eventPosition = {
						x: e.x,
						y: e.y
					};
	
					var model = me._model;
					me.update(true);
					me.pivot();
	
					// See if our tooltip position changed
					changed |= (model.x !== me._model.x) || (model.y !== me._model.y);
				}
	
				return changed;
			}
		});
	
		/**
		 * @namespace Chart.Tooltip.positioners
		 */
		Chart.Tooltip.positioners = {
			/**
			 * Average mode places the tooltip at the average position of the elements shown
			 * @function Chart.Tooltip.positioners.average
			 * @param elements {ChartElement[]} the elements being displayed in the tooltip
			 * @returns {Point} tooltip position
			 */
			average: function(elements) {
				if (!elements.length) {
					return false;
				}
	
				var i, len;
				var x = 0;
				var y = 0;
				var count = 0;
	
				for (i = 0, len = elements.length; i < len; ++i) {
					var el = elements[i];
					if (el && el.hasValue()) {
						var pos = el.tooltipPosition();
						x += pos.x;
						y += pos.y;
						++count;
					}
				}
	
				return {
					x: Math.round(x / count),
					y: Math.round(y / count)
				};
			},
	
			/**
			 * Gets the tooltip position nearest of the item nearest to the event position
			 * @function Chart.Tooltip.positioners.nearest
			 * @param elements {Chart.Element[]} the tooltip elements
			 * @param eventPosition {Point} the position of the event in canvas coordinates
			 * @returns {Point} the tooltip position
			 */
			nearest: function(elements, eventPosition) {
				var x = eventPosition.x;
				var y = eventPosition.y;
	
				var nearestElement;
				var minDistance = Number.POSITIVE_INFINITY;
				var i, len;
				for (i = 0, len = elements.length; i < len; ++i) {
					var el = elements[i];
					if (el && el.hasValue()) {
						var center = el.getCenterPoint();
						var d = helpers.distanceBetweenPoints(eventPosition, center);
	
						if (d < minDistance) {
							minDistance = d;
							nearestElement = el;
						}
					}
				}
	
				if (nearestElement) {
					var tp = nearestElement.tooltipPosition();
					x = tp.x;
					y = tp.y;
				}
	
				return {
					x: x,
					y: y
				};
			}
		};
	};


/***/ },
/* 258 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			globalOpts = Chart.defaults.global;
	
		globalOpts.elements.arc = {
			backgroundColor: globalOpts.defaultColor,
			borderColor: '#fff',
			borderWidth: 2
		};
	
		Chart.elements.Arc = Chart.Element.extend({
			inLabelRange: function(mouseX) {
				var vm = this._view;
	
				if (vm) {
					return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
				}
				return false;
			},
			inRange: function(chartX, chartY) {
				var vm = this._view;
	
				if (vm) {
					var pointRelativePosition = helpers.getAngleFromPoint(vm, {
							x: chartX,
							y: chartY
						}),
						angle = pointRelativePosition.angle,
						distance = pointRelativePosition.distance;
	
					// Sanitise angle range
					var startAngle = vm.startAngle;
					var endAngle = vm.endAngle;
					while (endAngle < startAngle) {
						endAngle += 2.0 * Math.PI;
					}
					while (angle > endAngle) {
						angle -= 2.0 * Math.PI;
					}
					while (angle < startAngle) {
						angle += 2.0 * Math.PI;
					}
	
					// Check if within the range of the open/close angle
					var betweenAngles = (angle >= startAngle && angle <= endAngle),
						withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);
	
					return (betweenAngles && withinRadius);
				}
				return false;
			},
			getCenterPoint: function() {
				var vm = this._view;
				var halfAngle = (vm.startAngle + vm.endAngle) / 2;
				var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
				return {
					x: vm.x + Math.cos(halfAngle) * halfRadius,
					y: vm.y + Math.sin(halfAngle) * halfRadius
				};
			},
			getArea: function() {
				var vm = this._view;
				return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
			},
			tooltipPosition: function() {
				var vm = this._view;
	
				var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2),
					rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
				return {
					x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
					y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
				};
			},
			draw: function() {
	
				var ctx = this._chart.ctx,
					vm = this._view,
					sA = vm.startAngle,
					eA = vm.endAngle;
	
				ctx.beginPath();
	
				ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
				ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
	
				ctx.closePath();
				ctx.strokeStyle = vm.borderColor;
				ctx.lineWidth = vm.borderWidth;
	
				ctx.fillStyle = vm.backgroundColor;
	
				ctx.fill();
				ctx.lineJoin = 'bevel';
	
				if (vm.borderWidth) {
					ctx.stroke();
				}
			}
		});
	};


/***/ },
/* 259 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var globalDefaults = Chart.defaults.global;
	
		Chart.defaults.global.elements.line = {
			tension: 0.4,
			backgroundColor: globalDefaults.defaultColor,
			borderWidth: 3,
			borderColor: globalDefaults.defaultColor,
			borderCapStyle: 'butt',
			borderDash: [],
			borderDashOffset: 0.0,
			borderJoinStyle: 'miter',
			capBezierPoints: true,
			fill: true, // do we fill in the area between the line and its base axis
		};
	
		Chart.elements.Line = Chart.Element.extend({
			draw: function() {
				var me = this;
				var vm = me._view;
				var spanGaps = vm.spanGaps;
				var fillPoint = vm.scaleZero;
				var loop = me._loop;
	
				// Handle different fill modes for cartesian lines
				if (!loop) {
					if (vm.fill === 'top') {
						fillPoint = vm.scaleTop;
					} else if (vm.fill === 'bottom') {
						fillPoint = vm.scaleBottom;
					}
				}
	
				var ctx = me._chart.ctx;
				ctx.save();
	
				// Helper function to draw a line to a point
				function lineToPoint(previousPoint, point) {
					var pointVM = point._view;
					if (point._view.steppedLine === true) {
						ctx.lineTo(pointVM.x, previousPoint._view.y);
						ctx.lineTo(pointVM.x, pointVM.y);
					} else if (point._view.tension === 0) {
						ctx.lineTo(pointVM.x, pointVM.y);
					} else {
						ctx.bezierCurveTo(
							previousPoint._view.controlPointNextX,
							previousPoint._view.controlPointNextY,
							pointVM.controlPointPreviousX,
							pointVM.controlPointPreviousY,
							pointVM.x,
							pointVM.y
						);
					}
				}
	
				var points = me._children.slice(); // clone array
				var lastDrawnIndex = -1;
	
				// If we are looping, adding the first point again
				if (loop && points.length) {
					points.push(points[0]);
				}
	
				var index, current, previous, currentVM;
	
				// Fill Line
				if (points.length && vm.fill) {
					ctx.beginPath();
	
					for (index = 0; index < points.length; ++index) {
						current = points[index];
						previous = helpers.previousItem(points, index);
						currentVM = current._view;
	
						// First point moves to it's starting position no matter what
						if (index === 0) {
							if (loop) {
								ctx.moveTo(fillPoint.x, fillPoint.y);
							} else {
								ctx.moveTo(currentVM.x, fillPoint);
							}
	
							if (!currentVM.skip) {
								lastDrawnIndex = index;
								ctx.lineTo(currentVM.x, currentVM.y);
							}
						} else {
							previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
	
							if (currentVM.skip) {
								// Only do this if this is the first point that is skipped
								if (!spanGaps && lastDrawnIndex === (index - 1)) {
									if (loop) {
										ctx.lineTo(fillPoint.x, fillPoint.y);
									} else {
										ctx.lineTo(previous._view.x, fillPoint);
									}
								}
							} else {
								if (lastDrawnIndex !== (index - 1)) {
									// There was a gap and this is the first point after the gap. If we've never drawn a point, this is a special case.
									// If the first data point is NaN, then there is no real gap to skip
									if (spanGaps && lastDrawnIndex !== -1) {
										// We are spanning the gap, so simple draw a line to this point
										lineToPoint(previous, current);
									} else if (loop) {
										ctx.lineTo(currentVM.x, currentVM.y);
									} else {
										ctx.lineTo(currentVM.x, fillPoint);
										ctx.lineTo(currentVM.x, currentVM.y);
									}
								} else {
									// Line to next point
									lineToPoint(previous, current);
								}
								lastDrawnIndex = index;
							}
						}
					}
	
					if (!loop && lastDrawnIndex !== -1) {
						ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
					}
	
					ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
					ctx.closePath();
					ctx.fill();
				}
	
				// Stroke Line Options
				var globalOptionLineElements = globalDefaults.elements.line;
				ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
	
				// IE 9 and 10 do not support line dash
				if (ctx.setLineDash) {
					ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
				}
	
				ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
				ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
				ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
				ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
	
				// Stroke Line
				ctx.beginPath();
				lastDrawnIndex = -1;
	
				for (index = 0; index < points.length; ++index) {
					current = points[index];
					previous = helpers.previousItem(points, index);
					currentVM = current._view;
	
					// First point moves to it's starting position no matter what
					if (index === 0) {
						if (!currentVM.skip) {
							ctx.moveTo(currentVM.x, currentVM.y);
							lastDrawnIndex = index;
						}
					} else {
						previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
	
						if (!currentVM.skip) {
							if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
								// There was a gap and this is the first point after the gap
								ctx.moveTo(currentVM.x, currentVM.y);
							} else {
								// Line to next point
								lineToPoint(previous, current);
							}
							lastDrawnIndex = index;
						}
					}
				}
	
				ctx.stroke();
				ctx.restore();
			}
		});
	};


/***/ },
/* 260 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			globalOpts = Chart.defaults.global,
			defaultColor = globalOpts.defaultColor;
	
		globalOpts.elements.point = {
			radius: 3,
			pointStyle: 'circle',
			backgroundColor: defaultColor,
			borderWidth: 1,
			borderColor: defaultColor,
			// Hover
			hitRadius: 1,
			hoverRadius: 4,
			hoverBorderWidth: 1
		};
	
		function xRange(mouseX) {
			var vm = this._view;
			return vm ? (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
		}
	
		function yRange(mouseY) {
			var vm = this._view;
			return vm ? (Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
		}
	
		Chart.elements.Point = Chart.Element.extend({
			inRange: function(mouseX, mouseY) {
				var vm = this._view;
				return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
			},
	
			inLabelRange: xRange,
			inXRange: xRange,
			inYRange: yRange,
	
			getCenterPoint: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y
				};
			},
			getArea: function() {
				return Math.PI * Math.pow(this._view.radius, 2);
			},
			tooltipPosition: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y,
					padding: vm.radius + vm.borderWidth
				};
			},
			draw: function(chartArea) {
				var vm = this._view;
				var model = this._model;
				var ctx = this._chart.ctx;
				var pointStyle = vm.pointStyle;
				var radius = vm.radius;
				var x = vm.x;
				var y = vm.y;
				var color = Chart.helpers.color;
				var errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)
				var ratio = 0;
	
				if (vm.skip) {
					return;
				}
	
				ctx.strokeStyle = vm.borderColor || defaultColor;
				ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
				ctx.fillStyle = vm.backgroundColor || defaultColor;
	
				// Cliping for Points.
				// going out from inner charArea?
				if ((chartArea !== undefined) && ((model.x < chartArea.left) || (chartArea.right*errMargin < model.x) || (model.y < chartArea.top) || (chartArea.bottom*errMargin < model.y))) {
					// Point fade out
					if (model.x < chartArea.left) {
						ratio = (x - model.x) / (chartArea.left - model.x);
					} else if (chartArea.right*errMargin < model.x) {
						ratio = (model.x - x) / (model.x - chartArea.right);
					} else if (model.y < chartArea.top) {
						ratio = (y - model.y) / (chartArea.top - model.y);
					} else if (chartArea.bottom*errMargin < model.y) {
						ratio = (model.y - y) / (model.y - chartArea.bottom);
					}
					ratio = Math.round(ratio*100) / 100;
					ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
					ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
				}
	
				Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);
			}
		});
	};


/***/ },
/* 261 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var globalOpts = Chart.defaults.global;
	
		globalOpts.elements.rectangle = {
			backgroundColor: globalOpts.defaultColor,
			borderWidth: 0,
			borderColor: globalOpts.defaultColor,
			borderSkipped: 'bottom'
		};
	
		function isVertical(bar) {
			return bar._view.width !== undefined;
		}
	
		/**
		 * Helper function to get the bounds of the bar regardless of the orientation
		 * @private
		 * @param bar {Chart.Element.Rectangle} the bar
		 * @return {Bounds} bounds of the bar
		 */
		function getBarBounds(bar) {
			var vm = bar._view;
			var x1, x2, y1, y2;
	
			if (isVertical(bar)) {
				// vertical
				var halfWidth = vm.width / 2;
				x1 = vm.x - halfWidth;
				x2 = vm.x + halfWidth;
				y1 = Math.min(vm.y, vm.base);
				y2 = Math.max(vm.y, vm.base);
			} else {
				// horizontal bar
				var halfHeight = vm.height / 2;
				x1 = Math.min(vm.x, vm.base);
				x2 = Math.max(vm.x, vm.base);
				y1 = vm.y - halfHeight;
				y2 = vm.y + halfHeight;
			}
	
			return {
				left: x1,
				top: y1,
				right: x2,
				bottom: y2
			};
		}
	
		Chart.elements.Rectangle = Chart.Element.extend({
			draw: function() {
				var ctx = this._chart.ctx;
				var vm = this._view;
				var left, right, top, bottom, signX, signY, borderSkipped;
				var borderWidth = vm.borderWidth;
	
				if (!vm.horizontal) {
					// bar
					left = vm.x - vm.width / 2;
					right = vm.x + vm.width / 2;
					top = vm.y;
					bottom = vm.base;
					signX = 1;
					signY = bottom > top? 1: -1;
					borderSkipped = vm.borderSkipped || 'bottom';
				} else {
					// horizontal bar
					left = vm.base;
					right = vm.x;
					top = vm.y - vm.height / 2;
					bottom = vm.y + vm.height / 2;
					signX = right > left? 1: -1;
					signY = 1;
					borderSkipped = vm.borderSkipped || 'left';
				}
	
				// Canvas doesn't allow us to stroke inside the width so we can
				// adjust the sizes to fit if we're setting a stroke on the line
				if (borderWidth) {
					// borderWidth shold be less than bar width and bar height.
					var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
					borderWidth = borderWidth > barSize? barSize: borderWidth;
					var halfStroke = borderWidth / 2;
					// Adjust borderWidth when bar top position is near vm.base(zero).
					var borderLeft = left + (borderSkipped !== 'left'? halfStroke * signX: 0);
					var borderRight = right + (borderSkipped !== 'right'? -halfStroke * signX: 0);
					var borderTop = top + (borderSkipped !== 'top'? halfStroke * signY: 0);
					var borderBottom = bottom + (borderSkipped !== 'bottom'? -halfStroke * signY: 0);
					// not become a vertical line?
					if (borderLeft !== borderRight) {
						top = borderTop;
						bottom = borderBottom;
					}
					// not become a horizontal line?
					if (borderTop !== borderBottom) {
						left = borderLeft;
						right = borderRight;
					}
				}
	
				ctx.beginPath();
				ctx.fillStyle = vm.backgroundColor;
				ctx.strokeStyle = vm.borderColor;
				ctx.lineWidth = borderWidth;
	
				// Corner points, from bottom-left to bottom-right clockwise
				// | 1 2 |
				// | 0 3 |
				var corners = [
					[left, bottom],
					[left, top],
					[right, top],
					[right, bottom]
				];
	
				// Find first (starting) corner with fallback to 'bottom'
				var borders = ['bottom', 'left', 'top', 'right'];
				var startCorner = borders.indexOf(borderSkipped, 0);
				if (startCorner === -1) {
					startCorner = 0;
				}
	
				function cornerAt(index) {
					return corners[(startCorner + index) % 4];
				}
	
				// Draw rectangle from 'startCorner'
				var corner = cornerAt(0);
				ctx.moveTo(corner[0], corner[1]);
	
				for (var i = 1; i < 4; i++) {
					corner = cornerAt(i);
					ctx.lineTo(corner[0], corner[1]);
				}
	
				ctx.fill();
				if (borderWidth) {
					ctx.stroke();
				}
			},
			height: function() {
				var vm = this._view;
				return vm.base - vm.y;
			},
			inRange: function(mouseX, mouseY) {
				var inRange = false;
	
				if (this._view) {
					var bounds = getBarBounds(this);
					inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
				}
	
				return inRange;
			},
			inLabelRange: function(mouseX, mouseY) {
				var me = this;
				if (!me._view) {
					return false;
				}
	
				var inRange = false;
				var bounds = getBarBounds(me);
	
				if (isVertical(me)) {
					inRange = mouseX >= bounds.left && mouseX <= bounds.right;
				} else {
					inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
				}
	
				return inRange;
			},
			inXRange: function(mouseX) {
				var bounds = getBarBounds(this);
				return mouseX >= bounds.left && mouseX <= bounds.right;
			},
			inYRange: function(mouseY) {
				var bounds = getBarBounds(this);
				return mouseY >= bounds.top && mouseY <= bounds.bottom;
			},
			getCenterPoint: function() {
				var vm = this._view;
				var x, y;
				if (isVertical(this)) {
					x = vm.x;
					y = (vm.y + vm.base) / 2;
				} else {
					x = (vm.x + vm.base) / 2;
					y = vm.y;
				}
	
				return {x: x, y: y};
			},
			getArea: function() {
				var vm = this._view;
				return vm.width * Math.abs(vm.y - vm.base);
			},
			tooltipPosition: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y
				};
			}
		});
	
	};


/***/ },
/* 262 */
/***/ function(module, exports) {

	'use strict';
	
	// Chart.Platform implementation for targeting a web browser
	module.exports = function(Chart) {
		var helpers = Chart.helpers;
	
		// DOM event types -> Chart.js event types.
		// Note: only events with different types are mapped.
		// https://developer.mozilla.org/en-US/docs/Web/Events
		var eventTypeMap = {
			// Touch events
			touchstart: 'mousedown',
			touchmove: 'mousemove',
			touchend: 'mouseup',
	
			// Pointer events
			pointerenter: 'mouseenter',
			pointerdown: 'mousedown',
			pointermove: 'mousemove',
			pointerup: 'mouseup',
			pointerleave: 'mouseout',
			pointerout: 'mouseout'
		};
	
		/**
		 * The "used" size is the final value of a dimension property after all calculations have
		 * been performed. This method uses the computed style of `element` but returns undefined
		 * if the computed style is not expressed in pixels. That can happen in some cases where
		 * `element` has a size relative to its parent and this last one is not yet displayed,
		 * for example because of `display: none` on a parent node.
		 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
		 * @returns {Number} Size in pixels or undefined if unknown.
		 */
		function readUsedSize(element, property) {
			var value = helpers.getStyle(element, property);
			var matches = value && value.match(/(\d+)px/);
			return matches? Number(matches[1]) : undefined;
		}
	
		/**
		 * Initializes the canvas style and render size without modifying the canvas display size,
		 * since responsiveness is handled by the controller.resize() method. The config is used
		 * to determine the aspect ratio to apply in case no explicit height has been specified.
		 */
		function initCanvas(canvas, config) {
			var style = canvas.style;
	
			// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
			// returns null or '' if no explicit value has been set to the canvas attribute.
			var renderHeight = canvas.getAttribute('height');
			var renderWidth = canvas.getAttribute('width');
	
			// Chart.js modifies some canvas values that we want to restore on destroy
			canvas._chartjs = {
				initial: {
					height: renderHeight,
					width: renderWidth,
					style: {
						display: style.display,
						height: style.height,
						width: style.width
					}
				}
			};
	
			// Force canvas to display as block to avoid extra space caused by inline
			// elements, which would interfere with the responsive resize process.
			// https://github.com/chartjs/Chart.js/issues/2538
			style.display = style.display || 'block';
	
			if (renderWidth === null || renderWidth === '') {
				var displayWidth = readUsedSize(canvas, 'width');
				if (displayWidth !== undefined) {
					canvas.width = displayWidth;
				}
			}
	
			if (renderHeight === null || renderHeight === '') {
				if (canvas.style.height === '') {
					// If no explicit render height and style height, let's apply the aspect ratio,
					// which one can be specified by the user but also by charts as default option
					// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
					canvas.height = canvas.width / (config.options.aspectRatio || 2);
				} else {
					var displayHeight = readUsedSize(canvas, 'height');
					if (displayWidth !== undefined) {
						canvas.height = displayHeight;
					}
				}
			}
	
			return canvas;
		}
	
		function createEvent(type, chart, x, y, native) {
			return {
				type: type,
				chart: chart,
				native: native || null,
				x: x !== undefined? x : null,
				y: y !== undefined? y : null,
			};
		}
	
		function fromNativeEvent(event, chart) {
			var type = eventTypeMap[event.type] || event.type;
			var pos = helpers.getRelativePosition(event, chart);
			return createEvent(type, chart, pos.x, pos.y, event);
		}
	
		function createResizer(handler) {
			var iframe = document.createElement('iframe');
			iframe.className = 'chartjs-hidden-iframe';
			iframe.style.cssText =
				'display:block;'+
				'overflow:hidden;'+
				'border:0;'+
				'margin:0;'+
				'top:0;'+
				'left:0;'+
				'bottom:0;'+
				'right:0;'+
				'height:100%;'+
				'width:100%;'+
				'position:absolute;'+
				'pointer-events:none;'+
				'z-index:-1;';
	
			// Prevent the iframe to gain focus on tab.
			// https://github.com/chartjs/Chart.js/issues/3090
			iframe.tabIndex = -1;
	
			// If the iframe is re-attached to the DOM, the resize listener is removed because the
			// content is reloaded, so make sure to install the handler after the iframe is loaded.
			// https://github.com/chartjs/Chart.js/issues/3521
			helpers.addEvent(iframe, 'load', function() {
				helpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);
	
				// The iframe size might have changed while loading, which can also
				// happen if the size has been changed while detached from the DOM.
				handler();
			});
	
			return iframe;
		}
	
		function addResizeListener(node, listener, chart) {
			var stub = node._chartjs = {
				ticking: false
			};
	
			// Throttle the callback notification until the next animation frame.
			var notify = function() {
				if (!stub.ticking) {
					stub.ticking = true;
					helpers.requestAnimFrame.call(window, function() {
						if (stub.resizer) {
							stub.ticking = false;
							return listener(createEvent('resize', chart));
						}
					});
				}
			};
	
			// Let's keep track of this added iframe and thus avoid DOM query when removing it.
			stub.resizer = createResizer(notify);
	
			node.insertBefore(stub.resizer, node.firstChild);
		}
	
		function removeResizeListener(node) {
			if (!node || !node._chartjs) {
				return;
			}
	
			var resizer = node._chartjs.resizer;
			if (resizer) {
				resizer.parentNode.removeChild(resizer);
				node._chartjs.resizer = null;
			}
	
			delete node._chartjs;
		}
	
		return {
			acquireContext: function(item, config) {
				if (typeof item === 'string') {
					item = document.getElementById(item);
				} else if (item.length) {
					// Support for array based queries (such as jQuery)
					item = item[0];
				}
	
				if (item && item.canvas) {
					// Support for any object associated to a canvas (including a context2d)
					item = item.canvas;
				}
	
				if (item instanceof HTMLCanvasElement) {
					// To prevent canvas fingerprinting, some add-ons undefine the getContext
					// method, for example: https://github.com/kkapsner/CanvasBlocker
					// https://github.com/chartjs/Chart.js/issues/2807
					var context = item.getContext && item.getContext('2d');
					if (context instanceof CanvasRenderingContext2D) {
						initCanvas(item, config);
						return context;
					}
				}
	
				return null;
			},
	
			releaseContext: function(context) {
				var canvas = context.canvas;
				if (!canvas._chartjs) {
					return;
				}
	
				var initial = canvas._chartjs.initial;
				['height', 'width'].forEach(function(prop) {
					var value = initial[prop];
					if (value === undefined || value === null) {
						canvas.removeAttribute(prop);
					} else {
						canvas.setAttribute(prop, value);
					}
				});
	
				helpers.each(initial.style || {}, function(value, key) {
					canvas.style[key] = value;
				});
	
				// The canvas render size might have been changed (and thus the state stack discarded),
				// we can't use save() and restore() to restore the initial state. So make sure that at
				// least the canvas context is reset to the default state by setting the canvas width.
				// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
				canvas.width = canvas.width;
	
				delete canvas._chartjs;
			},
	
			addEventListener: function(chart, type, listener) {
				var canvas = chart.chart.canvas;
				if (type === 'resize') {
					// Note: the resize event is not supported on all browsers.
					addResizeListener(canvas.parentNode, listener, chart.chart);
					return;
				}
	
				var stub = listener._chartjs || (listener._chartjs = {});
				var proxies = stub.proxies || (stub.proxies = {});
				var proxy = proxies[chart.id + '_' + type] = function(event) {
					listener(fromNativeEvent(event, chart.chart));
				};
	
				helpers.addEvent(canvas, type, proxy);
			},
	
			removeEventListener: function(chart, type, listener) {
				var canvas = chart.chart.canvas;
				if (type === 'resize') {
					// Note: the resize event is not supported on all browsers.
					removeResizeListener(canvas.parentNode, listener);
					return;
				}
	
				var stub = listener._chartjs || {};
				var proxies = stub.proxies || {};
				var proxy = proxies[chart.id + '_' + type];
				if (!proxy) {
					return;
				}
	
				helpers.removeEvent(canvas, type, proxy);
			}
		};
	};


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// By default, select the browser (DOM) platform.
	// @TODO Make possible to select another platform at build time.
	var implementation = __webpack_require__(262);
	
	module.exports = function(Chart) {
		/**
		 * @namespace Chart.platform
		 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
		 * @since 2.4.0
		 */
		Chart.platform = {
			/**
			 * Called at chart construction time, returns a context2d instance implementing
			 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
			 * @param {*} item - The native item from which to acquire context (platform specific)
			 * @param {Object} options - The chart options
			 * @returns {CanvasRenderingContext2D} context2d instance
			 */
			acquireContext: function() {},
	
			/**
			 * Called at chart destruction time, releases any resources associated to the context
			 * previously returned by the acquireContext() method.
			 * @param {CanvasRenderingContext2D} context - The context2d instance
			 * @returns {Boolean} true if the method succeeded, else false
			 */
			releaseContext: function() {},
	
			/**
			 * Registers the specified listener on the given chart.
			 * @param {Chart} chart - Chart from which to listen for event
			 * @param {String} type - The ({@link IEvent}) type to listen for
			 * @param {Function} listener - Receives a notification (an object that implements
			 * the {@link IEvent} interface) when an event of the specified type occurs.
			 */
			addEventListener: function() {},
	
			/**
			 * Removes the specified listener previously registered with addEventListener.
			 * @param {Chart} chart -Chart from which to remove the listener
			 * @param {String} type - The ({@link IEvent}) type to remove
			 * @param {Function} listener - The listener function to remove from the event target.
			 */
			removeEventListener: function() {}
		};
	
		/**
		 * @interface IPlatform
		 * Allows abstracting platform dependencies away from the chart
		 * @borrows Chart.platform.acquireContext as acquireContext
		 * @borrows Chart.platform.releaseContext as releaseContext
		 * @borrows Chart.platform.addEventListener as addEventListener
		 * @borrows Chart.platform.removeEventListener as removeEventListener
		 */
	
		/**
		 * @interface IEvent
		 * @prop {String} type - The event type name, possible values are:
		 * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',
		 * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'
		 * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')
		 * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)
		 * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)
		 */
	
		Chart.helpers.extend(Chart.platform, implementation(Chart));
	};


/***/ },
/* 264 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		// Default config for a category scale
		var defaultConfig = {
			position: 'bottom'
		};
	
		var DatasetScale = Chart.Scale.extend({
			/**
			* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
			* else fall back to data.labels
			* @private
			*/
			getLabels: function() {
				var data = this.chart.data;
				return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
			},
			// Implement this so that
			determineDataLimits: function() {
				var me = this;
				var labels = me.getLabels();
				me.minIndex = 0;
				me.maxIndex = labels.length - 1;
				var findIndex;
	
				if (me.options.ticks.min !== undefined) {
					// user specified min value
					findIndex = helpers.indexOf(labels, me.options.ticks.min);
					me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
				}
	
				if (me.options.ticks.max !== undefined) {
					// user specified max value
					findIndex = helpers.indexOf(labels, me.options.ticks.max);
					me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
				}
	
				me.min = labels[me.minIndex];
				me.max = labels[me.maxIndex];
			},
	
			buildTicks: function() {
				var me = this;
				var labels = me.getLabels();
				// If we are viewing some subset of labels, slice the original array
				me.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
			},
	
			getLabelForIndex: function(index, datasetIndex) {
				var me = this;
				var data = me.chart.data;
				var isHorizontal = me.isHorizontal();
	
				if (data.yLabels && !isHorizontal) {
					return me.getRightValue(data.datasets[datasetIndex].data[index]);
				}
				return me.ticks[index - me.minIndex];
			},
	
			// Used to get data value locations.  Value can either be an index or a numerical value
			getPixelForValue: function(value, index, datasetIndex, includeOffset) {
				var me = this;
				// 1 is added because we need the length but we have the indexes
				var offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
	
				if (value !== undefined && isNaN(index)) {
					var labels = me.getLabels();
					var idx = labels.indexOf(value);
					index = idx !== -1 ? idx : index;
				}
	
				if (me.isHorizontal()) {
					var valueWidth = me.width / offsetAmt;
					var widthOffset = (valueWidth * (index - me.minIndex));
	
					if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
						widthOffset += (valueWidth / 2);
					}
	
					return me.left + Math.round(widthOffset);
				}
				var valueHeight = me.height / offsetAmt;
				var heightOffset = (valueHeight * (index - me.minIndex));
	
				if (me.options.gridLines.offsetGridLines && includeOffset) {
					heightOffset += (valueHeight / 2);
				}
	
				return me.top + Math.round(heightOffset);
			},
			getPixelForTick: function(index, includeOffset) {
				return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var value;
				var offsetAmt = Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
				var horz = me.isHorizontal();
				var valueDimension = (horz ? me.width : me.height) / offsetAmt;
	
				pixel -= horz ? me.left : me.top;
	
				if (me.options.gridLines.offsetGridLines) {
					pixel -= (valueDimension / 2);
				}
	
				if (pixel <= 0) {
					value = 0;
				} else {
					value = Math.round(pixel / valueDimension);
				}
	
				return value;
			},
			getBasePixel: function() {
				return this.bottom;
			}
		});
	
		Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);
	
	};


/***/ },
/* 265 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		var defaultConfig = {
			position: 'left',
			ticks: {
				callback: Chart.Ticks.formatters.linear
			}
		};
	
		var LinearScale = Chart.LinearScaleBase.extend({
			determineDataLimits: function() {
				var me = this;
				var opts = me.options;
				var chart = me.chart;
				var data = chart.data;
				var datasets = data.datasets;
				var isHorizontal = me.isHorizontal();
	
				function IDMatches(meta) {
					return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
				}
	
				// First Calculate the range
				me.min = null;
				me.max = null;
	
				var hasStacks = opts.stacked;
				if (hasStacks === undefined) {
					helpers.each(datasets, function(dataset, datasetIndex) {
						if (hasStacks) {
							return;
						}
	
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
							meta.stack !== undefined) {
							hasStacks = true;
						}
					});
				}
	
				if (opts.stacked || hasStacks) {
					var valuesPerStack = {};
	
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						var key = [
							meta.type,
							// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
							((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
							meta.stack
						].join('.');
	
						if (valuesPerStack[key] === undefined) {
							valuesPerStack[key] = {
								positiveValues: [],
								negativeValues: []
							};
						}
	
						// Store these per type
						var positiveValues = valuesPerStack[key].positiveValues;
						var negativeValues = valuesPerStack[key].negativeValues;
	
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								positiveValues[index] = positiveValues[index] || 0;
								negativeValues[index] = negativeValues[index] || 0;
	
								if (opts.relativePoints) {
									positiveValues[index] = 100;
								} else if (value < 0) {
									negativeValues[index] += value;
								} else {
									positiveValues[index] += value;
								}
							});
						}
					});
	
					helpers.each(valuesPerStack, function(valuesForType) {
						var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
						var minVal = helpers.min(values);
						var maxVal = helpers.max(values);
						me.min = me.min === null ? minVal : Math.min(me.min, minVal);
						me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
					});
	
				} else {
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								if (me.min === null) {
									me.min = value;
								} else if (value < me.min) {
									me.min = value;
								}
	
								if (me.max === null) {
									me.max = value;
								} else if (value > me.max) {
									me.max = value;
								}
							});
						}
					});
				}
	
				// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
				this.handleTickRangeOptions();
			},
			getTickLimit: function() {
				var maxTicks;
				var me = this;
				var tickOpts = me.options.ticks;
	
				if (me.isHorizontal()) {
					maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
				} else {
					// The factor of 2 used to scale the font size has been experimentally determined.
					var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
					maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
				}
	
				return maxTicks;
			},
			// Called after the ticks are built. We need
			handleDirectionalChanges: function() {
				if (!this.isHorizontal()) {
					// We are in a vertical orientation. The top value is the highest. So reverse the array
					this.ticks.reverse();
				}
			},
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			// Utils
			getPixelForValue: function(value) {
				// This must be called after fit has been run so that
				// this.left, this.top, this.right, and this.bottom have been defined
				var me = this;
				var start = me.start;
	
				var rightValue = +me.getRightValue(value);
				var pixel;
				var range = me.end - start;
	
				if (me.isHorizontal()) {
					pixel = me.left + (me.width / range * (rightValue - start));
					return Math.round(pixel);
				}
	
				pixel = me.bottom - (me.height / range * (rightValue - start));
				return Math.round(pixel);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var isHorizontal = me.isHorizontal();
				var innerDimension = isHorizontal ? me.width : me.height;
				var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
				return me.start + ((me.end - me.start) * offset);
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.ticksAsNumbers[index]);
			}
		});
		Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);
	
	};


/***/ },
/* 266 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			noop = helpers.noop;
	
		Chart.LinearScaleBase = Chart.Scale.extend({
			handleTickRangeOptions: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
				// do nothing since that would make the chart weird. If the user really wants a weird chart
				// axis, they can manually override it
				if (tickOpts.beginAtZero) {
					var minSign = helpers.sign(me.min);
					var maxSign = helpers.sign(me.max);
	
					if (minSign < 0 && maxSign < 0) {
						// move the top up to 0
						me.max = 0;
					} else if (minSign > 0 && maxSign > 0) {
						// move the bottom down to 0
						me.min = 0;
					}
				}
	
				if (tickOpts.min !== undefined) {
					me.min = tickOpts.min;
				} else if (tickOpts.suggestedMin !== undefined) {
					me.min = Math.min(me.min, tickOpts.suggestedMin);
				}
	
				if (tickOpts.max !== undefined) {
					me.max = tickOpts.max;
				} else if (tickOpts.suggestedMax !== undefined) {
					me.max = Math.max(me.max, tickOpts.suggestedMax);
				}
	
				if (me.min === me.max) {
					me.max++;
	
					if (!tickOpts.beginAtZero) {
						me.min--;
					}
				}
			},
			getTickLimit: noop,
			handleDirectionalChanges: noop,
	
			buildTicks: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				// Figure out what the max number of ticks we can support it is based on the size of
				// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
				// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
				// the graph. Make sure we always have at least 2 ticks
				var maxTicks = me.getTickLimit();
				maxTicks = Math.max(2, maxTicks);
	
				var numericGeneratorOptions = {
					maxTicks: maxTicks,
					min: tickOpts.min,
					max: tickOpts.max,
					stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
				};
				var ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);
	
				me.handleDirectionalChanges();
	
				// At this point, we need to update our max and min given the tick values since we have expanded the
				// range of the scale
				me.max = helpers.max(ticks);
				me.min = helpers.min(ticks);
	
				if (tickOpts.reverse) {
					ticks.reverse();
	
					me.start = me.max;
					me.end = me.min;
				} else {
					me.start = me.min;
					me.end = me.max;
				}
			},
			convertTicksToLabels: function() {
				var me = this;
				me.ticksAsNumbers = me.ticks.slice();
				me.zeroLineIndex = me.ticks.indexOf(0);
	
				Chart.Scale.prototype.convertTicksToLabels.call(me);
			}
		});
	};


/***/ },
/* 267 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		var defaultConfig = {
			position: 'left',
	
			// label settings
			ticks: {
				callback: Chart.Ticks.formatters.logarithmic
			}
		};
	
		var LogarithmicScale = Chart.Scale.extend({
			determineDataLimits: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
				var chart = me.chart;
				var data = chart.data;
				var datasets = data.datasets;
				var getValueOrDefault = helpers.getValueOrDefault;
				var isHorizontal = me.isHorizontal();
				function IDMatches(meta) {
					return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
				}
	
				// Calculate Range
				me.min = null;
				me.max = null;
				me.minNotZero = null;
	
				var hasStacks = opts.stacked;
				if (hasStacks === undefined) {
					helpers.each(datasets, function(dataset, datasetIndex) {
						if (hasStacks) {
							return;
						}
	
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
							meta.stack !== undefined) {
							hasStacks = true;
						}
					});
				}
	
				if (opts.stacked || hasStacks) {
					var valuesPerStack = {};
	
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						var key = [
							meta.type,
							// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
							((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
							meta.stack
						].join('.');
	
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							if (valuesPerStack[key] === undefined) {
								valuesPerStack[key] = [];
							}
	
							helpers.each(dataset.data, function(rawValue, index) {
								var values = valuesPerStack[key];
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								values[index] = values[index] || 0;
	
								if (opts.relativePoints) {
									values[index] = 100;
								} else {
									// Don't need to split positive and negative since the log scale can't handle a 0 crossing
									values[index] += value;
								}
							});
						}
					});
	
					helpers.each(valuesPerStack, function(valuesForType) {
						var minVal = helpers.min(valuesForType);
						var maxVal = helpers.max(valuesForType);
						me.min = me.min === null ? minVal : Math.min(me.min, minVal);
						me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
					});
	
				} else {
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								if (me.min === null) {
									me.min = value;
								} else if (value < me.min) {
									me.min = value;
								}
	
								if (me.max === null) {
									me.max = value;
								} else if (value > me.max) {
									me.max = value;
								}
	
								if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
									me.minNotZero = value;
								}
							});
						}
					});
				}
	
				me.min = getValueOrDefault(tickOpts.min, me.min);
				me.max = getValueOrDefault(tickOpts.max, me.max);
	
				if (me.min === me.max) {
					if (me.min !== 0 && me.min !== null) {
						me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
						me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
					} else {
						me.min = 1;
						me.max = 10;
					}
				}
			},
			buildTicks: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				var generationOptions = {
					min: tickOpts.min,
					max: tickOpts.max
				};
				var ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);
	
				if (!me.isHorizontal()) {
					// We are in a vertical orientation. The top value is the highest. So reverse the array
					ticks.reverse();
				}
	
				// At this point, we need to update our max and min given the tick values since we have expanded the
				// range of the scale
				me.max = helpers.max(ticks);
				me.min = helpers.min(ticks);
	
				if (tickOpts.reverse) {
					ticks.reverse();
	
					me.start = me.max;
					me.end = me.min;
				} else {
					me.start = me.min;
					me.end = me.max;
				}
			},
			convertTicksToLabels: function() {
				this.tickValues = this.ticks.slice();
	
				Chart.Scale.prototype.convertTicksToLabels.call(this);
			},
			// Get the correct tooltip label
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.tickValues[index]);
			},
			getPixelForValue: function(value) {
				var me = this;
				var innerDimension;
				var pixel;
	
				var start = me.start;
				var newVal = +me.getRightValue(value);
				var range;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				if (me.isHorizontal()) {
					range = helpers.log10(me.end) - helpers.log10(start); // todo: if start === 0
					if (newVal === 0) {
						pixel = me.left;
					} else {
						innerDimension = me.width;
						pixel = me.left + (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
					}
				} else {
					// Bottom - top since pixels increase downward on a screen
					innerDimension = me.height;
					if (start === 0 && !tickOpts.reverse) {
						range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
						if (newVal === start) {
							pixel = me.bottom;
						} else if (newVal === me.minNotZero) {
							pixel = me.bottom - innerDimension * 0.02;
						} else {
							pixel = me.bottom - innerDimension * 0.02 - (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));
						}
					} else if (me.end === 0 && tickOpts.reverse) {
						range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
						if (newVal === me.end) {
							pixel = me.top;
						} else if (newVal === me.minNotZero) {
							pixel = me.top + innerDimension * 0.02;
						} else {
							pixel = me.top + innerDimension * 0.02 + (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));
						}
					} else {
						range = helpers.log10(me.end) - helpers.log10(start);
						innerDimension = me.height;
						pixel = me.bottom - (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
					}
				}
				return pixel;
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var range = helpers.log10(me.end) - helpers.log10(me.start);
				var value, innerDimension;
	
				if (me.isHorizontal()) {
					innerDimension = me.width;
					value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
				} else {  // todo: if start === 0
					innerDimension = me.height;
					value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
				}
				return value;
			}
		});
		Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
	
	};


/***/ },
/* 268 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var globalDefaults = Chart.defaults.global;
	
		var defaultConfig = {
			display: true,
	
			// Boolean - Whether to animate scaling the chart from the centre
			animate: true,
			lineArc: false,
			position: 'chartArea',
	
			angleLines: {
				display: true,
				color: 'rgba(0, 0, 0, 0.1)',
				lineWidth: 1
			},
	
			// label settings
			ticks: {
				// Boolean - Show a backdrop to the scale label
				showLabelBackdrop: true,
	
				// String - The colour of the label backdrop
				backdropColor: 'rgba(255,255,255,0.75)',
	
				// Number - The backdrop padding above & below the label in pixels
				backdropPaddingY: 2,
	
				// Number - The backdrop padding to the side of the label in pixels
				backdropPaddingX: 2,
	
				callback: Chart.Ticks.formatters.linear
			},
	
			pointLabels: {
				// Number - Point label font size in pixels
				fontSize: 10,
	
				// Function - Used to convert point labels
				callback: function(label) {
					return label;
				}
			}
		};
	
		function getValueCount(scale) {
			return !scale.options.lineArc ? scale.chart.data.labels.length : 0;
		}
	
		function getPointLabelFontOptions(scale) {
			var pointLabelOptions = scale.options.pointLabels;
			var fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
			var fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
			var fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
			var font = helpers.fontString(fontSize, fontStyle, fontFamily);
	
			return {
				size: fontSize,
				style: fontStyle,
				family: fontFamily,
				font: font
			};
		}
	
		function measureLabelSize(ctx, fontSize, label) {
			if (helpers.isArray(label)) {
				return {
					w: helpers.longestText(ctx, ctx.font, label),
					h: (label.length * fontSize) + ((label.length - 1) * 1.5 * fontSize)
				};
			}
	
			return {
				w: ctx.measureText(label).width,
				h: fontSize
			};
		}
	
		function determineLimits(angle, pos, size, min, max) {
			if (angle === min || angle === max) {
				return {
					start: pos - (size / 2),
					end: pos + (size / 2)
				};
			} else if (angle < min || angle > max) {
				return {
					start: pos - size - 5,
					end: pos
				};
			}
	
			return {
				start: pos,
				end: pos + size + 5
			};
		}
	
		/**
		 * Helper function to fit a radial linear scale with point labels
		 */
		function fitWithPointLabels(scale) {
			/*
			 * Right, this is really confusing and there is a lot of maths going on here
			 * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
			 *
			 * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
			 *
			 * Solution:
			 *
			 * We assume the radius of the polygon is half the size of the canvas at first
			 * at each index we check if the text overlaps.
			 *
			 * Where it does, we store that angle and that index.
			 *
			 * After finding the largest index and angle we calculate how much we need to remove
			 * from the shape radius to move the point inwards by that x.
			 *
			 * We average the left and right distances to get the maximum shape radius that can fit in the box
			 * along with labels.
			 *
			 * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
			 * on each side, removing that from the size, halving it and adding the left x protrusion width.
			 *
			 * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
			 * and position it in the most space efficient manner
			 *
			 * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
			 */
	
			var plFont = getPointLabelFontOptions(scale);
	
			// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
			// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
			var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
			var furthestLimits = {
				l: scale.width,
				r: 0,
				t: scale.height,
				b: 0
			};
			var furthestAngles = {};
			var i;
			var textSize;
			var pointPosition;
	
			scale.ctx.font = plFont.font;
			scale._pointLabelSizes = [];
	
			var valueCount = getValueCount(scale);
			for (i = 0; i < valueCount; i++) {
				pointPosition = scale.getPointPosition(i, largestPossibleRadius);
				textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
				scale._pointLabelSizes[i] = textSize;
	
				// Add quarter circle to make degree 0 mean top of circle
				var angleRadians = scale.getIndexAngle(i);
				var angle = helpers.toDegrees(angleRadians) % 360;
				var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
				var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
	
				if (hLimits.start < furthestLimits.l) {
					furthestLimits.l = hLimits.start;
					furthestAngles.l = angleRadians;
				}
	
				if (hLimits.end > furthestLimits.r) {
					furthestLimits.r = hLimits.end;
					furthestAngles.r = angleRadians;
				}
	
				if (vLimits.start < furthestLimits.t) {
					furthestLimits.t = vLimits.start;
					furthestAngles.t = angleRadians;
				}
	
				if (vLimits.end > furthestLimits.b) {
					furthestLimits.b = vLimits.end;
					furthestAngles.b = angleRadians;
				}
			}
	
			scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
		}
	
		/**
		 * Helper function to fit a radial linear scale with no point labels
		 */
		function fit(scale) {
			var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
			scale.drawingArea = Math.round(largestPossibleRadius);
			scale.setCenterPoint(0, 0, 0, 0);
		}
	
		function getTextAlignForAngle(angle) {
			if (angle === 0 || angle === 180) {
				return 'center';
			} else if (angle < 180) {
				return 'left';
			}
	
			return 'right';
		}
	
		function fillText(ctx, text, position, fontSize) {
			if (helpers.isArray(text)) {
				var y = position.y;
				var spacing = 1.5 * fontSize;
	
				for (var i = 0; i < text.length; ++i) {
					ctx.fillText(text[i], position.x, y);
					y+= spacing;
				}
			} else {
				ctx.fillText(text, position.x, position.y);
			}
		}
	
		function adjustPointPositionForLabelHeight(angle, textSize, position) {
			if (angle === 90 || angle === 270) {
				position.y -= (textSize.h / 2);
			} else if (angle > 270 || angle < 90) {
				position.y -= textSize.h;
			}
		}
	
		function drawPointLabels(scale) {
			var ctx = scale.ctx;
			var getValueOrDefault = helpers.getValueOrDefault;
			var opts = scale.options;
			var angleLineOpts = opts.angleLines;
			var pointLabelOpts = opts.pointLabels;
	
			ctx.lineWidth = angleLineOpts.lineWidth;
			ctx.strokeStyle = angleLineOpts.color;
	
			var outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);
	
			// Point Label Font
			var plFont = getPointLabelFontOptions(scale);
	
			ctx.textBaseline = 'top';
	
			for (var i = getValueCount(scale) - 1; i >= 0; i--) {
				if (angleLineOpts.display) {
					var outerPosition = scale.getPointPosition(i, outerDistance);
					ctx.beginPath();
					ctx.moveTo(scale.xCenter, scale.yCenter);
					ctx.lineTo(outerPosition.x, outerPosition.y);
					ctx.stroke();
					ctx.closePath();
				}
				// Extra 3px out for some label spacing
				var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
	
				// Keep this in loop since we may support array properties here
				var pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
				ctx.font = plFont.font;
				ctx.fillStyle = pointLabelFontColor;
	
				var angleRadians = scale.getIndexAngle(i);
				var angle = helpers.toDegrees(angleRadians);
				ctx.textAlign = getTextAlignForAngle(angle);
				adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
				fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
			}
		}
	
		function drawRadiusLine(scale, gridLineOpts, radius, index) {
			var ctx = scale.ctx;
			ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
			ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
	
			if (scale.options.lineArc) {
				// Draw circular arcs between the points
				ctx.beginPath();
				ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
				ctx.closePath();
				ctx.stroke();
			} else {
				// Draw straight lines connecting each index
				var valueCount = getValueCount(scale);
	
				if (valueCount === 0) {
					return;
				}
	
				ctx.beginPath();
				var pointPosition = scale.getPointPosition(0, radius);
				ctx.moveTo(pointPosition.x, pointPosition.y);
	
				for (var i = 1; i < valueCount; i++) {
					pointPosition = scale.getPointPosition(i, radius);
					ctx.lineTo(pointPosition.x, pointPosition.y);
				}
	
				ctx.closePath();
				ctx.stroke();
			}
		}
	
		function numberOrZero(param) {
			return helpers.isNumber(param) ? param : 0;
		}
	
		var LinearRadialScale = Chart.LinearScaleBase.extend({
			setDimensions: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
				// Set the unconstrained dimension before label rotation
				me.width = me.maxWidth;
				me.height = me.maxHeight;
				me.xCenter = Math.round(me.width / 2);
				me.yCenter = Math.round(me.height / 2);
	
				var minSize = helpers.min([me.height, me.width]);
				var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
				me.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);
			},
			determineDataLimits: function() {
				var me = this;
				var chart = me.chart;
				var min = Number.POSITIVE_INFINITY;
				var max = Number.NEGATIVE_INFINITY;
	
				helpers.each(chart.data.datasets, function(dataset, datasetIndex) {
					if (chart.isDatasetVisible(datasetIndex)) {
						var meta = chart.getDatasetMeta(datasetIndex);
	
						helpers.each(dataset.data, function(rawValue, index) {
							var value = +me.getRightValue(rawValue);
							if (isNaN(value) || meta.data[index].hidden) {
								return;
							}
	
							min = Math.min(value, min);
							max = Math.max(value, max);
						});
					}
				});
	
				me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
				me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);
	
				// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
				me.handleTickRangeOptions();
			},
			getTickLimit: function() {
				var tickOpts = this.options.ticks;
				var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
				return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
			},
			convertTicksToLabels: function() {
				var me = this;
				Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
	
				// Point labels
				me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
			},
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			fit: function() {
				if (this.options.lineArc) {
					fit(this);
				} else {
					fitWithPointLabels(this);
				}
			},
			/**
			 * Set radius reductions and determine new radius and center point
			 * @private
			 */
			setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
				var me = this;
				var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
				var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
				var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
				var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
	
				radiusReductionLeft = numberOrZero(radiusReductionLeft);
				radiusReductionRight = numberOrZero(radiusReductionRight);
				radiusReductionTop = numberOrZero(radiusReductionTop);
				radiusReductionBottom = numberOrZero(radiusReductionBottom);
	
				me.drawingArea = Math.min(
					Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
					Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
				me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
			},
			setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
				var me = this;
				var maxRight = me.width - rightMovement - me.drawingArea,
					maxLeft = leftMovement + me.drawingArea,
					maxTop = topMovement + me.drawingArea,
					maxBottom = me.height - bottomMovement - me.drawingArea;
	
				me.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);
				me.yCenter = Math.round(((maxTop + maxBottom) / 2) + me.top);
			},
	
			getIndexAngle: function(index) {
				var angleMultiplier = (Math.PI * 2) / getValueCount(this);
				var startAngle = this.chart.options && this.chart.options.startAngle ?
					this.chart.options.startAngle :
					0;
	
				var startAngleRadians = startAngle * Math.PI * 2 / 360;
	
				// Start from the top instead of right, so remove a quarter of the circle
				return index * angleMultiplier + startAngleRadians;
			},
			getDistanceFromCenterForValue: function(value) {
				var me = this;
	
				if (value === null) {
					return 0; // null always in center
				}
	
				// Take into account half font size + the yPadding of the top value
				var scalingFactor = me.drawingArea / (me.max - me.min);
				if (me.options.reverse) {
					return (me.max - value) * scalingFactor;
				}
				return (value - me.min) * scalingFactor;
			},
			getPointPosition: function(index, distanceFromCenter) {
				var me = this;
				var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
				return {
					x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
					y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
				};
			},
			getPointPositionForValue: function(index, value) {
				return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
			},
	
			getBasePosition: function() {
				var me = this;
				var min = me.min;
				var max = me.max;
	
				return me.getPointPositionForValue(0,
					me.beginAtZero? 0:
					min < 0 && max < 0? max :
					min > 0 && max > 0? min :
					0);
			},
	
			draw: function() {
				var me = this;
				var opts = me.options;
				var gridLineOpts = opts.gridLines;
				var tickOpts = opts.ticks;
				var getValueOrDefault = helpers.getValueOrDefault;
	
				if (opts.display) {
					var ctx = me.ctx;
	
					// Tick Font
					var tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
					var tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
					var tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
					var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
	
					helpers.each(me.ticks, function(label, index) {
						// Don't draw a centre value (if it is minimum)
						if (index > 0 || opts.reverse) {
							var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
							var yHeight = me.yCenter - yCenterOffset;
	
							// Draw circular lines around the scale
							if (gridLineOpts.display && index !== 0) {
								drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
							}
	
							if (tickOpts.display) {
								var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
								ctx.font = tickLabelFont;
	
								if (tickOpts.showLabelBackdrop) {
									var labelWidth = ctx.measureText(label).width;
									ctx.fillStyle = tickOpts.backdropColor;
									ctx.fillRect(
										me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX,
										yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY,
										labelWidth + tickOpts.backdropPaddingX * 2,
										tickFontSize + tickOpts.backdropPaddingY * 2
									);
								}
	
								ctx.textAlign = 'center';
								ctx.textBaseline = 'middle';
								ctx.fillStyle = tickFontColor;
								ctx.fillText(label, me.xCenter, yHeight);
							}
						}
					});
	
					if (!opts.lineArc) {
						drawPointLabels(me);
					}
				}
			}
		});
		Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
	
	};


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/* global window: false */
	'use strict';
	
	var moment = __webpack_require__(1);
	moment = typeof(moment) === 'function' ? moment : window.moment;
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var time = {
			units: [{
				name: 'millisecond',
				steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
			}, {
				name: 'second',
				steps: [1, 2, 5, 10, 30]
			}, {
				name: 'minute',
				steps: [1, 2, 5, 10, 30]
			}, {
				name: 'hour',
				steps: [1, 2, 3, 6, 12]
			}, {
				name: 'day',
				steps: [1, 2, 5]
			}, {
				name: 'week',
				maxStep: 4
			}, {
				name: 'month',
				maxStep: 3
			}, {
				name: 'quarter',
				maxStep: 4
			}, {
				name: 'year',
				maxStep: false
			}]
		};
	
		var defaultConfig = {
			position: 'bottom',
	
			time: {
				parser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
				format: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
				unit: false, // false == automatic or override with week, month, year, etc.
				round: false, // none, or override with week, month, year, etc.
				displayFormat: false, // DEPRECATED
				isoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/
				minUnit: 'millisecond',
	
				// defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
				displayFormats: {
					millisecond: 'h:mm:ss.SSS a', // 11:20:01.123 AM,
					second: 'h:mm:ss a', // 11:20:01 AM
					minute: 'h:mm:ss a', // 11:20:01 AM
					hour: 'MMM D, hA', // Sept 4, 5PM
					day: 'll', // Sep 4 2015
					week: 'll', // Week 46, or maybe "[W]WW - YYYY" ?
					month: 'MMM YYYY', // Sept 2015
					quarter: '[Q]Q - YYYY', // Q3
					year: 'YYYY' // 2015
				}
			},
			ticks: {
				autoSkip: false
			}
		};
	
		var TimeScale = Chart.Scale.extend({
			initialize: function() {
				if (!moment) {
					throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
				}
	
				Chart.Scale.prototype.initialize.call(this);
			},
			getLabelMoment: function(datasetIndex, index) {
				if (datasetIndex === null || index === null) {
					return null;
				}
	
				if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
					return this.labelMoments[datasetIndex][index];
				}
	
				return null;
			},
			getLabelDiff: function(datasetIndex, index) {
				var me = this;
				if (datasetIndex === null || index === null) {
					return null;
				}
	
				if (me.labelDiffs === undefined) {
					me.buildLabelDiffs();
				}
	
				if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
					return me.labelDiffs[datasetIndex][index];
				}
	
				return null;
			},
			getMomentStartOf: function(tick) {
				var me = this;
				if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
					return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
				}
				return tick.clone().startOf(me.tickUnit);
			},
			determineDataLimits: function() {
				var me = this;
				me.labelMoments = [];
	
				// Only parse these once. If the dataset does not have data as x,y pairs, we will use
				// these
				var scaleLabelMoments = [];
				if (me.chart.data.labels && me.chart.data.labels.length > 0) {
					helpers.each(me.chart.data.labels, function(label) {
						var labelMoment = me.parseTime(label);
	
						if (labelMoment.isValid()) {
							if (me.options.time.round) {
								labelMoment.startOf(me.options.time.round);
							}
							scaleLabelMoments.push(labelMoment);
						}
					}, me);
	
					me.firstTick = moment.min.call(me, scaleLabelMoments);
					me.lastTick = moment.max.call(me, scaleLabelMoments);
				} else {
					me.firstTick = null;
					me.lastTick = null;
				}
	
				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var momentsForDataset = [];
					var datasetVisible = me.chart.isDatasetVisible(datasetIndex);
	
					if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
						helpers.each(dataset.data, function(value) {
							var labelMoment = me.parseTime(me.getRightValue(value));
	
							if (labelMoment.isValid()) {
								if (me.options.time.round) {
									labelMoment.startOf(me.options.time.round);
								}
								momentsForDataset.push(labelMoment);
	
								if (datasetVisible) {
									// May have gone outside the scale ranges, make sure we keep the first and last ticks updated
									me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
									me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
								}
							}
						}, me);
					} else {
						// We have no labels. Use the ones from the scale
						momentsForDataset = scaleLabelMoments;
					}
	
					me.labelMoments.push(momentsForDataset);
				}, me);
	
				// Set these after we've done all the data
				if (me.options.time.min) {
					me.firstTick = me.parseTime(me.options.time.min);
				}
	
				if (me.options.time.max) {
					me.lastTick = me.parseTime(me.options.time.max);
				}
	
				// We will modify these, so clone for later
				me.firstTick = (me.firstTick || moment()).clone();
				me.lastTick = (me.lastTick || moment()).clone();
			},
			buildLabelDiffs: function() {
				var me = this;
				me.labelDiffs = [];
				var scaleLabelDiffs = [];
				// Parse common labels once
				if (me.chart.data.labels && me.chart.data.labels.length > 0) {
					helpers.each(me.chart.data.labels, function(label) {
						var labelMoment = me.parseTime(label);
	
						if (labelMoment.isValid()) {
							if (me.options.time.round) {
								labelMoment.startOf(me.options.time.round);
							}
							scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
						}
					}, me);
				}
	
				helpers.each(me.chart.data.datasets, function(dataset) {
					var diffsForDataset = [];
	
					if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
						helpers.each(dataset.data, function(value) {
							var labelMoment = me.parseTime(me.getRightValue(value));
	
							if (labelMoment.isValid()) {
								if (me.options.time.round) {
									labelMoment.startOf(me.options.time.round);
								}
								diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
							}
						}, me);
					} else {
						// We have no labels. Use common ones
						diffsForDataset = scaleLabelDiffs;
					}
	
					me.labelDiffs.push(diffsForDataset);
				}, me);
			},
			buildTicks: function() {
				var me = this;
	
				me.ctx.save();
				var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
				var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
				var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
				var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
				me.ctx.font = tickLabelFont;
	
				me.ticks = [];
				me.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step
				me.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)
	
				// Set unit override if applicable
				if (me.options.time.unit) {
					me.tickUnit = me.options.time.unit || 'day';
					me.displayFormat = me.options.time.displayFormats[me.tickUnit];
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
				} else {
					// Determine the smallest needed unit of the time
					var innerWidth = me.isHorizontal() ? me.width : me.height;
	
					// Crude approximation of what the label length might be
					var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
					var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
					var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
					var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
					tickLabelWidth = (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);
					var labelCapacity = innerWidth / (tickLabelWidth);
	
					// Start as small as possible
					me.tickUnit = me.options.time.minUnit;
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					me.displayFormat = me.options.time.displayFormats[me.tickUnit];
	
					var unitDefinitionIndex = 0;
					var unitDefinition = time.units[unitDefinitionIndex];
	
					// While we aren't ideal and we don't have units left
					while (unitDefinitionIndex < time.units.length) {
						// Can we scale this unit. If `false` we can scale infinitely
						me.unitScale = 1;
	
						if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
							// Use one of the predefined steps
							for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
								if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
									me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
									break;
								}
							}
	
							break;
						} else if ((unitDefinition.maxStep === false) || (Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep)) {
							// We have a max step. Scale this unit
							me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
							break;
						} else {
							// Move to the next unit up
							++unitDefinitionIndex;
							unitDefinition = time.units[unitDefinitionIndex];
	
							me.tickUnit = unitDefinition.name;
							var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
							var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
							me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
							me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
						}
					}
				}
	
				var roundedStart;
	
				// Only round the first tick if we have no hard minimum
				if (!me.options.time.min) {
					me.firstTick = me.getMomentStartOf(me.firstTick);
					roundedStart = me.firstTick;
				} else {
					roundedStart = me.getMomentStartOf(me.firstTick);
				}
	
				// Only round the last tick if we have no hard maximum
				if (!me.options.time.max) {
					var roundedEnd = me.getMomentStartOf(me.lastTick);
					var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);
					if (delta < 0) {
						// Do not use end of because we need me to be in the next time unit
						me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
					} else if (delta >= 0) {
						me.lastTick = roundedEnd;
					}
	
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
				}
	
				// Tick displayFormat override
				if (me.options.time.displayFormat) {
					me.displayFormat = me.options.time.displayFormat;
				}
	
				// first tick. will have been rounded correctly if options.time.min is not specified
				me.ticks.push(me.firstTick.clone());
	
				// For every unit in between the first and last moment, create a moment and add it to the ticks tick
				for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {
					var newTick = roundedStart.clone().add(i, me.tickUnit);
	
					// Are we greater than the max time
					if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
						break;
					}
	
					me.ticks.push(newTick);
				}
	
				// Always show the right tick
				var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);
				if (diff !== 0 || me.scaleSizeInUnits === 0) {
					// this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart
					// but the last tick was not rounded.
					if (me.options.time.max) {
						me.ticks.push(me.lastTick.clone());
						me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
					} else {
						me.ticks.push(me.lastTick.clone());
						me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					}
				}
	
				me.ctx.restore();
	
				// Invalidate label diffs cache
				me.labelDiffs = undefined;
			},
			// Get tooltip label
			getLabelForIndex: function(index, datasetIndex) {
				var me = this;
				var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';
				var value = me.chart.data.datasets[datasetIndex].data[index];
	
				if (value !== null && typeof value === 'object') {
					label = me.getRightValue(value);
				}
	
				// Format nicely
				if (me.options.time.tooltipFormat) {
					label = me.parseTime(label).format(me.options.time.tooltipFormat);
				}
	
				return label;
			},
			// Function to format an individual tick mark
			tickFormatFunction: function(tick, index, ticks) {
				var formattedTick = tick.format(this.displayFormat);
				var tickOpts = this.options.ticks;
				var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);
	
				if (callback) {
					return callback(formattedTick, index, ticks);
				}
				return formattedTick;
			},
			convertTicksToLabels: function() {
				var me = this;
				me.tickMoments = me.ticks;
				me.ticks = me.ticks.map(me.tickFormatFunction, me);
			},
			getPixelForValue: function(value, index, datasetIndex) {
				var me = this;
				var offset = null;
				if (index !== undefined && datasetIndex !== undefined) {
					offset = me.getLabelDiff(datasetIndex, index);
				}
	
				if (offset === null) {
					if (!value || !value.isValid) {
						// not already a moment object
						value = me.parseTime(me.getRightValue(value));
					}
					if (value && value.isValid && value.isValid()) {
						offset = value.diff(me.firstTick, me.tickUnit, true);
					}
				}
	
				if (offset !== null) {
					var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;
	
					if (me.isHorizontal()) {
						var valueOffset = (me.width * decimal);
						return me.left + Math.round(valueOffset);
					}
	
					var heightOffset = (me.height * decimal);
					return me.top + Math.round(heightOffset);
				}
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.tickMoments[index], null, null);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var innerDimension = me.isHorizontal() ? me.width : me.height;
				var offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;
				offset *= me.scaleSizeInUnits;
				return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');
			},
			parseTime: function(label) {
				var me = this;
				if (typeof me.options.time.parser === 'string') {
					return moment(label, me.options.time.parser);
				}
				if (typeof me.options.time.parser === 'function') {
					return me.options.time.parser(label);
				}
				// Date objects
				if (typeof label.getMonth === 'function' || typeof label === 'number') {
					return moment(label);
				}
				// Moment support
				if (label.isValid && label.isValid()) {
					return label;
				}
				// Custom parsing (return an instance of moment)
				if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
					console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
					return me.options.time.format(label);
				}
				// Moment format parsing
				return moment(label, me.options.time.format);
			}
		});
		Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);
	
	};


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/* MIT license */
	var colorNames = __webpack_require__(274);
	
	module.exports = {
	   getRgba: getRgba,
	   getHsla: getHsla,
	   getRgb: getRgb,
	   getHsl: getHsl,
	   getHwb: getHwb,
	   getAlpha: getAlpha,
	
	   hexString: hexString,
	   rgbString: rgbString,
	   rgbaString: rgbaString,
	   percentString: percentString,
	   percentaString: percentaString,
	   hslString: hslString,
	   hslaString: hslaString,
	   hwbString: hwbString,
	   keyword: keyword
	}
	
	function getRgba(string) {
	   if (!string) {
	      return;
	   }
	   var abbr =  /^#([a-fA-F0-9]{3})$/,
	       hex =  /^#([a-fA-F0-9]{6})$/,
	       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
	       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
	       keyword = /(\w+)/;
	
	   var rgb = [0, 0, 0],
	       a = 1,
	       match = string.match(abbr);
	   if (match) {
	      match = match[1];
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match[i] + match[i], 16);
	      }
	   }
	   else if (match = string.match(hex)) {
	      match = match[1];
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
	      }
	   }
	   else if (match = string.match(rgba)) {
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match[i + 1]);
	      }
	      a = parseFloat(match[4]);
	   }
	   else if (match = string.match(per)) {
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
	      }
	      a = parseFloat(match[4]);
	   }
	   else if (match = string.match(keyword)) {
	      if (match[1] == "transparent") {
	         return [0, 0, 0, 0];
	      }
	      rgb = colorNames[match[1]];
	      if (!rgb) {
	         return;
	      }
	   }
	
	   for (var i = 0; i < rgb.length; i++) {
	      rgb[i] = scale(rgb[i], 0, 255);
	   }
	   if (!a && a != 0) {
	      a = 1;
	   }
	   else {
	      a = scale(a, 0, 1);
	   }
	   rgb[3] = a;
	   return rgb;
	}
	
	function getHsla(string) {
	   if (!string) {
	      return;
	   }
	   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hsl);
	   if (match) {
	      var alpha = parseFloat(match[4]);
	      var h = scale(parseInt(match[1]), 0, 360),
	          s = scale(parseFloat(match[2]), 0, 100),
	          l = scale(parseFloat(match[3]), 0, 100),
	          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
	      return [h, s, l, a];
	   }
	}
	
	function getHwb(string) {
	   if (!string) {
	      return;
	   }
	   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hwb);
	   if (match) {
	    var alpha = parseFloat(match[4]);
	      var h = scale(parseInt(match[1]), 0, 360),
	          w = scale(parseFloat(match[2]), 0, 100),
	          b = scale(parseFloat(match[3]), 0, 100),
	          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
	      return [h, w, b, a];
	   }
	}
	
	function getRgb(string) {
	   var rgba = getRgba(string);
	   return rgba && rgba.slice(0, 3);
	}
	
	function getHsl(string) {
	  var hsla = getHsla(string);
	  return hsla && hsla.slice(0, 3);
	}
	
	function getAlpha(string) {
	   var vals = getRgba(string);
	   if (vals) {
	      return vals[3];
	   }
	   else if (vals = getHsla(string)) {
	      return vals[3];
	   }
	   else if (vals = getHwb(string)) {
	      return vals[3];
	   }
	}
	
	// generators
	function hexString(rgb) {
	   return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
	              + hexDouble(rgb[2]);
	}
	
	function rgbString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
	      return rgbaString(rgba, alpha);
	   }
	   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
	}
	
	function rgbaString(rgba, alpha) {
	   if (alpha === undefined) {
	      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
	   }
	   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
	           + ", " + alpha + ")";
	}
	
	function percentString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
	      return percentaString(rgba, alpha);
	   }
	   var r = Math.round(rgba[0]/255 * 100),
	       g = Math.round(rgba[1]/255 * 100),
	       b = Math.round(rgba[2]/255 * 100);
	
	   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
	}
	
	function percentaString(rgba, alpha) {
	   var r = Math.round(rgba[0]/255 * 100),
	       g = Math.round(rgba[1]/255 * 100),
	       b = Math.round(rgba[2]/255 * 100);
	   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
	}
	
	function hslString(hsla, alpha) {
	   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
	      return hslaString(hsla, alpha);
	   }
	   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
	}
	
	function hslaString(hsla, alpha) {
	   if (alpha === undefined) {
	      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
	   }
	   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
	           + alpha + ")";
	}
	
	// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
	// (hwb have alpha optional & 1 is default value)
	function hwbString(hwb, alpha) {
	   if (alpha === undefined) {
	      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
	   }
	   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
	           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
	}
	
	function keyword(rgb) {
	  return reverseNames[rgb.slice(0, 3)];
	}
	
	// helpers
	function scale(num, min, max) {
	   return Math.min(Math.max(min, num), max);
	}
	
	function hexDouble(num) {
	  var str = num.toString(16).toUpperCase();
	  return (str.length < 2) ? "0" + str : str;
	}
	
	
	//create a list of reverse color names
	var reverseNames = {};
	for (var name in colorNames) {
	   reverseNames[colorNames[name]] = name;
	}


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* MIT license */
	var convert = __webpack_require__(273);
	var string = __webpack_require__(270);
	
	var Color = function (obj) {
		if (obj instanceof Color) {
			return obj;
		}
		if (!(this instanceof Color)) {
			return new Color(obj);
		}
	
		this.valid = false;
		this.values = {
			rgb: [0, 0, 0],
			hsl: [0, 0, 0],
			hsv: [0, 0, 0],
			hwb: [0, 0, 0],
			cmyk: [0, 0, 0, 0],
			alpha: 1
		};
	
		// parse Color() argument
		var vals;
		if (typeof obj === 'string') {
			vals = string.getRgba(obj);
			if (vals) {
				this.setValues('rgb', vals);
			} else if (vals = string.getHsla(obj)) {
				this.setValues('hsl', vals);
			} else if (vals = string.getHwb(obj)) {
				this.setValues('hwb', vals);
			}
		} else if (typeof obj === 'object') {
			vals = obj;
			if (vals.r !== undefined || vals.red !== undefined) {
				this.setValues('rgb', vals);
			} else if (vals.l !== undefined || vals.lightness !== undefined) {
				this.setValues('hsl', vals);
			} else if (vals.v !== undefined || vals.value !== undefined) {
				this.setValues('hsv', vals);
			} else if (vals.w !== undefined || vals.whiteness !== undefined) {
				this.setValues('hwb', vals);
			} else if (vals.c !== undefined || vals.cyan !== undefined) {
				this.setValues('cmyk', vals);
			}
		}
	};
	
	Color.prototype = {
		isValid: function () {
			return this.valid;
		},
		rgb: function () {
			return this.setSpace('rgb', arguments);
		},
		hsl: function () {
			return this.setSpace('hsl', arguments);
		},
		hsv: function () {
			return this.setSpace('hsv', arguments);
		},
		hwb: function () {
			return this.setSpace('hwb', arguments);
		},
		cmyk: function () {
			return this.setSpace('cmyk', arguments);
		},
	
		rgbArray: function () {
			return this.values.rgb;
		},
		hslArray: function () {
			return this.values.hsl;
		},
		hsvArray: function () {
			return this.values.hsv;
		},
		hwbArray: function () {
			var values = this.values;
			if (values.alpha !== 1) {
				return values.hwb.concat([values.alpha]);
			}
			return values.hwb;
		},
		cmykArray: function () {
			return this.values.cmyk;
		},
		rgbaArray: function () {
			var values = this.values;
			return values.rgb.concat([values.alpha]);
		},
		hslaArray: function () {
			var values = this.values;
			return values.hsl.concat([values.alpha]);
		},
		alpha: function (val) {
			if (val === undefined) {
				return this.values.alpha;
			}
			this.setValues('alpha', val);
			return this;
		},
	
		red: function (val) {
			return this.setChannel('rgb', 0, val);
		},
		green: function (val) {
			return this.setChannel('rgb', 1, val);
		},
		blue: function (val) {
			return this.setChannel('rgb', 2, val);
		},
		hue: function (val) {
			if (val) {
				val %= 360;
				val = val < 0 ? 360 + val : val;
			}
			return this.setChannel('hsl', 0, val);
		},
		saturation: function (val) {
			return this.setChannel('hsl', 1, val);
		},
		lightness: function (val) {
			return this.setChannel('hsl', 2, val);
		},
		saturationv: function (val) {
			return this.setChannel('hsv', 1, val);
		},
		whiteness: function (val) {
			return this.setChannel('hwb', 1, val);
		},
		blackness: function (val) {
			return this.setChannel('hwb', 2, val);
		},
		value: function (val) {
			return this.setChannel('hsv', 2, val);
		},
		cyan: function (val) {
			return this.setChannel('cmyk', 0, val);
		},
		magenta: function (val) {
			return this.setChannel('cmyk', 1, val);
		},
		yellow: function (val) {
			return this.setChannel('cmyk', 2, val);
		},
		black: function (val) {
			return this.setChannel('cmyk', 3, val);
		},
	
		hexString: function () {
			return string.hexString(this.values.rgb);
		},
		rgbString: function () {
			return string.rgbString(this.values.rgb, this.values.alpha);
		},
		rgbaString: function () {
			return string.rgbaString(this.values.rgb, this.values.alpha);
		},
		percentString: function () {
			return string.percentString(this.values.rgb, this.values.alpha);
		},
		hslString: function () {
			return string.hslString(this.values.hsl, this.values.alpha);
		},
		hslaString: function () {
			return string.hslaString(this.values.hsl, this.values.alpha);
		},
		hwbString: function () {
			return string.hwbString(this.values.hwb, this.values.alpha);
		},
		keyword: function () {
			return string.keyword(this.values.rgb, this.values.alpha);
		},
	
		rgbNumber: function () {
			var rgb = this.values.rgb;
			return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
		},
	
		luminosity: function () {
			// http://www.w3.org/TR/WCAG20/#relativeluminancedef
			var rgb = this.values.rgb;
			var lum = [];
			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
			}
			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},
	
		contrast: function (color2) {
			// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();
			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}
			return (lum2 + 0.05) / (lum1 + 0.05);
		},
	
		level: function (color2) {
			var contrastRatio = this.contrast(color2);
			if (contrastRatio >= 7.1) {
				return 'AAA';
			}
	
			return (contrastRatio >= 4.5) ? 'AA' : '';
		},
	
		dark: function () {
			// YIQ equation from http://24ways.org/2010/calculating-color-contrast
			var rgb = this.values.rgb;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
			return yiq < 128;
		},
	
		light: function () {
			return !this.dark();
		},
	
		negate: function () {
			var rgb = [];
			for (var i = 0; i < 3; i++) {
				rgb[i] = 255 - this.values.rgb[i];
			}
			this.setValues('rgb', rgb);
			return this;
		},
	
		lighten: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] += hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		darken: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] -= hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		saturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] += hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		desaturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] -= hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		whiten: function (ratio) {
			var hwb = this.values.hwb;
			hwb[1] += hwb[1] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},
	
		blacken: function (ratio) {
			var hwb = this.values.hwb;
			hwb[2] += hwb[2] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},
	
		greyscale: function () {
			var rgb = this.values.rgb;
			// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
			var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			this.setValues('rgb', [val, val, val]);
			return this;
		},
	
		clearer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha - (alpha * ratio));
			return this;
		},
	
		opaquer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha + (alpha * ratio));
			return this;
		},
	
		rotate: function (degrees) {
			var hsl = this.values.hsl;
			var hue = (hsl[0] + degrees) % 360;
			hsl[0] = hue < 0 ? 360 + hue : hue;
			this.setValues('hsl', hsl);
			return this;
		},
	
		/**
		 * Ported from sass implementation in C
		 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		 */
		mix: function (mixinColor, weight) {
			var color1 = this;
			var color2 = mixinColor;
			var p = weight === undefined ? 0.5 : weight;
	
			var w = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();
	
			var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			var w2 = 1 - w1;
	
			return this
				.rgb(
					w1 * color1.red() + w2 * color2.red(),
					w1 * color1.green() + w2 * color2.green(),
					w1 * color1.blue() + w2 * color2.blue()
				)
				.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
		},
	
		toJSON: function () {
			return this.rgb();
		},
	
		clone: function () {
			// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
			// making the final build way to big to embed in Chart.js. So let's do it manually,
			// assuming that values to clone are 1 dimension arrays containing only numbers,
			// except 'alpha' which is a number.
			var result = new Color();
			var source = this.values;
			var target = result.values;
			var value, type;
	
			for (var prop in source) {
				if (source.hasOwnProperty(prop)) {
					value = source[prop];
					type = ({}).toString.call(value);
					if (type === '[object Array]') {
						target[prop] = value.slice(0);
					} else if (type === '[object Number]') {
						target[prop] = value;
					} else {
						console.error('unexpected color value:', value);
					}
				}
			}
	
			return result;
		}
	};
	
	Color.prototype.spaces = {
		rgb: ['red', 'green', 'blue'],
		hsl: ['hue', 'saturation', 'lightness'],
		hsv: ['hue', 'saturation', 'value'],
		hwb: ['hue', 'whiteness', 'blackness'],
		cmyk: ['cyan', 'magenta', 'yellow', 'black']
	};
	
	Color.prototype.maxes = {
		rgb: [255, 255, 255],
		hsl: [360, 100, 100],
		hsv: [360, 100, 100],
		hwb: [360, 100, 100],
		cmyk: [100, 100, 100, 100]
	};
	
	Color.prototype.getValues = function (space) {
		var values = this.values;
		var vals = {};
	
		for (var i = 0; i < space.length; i++) {
			vals[space.charAt(i)] = values[space][i];
		}
	
		if (values.alpha !== 1) {
			vals.a = values.alpha;
		}
	
		// {r: 255, g: 255, b: 255, a: 0.4}
		return vals;
	};
	
	Color.prototype.setValues = function (space, vals) {
		var values = this.values;
		var spaces = this.spaces;
		var maxes = this.maxes;
		var alpha = 1;
		var i;
	
		this.valid = true;
	
		if (space === 'alpha') {
			alpha = vals;
		} else if (vals.length) {
			// [10, 10, 10]
			values[space] = vals.slice(0, space.length);
			alpha = vals[space.length];
		} else if (vals[space.charAt(0)] !== undefined) {
			// {r: 10, g: 10, b: 10}
			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[space.charAt(i)];
			}
	
			alpha = vals.a;
		} else if (vals[spaces[space][0]] !== undefined) {
			// {red: 10, green: 10, blue: 10}
			var chans = spaces[space];
	
			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[chans[i]];
			}
	
			alpha = vals.alpha;
		}
	
		values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));
	
		if (space === 'alpha') {
			return false;
		}
	
		var capped;
	
		// cap values of the space prior converting all values
		for (i = 0; i < space.length; i++) {
			capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
			values[space][i] = Math.round(capped);
		}
	
		// convert to all the other color spaces
		for (var sname in spaces) {
			if (sname !== space) {
				values[sname] = convert[space][sname](values[space]);
			}
		}
	
		return true;
	};
	
	Color.prototype.setSpace = function (space, args) {
		var vals = args[0];
	
		if (vals === undefined) {
			// color.rgb()
			return this.getValues(space);
		}
	
		// color.rgb(10, 10, 10)
		if (typeof vals === 'number') {
			vals = Array.prototype.slice.call(args);
		}
	
		this.setValues(space, vals);
		return this;
	};
	
	Color.prototype.setChannel = function (space, index, val) {
		var svalues = this.values[space];
		if (val === undefined) {
			// color.red()
			return svalues[index];
		} else if (val === svalues[index]) {
			// color.red(color.red())
			return this;
		}
	
		// color.red(100)
		svalues[index] = val;
		this.setValues(space, svalues);
	
		return this;
	};
	
	if (typeof window !== 'undefined') {
		window.Color = Color;
	}
	
	module.exports = Color;


/***/ },
/* 272 */
/***/ function(module, exports) {

	/* MIT license */
	
	module.exports = {
	  rgb2hsl: rgb2hsl,
	  rgb2hsv: rgb2hsv,
	  rgb2hwb: rgb2hwb,
	  rgb2cmyk: rgb2cmyk,
	  rgb2keyword: rgb2keyword,
	  rgb2xyz: rgb2xyz,
	  rgb2lab: rgb2lab,
	  rgb2lch: rgb2lch,
	
	  hsl2rgb: hsl2rgb,
	  hsl2hsv: hsl2hsv,
	  hsl2hwb: hsl2hwb,
	  hsl2cmyk: hsl2cmyk,
	  hsl2keyword: hsl2keyword,
	
	  hsv2rgb: hsv2rgb,
	  hsv2hsl: hsv2hsl,
	  hsv2hwb: hsv2hwb,
	  hsv2cmyk: hsv2cmyk,
	  hsv2keyword: hsv2keyword,
	
	  hwb2rgb: hwb2rgb,
	  hwb2hsl: hwb2hsl,
	  hwb2hsv: hwb2hsv,
	  hwb2cmyk: hwb2cmyk,
	  hwb2keyword: hwb2keyword,
	
	  cmyk2rgb: cmyk2rgb,
	  cmyk2hsl: cmyk2hsl,
	  cmyk2hsv: cmyk2hsv,
	  cmyk2hwb: cmyk2hwb,
	  cmyk2keyword: cmyk2keyword,
	
	  keyword2rgb: keyword2rgb,
	  keyword2hsl: keyword2hsl,
	  keyword2hsv: keyword2hsv,
	  keyword2hwb: keyword2hwb,
	  keyword2cmyk: keyword2cmyk,
	  keyword2lab: keyword2lab,
	  keyword2xyz: keyword2xyz,
	
	  xyz2rgb: xyz2rgb,
	  xyz2lab: xyz2lab,
	  xyz2lch: xyz2lch,
	
	  lab2xyz: lab2xyz,
	  lab2rgb: lab2rgb,
	  lab2lch: lab2lch,
	
	  lch2lab: lch2lab,
	  lch2xyz: lch2xyz,
	  lch2rgb: lch2rgb
	}
	
	
	function rgb2hsl(rgb) {
	  var r = rgb[0]/255,
	      g = rgb[1]/255,
	      b = rgb[2]/255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, l;
	
	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g)/ delta;
	
	  h = Math.min(h * 60, 360);
	
	  if (h < 0)
	    h += 360;
	
	  l = (min + max) / 2;
	
	  if (max == min)
	    s = 0;
	  else if (l <= 0.5)
	    s = delta / (max + min);
	  else
	    s = delta / (2 - max - min);
	
	  return [h, s * 100, l * 100];
	}
	
	function rgb2hsv(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, v;
	
	  if (max == 0)
	    s = 0;
	  else
	    s = (delta/max * 1000)/10;
	
	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g) / delta;
	
	  h = Math.min(h * 60, 360);
	
	  if (h < 0)
	    h += 360;
	
	  v = ((max / 255) * 1000) / 10;
	
	  return [h, s, v];
	}
	
	function rgb2hwb(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      h = rgb2hsl(rgb)[0],
	      w = 1/255 * Math.min(r, Math.min(g, b)),
	      b = 1 - 1/255 * Math.max(r, Math.max(g, b));
	
	  return [h, w * 100, b * 100];
	}
	
	function rgb2cmyk(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255,
	      c, m, y, k;
	
	  k = Math.min(1 - r, 1 - g, 1 - b);
	  c = (1 - r - k) / (1 - k) || 0;
	  m = (1 - g - k) / (1 - k) || 0;
	  y = (1 - b - k) / (1 - k) || 0;
	  return [c * 100, m * 100, y * 100, k * 100];
	}
	
	function rgb2keyword(rgb) {
	  return reverseKeywords[JSON.stringify(rgb)];
	}
	
	function rgb2xyz(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255;
	
	  // assume sRGB
	  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);
	
	  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);
	
	  return [x * 100, y *100, z * 100];
	}
	
	function rgb2lab(rgb) {
	  var xyz = rgb2xyz(rgb),
	        x = xyz[0],
	        y = xyz[1],
	        z = xyz[2],
	        l, a, b;
	
	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;
	
	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
	
	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);
	
	  return [l, a, b];
	}
	
	function rgb2lch(args) {
	  return lab2lch(rgb2lab(args));
	}
	
	function hsl2rgb(hsl) {
	  var h = hsl[0] / 360,
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      t1, t2, t3, rgb, val;
	
	  if (s == 0) {
	    val = l * 255;
	    return [val, val, val];
	  }
	
	  if (l < 0.5)
	    t2 = l * (1 + s);
	  else
	    t2 = l + s - l * s;
	  t1 = 2 * l - t2;
	
	  rgb = [0, 0, 0];
	  for (var i = 0; i < 3; i++) {
	    t3 = h + 1 / 3 * - (i - 1);
	    t3 < 0 && t3++;
	    t3 > 1 && t3--;
	
	    if (6 * t3 < 1)
	      val = t1 + (t2 - t1) * 6 * t3;
	    else if (2 * t3 < 1)
	      val = t2;
	    else if (3 * t3 < 2)
	      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
	    else
	      val = t1;
	
	    rgb[i] = val * 255;
	  }
	
	  return rgb;
	}
	
	function hsl2hsv(hsl) {
	  var h = hsl[0],
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      sv, v;
	
	  if(l === 0) {
	      // no need to do calc on black
	      // also avoids divide by 0 error
	      return [0, 0, 0];
	  }
	
	  l *= 2;
	  s *= (l <= 1) ? l : 2 - l;
	  v = (l + s) / 2;
	  sv = (2 * s) / (l + s);
	  return [h, sv * 100, v * 100];
	}
	
	function hsl2hwb(args) {
	  return rgb2hwb(hsl2rgb(args));
	}
	
	function hsl2cmyk(args) {
	  return rgb2cmyk(hsl2rgb(args));
	}
	
	function hsl2keyword(args) {
	  return rgb2keyword(hsl2rgb(args));
	}
	
	
	function hsv2rgb(hsv) {
	  var h = hsv[0] / 60,
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      hi = Math.floor(h) % 6;
	
	  var f = h - Math.floor(h),
	      p = 255 * v * (1 - s),
	      q = 255 * v * (1 - (s * f)),
	      t = 255 * v * (1 - (s * (1 - f))),
	      v = 255 * v;
	
	  switch(hi) {
	    case 0:
	      return [v, t, p];
	    case 1:
	      return [q, v, p];
	    case 2:
	      return [p, v, t];
	    case 3:
	      return [p, q, v];
	    case 4:
	      return [t, p, v];
	    case 5:
	      return [v, p, q];
	  }
	}
	
	function hsv2hsl(hsv) {
	  var h = hsv[0],
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      sl, l;
	
	  l = (2 - s) * v;
	  sl = s * v;
	  sl /= (l <= 1) ? l : 2 - l;
	  sl = sl || 0;
	  l /= 2;
	  return [h, sl * 100, l * 100];
	}
	
	function hsv2hwb(args) {
	  return rgb2hwb(hsv2rgb(args))
	}
	
	function hsv2cmyk(args) {
	  return rgb2cmyk(hsv2rgb(args));
	}
	
	function hsv2keyword(args) {
	  return rgb2keyword(hsv2rgb(args));
	}
	
	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	function hwb2rgb(hwb) {
	  var h = hwb[0] / 360,
	      wh = hwb[1] / 100,
	      bl = hwb[2] / 100,
	      ratio = wh + bl,
	      i, v, f, n;
	
	  // wh + bl cant be > 1
	  if (ratio > 1) {
	    wh /= ratio;
	    bl /= ratio;
	  }
	
	  i = Math.floor(6 * h);
	  v = 1 - bl;
	  f = 6 * h - i;
	  if ((i & 0x01) != 0) {
	    f = 1 - f;
	  }
	  n = wh + f * (v - wh);  // linear interpolation
	
	  switch (i) {
	    default:
	    case 6:
	    case 0: r = v; g = n; b = wh; break;
	    case 1: r = n; g = v; b = wh; break;
	    case 2: r = wh; g = v; b = n; break;
	    case 3: r = wh; g = n; b = v; break;
	    case 4: r = n; g = wh; b = v; break;
	    case 5: r = v; g = wh; b = n; break;
	  }
	
	  return [r * 255, g * 255, b * 255];
	}
	
	function hwb2hsl(args) {
	  return rgb2hsl(hwb2rgb(args));
	}
	
	function hwb2hsv(args) {
	  return rgb2hsv(hwb2rgb(args));
	}
	
	function hwb2cmyk(args) {
	  return rgb2cmyk(hwb2rgb(args));
	}
	
	function hwb2keyword(args) {
	  return rgb2keyword(hwb2rgb(args));
	}
	
	function cmyk2rgb(cmyk) {
	  var c = cmyk[0] / 100,
	      m = cmyk[1] / 100,
	      y = cmyk[2] / 100,
	      k = cmyk[3] / 100,
	      r, g, b;
	
	  r = 1 - Math.min(1, c * (1 - k) + k);
	  g = 1 - Math.min(1, m * (1 - k) + k);
	  b = 1 - Math.min(1, y * (1 - k) + k);
	  return [r * 255, g * 255, b * 255];
	}
	
	function cmyk2hsl(args) {
	  return rgb2hsl(cmyk2rgb(args));
	}
	
	function cmyk2hsv(args) {
	  return rgb2hsv(cmyk2rgb(args));
	}
	
	function cmyk2hwb(args) {
	  return rgb2hwb(cmyk2rgb(args));
	}
	
	function cmyk2keyword(args) {
	  return rgb2keyword(cmyk2rgb(args));
	}
	
	
	function xyz2rgb(xyz) {
	  var x = xyz[0] / 100,
	      y = xyz[1] / 100,
	      z = xyz[2] / 100,
	      r, g, b;
	
	  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);
	
	  // assume sRGB
	  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
	    : r = (r * 12.92);
	
	  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
	    : g = (g * 12.92);
	
	  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
	    : b = (b * 12.92);
	
	  r = Math.min(Math.max(0, r), 1);
	  g = Math.min(Math.max(0, g), 1);
	  b = Math.min(Math.max(0, b), 1);
	
	  return [r * 255, g * 255, b * 255];
	}
	
	function xyz2lab(xyz) {
	  var x = xyz[0],
	      y = xyz[1],
	      z = xyz[2],
	      l, a, b;
	
	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;
	
	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
	
	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);
	
	  return [l, a, b];
	}
	
	function xyz2lch(args) {
	  return lab2lch(xyz2lab(args));
	}
	
	function lab2xyz(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      x, y, z, y2;
	
	  if (l <= 8) {
	    y = (l * 100) / 903.3;
	    y2 = (7.787 * (y / 100)) + (16 / 116);
	  } else {
	    y = 100 * Math.pow((l + 16) / 116, 3);
	    y2 = Math.pow(y / 100, 1/3);
	  }
	
	  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);
	
	  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);
	
	  return [x, y, z];
	}
	
	function lab2lch(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      hr, h, c;
	
	  hr = Math.atan2(b, a);
	  h = hr * 360 / 2 / Math.PI;
	  if (h < 0) {
	    h += 360;
	  }
	  c = Math.sqrt(a * a + b * b);
	  return [l, c, h];
	}
	
	function lab2rgb(args) {
	  return xyz2rgb(lab2xyz(args));
	}
	
	function lch2lab(lch) {
	  var l = lch[0],
	      c = lch[1],
	      h = lch[2],
	      a, b, hr;
	
	  hr = h / 360 * 2 * Math.PI;
	  a = c * Math.cos(hr);
	  b = c * Math.sin(hr);
	  return [l, a, b];
	}
	
	function lch2xyz(args) {
	  return lab2xyz(lch2lab(args));
	}
	
	function lch2rgb(args) {
	  return lab2rgb(lch2lab(args));
	}
	
	function keyword2rgb(keyword) {
	  return cssKeywords[keyword];
	}
	
	function keyword2hsl(args) {
	  return rgb2hsl(keyword2rgb(args));
	}
	
	function keyword2hsv(args) {
	  return rgb2hsv(keyword2rgb(args));
	}
	
	function keyword2hwb(args) {
	  return rgb2hwb(keyword2rgb(args));
	}
	
	function keyword2cmyk(args) {
	  return rgb2cmyk(keyword2rgb(args));
	}
	
	function keyword2lab(args) {
	  return rgb2lab(keyword2rgb(args));
	}
	
	function keyword2xyz(args) {
	  return rgb2xyz(keyword2rgb(args));
	}
	
	var cssKeywords = {
	  aliceblue:  [240,248,255],
	  antiquewhite: [250,235,215],
	  aqua: [0,255,255],
	  aquamarine: [127,255,212],
	  azure:  [240,255,255],
	  beige:  [245,245,220],
	  bisque: [255,228,196],
	  black:  [0,0,0],
	  blanchedalmond: [255,235,205],
	  blue: [0,0,255],
	  blueviolet: [138,43,226],
	  brown:  [165,42,42],
	  burlywood:  [222,184,135],
	  cadetblue:  [95,158,160],
	  chartreuse: [127,255,0],
	  chocolate:  [210,105,30],
	  coral:  [255,127,80],
	  cornflowerblue: [100,149,237],
	  cornsilk: [255,248,220],
	  crimson:  [220,20,60],
	  cyan: [0,255,255],
	  darkblue: [0,0,139],
	  darkcyan: [0,139,139],
	  darkgoldenrod:  [184,134,11],
	  darkgray: [169,169,169],
	  darkgreen:  [0,100,0],
	  darkgrey: [169,169,169],
	  darkkhaki:  [189,183,107],
	  darkmagenta:  [139,0,139],
	  darkolivegreen: [85,107,47],
	  darkorange: [255,140,0],
	  darkorchid: [153,50,204],
	  darkred:  [139,0,0],
	  darksalmon: [233,150,122],
	  darkseagreen: [143,188,143],
	  darkslateblue:  [72,61,139],
	  darkslategray:  [47,79,79],
	  darkslategrey:  [47,79,79],
	  darkturquoise:  [0,206,209],
	  darkviolet: [148,0,211],
	  deeppink: [255,20,147],
	  deepskyblue:  [0,191,255],
	  dimgray:  [105,105,105],
	  dimgrey:  [105,105,105],
	  dodgerblue: [30,144,255],
	  firebrick:  [178,34,34],
	  floralwhite:  [255,250,240],
	  forestgreen:  [34,139,34],
	  fuchsia:  [255,0,255],
	  gainsboro:  [220,220,220],
	  ghostwhite: [248,248,255],
	  gold: [255,215,0],
	  goldenrod:  [218,165,32],
	  gray: [128,128,128],
	  green:  [0,128,0],
	  greenyellow:  [173,255,47],
	  grey: [128,128,128],
	  honeydew: [240,255,240],
	  hotpink:  [255,105,180],
	  indianred:  [205,92,92],
	  indigo: [75,0,130],
	  ivory:  [255,255,240],
	  khaki:  [240,230,140],
	  lavender: [230,230,250],
	  lavenderblush:  [255,240,245],
	  lawngreen:  [124,252,0],
	  lemonchiffon: [255,250,205],
	  lightblue:  [173,216,230],
	  lightcoral: [240,128,128],
	  lightcyan:  [224,255,255],
	  lightgoldenrodyellow: [250,250,210],
	  lightgray:  [211,211,211],
	  lightgreen: [144,238,144],
	  lightgrey:  [211,211,211],
	  lightpink:  [255,182,193],
	  lightsalmon:  [255,160,122],
	  lightseagreen:  [32,178,170],
	  lightskyblue: [135,206,250],
	  lightslategray: [119,136,153],
	  lightslategrey: [119,136,153],
	  lightsteelblue: [176,196,222],
	  lightyellow:  [255,255,224],
	  lime: [0,255,0],
	  limegreen:  [50,205,50],
	  linen:  [250,240,230],
	  magenta:  [255,0,255],
	  maroon: [128,0,0],
	  mediumaquamarine: [102,205,170],
	  mediumblue: [0,0,205],
	  mediumorchid: [186,85,211],
	  mediumpurple: [147,112,219],
	  mediumseagreen: [60,179,113],
	  mediumslateblue:  [123,104,238],
	  mediumspringgreen:  [0,250,154],
	  mediumturquoise:  [72,209,204],
	  mediumvioletred:  [199,21,133],
	  midnightblue: [25,25,112],
	  mintcream:  [245,255,250],
	  mistyrose:  [255,228,225],
	  moccasin: [255,228,181],
	  navajowhite:  [255,222,173],
	  navy: [0,0,128],
	  oldlace:  [253,245,230],
	  olive:  [128,128,0],
	  olivedrab:  [107,142,35],
	  orange: [255,165,0],
	  orangered:  [255,69,0],
	  orchid: [218,112,214],
	  palegoldenrod:  [238,232,170],
	  palegreen:  [152,251,152],
	  paleturquoise:  [175,238,238],
	  palevioletred:  [219,112,147],
	  papayawhip: [255,239,213],
	  peachpuff:  [255,218,185],
	  peru: [205,133,63],
	  pink: [255,192,203],
	  plum: [221,160,221],
	  powderblue: [176,224,230],
	  purple: [128,0,128],
	  rebeccapurple: [102, 51, 153],
	  red:  [255,0,0],
	  rosybrown:  [188,143,143],
	  royalblue:  [65,105,225],
	  saddlebrown:  [139,69,19],
	  salmon: [250,128,114],
	  sandybrown: [244,164,96],
	  seagreen: [46,139,87],
	  seashell: [255,245,238],
	  sienna: [160,82,45],
	  silver: [192,192,192],
	  skyblue:  [135,206,235],
	  slateblue:  [106,90,205],
	  slategray:  [112,128,144],
	  slategrey:  [112,128,144],
	  snow: [255,250,250],
	  springgreen:  [0,255,127],
	  steelblue:  [70,130,180],
	  tan:  [210,180,140],
	  teal: [0,128,128],
	  thistle:  [216,191,216],
	  tomato: [255,99,71],
	  turquoise:  [64,224,208],
	  violet: [238,130,238],
	  wheat:  [245,222,179],
	  white:  [255,255,255],
	  whitesmoke: [245,245,245],
	  yellow: [255,255,0],
	  yellowgreen:  [154,205,50]
	};
	
	var reverseKeywords = {};
	for (var key in cssKeywords) {
	  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
	}


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var conversions = __webpack_require__(272);
	
	var convert = function() {
	   return new Converter();
	}
	
	for (var func in conversions) {
	  // export Raw versions
	  convert[func + "Raw"] =  (function(func) {
	    // accept array or plain args
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      return conversions[func](arg);
	    }
	  })(func);
	
	  var pair = /(\w+)2(\w+)/.exec(func),
	      from = pair[1],
	      to = pair[2];
	
	  // export rgb2hsl and ["rgb"]["hsl"]
	  convert[from] = convert[from] || {};
	
	  convert[from][to] = convert[func] = (function(func) { 
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      
	      var val = conversions[func](arg);
	      if (typeof val == "string" || val === undefined)
	        return val; // keyword
	
	      for (var i = 0; i < val.length; i++)
	        val[i] = Math.round(val[i]);
	      return val;
	    }
	  })(func);
	}
	
	
	/* Converter does lazy conversion and caching */
	var Converter = function() {
	   this.convs = {};
	};
	
	/* Either get the values for a space or
	  set the values for a space, depending on args */
	Converter.prototype.routeSpace = function(space, args) {
	   var values = args[0];
	   if (values === undefined) {
	      // color.rgb()
	      return this.getValues(space);
	   }
	   // color.rgb(10, 10, 10)
	   if (typeof values == "number") {
	      values = Array.prototype.slice.call(args);        
	   }
	
	   return this.setValues(space, values);
	};
	  
	/* Set the values for a space, invalidating cache */
	Converter.prototype.setValues = function(space, values) {
	   this.space = space;
	   this.convs = {};
	   this.convs[space] = values;
	   return this;
	};
	
	/* Get the values for a space. If there's already
	  a conversion for the space, fetch it, otherwise
	  compute it */
	Converter.prototype.getValues = function(space) {
	   var vals = this.convs[space];
	   if (!vals) {
	      var fspace = this.space,
	          from = this.convs[fspace];
	      vals = convert[fspace][space](from);
	
	      this.convs[space] = vals;
	   }
	  return vals;
	};
	
	["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
	   Converter.prototype[space] = function(vals) {
	      return this.routeSpace(space, arguments);
	   }
	});
	
	module.exports = convert;

/***/ },
/* 274 */
/***/ function(module, exports) {

	module.exports = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};

/***/ },
/* 275 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 276 */
275,
/* 277 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(277);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(287);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(2);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  false ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ?  false ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ?  false ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ?  false ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(7);
	
	var createArrayFromMixed = __webpack_require__(280);
	var getMarkupWrap = __webpack_require__(282);
	var invariant = __webpack_require__(2);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ?  false ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ?  false ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(7);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ?  false ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;

/***/ },
/* 283 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 284 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(284);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 286 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(286);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 288 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 62,
		"./af.js": 62,
		"./ar": 69,
		"./ar-dz": 63,
		"./ar-dz.js": 63,
		"./ar-kw": 64,
		"./ar-kw.js": 64,
		"./ar-ly": 65,
		"./ar-ly.js": 65,
		"./ar-ma": 66,
		"./ar-ma.js": 66,
		"./ar-sa": 67,
		"./ar-sa.js": 67,
		"./ar-tn": 68,
		"./ar-tn.js": 68,
		"./ar.js": 69,
		"./az": 70,
		"./az.js": 70,
		"./be": 71,
		"./be.js": 71,
		"./bg": 72,
		"./bg.js": 72,
		"./bn": 73,
		"./bn.js": 73,
		"./bo": 74,
		"./bo.js": 74,
		"./br": 75,
		"./br.js": 75,
		"./bs": 76,
		"./bs.js": 76,
		"./ca": 77,
		"./ca.js": 77,
		"./cs": 78,
		"./cs.js": 78,
		"./cv": 79,
		"./cv.js": 79,
		"./cy": 80,
		"./cy.js": 80,
		"./da": 81,
		"./da.js": 81,
		"./de": 84,
		"./de-at": 82,
		"./de-at.js": 82,
		"./de-ch": 83,
		"./de-ch.js": 83,
		"./de.js": 84,
		"./dv": 85,
		"./dv.js": 85,
		"./el": 86,
		"./el.js": 86,
		"./en-au": 87,
		"./en-au.js": 87,
		"./en-ca": 88,
		"./en-ca.js": 88,
		"./en-gb": 89,
		"./en-gb.js": 89,
		"./en-ie": 90,
		"./en-ie.js": 90,
		"./en-nz": 91,
		"./en-nz.js": 91,
		"./eo": 92,
		"./eo.js": 92,
		"./es": 94,
		"./es-do": 93,
		"./es-do.js": 93,
		"./es.js": 94,
		"./et": 95,
		"./et.js": 95,
		"./eu": 96,
		"./eu.js": 96,
		"./fa": 97,
		"./fa.js": 97,
		"./fi": 98,
		"./fi.js": 98,
		"./fo": 99,
		"./fo.js": 99,
		"./fr": 102,
		"./fr-ca": 100,
		"./fr-ca.js": 100,
		"./fr-ch": 101,
		"./fr-ch.js": 101,
		"./fr.js": 102,
		"./fy": 103,
		"./fy.js": 103,
		"./gd": 104,
		"./gd.js": 104,
		"./gl": 105,
		"./gl.js": 105,
		"./gom-latn": 106,
		"./gom-latn.js": 106,
		"./he": 107,
		"./he.js": 107,
		"./hi": 108,
		"./hi.js": 108,
		"./hr": 109,
		"./hr.js": 109,
		"./hu": 110,
		"./hu.js": 110,
		"./hy-am": 111,
		"./hy-am.js": 111,
		"./id": 112,
		"./id.js": 112,
		"./is": 113,
		"./is.js": 113,
		"./it": 114,
		"./it.js": 114,
		"./ja": 115,
		"./ja.js": 115,
		"./jv": 116,
		"./jv.js": 116,
		"./ka": 117,
		"./ka.js": 117,
		"./kk": 118,
		"./kk.js": 118,
		"./km": 119,
		"./km.js": 119,
		"./kn": 120,
		"./kn.js": 120,
		"./ko": 121,
		"./ko.js": 121,
		"./ky": 122,
		"./ky.js": 122,
		"./lb": 123,
		"./lb.js": 123,
		"./lo": 124,
		"./lo.js": 124,
		"./lt": 125,
		"./lt.js": 125,
		"./lv": 126,
		"./lv.js": 126,
		"./me": 127,
		"./me.js": 127,
		"./mi": 128,
		"./mi.js": 128,
		"./mk": 129,
		"./mk.js": 129,
		"./ml": 130,
		"./ml.js": 130,
		"./mr": 131,
		"./mr.js": 131,
		"./ms": 133,
		"./ms-my": 132,
		"./ms-my.js": 132,
		"./ms.js": 133,
		"./my": 134,
		"./my.js": 134,
		"./nb": 135,
		"./nb.js": 135,
		"./ne": 136,
		"./ne.js": 136,
		"./nl": 138,
		"./nl-be": 137,
		"./nl-be.js": 137,
		"./nl.js": 138,
		"./nn": 139,
		"./nn.js": 139,
		"./pa-in": 140,
		"./pa-in.js": 140,
		"./pl": 141,
		"./pl.js": 141,
		"./pt": 143,
		"./pt-br": 142,
		"./pt-br.js": 142,
		"./pt.js": 143,
		"./ro": 144,
		"./ro.js": 144,
		"./ru": 145,
		"./ru.js": 145,
		"./sd": 146,
		"./sd.js": 146,
		"./se": 147,
		"./se.js": 147,
		"./si": 148,
		"./si.js": 148,
		"./sk": 149,
		"./sk.js": 149,
		"./sl": 150,
		"./sl.js": 150,
		"./sq": 151,
		"./sq.js": 151,
		"./sr": 153,
		"./sr-cyrl": 152,
		"./sr-cyrl.js": 152,
		"./sr.js": 153,
		"./ss": 154,
		"./ss.js": 154,
		"./sv": 155,
		"./sv.js": 155,
		"./sw": 156,
		"./sw.js": 156,
		"./ta": 157,
		"./ta.js": 157,
		"./te": 158,
		"./te.js": 158,
		"./tet": 159,
		"./tet.js": 159,
		"./th": 160,
		"./th.js": 160,
		"./tl-ph": 161,
		"./tl-ph.js": 161,
		"./tlh": 162,
		"./tlh.js": 162,
		"./tr": 163,
		"./tr.js": 163,
		"./tzl": 164,
		"./tzl.js": 164,
		"./tzm": 166,
		"./tzm-latn": 165,
		"./tzm-latn.js": 165,
		"./tzm.js": 166,
		"./uk": 167,
		"./uk.js": 167,
		"./ur": 168,
		"./ur.js": 168,
		"./uz": 170,
		"./uz-latn": 169,
		"./uz-latn.js": 169,
		"./uz.js": 170,
		"./vi": 171,
		"./vi.js": 171,
		"./x-pseudo": 172,
		"./x-pseudo.js": 172,
		"./yo": 173,
		"./yo.js": 173,
		"./zh-cn": 174,
		"./zh-cn.js": 174,
		"./zh-hk": 175,
		"./zh-hk.js": 175,
		"./zh-tw": 176,
		"./zh-tw.js": 176
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 289;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	//This file contains the ES6 extensions to the core Promises/A+ API
	
	var Promise = __webpack_require__(178);
	
	module.exports = Promise;
	
	/* Static Functions */
	
	var TRUE = valuePromise(true);
	var FALSE = valuePromise(false);
	var NULL = valuePromise(null);
	var UNDEFINED = valuePromise(undefined);
	var ZERO = valuePromise(0);
	var EMPTYSTRING = valuePromise('');
	
	function valuePromise(value) {
	  var p = new Promise(Promise._61);
	  p._81 = 1;
	  p._65 = value;
	  return p;
	}
	Promise.resolve = function (value) {
	  if (value instanceof Promise) return value;
	
	  if (value === null) return NULL;
	  if (value === undefined) return UNDEFINED;
	  if (value === true) return TRUE;
	  if (value === false) return FALSE;
	  if (value === 0) return ZERO;
	  if (value === '') return EMPTYSTRING;
	
	  if (typeof value === 'object' || typeof value === 'function') {
	    try {
	      var then = value.then;
	      if (typeof then === 'function') {
	        return new Promise(then.bind(value));
	      }
	    } catch (ex) {
	      return new Promise(function (resolve, reject) {
	        reject(ex);
	      });
	    }
	  }
	  return valuePromise(value);
	};
	
	Promise.all = function (arr) {
	  var args = Array.prototype.slice.call(arr);
	
	  return new Promise(function (resolve, reject) {
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;
	    function res(i, val) {
	      if (val && (typeof val === 'object' || typeof val === 'function')) {
	        if (val instanceof Promise && val.then === Promise.prototype.then) {
	          while (val._81 === 3) {
	            val = val._65;
	          }
	          if (val._81 === 1) return res(i, val._65);
	          if (val._81 === 2) reject(val._65);
	          val.then(function (val) {
	            res(i, val);
	          }, reject);
	          return;
	        } else {
	          var then = val.then;
	          if (typeof then === 'function') {
	            var p = new Promise(then.bind(val));
	            p.then(function (val) {
	              res(i, val);
	            }, reject);
	            return;
	          }
	        }
	      }
	      args[i] = val;
	      if (--remaining === 0) {
	        resolve(args);
	      }
	    }
	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};
	
	Promise.reject = function (value) {
	  return new Promise(function (resolve, reject) {
	    reject(value);
	  });
	};
	
	Promise.race = function (values) {
	  return new Promise(function (resolve, reject) {
	    values.forEach(function(value){
	      Promise.resolve(value).then(resolve, reject);
	    });
	  });
	};
	
	/* Prototype Methods */
	
	Promise.prototype['catch'] = function (onRejected) {
	  return this.then(null, onRejected);
	};


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Promise = __webpack_require__(178);
	
	var DEFAULT_WHITELIST = [
	  ReferenceError,
	  TypeError,
	  RangeError
	];
	
	var enabled = false;
	exports.disable = disable;
	function disable() {
	  enabled = false;
	  Promise._10 = null;
	  Promise._97 = null;
	}
	
	exports.enable = enable;
	function enable(options) {
	  options = options || {};
	  if (enabled) disable();
	  enabled = true;
	  var id = 0;
	  var displayId = 0;
	  var rejections = {};
	  Promise._10 = function (promise) {
	    if (
	      promise._81 === 2 && // IS REJECTED
	      rejections[promise._72]
	    ) {
	      if (rejections[promise._72].logged) {
	        onHandled(promise._72);
	      } else {
	        clearTimeout(rejections[promise._72].timeout);
	      }
	      delete rejections[promise._72];
	    }
	  };
	  Promise._97 = function (promise, err) {
	    if (promise._45 === 0) { // not yet handled
	      promise._72 = id++;
	      rejections[promise._72] = {
	        displayId: null,
	        error: err,
	        timeout: setTimeout(
	          onUnhandled.bind(null, promise._72),
	          // For reference errors and type errors, this almost always
	          // means the programmer made a mistake, so log them after just
	          // 100ms
	          // otherwise, wait 2 seconds to see if they get handled
	          matchWhitelist(err, DEFAULT_WHITELIST)
	            ? 100
	            : 2000
	        ),
	        logged: false
	      };
	    }
	  };
	  function onUnhandled(id) {
	    if (
	      options.allRejections ||
	      matchWhitelist(
	        rejections[id].error,
	        options.whitelist || DEFAULT_WHITELIST
	      )
	    ) {
	      rejections[id].displayId = displayId++;
	      if (options.onUnhandled) {
	        rejections[id].logged = true;
	        options.onUnhandled(
	          rejections[id].displayId,
	          rejections[id].error
	        );
	      } else {
	        rejections[id].logged = true;
	        logError(
	          rejections[id].displayId,
	          rejections[id].error
	        );
	      }
	    }
	  }
	  function onHandled(id) {
	    if (rejections[id].logged) {
	      if (options.onHandled) {
	        options.onHandled(rejections[id].displayId, rejections[id].error);
	      } else if (!rejections[id].onUnhandled) {
	        console.warn(
	          'Promise Rejection Handled (id: ' + rejections[id].displayId + '):'
	        );
	        console.warn(
	          '  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' +
	          rejections[id].displayId + '.'
	        );
	      }
	    }
	  }
	}
	
	function logError(id, error) {
	  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
	  var errStr = (error && (error.stack || error)) + '';
	  errStr.split('\n').forEach(function (line) {
	    console.warn('  ' + line);
	  });
	}
	
	function matchWhitelist(error, list) {
	  return list.some(function (cls) {
	    return error instanceof cls;
	  });
	}

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	if (false) {
	  var invariant = require('fbjs/lib/invariant');
	  var warning = require('fbjs/lib/warning');
	  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
	  var loggedTypeFailures = {};
	}
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (false) {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	
	          var stack = getStack ? getStack() : '';
	
	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}
	
	module.exports = checkPropTypes;


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(8);
	var invariant = __webpack_require__(2);
	
	module.exports = function() {
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  function shim() {
	    invariant(
	      false,
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim
	  };
	
	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(8);
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	var ReactPropTypesSecret = __webpack_require__(295);
	var checkPropTypes = __webpack_require__(292);
	
	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */
	
	  var ANONYMOUS = '<<anonymous>>';
	
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };
	
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/
	
	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	
	  function createChainableTypeChecker(validate) {
	    if (false) {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (false) {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	
	    return chainedCheckType;
	  }
	
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }
	
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	       false ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	
	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       false ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }
	
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }
	
	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }
	
	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	
	    return false;
	  }
	
	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }
	
	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }
	
	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};


/***/ },
/* 295 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(310);


/***/ },
/* 297 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(6);
	
	var focusNode = __webpack_require__(60);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(25);
	var ExecutionEnvironment = __webpack_require__(7);
	var FallbackCompositionState = __webpack_require__(305);
	var SyntheticCompositionEvent = __webpack_require__(342);
	var SyntheticInputEvent = __webpack_require__(345);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(180);
	var ExecutionEnvironment = __webpack_require__(7);
	var ReactInstrumentation = __webpack_require__(9);
	
	var camelizeStyleName = __webpack_require__(278);
	var dangerousStyleValue = __webpack_require__(351);
	var hyphenateStyleName = __webpack_require__(285);
	var memoizeStringOnly = __webpack_require__(288);
	var warning = __webpack_require__(3);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (false) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (false) {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (false) {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(24);
	var EventPropagators = __webpack_require__(25);
	var ExecutionEnvironment = __webpack_require__(7);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactUpdates = __webpack_require__(10);
	var SyntheticEvent = __webpack_require__(11);
	
	var getEventTarget = __webpack_require__(49);
	var isEventSupported = __webpack_require__(50);
	var isTextInputElement = __webpack_require__(197);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}
	
	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }
	
	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;
	
	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }
	
	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	
	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var DOMLazyTree = __webpack_require__(15);
	var ExecutionEnvironment = __webpack_require__(7);
	
	var createNodesFromMarkup = __webpack_require__(281);
	var emptyFunction = __webpack_require__(8);
	var invariant = __webpack_require__(2);
	
	var Danger = {
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;

/***/ },
/* 303 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(25);
	var ReactDOMComponentTree = __webpack_require__(6);
	var SyntheticMouseEvent = __webpack_require__(30);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var PooledClass = __webpack_require__(13);
	
	var getTextContentAccessor = __webpack_require__(195);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }
	
	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(17);
	
	var instantiateReactComponent = __webpack_require__(196);
	var KeyEscapeUtils = __webpack_require__(41);
	var shouldUpdateReactComponent = __webpack_require__(51);
	var traverseAllChildren = __webpack_require__(199);
	var warning = __webpack_require__(3);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && ({"NODE_ENV":"production","PUBLIC_URL":"."}) && ("production") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(200);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (false) {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (false) {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(177)))

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(37);
	var ReactDOMIDOperations = __webpack_require__(315);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4),
	    _assign = __webpack_require__(5);
	
	var React = __webpack_require__(18);
	var ReactComponentEnvironment = __webpack_require__(43);
	var ReactCurrentOwner = __webpack_require__(12);
	var ReactErrorUtils = __webpack_require__(44);
	var ReactInstanceMap = __webpack_require__(26);
	var ReactInstrumentation = __webpack_require__(9);
	var ReactNodeTypes = __webpack_require__(190);
	var ReactReconciler = __webpack_require__(17);
	
	if (false) {
	  var checkReactTypeSpec = require('./checkReactTypeSpec');
	}
	
	var emptyObject = __webpack_require__(22);
	var invariant = __webpack_require__(2);
	var shallowEqual = __webpack_require__(36);
	var shouldUpdateReactComponent = __webpack_require__(51);
	var warning = __webpack_require__(3);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (false) {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ?  false ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (false) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (false) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  false ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (false) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (false) {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (false) {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (false) {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (false) {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (false) {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (false) {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (false) {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (false) {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ?  false ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (false) {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ?  false ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (false) {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ?  false ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (false) {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (false) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (false) {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (false) {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (false) {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (false) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (("production") !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ?  false ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ?  false ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (false) {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(323);
	var ReactMount = __webpack_require__(189);
	var ReactReconciler = __webpack_require__(17);
	var ReactUpdates = __webpack_require__(10);
	var ReactVersion = __webpack_require__(336);
	
	var findDOMNode = __webpack_require__(352);
	var getHostComponentFromComposite = __webpack_require__(194);
	var renderSubtreeIntoContainer = __webpack_require__(359);
	var warning = __webpack_require__(3);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (false) {
	  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (false) {
	  var ReactInstrumentation = require('./ReactInstrumentation');
	  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
	  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');
	  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4),
	    _assign = __webpack_require__(5);
	
	var AutoFocusUtils = __webpack_require__(298);
	var CSSPropertyOperations = __webpack_require__(300);
	var DOMLazyTree = __webpack_require__(15);
	var DOMNamespaces = __webpack_require__(38);
	var DOMProperty = __webpack_require__(16);
	var DOMPropertyOperations = __webpack_require__(182);
	var EventPluginHub = __webpack_require__(24);
	var EventPluginRegistry = __webpack_require__(39);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMComponentFlags = __webpack_require__(183);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactDOMInput = __webpack_require__(316);
	var ReactDOMOption = __webpack_require__(317);
	var ReactDOMSelect = __webpack_require__(184);
	var ReactDOMTextarea = __webpack_require__(320);
	var ReactInstrumentation = __webpack_require__(9);
	var ReactMultiChild = __webpack_require__(329);
	var ReactServerRenderingTransaction = __webpack_require__(334);
	
	var emptyFunction = __webpack_require__(8);
	var escapeTextContentForBrowser = __webpack_require__(32);
	var invariant = __webpack_require__(2);
	var isEventSupported = __webpack_require__(50);
	var shallowEqual = __webpack_require__(36);
	var validateDOMNesting = __webpack_require__(52);
	var warning = __webpack_require__(3);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	   false ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ?  false ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ?  false ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  false ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ?  false ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (false) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (false) {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ?  false ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ?  false ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ?  false ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (false) {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (false) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (false) {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (false) {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (false) {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (false) {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (false) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (false) {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (false) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (false) {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ?  false ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (false) {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(52);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (false) {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var DOMLazyTree = __webpack_require__(15);
	var ReactDOMComponentTree = __webpack_require__(6);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 314 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(37);
	var ReactDOMComponentTree = __webpack_require__(6);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4),
	    _assign = __webpack_require__(5);
	
	var DOMPropertyOperations = __webpack_require__(182);
	var LinkedValueUtils = __webpack_require__(42);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactUpdates = __webpack_require__(10);
	
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (false) {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;
	
	        // eslint-disable-next-line
	        if (value != valueAsNumber) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	        // eslint-disable-next-line
	      } else if (value != node.value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ?  false ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var React = __webpack_require__(18);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactDOMSelect = __webpack_require__(184);
	
	var warning = __webpack_require__(3);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	       false ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(7);
	
	var getNodeForCharacterOffset = __webpack_require__(356);
	var getTextContentAccessor = __webpack_require__(195);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4),
	    _assign = __webpack_require__(5);
	
	var DOMChildrenOperations = __webpack_require__(37);
	var DOMLazyTree = __webpack_require__(15);
	var ReactDOMComponentTree = __webpack_require__(6);
	
	var escapeTextContentForBrowser = __webpack_require__(32);
	var invariant = __webpack_require__(2);
	var validateDOMNesting = __webpack_require__(52);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (false) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ?  false ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4),
	    _assign = __webpack_require__(5);
	
	var LinkedValueUtils = __webpack_require__(42);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactUpdates = __webpack_require__(10);
	
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ?  false ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ?  false ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ?  false ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;
	
	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  false ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ?  false ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ?  false ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactUpdates = __webpack_require__(10);
	var Transaction = __webpack_require__(31);
	
	var emptyFunction = __webpack_require__(8);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(297);
	var BeforeInputEventPlugin = __webpack_require__(299);
	var ChangeEventPlugin = __webpack_require__(301);
	var DefaultEventPluginOrder = __webpack_require__(303);
	var EnterLeaveEventPlugin = __webpack_require__(304);
	var HTMLDOMPropertyConfig = __webpack_require__(306);
	var ReactComponentBrowserEnvironment = __webpack_require__(308);
	var ReactDOMComponent = __webpack_require__(311);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactDOMEmptyComponent = __webpack_require__(313);
	var ReactDOMTreeTraversal = __webpack_require__(321);
	var ReactDOMTextComponent = __webpack_require__(319);
	var ReactDefaultBatchingStrategy = __webpack_require__(322);
	var ReactEventListener = __webpack_require__(326);
	var ReactInjection = __webpack_require__(327);
	var ReactReconcileTransaction = __webpack_require__(332);
	var SVGDOMPropertyConfig = __webpack_require__(337);
	var SelectEventPlugin = __webpack_require__(338);
	var SimpleEventPlugin = __webpack_require__(339);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ },
/* 324 */
201,
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(24);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var EventListener = __webpack_require__(59);
	var ExecutionEnvironment = __webpack_require__(7);
	var PooledClass = __webpack_require__(13);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactUpdates = __webpack_require__(10);
	
	var getEventTarget = __webpack_require__(49);
	var getUnboundedScrollPosition = __webpack_require__(283);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	var EventPluginHub = __webpack_require__(24);
	var EventPluginUtils = __webpack_require__(40);
	var ReactComponentEnvironment = __webpack_require__(43);
	var ReactEmptyComponent = __webpack_require__(185);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactHostComponent = __webpack_require__(187);
	var ReactUpdates = __webpack_require__(10);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(350);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var ReactComponentEnvironment = __webpack_require__(43);
	var ReactInstanceMap = __webpack_require__(26);
	var ReactInstrumentation = __webpack_require__(9);
	
	var ReactCurrentOwner = __webpack_require__(12);
	var ReactReconciler = __webpack_require__(17);
	var ReactChildReconciler = __webpack_require__(307);
	
	var emptyFunction = __webpack_require__(8);
	var flattenChildren = __webpack_require__(353);
	var invariant = __webpack_require__(2);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (false) {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (false) {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (false) {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (false) {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (false) {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  false ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  false ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (false) {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ?  false ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ?  false ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;

/***/ },
/* 331 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var CallbackQueue = __webpack_require__(181);
	var PooledClass = __webpack_require__(13);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactInputSelection = __webpack_require__(188);
	var ReactInstrumentation = __webpack_require__(9);
	var Transaction = __webpack_require__(31);
	var ReactUpdateQueue = __webpack_require__(45);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (false) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(330);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var PooledClass = __webpack_require__(13);
	var Transaction = __webpack_require__(31);
	var ReactInstrumentation = __webpack_require__(9);
	var ReactServerUpdateQueue = __webpack_require__(335);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (false) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function () {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},
	
	  checkpoint: function () {},
	
	  rollback: function () {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReactUpdateQueue = __webpack_require__(45);
	
	var warning = __webpack_require__(3);
	
	function warnNoop(publicInstance, callerName) {
	  if (false) {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;

/***/ },
/* 336 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.5.4';

/***/ },
/* 337 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(25);
	var ExecutionEnvironment = __webpack_require__(7);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactInputSelection = __webpack_require__(188);
	var SyntheticEvent = __webpack_require__(11);
	
	var getActiveElement = __webpack_require__(61);
	var isTextInputElement = __webpack_require__(197);
	var shallowEqual = __webpack_require__(36);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var EventListener = __webpack_require__(59);
	var EventPropagators = __webpack_require__(25);
	var ReactDOMComponentTree = __webpack_require__(6);
	var SyntheticAnimationEvent = __webpack_require__(340);
	var SyntheticClipboardEvent = __webpack_require__(341);
	var SyntheticEvent = __webpack_require__(11);
	var SyntheticFocusEvent = __webpack_require__(344);
	var SyntheticKeyboardEvent = __webpack_require__(346);
	var SyntheticMouseEvent = __webpack_require__(30);
	var SyntheticDragEvent = __webpack_require__(343);
	var SyntheticTouchEvent = __webpack_require__(347);
	var SyntheticTransitionEvent = __webpack_require__(348);
	var SyntheticUIEvent = __webpack_require__(27);
	var SyntheticWheelEvent = __webpack_require__(349);
	
	var emptyFunction = __webpack_require__(8);
	var getEventCharCode = __webpack_require__(47);
	var invariant = __webpack_require__(2);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ?  false ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(11);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(11);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(11);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(30);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(27);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(11);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(27);
	
	var getEventCharCode = __webpack_require__(47);
	var getEventKey = __webpack_require__(354);
	var getEventModifierState = __webpack_require__(48);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(27);
	
	var getEventModifierState = __webpack_require__(48);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(11);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(30);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 350 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(180);
	var warning = __webpack_require__(3);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (false) {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(4);
	
	var ReactCurrentOwner = __webpack_require__(12);
	var ReactDOMComponentTree = __webpack_require__(6);
	var ReactInstanceMap = __webpack_require__(26);
	
	var getHostComponentFromComposite = __webpack_require__(194);
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (false) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ?  false ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ?  false ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(41);
	var traverseAllChildren = __webpack_require__(199);
	var warning = __webpack_require__(3);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && ({"NODE_ENV":"production","PUBLIC_URL":"."}) && ("production") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(200);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (false) {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (false) {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(177)))

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(47);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 355 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 356 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(7);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(32);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(189);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	// @remove-on-eject-begin
	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	// @remove-on-eject-end
	'use strict';
	
	if (typeof Promise === 'undefined') {
	  // Rejection tracking prevents a common issue where React gets into an
	  // inconsistent state due to an error, but it gets swallowed by a Promise,
	  // and the user has no idea what causes React's erratic future behavior.
	  __webpack_require__(291).enable();
	  window.Promise = __webpack_require__(290);
	}
	
	// fetch() polyfill for making API calls.
	__webpack_require__(361);
	
	// Object.assign() is commonly used with React.
	// It will use the native implementation if it's present and isn't buggy.
	Object.assign = __webpack_require__(5);


/***/ },
/* 361 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';
	
	  if (self.fetch) {
	    return
	  }
	
	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]
	
	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }
	
	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }
	
	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }
	
	    return iterator
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }
	
	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }
	
	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }
	
	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }
	
	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)
	
	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }
	
	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	
	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }
	
	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }
	
	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	
	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = String(input)
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    rawHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this.type = 'default'
	    this.status = 'status' in options ? options.status : 200
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()
	
	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }
	
	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 362 */
41,
/* 363 */
[377, 20],
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(363);
	var ReactElement = __webpack_require__(19);
	
	var emptyFunction = __webpack_require__(8);
	var traverseAllChildren = __webpack_require__(374);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(20),
	    _assign = __webpack_require__(5);
	
	var ReactComponent = __webpack_require__(53);
	var ReactElement = __webpack_require__(19);
	var ReactPropTypeLocationNames = __webpack_require__(367);
	var ReactNoopUpdateQueue = __webpack_require__(54);
	
	var emptyObject = __webpack_require__(22);
	var invariant = __webpack_require__(2);
	var warning = __webpack_require__(3);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (false) {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (false) {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (false) {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	       false ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ?  false ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ?  false ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (false) {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ?  false ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ?  false ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ?  false ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (false) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ?  false ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ?  false ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ?  false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ?  false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (false) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	var didWarnDeprecated = false;
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
	      didWarnDeprecated = true;
	    }
	
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (false) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  false ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (false) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ?  false ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(19);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (false) {
	  var ReactElementValidator = require('./ReactElementValidator');
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (false) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _require = __webpack_require__(19),
	    isValidElement = _require.isValidElement;
	
	var factory = __webpack_require__(179);
	
	module.exports = factory(isValidElement);

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(5);
	
	var ReactComponent = __webpack_require__(53);
	var ReactNoopUpdateQueue = __webpack_require__(54);
	
	var emptyObject = __webpack_require__(22);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ },
/* 370 */
336,
/* 371 */
355,
/* 372 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(20);
	
	var ReactElement = __webpack_require__(19);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ?  false ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(20);
	
	var ReactCurrentOwner = __webpack_require__(12);
	var REACT_ELEMENT_TYPE = __webpack_require__(201);
	
	var getIteratorFn = __webpack_require__(371);
	var invariant = __webpack_require__(2);
	var KeyEscapeUtils = __webpack_require__(362);
	var warning = __webpack_require__(3);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (false) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (false) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;

/***/ },
/* 375 */
/***/ function(module, exports) {

	class Agent {
	    /**
	     * @param {int} numberOfPossibleStates
	     * @param {int} numberOfPossibleActions
	     * @param {Object} [options]
	     */
	    constructor(numberOfPossibleStates, numberOfPossibleActions, options = {}) {
	        this._actionCount = numberOfPossibleActions;
	        this._stateCount = numberOfPossibleStates;
	
	        this._options = Object.assign(
	            {   //Default options
	                learningEnabled: true, //set to false to disable all learning for higher execution speeds
	                learningRate: 0.1,//alpha - how much new experiences overwrite previous ones
	                explorationProbability: 0.05,//epsilon - the probability of taking random actions in the Epsilon Greedy policy
	                discountFactor: 0.9,//discountFactor - future rewards are multiplied by this
	                replaysToPlayPerAction: 10,//How many replays to learn from during each action
	                replaysToStore: 5000,//The number of replays to store before purging old replays
	                replayRecordingInterval: 25,//The number of actions to wait before between recording replays
	                logLastActionWeights: true //false for high-speed, true for better reporting
	            },
	            options
	        );
	
	        //Stores the expected reward for a given state and action. Is a 2D table stored as a flat array for higher speed
	        this._q = new Float64Array(this._stateCount * this._actionCount);
	
	        //Stores 0 if we haven't seen a reward for this state-action before, stores 1 if we have
	        this._initializedQ = new Int8Array(this._stateCount * this._actionCount);
	
	        //Properties for storing and dealing with replay memory
	        this._replayMemory = [];//new Array(this._options.replaysToStore);
	        this._replayInsertIndex = 0;
	        this._actionsTillNextReplayRecording = 0;
	
	        //Some values used in the SARSA algorithm. We pre-calculate them here for higher speed
	        this._oneMinusEpsilon = 1 - this._options.explorationProbability;
	        this._epsilonDividedByActionCount = this._options.explorationProbability / this._actionCount;
	
	        //Properties used to store statistics about the last action for reporting reasons
	        this._lastActionWeights = new Float64Array(this._actionCount);
	        this._laseActionWasRandom = false;
	
	        //The last state and action we saw
	        this._lastState = 0;
	        this._lastAction = 0;
	    }
	
	    /**
	     * Learn from the last reward, decide on the next action to take, and return the next action
	     *
	     * @param {float|null} lastReward if we are on the very first step, pass null here, otherwise pass a float
	     * @param {int} state
	     * @returns {int} the action that the agent decided to take
	     */
	    decide(lastReward, state) {
	        /**
	         * The learning section
	         */
	        if (lastReward !== null && this._options.learningEnabled === true) {
	            //Learn from the current step
	            this._learnFromStateActionRewardState(this._lastState, this._lastAction, lastReward, state);
	
	            //Learn from replays of previous steps
	            if (this._replayMemory.length > this._options.replaysToPlayPerAction) {
	                for (var replayTime = 0; replayTime < this._options.replaysToPlayPerAction; replayTime++) {
	                    var replayI = Math.floor(Math.random() * this._replayMemory.length);
	                    var replay = this._replayMemory[replayI];
	                    this._learnFromStateActionRewardState(replay[0], replay[1], replay[2], replay[3]);
	                }
	            }
	
	            //Store the current step to the replay memory if we should
	            this._actionsTillNextReplayRecording--;
	            if (this._actionsTillNextReplayRecording === 0) {
	                this._actionsTillNextReplayRecording = this._options.replayRecordingInterval;
	                this._replayMemory[this._replayInsertIndex] = [this._lastState, this._lastAction, lastReward, state];
	                this._replayInsertIndex++;
	                if (this._replayInsertIndex > this._options.replaysToStore) {
	                    this._replayInsertIndex = 0;
	                }
	            }
	        }
	
	        /**
	         * The acting section
	         */
	        if (Math.random() < this._options.explorationProbability) {
	            //Take a random action
	            this._lastAction = Math.floor(Math.random() * this._actionCount);
	            this._laseActionWasRandom = true;
	        } else {
	            //Take an action based on which action the Q table says will be most rewarding
	            var actionZeroQIndex = state * this._actionCount;
	            var maxQofNextStateAction = this._q[actionZeroQIndex];
	            var indexOfMaxQofNextStateAction = 0;
	            for (var actionI = 1, max = this._actionCount; actionI < max; actionI++) {
	                var thisValue = this._q[actionZeroQIndex + actionI];
	                if (thisValue > maxQofNextStateAction) {
	                    maxQofNextStateAction = thisValue;
	                    indexOfMaxQofNextStateAction = actionI;
	                }
	            }
	
	            this._lastAction = indexOfMaxQofNextStateAction;
	            this._laseActionWasRandom = false;
	        }
	
	        //Collect additional stats if enabled. These are useful for charts and reporting
	        if (this._options.logLastActionWeights) {
	            this._logLastActionWeights(state);
	        }
	
	        this._lastState = state;
	
	        return this._lastAction;
	    }
	
	    /**
	     * The SARSA algorithm with an epsilon greedy policy
	     *
	     * @param {int} state
	     * @param {int} action
	     * @param {float} reward
	     * @param {int} nextState
	     * @private
	     */
	    _learnFromStateActionRewardState(state, action, reward, nextState) {
	        var currentStateActionKey = state * this._actionCount + action;
	        var qOfCurrentStateAction = this._q[currentStateActionKey];
	
	        if (qOfCurrentStateAction === 0.00
	            && this._initializedQ[currentStateActionKey] !== 1
	        ) {
	            //Use first seen reward for a state-action as the initial value to speed up initial learning
	            this._initializedQ[currentStateActionKey] = 1;//1 for true
	            this._q[currentStateActionKey] = reward;
	        }
	
	        var nextStateKeyPrepend = nextState * this._actionCount;
	        var maxQofNextStateAction = this._q[nextStateKeyPrepend];
	        var sumQofNextStateActions = this._q[nextStateKeyPrepend];
	        for (var i = nextStateKeyPrepend + 1, max = nextStateKeyPrepend + this._actionCount; i < max; i++) {
	            var thisValue = this._q[i];
	            sumQofNextStateActions += thisValue;
	            if (thisValue > maxQofNextStateAction) {
	                maxQofNextStateAction = thisValue;
	            }
	        }
	
	        //Update the Q table by using the SARSA algorithm with an "epsilon greedy" policy
	        this._q[currentStateActionKey] += this._options.learningRate * (
	                reward
	                + this._options.discountFactor * (
	                    maxQofNextStateAction * this._oneMinusEpsilon +
	                    sumQofNextStateActions * this._epsilonDividedByActionCount
	                )
	                - qOfCurrentStateAction
	            );
	    }
	
	    /**
	     * Log the last set of action weights. Charting these can be helpful. Retrieve by calling getLastActionStats()
	     *
	     * @param {int} state
	     * @private
	     */
	    _logLastActionWeights(state) {
	        for (var i = 0; i < this._actionCount; i++) {
	            this._lastActionWeights[i] = this._q[state * this._actionCount + i];
	        }
	    }
	
	    /**
	     * Returns some additional info about the last action that was taking. Useful for graphs and reports
	     *
	     * @returns {{action: (number|*), weights: Float64Array, wasRandomlyChosen: boolean}}
	     */
	    getLastActionStats() {
	        return {
	            action: this._lastAction,
	            wasRandomlyChosen: this._laseActionWasRandom,
	            weights: this._lastActionWeights
	        }
	    }
	
	    /**
	     * Saves everything the agent has learned to a JSON-serializable object and returns it
	     *
	     * @returns {{q: Array, initializedQ: Array}}
	     */
	    saveToJson() {
	        var q = [];
	        var initializedQ = [];
	        for (var i = 0, len = this._stateCount * this._actionCount; i < len; i++) {
	            q[i] = this._q[i];
	            initializedQ[i] = this._initializedQ[i];
	        }
	        return {q: q, initializedQ: initializedQ};
	    }
	
	    /**
	     * Loads a previously saved agent
	     *
	     * @param {{q: Array, initializedQ: Array}} json
	     */
	    loadFromJson(json) {
	        for (var i = 0, len = this._stateCount * this._actionCount; i < len; i++) {
	            this._q[i] = json.q[i];
	            this._initializedQ[i] = json.initializedQ[i];
	        }
	    }
	}
	
	module.exports.Agent = Agent;


/***/ },
/* 376 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(__webpack_module_template_argument_0__);
	
	var invariant = __webpack_require__(2);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  false ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;

/***/ }
/******/ ])));
//# sourceMappingURL=main.4b859555.js.map